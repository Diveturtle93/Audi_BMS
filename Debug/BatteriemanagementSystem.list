
BatteriemanagementSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071b0  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  080073a8  080073a8  000173a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800789c  0800789c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800789c  0800789c  0001789c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078a4  080078a4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078a4  080078a4  000178a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078a8  080078a8  000178a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080078ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000033c  2000000c  080078b8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  080078b8  00020348  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b584  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003754  00000000  00000000  0003b5be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001310  00000000  00000000  0003ed18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001188  00000000  00000000  00040028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002be5a  00000000  00000000  000411b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a321  00000000  00000000  0006d00a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010870f  00000000  00000000  0008732b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018fa3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e20  00000000  00000000  0018fa90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08007390 	.word	0x08007390

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08007390 	.word	0x08007390

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b96e 	b.w	800053c <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468c      	mov	ip, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	f040 8083 	bne.w	800038e <__udivmoddi4+0x116>
 8000288:	428a      	cmp	r2, r1
 800028a:	4617      	mov	r7, r2
 800028c:	d947      	bls.n	800031e <__udivmoddi4+0xa6>
 800028e:	fab2 f282 	clz	r2, r2
 8000292:	b142      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000294:	f1c2 0020 	rsb	r0, r2, #32
 8000298:	fa24 f000 	lsr.w	r0, r4, r0
 800029c:	4091      	lsls	r1, r2
 800029e:	4097      	lsls	r7, r2
 80002a0:	ea40 0c01 	orr.w	ip, r0, r1
 80002a4:	4094      	lsls	r4, r2
 80002a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002aa:	0c23      	lsrs	r3, r4, #16
 80002ac:	fbbc f6f8 	udiv	r6, ip, r8
 80002b0:	fa1f fe87 	uxth.w	lr, r7
 80002b4:	fb08 c116 	mls	r1, r8, r6, ip
 80002b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002bc:	fb06 f10e 	mul.w	r1, r6, lr
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x60>
 80002c4:	18fb      	adds	r3, r7, r3
 80002c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ca:	f080 8119 	bcs.w	8000500 <__udivmoddi4+0x288>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 8116 	bls.w	8000500 <__udivmoddi4+0x288>
 80002d4:	3e02      	subs	r6, #2
 80002d6:	443b      	add	r3, r7
 80002d8:	1a5b      	subs	r3, r3, r1
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e0:	fb08 3310 	mls	r3, r8, r0, r3
 80002e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x8c>
 80002f0:	193c      	adds	r4, r7, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f6:	f080 8105 	bcs.w	8000504 <__udivmoddi4+0x28c>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f240 8102 	bls.w	8000504 <__udivmoddi4+0x28c>
 8000300:	3802      	subs	r0, #2
 8000302:	443c      	add	r4, r7
 8000304:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000308:	eba4 040e 	sub.w	r4, r4, lr
 800030c:	2600      	movs	r6, #0
 800030e:	b11d      	cbz	r5, 8000318 <__udivmoddi4+0xa0>
 8000310:	40d4      	lsrs	r4, r2
 8000312:	2300      	movs	r3, #0
 8000314:	e9c5 4300 	strd	r4, r3, [r5]
 8000318:	4631      	mov	r1, r6
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	b902      	cbnz	r2, 8000322 <__udivmoddi4+0xaa>
 8000320:	deff      	udf	#255	; 0xff
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	2a00      	cmp	r2, #0
 8000328:	d150      	bne.n	80003cc <__udivmoddi4+0x154>
 800032a:	1bcb      	subs	r3, r1, r7
 800032c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000330:	fa1f f887 	uxth.w	r8, r7
 8000334:	2601      	movs	r6, #1
 8000336:	fbb3 fcfe 	udiv	ip, r3, lr
 800033a:	0c21      	lsrs	r1, r4, #16
 800033c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000340:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000344:	fb08 f30c 	mul.w	r3, r8, ip
 8000348:	428b      	cmp	r3, r1
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0xe4>
 800034c:	1879      	adds	r1, r7, r1
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0xe2>
 8000354:	428b      	cmp	r3, r1
 8000356:	f200 80e9 	bhi.w	800052c <__udivmoddi4+0x2b4>
 800035a:	4684      	mov	ip, r0
 800035c:	1ac9      	subs	r1, r1, r3
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1110 	mls	r1, lr, r0, r1
 8000368:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x10c>
 8000374:	193c      	adds	r4, r7, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x10a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80d9 	bhi.w	8000534 <__udivmoddi4+0x2bc>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e7bf      	b.n	800030e <__udivmoddi4+0x96>
 800038e:	428b      	cmp	r3, r1
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0x12e>
 8000392:	2d00      	cmp	r5, #0
 8000394:	f000 80b1 	beq.w	80004fa <__udivmoddi4+0x282>
 8000398:	2600      	movs	r6, #0
 800039a:	e9c5 0100 	strd	r0, r1, [r5]
 800039e:	4630      	mov	r0, r6
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	fab3 f683 	clz	r6, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d14a      	bne.n	8000444 <__udivmoddi4+0x1cc>
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0x140>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 80b8 	bhi.w	8000528 <__udivmoddi4+0x2b0>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb61 0103 	sbc.w	r1, r1, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	468c      	mov	ip, r1
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0a8      	beq.n	8000318 <__udivmoddi4+0xa0>
 80003c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ca:	e7a5      	b.n	8000318 <__udivmoddi4+0xa0>
 80003cc:	f1c2 0320 	rsb	r3, r2, #32
 80003d0:	fa20 f603 	lsr.w	r6, r0, r3
 80003d4:	4097      	lsls	r7, r2
 80003d6:	fa01 f002 	lsl.w	r0, r1, r2
 80003da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003de:	40d9      	lsrs	r1, r3
 80003e0:	4330      	orrs	r0, r6
 80003e2:	0c03      	lsrs	r3, r0, #16
 80003e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003e8:	fa1f f887 	uxth.w	r8, r7
 80003ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f108 	mul.w	r1, r6, r8
 80003f8:	4299      	cmp	r1, r3
 80003fa:	fa04 f402 	lsl.w	r4, r4, r2
 80003fe:	d909      	bls.n	8000414 <__udivmoddi4+0x19c>
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	f106 3cff 	add.w	ip, r6, #4294967295
 8000406:	f080 808d 	bcs.w	8000524 <__udivmoddi4+0x2ac>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 808a 	bls.w	8000524 <__udivmoddi4+0x2ac>
 8000410:	3e02      	subs	r6, #2
 8000412:	443b      	add	r3, r7
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b281      	uxth	r1, r0
 8000418:	fbb3 f0fe 	udiv	r0, r3, lr
 800041c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000420:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000424:	fb00 f308 	mul.w	r3, r0, r8
 8000428:	428b      	cmp	r3, r1
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x1c4>
 800042c:	1879      	adds	r1, r7, r1
 800042e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000432:	d273      	bcs.n	800051c <__udivmoddi4+0x2a4>
 8000434:	428b      	cmp	r3, r1
 8000436:	d971      	bls.n	800051c <__udivmoddi4+0x2a4>
 8000438:	3802      	subs	r0, #2
 800043a:	4439      	add	r1, r7
 800043c:	1acb      	subs	r3, r1, r3
 800043e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000442:	e778      	b.n	8000336 <__udivmoddi4+0xbe>
 8000444:	f1c6 0c20 	rsb	ip, r6, #32
 8000448:	fa03 f406 	lsl.w	r4, r3, r6
 800044c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000450:	431c      	orrs	r4, r3
 8000452:	fa20 f70c 	lsr.w	r7, r0, ip
 8000456:	fa01 f306 	lsl.w	r3, r1, r6
 800045a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800045e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000462:	431f      	orrs	r7, r3
 8000464:	0c3b      	lsrs	r3, r7, #16
 8000466:	fbb1 f9fe 	udiv	r9, r1, lr
 800046a:	fa1f f884 	uxth.w	r8, r4
 800046e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000472:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000476:	fb09 fa08 	mul.w	sl, r9, r8
 800047a:	458a      	cmp	sl, r1
 800047c:	fa02 f206 	lsl.w	r2, r2, r6
 8000480:	fa00 f306 	lsl.w	r3, r0, r6
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x220>
 8000486:	1861      	adds	r1, r4, r1
 8000488:	f109 30ff 	add.w	r0, r9, #4294967295
 800048c:	d248      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 800048e:	458a      	cmp	sl, r1
 8000490:	d946      	bls.n	8000520 <__udivmoddi4+0x2a8>
 8000492:	f1a9 0902 	sub.w	r9, r9, #2
 8000496:	4421      	add	r1, r4
 8000498:	eba1 010a 	sub.w	r1, r1, sl
 800049c:	b2bf      	uxth	r7, r7
 800049e:	fbb1 f0fe 	udiv	r0, r1, lr
 80004a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004aa:	fb00 f808 	mul.w	r8, r0, r8
 80004ae:	45b8      	cmp	r8, r7
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x24a>
 80004b2:	19e7      	adds	r7, r4, r7
 80004b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004b8:	d22e      	bcs.n	8000518 <__udivmoddi4+0x2a0>
 80004ba:	45b8      	cmp	r8, r7
 80004bc:	d92c      	bls.n	8000518 <__udivmoddi4+0x2a0>
 80004be:	3802      	subs	r0, #2
 80004c0:	4427      	add	r7, r4
 80004c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c6:	eba7 0708 	sub.w	r7, r7, r8
 80004ca:	fba0 8902 	umull	r8, r9, r0, r2
 80004ce:	454f      	cmp	r7, r9
 80004d0:	46c6      	mov	lr, r8
 80004d2:	4649      	mov	r1, r9
 80004d4:	d31a      	bcc.n	800050c <__udivmoddi4+0x294>
 80004d6:	d017      	beq.n	8000508 <__udivmoddi4+0x290>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x27a>
 80004da:	ebb3 020e 	subs.w	r2, r3, lr
 80004de:	eb67 0701 	sbc.w	r7, r7, r1
 80004e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004e6:	40f2      	lsrs	r2, r6
 80004e8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ec:	40f7      	lsrs	r7, r6
 80004ee:	e9c5 2700 	strd	r2, r7, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e70b      	b.n	8000318 <__udivmoddi4+0xa0>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0x60>
 8000504:	4618      	mov	r0, r3
 8000506:	e6fd      	b.n	8000304 <__udivmoddi4+0x8c>
 8000508:	4543      	cmp	r3, r8
 800050a:	d2e5      	bcs.n	80004d8 <__udivmoddi4+0x260>
 800050c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000510:	eb69 0104 	sbc.w	r1, r9, r4
 8000514:	3801      	subs	r0, #1
 8000516:	e7df      	b.n	80004d8 <__udivmoddi4+0x260>
 8000518:	4608      	mov	r0, r1
 800051a:	e7d2      	b.n	80004c2 <__udivmoddi4+0x24a>
 800051c:	4660      	mov	r0, ip
 800051e:	e78d      	b.n	800043c <__udivmoddi4+0x1c4>
 8000520:	4681      	mov	r9, r0
 8000522:	e7b9      	b.n	8000498 <__udivmoddi4+0x220>
 8000524:	4666      	mov	r6, ip
 8000526:	e775      	b.n	8000414 <__udivmoddi4+0x19c>
 8000528:	4630      	mov	r0, r6
 800052a:	e74a      	b.n	80003c2 <__udivmoddi4+0x14a>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	4439      	add	r1, r7
 8000532:	e713      	b.n	800035c <__udivmoddi4+0xe4>
 8000534:	3802      	subs	r0, #2
 8000536:	443c      	add	r4, r7
 8000538:	e724      	b.n	8000384 <__udivmoddi4+0x10c>
 800053a:	bf00      	nop

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, size, 1000);
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	b29a      	uxth	r2, r3
 800054e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000552:	6879      	ldr	r1, [r7, #4]
 8000554:	4803      	ldr	r0, [pc, #12]	; (8000564 <uartTransmit+0x24>)
 8000556:	f006 fa05 	bl	8006964 <HAL_UART_Transmit>
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	200002c0 	.word	0x200002c0

08000568 <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	6039      	str	r1, [r7, #0]
	char str[11];

	utoa(number, str, base);
 8000572:	683a      	ldr	r2, [r7, #0]
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	4619      	mov	r1, r3
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f006 ff06 	bl	800738c <utoa>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff fe57 	bl	8000238 <strlen>
 800058a:	4603      	mov	r3, r0
 800058c:	b29a      	uxth	r2, r3
 800058e:	f107 010c 	add.w	r1, r7, #12
 8000592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000596:	4803      	ldr	r0, [pc, #12]	; (80005a4 <uartTransmitNumber+0x3c>)
 8000598:	f006 f9e4 	bl	8006964 <HAL_UART_Transmit>
}
 800059c:	bf00      	nop
 800059e:	3718      	adds	r7, #24
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	200002c0 	.word	0x200002c0

080005a8 <collectHardwareInfo>:


// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
	#define STRING_STM_DEVICE_ID			"\nSTM32 Device ID:\t\t"
	#define STRING_STM_REVISION				"\nSTM32 Revision ID:\t\t"
	#define STRING_STM_FREQ					"\nSTM32 CPU-Freq:\t\t\t"
	#define STRING_STM_UUID					"\nSTM32 UUID:\t\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 80005ae:	2114      	movs	r1, #20
 80005b0:	483b      	ldr	r0, [pc, #236]	; (80006a0 <collectHardwareInfo+0xf8>)
 80005b2:	f7ff ffc5 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);									// Mikrocontroller Typ
 80005b6:	f001 ff65 	bl	8002484 <HAL_GetDEVID>
 80005ba:	4603      	mov	r3, r0
 80005bc:	210a      	movs	r1, #10
 80005be:	4618      	mov	r0, r3
 80005c0:	f7ff ffd2 	bl	8000568 <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 80005c4:	2116      	movs	r1, #22
 80005c6:	4837      	ldr	r0, [pc, #220]	; (80006a4 <collectHardwareInfo+0xfc>)
 80005c8:	f7ff ffba 	bl	8000540 <uartTransmit>

	switch(HAL_GetREVID())													// Mikrocontroller Revision
 80005cc:	f001 ff4e 	bl	800246c <HAL_GetREVID>
 80005d0:	4603      	mov	r3, r0
 80005d2:	f242 0201 	movw	r2, #8193	; 0x2001
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d016      	beq.n	8000608 <collectHardwareInfo+0x60>
 80005da:	f242 0201 	movw	r2, #8193	; 0x2001
 80005de:	4293      	cmp	r3, r2
 80005e0:	d817      	bhi.n	8000612 <collectHardwareInfo+0x6a>
 80005e2:	f241 0201 	movw	r2, #4097	; 0x1001
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d004      	beq.n	80005f4 <collectHardwareInfo+0x4c>
 80005ea:	f241 0203 	movw	r2, #4099	; 0x1003
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d005      	beq.n	80005fe <collectHardwareInfo+0x56>
 80005f2:	e00e      	b.n	8000612 <collectHardwareInfo+0x6a>
	{
		case 0x1001:
			uartTransmit("Z", 1);
 80005f4:	2101      	movs	r1, #1
 80005f6:	482c      	ldr	r0, [pc, #176]	; (80006a8 <collectHardwareInfo+0x100>)
 80005f8:	f7ff ffa2 	bl	8000540 <uartTransmit>
			break;
 80005fc:	e011      	b.n	8000622 <collectHardwareInfo+0x7a>
		case 0x1003:
			uartTransmit("Y", 1);
 80005fe:	2101      	movs	r1, #1
 8000600:	482a      	ldr	r0, [pc, #168]	; (80006ac <collectHardwareInfo+0x104>)
 8000602:	f7ff ff9d 	bl	8000540 <uartTransmit>
			break;
 8000606:	e00c      	b.n	8000622 <collectHardwareInfo+0x7a>
		case 0x2001:
			uartTransmit("X", 1);
 8000608:	2101      	movs	r1, #1
 800060a:	4829      	ldr	r0, [pc, #164]	; (80006b0 <collectHardwareInfo+0x108>)
 800060c:	f7ff ff98 	bl	8000540 <uartTransmit>
			break;
 8000610:	e007      	b.n	8000622 <collectHardwareInfo+0x7a>
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 8000612:	f001 ff2b 	bl	800246c <HAL_GetREVID>
 8000616:	4603      	mov	r3, r0
 8000618:	210a      	movs	r1, #10
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff ffa4 	bl	8000568 <uartTransmitNumber>
			break;
 8000620:	bf00      	nop
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 8000622:	2114      	movs	r1, #20
 8000624:	4823      	ldr	r0, [pc, #140]	; (80006b4 <collectHardwareInfo+0x10c>)
 8000626:	f7ff ff8b 	bl	8000540 <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();						// Systemfrequenz ausgeben
 800062a:	f003 ff39 	bl	80044a0 <HAL_RCC_GetSysClockFreq>
 800062e:	6078      	str	r0, [r7, #4]
		frequency = frequency/1000000;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4a21      	ldr	r2, [pc, #132]	; (80006b8 <collectHardwareInfo+0x110>)
 8000634:	fba2 2303 	umull	r2, r3, r2, r3
 8000638:	0c9b      	lsrs	r3, r3, #18
 800063a:	607b      	str	r3, [r7, #4]

		uartTransmitNumber(frequency, 10);
 800063c:	210a      	movs	r1, #10
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f7ff ff92 	bl	8000568 <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 8000644:	2104      	movs	r1, #4
 8000646:	481d      	ldr	r0, [pc, #116]	; (80006bc <collectHardwareInfo+0x114>)
 8000648:	f7ff ff7a 	bl	8000540 <uartTransmit>


	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 800064c:	2110      	movs	r1, #16
 800064e:	481c      	ldr	r0, [pc, #112]	; (80006c0 <collectHardwareInfo+0x118>)
 8000650:	f7ff ff76 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);									// UID0 ausgeben
 8000654:	f001 ff24 	bl	80024a0 <HAL_GetUIDw0>
 8000658:	4603      	mov	r3, r0
 800065a:	2110      	movs	r1, #16
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff ff83 	bl	8000568 <uartTransmitNumber>

	uartTransmit(" ", 1);
 8000662:	2101      	movs	r1, #1
 8000664:	4817      	ldr	r0, [pc, #92]	; (80006c4 <collectHardwareInfo+0x11c>)
 8000666:	f7ff ff6b 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);									// UID1 ausgeben
 800066a:	f001 ff25 	bl	80024b8 <HAL_GetUIDw1>
 800066e:	4603      	mov	r3, r0
 8000670:	2110      	movs	r1, #16
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff ff78 	bl	8000568 <uartTransmitNumber>

	uartTransmit(" ", 1);
 8000678:	2101      	movs	r1, #1
 800067a:	4812      	ldr	r0, [pc, #72]	; (80006c4 <collectHardwareInfo+0x11c>)
 800067c:	f7ff ff60 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);									// UID2 ausgeben
 8000680:	f001 ff26 	bl	80024d0 <HAL_GetUIDw2>
 8000684:	4603      	mov	r3, r0
 8000686:	2110      	movs	r1, #16
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff ff6d 	bl	8000568 <uartTransmitNumber>

	uartTransmit("\n", 1);
 800068e:	2101      	movs	r1, #1
 8000690:	480d      	ldr	r0, [pc, #52]	; (80006c8 <collectHardwareInfo+0x120>)
 8000692:	f7ff ff55 	bl	8000540 <uartTransmit>
}
 8000696:	bf00      	nop
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	080073a8 	.word	0x080073a8
 80006a4:	080073bc 	.word	0x080073bc
 80006a8:	080073d4 	.word	0x080073d4
 80006ac:	080073d8 	.word	0x080073d8
 80006b0:	080073dc 	.word	0x080073dc
 80006b4:	080073e0 	.word	0x080073e0
 80006b8:	431bde83 	.word	0x431bde83
 80006bc:	080073f4 	.word	0x080073f4
 80006c0:	080073fc 	.word	0x080073fc
 80006c4:	0800740c 	.word	0x0800740c
 80006c8:	08007410 	.word	0x08007410

080006cc <collectMiddlewareInfo>:
//----------------------------------------------------------------------

// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	#define STRING_CMSIS_VERSION			"\nCMSIS Version:\t\t\t"
	#define STRING_HAL_VERSION				"\nHAL Version:\t\t\t"
	#define STRING_RTOS_CMSIS_VERSION		"\nRTOS CMSIS Version:\t\t"
	#define STRING_RTOS_VERSION				"\nRTOS Version:\t\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 80006d0:	2113      	movs	r1, #19
 80006d2:	4824      	ldr	r0, [pc, #144]	; (8000764 <collectMiddlewareInfo+0x98>)
 80006d4:	f7ff ff34 	bl	8000540 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);						// CMSIS Version anzeigen
 80006d8:	210a      	movs	r1, #10
 80006da:	2005      	movs	r0, #5
 80006dc:	f7ff ff44 	bl	8000568 <uartTransmitNumber>
	uartTransmit(".", 1);
 80006e0:	2101      	movs	r1, #1
 80006e2:	4821      	ldr	r0, [pc, #132]	; (8000768 <collectMiddlewareInfo+0x9c>)
 80006e4:	f7ff ff2c 	bl	8000540 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);						// CMSIS Version anzeigen
 80006e8:	210a      	movs	r1, #10
 80006ea:	2001      	movs	r0, #1
 80006ec:	f7ff ff3c 	bl	8000568 <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));			// Hal Version anzeigen
 80006f0:	2111      	movs	r1, #17
 80006f2:	481e      	ldr	r0, [pc, #120]	; (800076c <collectMiddlewareInfo+0xa0>)
 80006f4:	f7ff ff24 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 80006f8:	f001 feae 	bl	8002458 <HAL_GetHalVersion>
 80006fc:	4603      	mov	r3, r0
 80006fe:	0e1b      	lsrs	r3, r3, #24
 8000700:	b2db      	uxtb	r3, r3
 8000702:	210a      	movs	r1, #10
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ff2f 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 800070a:	2101      	movs	r1, #1
 800070c:	4816      	ldr	r0, [pc, #88]	; (8000768 <collectMiddlewareInfo+0x9c>)
 800070e:	f7ff ff17 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 8000712:	f001 fea1 	bl	8002458 <HAL_GetHalVersion>
 8000716:	4603      	mov	r3, r0
 8000718:	0c1b      	lsrs	r3, r3, #16
 800071a:	b2db      	uxtb	r3, r3
 800071c:	210a      	movs	r1, #10
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ff22 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000724:	2101      	movs	r1, #1
 8000726:	4810      	ldr	r0, [pc, #64]	; (8000768 <collectMiddlewareInfo+0x9c>)
 8000728:	f7ff ff0a 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 800072c:	f001 fe94 	bl	8002458 <HAL_GetHalVersion>
 8000730:	4603      	mov	r3, r0
 8000732:	0a1b      	lsrs	r3, r3, #8
 8000734:	b2db      	uxtb	r3, r3
 8000736:	210a      	movs	r1, #10
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff ff15 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 800073e:	2101      	movs	r1, #1
 8000740:	4809      	ldr	r0, [pc, #36]	; (8000768 <collectMiddlewareInfo+0x9c>)
 8000742:	f7ff fefd 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 8000746:	f001 fe87 	bl	8002458 <HAL_GetHalVersion>
 800074a:	4603      	mov	r3, r0
 800074c:	b2db      	uxtb	r3, r3
 800074e:	210a      	movs	r1, #10
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff ff09 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);						// FreeRTOS Kernel Version anzeigen
#endif

	uartTransmit("\n", 1);
 8000756:	2101      	movs	r1, #1
 8000758:	4805      	ldr	r0, [pc, #20]	; (8000770 <collectMiddlewareInfo+0xa4>)
 800075a:	f7ff fef1 	bl	8000540 <uartTransmit>
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	08007414 	.word	0x08007414
 8000768:	08007428 	.word	0x08007428
 800076c:	0800742c 	.word	0x0800742c
 8000770:	08007410 	.word	0x08007410

08000774 <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
	#define STRING_GIT_TAG_COMMIT			"\nGit Tags commit:\t\t"
	#define STRING_GIT_TAG_DIRTY			"\nGit Dirty commit:\t\t"
	#define STRING_BUILD_DATE				"\nBuild Date:\t\t\t"
	#define STRING_BUILD_TIME				"\nBuild Time:\t\t\t"

	uartTransmit(STRING_GIT_COMMIT, sizeof(STRING_GIT_COMMIT));
 8000778:	2110      	movs	r1, #16
 800077a:	4826      	ldr	r0, [pc, #152]	; (8000814 <collectSoftwareInfo+0xa0>)
 800077c:	f7ff fee0 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));							// Git Commit anzeigen
 8000780:	2108      	movs	r1, #8
 8000782:	4825      	ldr	r0, [pc, #148]	; (8000818 <collectSoftwareInfo+0xa4>)
 8000784:	f7ff fedc 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 8000788:	2110      	movs	r1, #16
 800078a:	4824      	ldr	r0, [pc, #144]	; (800081c <collectSoftwareInfo+0xa8>)
 800078c:	f7ff fed8 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));							// Git Branch anzeigen
 8000790:	2106      	movs	r1, #6
 8000792:	4823      	ldr	r0, [pc, #140]	; (8000820 <collectSoftwareInfo+0xac>)
 8000794:	f7ff fed4 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 8000798:	210e      	movs	r1, #14
 800079a:	4822      	ldr	r0, [pc, #136]	; (8000824 <collectSoftwareInfo+0xb0>)
 800079c:	f7ff fed0 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));								// Git Hash anzeigen
 80007a0:	2129      	movs	r1, #41	; 0x29
 80007a2:	4821      	ldr	r0, [pc, #132]	; (8000828 <collectSoftwareInfo+0xb4>)
 80007a4:	f7ff fecc 	bl	8000540 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 80007a8:	2101      	movs	r1, #1
 80007aa:	4820      	ldr	r0, [pc, #128]	; (800082c <collectSoftwareInfo+0xb8>)
 80007ac:	f7ff fec8 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 80007b0:	2115      	movs	r1, #21
 80007b2:	481f      	ldr	r0, [pc, #124]	; (8000830 <collectSoftwareInfo+0xbc>)
 80007b4:	f7ff fec4 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_LAST_TAG, sizeof(GIT_LAST_TAG));						// Git letzten Tags anzeigen
 80007b8:	2105      	movs	r1, #5
 80007ba:	481e      	ldr	r0, [pc, #120]	; (8000834 <collectSoftwareInfo+0xc0>)
 80007bc:	f7ff fec0 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 80007c0:	2114      	movs	r1, #20
 80007c2:	481d      	ldr	r0, [pc, #116]	; (8000838 <collectSoftwareInfo+0xc4>)
 80007c4:	f7ff febc 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_TAG_COMMIT, sizeof(GIT_TAG_COMMIT));					// Git Tags Commit anzeigen
 80007c8:	2108      	movs	r1, #8
 80007ca:	481c      	ldr	r0, [pc, #112]	; (800083c <collectSoftwareInfo+0xc8>)
 80007cc:	f7ff feb8 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_DIRTY, sizeof(STRING_GIT_TAG_DIRTY));
 80007d0:	2115      	movs	r1, #21
 80007d2:	481b      	ldr	r0, [pc, #108]	; (8000840 <collectSoftwareInfo+0xcc>)
 80007d4:	f7ff feb4 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY, sizeof(GIT_TAG_DIRTY));						// Git Dirty Commit anzeigen
 80007d8:	2111      	movs	r1, #17
 80007da:	481a      	ldr	r0, [pc, #104]	; (8000844 <collectSoftwareInfo+0xd0>)
 80007dc:	f7ff feb0 	bl	8000540 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 80007e0:	2101      	movs	r1, #1
 80007e2:	4812      	ldr	r0, [pc, #72]	; (800082c <collectSoftwareInfo+0xb8>)
 80007e4:	f7ff feac 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 80007e8:	2110      	movs	r1, #16
 80007ea:	4817      	ldr	r0, [pc, #92]	; (8000848 <collectSoftwareInfo+0xd4>)
 80007ec:	f7ff fea8 	bl	8000540 <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));							// Kompilierdatum anzeigen
 80007f0:	210b      	movs	r1, #11
 80007f2:	4816      	ldr	r0, [pc, #88]	; (800084c <collectSoftwareInfo+0xd8>)
 80007f4:	f7ff fea4 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 80007f8:	2110      	movs	r1, #16
 80007fa:	4815      	ldr	r0, [pc, #84]	; (8000850 <collectSoftwareInfo+0xdc>)
 80007fc:	f7ff fea0 	bl	8000540 <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));							// Kompilierzeit anzeigen
 8000800:	2109      	movs	r1, #9
 8000802:	4814      	ldr	r0, [pc, #80]	; (8000854 <collectSoftwareInfo+0xe0>)
 8000804:	f7ff fe9c 	bl	8000540 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8000808:	2101      	movs	r1, #1
 800080a:	4808      	ldr	r0, [pc, #32]	; (800082c <collectSoftwareInfo+0xb8>)
 800080c:	f7ff fe98 	bl	8000540 <uartTransmit>
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	08007440 	.word	0x08007440
 8000818:	08007450 	.word	0x08007450
 800081c:	08007458 	.word	0x08007458
 8000820:	08007468 	.word	0x08007468
 8000824:	08007470 	.word	0x08007470
 8000828:	08007480 	.word	0x08007480
 800082c:	08007410 	.word	0x08007410
 8000830:	080074ac 	.word	0x080074ac
 8000834:	080074c4 	.word	0x080074c4
 8000838:	080074cc 	.word	0x080074cc
 800083c:	080074e0 	.word	0x080074e0
 8000840:	080074e8 	.word	0x080074e8
 8000844:	08007500 	.word	0x08007500
 8000848:	08007514 	.word	0x08007514
 800084c:	08007524 	.word	0x08007524
 8000850:	08007530 	.word	0x08007530
 8000854:	08007540 	.word	0x08007540

08000858 <collectGitcounts>:
//----------------------------------------------------------------------

// Collects Git count information and prints it
//----------------------------------------------------------------------
void collectGitcounts(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	#define STRING_GIT_OVERALL_COMMIT_COUNT	"\nGit Overall count:\t\t"
	#define STRING_GIT_BRANCH_COMMIT_COUNT	"\nGit Branch commit count:\t"
	#define STRING_GIT_ACTIVE_BRANCHES		"\nGit active Branches:\t\t"
	#define STRING_GIT_TAG_COUNT			"\nGit Tags count:\t\t"

	uartTransmit(STRING_GIT_TAG_DIRTY_COUNT, sizeof(STRING_GIT_TAG_DIRTY_COUNT));
 800085c:	2114      	movs	r1, #20
 800085e:	4814      	ldr	r0, [pc, #80]	; (80008b0 <collectGitcounts+0x58>)
 8000860:	f7ff fe6e 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY_COUNT, sizeof(GIT_TAG_DIRTY_COUNT));			// Git zaehle Dirty commits nach letztem Tags und Anzahl anzeigen
 8000864:	2103      	movs	r1, #3
 8000866:	4813      	ldr	r0, [pc, #76]	; (80008b4 <collectGitcounts+0x5c>)
 8000868:	f7ff fe6a 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_OVERALL_COMMIT_COUNT, sizeof(STRING_GIT_OVERALL_COMMIT_COUNT));
 800086c:	2116      	movs	r1, #22
 800086e:	4812      	ldr	r0, [pc, #72]	; (80008b8 <collectGitcounts+0x60>)
 8000870:	f7ff fe66 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_OVERALL_COMMIT_COUNT, sizeof(GIT_OVERALL_COMMIT_COUNT));// Git alle Commits zaehlen und Anzahl anzeigen
 8000874:	2103      	movs	r1, #3
 8000876:	4811      	ldr	r0, [pc, #68]	; (80008bc <collectGitcounts+0x64>)
 8000878:	f7ff fe62 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH_COMMIT_COUNT, sizeof(STRING_GIT_BRANCH_COMMIT_COUNT));
 800087c:	211b      	movs	r1, #27
 800087e:	4810      	ldr	r0, [pc, #64]	; (80008c0 <collectGitcounts+0x68>)
 8000880:	f7ff fe5e 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_BRANCH_COMMIT_COUNT, sizeof(GIT_BRANCH_COMMIT_COUNT));	// Git Branch Commits zaehken und Anzahl anzeigen
 8000884:	2103      	movs	r1, #3
 8000886:	480f      	ldr	r0, [pc, #60]	; (80008c4 <collectGitcounts+0x6c>)
 8000888:	f7ff fe5a 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 800088c:	2115      	movs	r1, #21
 800088e:	480e      	ldr	r0, [pc, #56]	; (80008c8 <collectGitcounts+0x70>)
 8000890:	f7ff fe56 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_ACTIVE_BRANCHES, sizeof(GIT_ACTIVE_BRANCHES));			// Git aktive Branches zaehlen und Anzahl anzeigen
 8000894:	2102      	movs	r1, #2
 8000896:	480d      	ldr	r0, [pc, #52]	; (80008cc <collectGitcounts+0x74>)
 8000898:	f7ff fe52 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 800089c:	2114      	movs	r1, #20
 800089e:	480c      	ldr	r0, [pc, #48]	; (80008d0 <collectGitcounts+0x78>)
 80008a0:	f7ff fe4e 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_TAG_COUNT, sizeof(GIT_TAG_COUNT));						// Git Tags zaehlen und Anzahl anzeigen
 80008a4:	2102      	movs	r1, #2
 80008a6:	480b      	ldr	r0, [pc, #44]	; (80008d4 <collectGitcounts+0x7c>)
 80008a8:	f7ff fe4a 	bl	8000540 <uartTransmit>
}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	0800754c 	.word	0x0800754c
 80008b4:	08007560 	.word	0x08007560
 80008b8:	08007564 	.word	0x08007564
 80008bc:	0800757c 	.word	0x0800757c
 80008c0:	08007580 	.word	0x08007580
 80008c4:	0800759c 	.word	0x0800759c
 80008c8:	080074ac 	.word	0x080074ac
 80008cc:	080075a0 	.word	0x080075a0
 80008d0:	080074cc 	.word	0x080074cc
 80008d4:	080075a4 	.word	0x080075a4

080008d8 <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	#define STRING_HARDWARE_TITEL			"\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL			"\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL			"\n\t --Software--\n"
	#define STRING_GIT_COUNTS				"\n\t --Git counts--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 80008dc:	2111      	movs	r1, #17
 80008de:	480e      	ldr	r0, [pc, #56]	; (8000918 <collectSystemInfo+0x40>)
 80008e0:	f7ff fe2e 	bl	8000540 <uartTransmit>
	collectHardwareInfo();													// Sammelt Hardware Informationen und gibt diese ueber Uart aus
 80008e4:	f7ff fe60 	bl	80005a8 <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 80008e8:	2111      	movs	r1, #17
 80008ea:	480c      	ldr	r0, [pc, #48]	; (800091c <collectSystemInfo+0x44>)
 80008ec:	f7ff fe28 	bl	8000540 <uartTransmit>
	collectSoftwareInfo();													// Sammelt Software Informationen und gibt diese ueber Uart aus
 80008f0:	f7ff ff40 	bl	8000774 <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 80008f4:	2113      	movs	r1, #19
 80008f6:	480a      	ldr	r0, [pc, #40]	; (8000920 <collectSystemInfo+0x48>)
 80008f8:	f7ff fe22 	bl	8000540 <uartTransmit>
	collectMiddlewareInfo();												// Sammelt Middleware Informationen und gibt diese ueber Uart aus
 80008fc:	f7ff fee6 	bl	80006cc <collectMiddlewareInfo>

	uartTransmit(STRING_GIT_COUNTS, sizeof(STRING_GIT_COUNTS));
 8000900:	2113      	movs	r1, #19
 8000902:	4808      	ldr	r0, [pc, #32]	; (8000924 <collectSystemInfo+0x4c>)
 8000904:	f7ff fe1c 	bl	8000540 <uartTransmit>
	collectGitcounts();														// Sammelt Git count Informationen und gibt diese ueber Uart aus
 8000908:	f7ff ffa6 	bl	8000858 <collectGitcounts>

	uartTransmit("\n\n\n", 3);
 800090c:	2103      	movs	r1, #3
 800090e:	4806      	ldr	r0, [pc, #24]	; (8000928 <collectSystemInfo+0x50>)
 8000910:	f7ff fe16 	bl	8000540 <uartTransmit>
}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	080075a8 	.word	0x080075a8
 800091c:	080075bc 	.word	0x080075bc
 8000920:	080075d0 	.word	0x080075d0
 8000924:	080075e4 	.word	0x080075e4
 8000928:	080075f8 	.word	0x080075f8

0800092c <readResetSource>:
//----------------------------------------------------------------------

// Collects Reset source Flag microcontroller
//----------------------------------------------------------------------
reset_reason readResetSource(void)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
	reset_reason reset_flags = STARTUP;
 8000932:	2300      	movs	r3, #0
 8000934:	71fb      	strb	r3, [r7, #7]

	// Pruefe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 8000936:	4b25      	ldr	r3, [pc, #148]	; (80009cc <readResetSource+0xa0>)
 8000938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800093a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800093e:	2b00      	cmp	r3, #0
 8000940:	d002      	beq.n	8000948 <readResetSource+0x1c>
	{
		reset_flags += IWDG1;
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	3301      	adds	r3, #1
 8000946:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 8000948:	4b20      	ldr	r3, [pc, #128]	; (80009cc <readResetSource+0xa0>)
 800094a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800094c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000950:	2b00      	cmp	r3, #0
 8000952:	d002      	beq.n	800095a <readResetSource+0x2e>
	{
		reset_flags += WWDG1;
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	3302      	adds	r3, #2
 8000958:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 800095a:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <readResetSource+0xa0>)
 800095c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800095e:	2b00      	cmp	r3, #0
 8000960:	da02      	bge.n	8000968 <readResetSource+0x3c>
	{
		reset_flags += CPURST1;
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	3304      	adds	r3, #4
 8000966:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 8000968:	4b18      	ldr	r3, [pc, #96]	; (80009cc <readResetSource+0xa0>)
 800096a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800096c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000970:	2b00      	cmp	r3, #0
 8000972:	d002      	beq.n	800097a <readResetSource+0x4e>
	{
		reset_flags += BORST1;
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	3308      	adds	r3, #8
 8000978:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 800097a:	4b14      	ldr	r3, [pc, #80]	; (80009cc <readResetSource+0xa0>)
 800097c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800097e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000982:	2b00      	cmp	r3, #0
 8000984:	d002      	beq.n	800098c <readResetSource+0x60>
	{
		reset_flags += PORST1;
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	3310      	adds	r3, #16
 800098a:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 800098c:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <readResetSource+0xa0>)
 800098e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000994:	2b00      	cmp	r3, #0
 8000996:	d002      	beq.n	800099e <readResetSource+0x72>
	{
		reset_flags += SFTRST1;
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	3320      	adds	r3, #32
 800099c:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <readResetSource+0xa0>)
 80009a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80009a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d002      	beq.n	80009b0 <readResetSource+0x84>
	{
		reset_flags += PINRST1;
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	3340      	adds	r3, #64	; 0x40
 80009ae:	71fb      	strb	r3, [r7, #7]
	}

	// Loesche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <readResetSource+0xa0>)
 80009b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80009b4:	4a05      	ldr	r2, [pc, #20]	; (80009cc <readResetSource+0xa0>)
 80009b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80009ba:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
 80009bc:	79fb      	ldrb	r3, [r7, #7]
}
 80009be:	4618      	mov	r0, r3
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	40023800 	.word	0x40023800

080009d0 <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	71fb      	strb	r3, [r7, #7]
	// Returns für Absatz nach Neustart.
	uartTransmit("\r\r\r\r\r\r", 6);
 80009da:	2106      	movs	r1, #6
 80009dc:	482a      	ldr	r0, [pc, #168]	; (8000a88 <printResetSource+0xb8>)
 80009de:	f7ff fdaf 	bl	8000540 <uartTransmit>


	if (reset_flags == STARTUP)											// Regulärer Start
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d104      	bne.n	80009f2 <printResetSource+0x22>
	{
		uartTransmit("Regular Start\r\n", 15);
 80009e8:	210f      	movs	r1, #15
 80009ea:	4828      	ldr	r0, [pc, #160]	; (8000a8c <printResetSource+0xbc>)
 80009ec:	f7ff fda8 	bl	8000540 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 80009f0:	e046      	b.n	8000a80 <printResetSource+0xb0>
		if (reset_flags & IWDG1)											// Interner watchdog Reset
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	f003 0301 	and.w	r3, r3, #1
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d003      	beq.n	8000a04 <printResetSource+0x34>
			uartTransmit("Interner Watchdog Reset\n", 24);
 80009fc:	2118      	movs	r1, #24
 80009fe:	4824      	ldr	r0, [pc, #144]	; (8000a90 <printResetSource+0xc0>)
 8000a00:	f7ff fd9e 	bl	8000540 <uartTransmit>
		if (reset_flags & WWDG1)											// Window watchdog Reset
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d003      	beq.n	8000a16 <printResetSource+0x46>
			uartTransmit("Window Watchdog Reset\n", 22);
 8000a0e:	2116      	movs	r1, #22
 8000a10:	4820      	ldr	r0, [pc, #128]	; (8000a94 <printResetSource+0xc4>)
 8000a12:	f7ff fd95 	bl	8000540 <uartTransmit>
		if (reset_flags & CPURST1)											// CPU Reset
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	f003 0304 	and.w	r3, r3, #4
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d003      	beq.n	8000a28 <printResetSource+0x58>
			uartTransmit("CPU Reset\n", 10);
 8000a20:	210a      	movs	r1, #10
 8000a22:	481d      	ldr	r0, [pc, #116]	; (8000a98 <printResetSource+0xc8>)
 8000a24:	f7ff fd8c 	bl	8000540 <uartTransmit>
		if (reset_flags & BORST1)											// Brown out Reset
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	f003 0308 	and.w	r3, r3, #8
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d003      	beq.n	8000a3a <printResetSource+0x6a>
			uartTransmit("Brown Out Reset\n", 16);
 8000a32:	2110      	movs	r1, #16
 8000a34:	4819      	ldr	r0, [pc, #100]	; (8000a9c <printResetSource+0xcc>)
 8000a36:	f7ff fd83 	bl	8000540 <uartTransmit>
		if (reset_flags & PORST1)											//Power on Reset / Power down Reser
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	f003 0310 	and.w	r3, r3, #16
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d003      	beq.n	8000a4c <printResetSource+0x7c>
			uartTransmit("Power On Reset\n", 15);
 8000a44:	210f      	movs	r1, #15
 8000a46:	4816      	ldr	r0, [pc, #88]	; (8000aa0 <printResetSource+0xd0>)
 8000a48:	f7ff fd7a 	bl	8000540 <uartTransmit>
		if (reset_flags & SFTRST1)											// Software Reset
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	f003 0320 	and.w	r3, r3, #32
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d003      	beq.n	8000a5e <printResetSource+0x8e>
			uartTransmit("Software Reset\n", 15);
 8000a56:	210f      	movs	r1, #15
 8000a58:	4812      	ldr	r0, [pc, #72]	; (8000aa4 <printResetSource+0xd4>)
 8000a5a:	f7ff fd71 	bl	8000540 <uartTransmit>
		if (reset_flags & PINRST1)											//NRST pin
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d003      	beq.n	8000a70 <printResetSource+0xa0>
			uartTransmit("PIN Reset\n", 10);
 8000a68:	210a      	movs	r1, #10
 8000a6a:	480f      	ldr	r0, [pc, #60]	; (8000aa8 <printResetSource+0xd8>)
 8000a6c:	f7ff fd68 	bl	8000540 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
 8000a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	da03      	bge.n	8000a80 <printResetSource+0xb0>
			uartTransmit("RMVF\n", 5);
 8000a78:	2105      	movs	r1, #5
 8000a7a:	480c      	ldr	r0, [pc, #48]	; (8000aac <printResetSource+0xdc>)
 8000a7c:	f7ff fd60 	bl	8000540 <uartTransmit>
}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	080075fc 	.word	0x080075fc
 8000a8c:	08007604 	.word	0x08007604
 8000a90:	08007614 	.word	0x08007614
 8000a94:	08007630 	.word	0x08007630
 8000a98:	08007648 	.word	0x08007648
 8000a9c:	08007654 	.word	0x08007654
 8000aa0:	08007668 	.word	0x08007668
 8000aa4:	08007678 	.word	0x08007678
 8000aa8:	08007688 	.word	0x08007688
 8000aac:	08007694 	.word	0x08007694

08000ab0 <hal_error>:
//----------------------------------------------------------------------

// Hal Error auswerten und ausgeben
//----------------------------------------------------------------------
void hal_error(uint8_t status)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG
	if (status == HAL_OK) {													// HAL OK
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d104      	bne.n	8000aca <hal_error+0x1a>
		uartTransmit("HAL OK\n", 7);
 8000ac0:	2107      	movs	r1, #7
 8000ac2:	480f      	ldr	r0, [pc, #60]	; (8000b00 <hal_error+0x50>)
 8000ac4:	f7ff fd3c 	bl	8000540 <uartTransmit>
	}
	else if (status == HAL_TIMEOUT) {										// HAL Timeout
		uartTransmit("HAL TIMEOUT\n", 12);
	}
#endif
}
 8000ac8:	e016      	b.n	8000af8 <hal_error+0x48>
	else if (status == HAL_ERROR) {											// HAL Error
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d104      	bne.n	8000ada <hal_error+0x2a>
		uartTransmit("HAL ERROR\n", 10);
 8000ad0:	210a      	movs	r1, #10
 8000ad2:	480c      	ldr	r0, [pc, #48]	; (8000b04 <hal_error+0x54>)
 8000ad4:	f7ff fd34 	bl	8000540 <uartTransmit>
}
 8000ad8:	e00e      	b.n	8000af8 <hal_error+0x48>
	else if (status == HAL_BUSY) {											// HAL Beschaeftigt
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	2b02      	cmp	r3, #2
 8000ade:	d104      	bne.n	8000aea <hal_error+0x3a>
		uartTransmit("HAL BUSY\n", 9);
 8000ae0:	2109      	movs	r1, #9
 8000ae2:	4809      	ldr	r0, [pc, #36]	; (8000b08 <hal_error+0x58>)
 8000ae4:	f7ff fd2c 	bl	8000540 <uartTransmit>
}
 8000ae8:	e006      	b.n	8000af8 <hal_error+0x48>
	else if (status == HAL_TIMEOUT) {										// HAL Timeout
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	2b03      	cmp	r3, #3
 8000aee:	d103      	bne.n	8000af8 <hal_error+0x48>
		uartTransmit("HAL TIMEOUT\n", 12);
 8000af0:	210c      	movs	r1, #12
 8000af2:	4806      	ldr	r0, [pc, #24]	; (8000b0c <hal_error+0x5c>)
 8000af4:	f7ff fd24 	bl	8000540 <uartTransmit>
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	0800769c 	.word	0x0800769c
 8000b04:	080076a4 	.word	0x080076a4
 8000b08:	080076b0 	.word	0x080076b0
 8000b0c:	080076bc 	.word	0x080076bc

08000b10 <readall_inputs>:
//----------------------------------------------------------------------

// Lese alle Eingaenge
//----------------------------------------------------------------------
void readall_inputs(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
	// Systemeingaenge einlesen
	system_in.IMD_PWM = HAL_GPIO_ReadPin(IMD_PWM_GPIO_Port, IMD_PWM_Pin);						// Eingang IMD PWM
 8000b14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b18:	4850      	ldr	r0, [pc, #320]	; (8000c5c <readall_inputs+0x14c>)
 8000b1a:	f003 f8a5 	bl	8003c68 <HAL_GPIO_ReadPin>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	b2d9      	uxtb	r1, r3
 8000b26:	4a4e      	ldr	r2, [pc, #312]	; (8000c60 <readall_inputs+0x150>)
 8000b28:	7813      	ldrb	r3, [r2, #0]
 8000b2a:	f361 03c3 	bfi	r3, r1, #3, #1
 8000b2e:	7013      	strb	r3, [r2, #0]
	system_in.KL15 = HAL_GPIO_ReadPin(KL15_GPIO_Port, KL15_Pin);								// Eingang Auto an
 8000b30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b34:	484b      	ldr	r0, [pc, #300]	; (8000c64 <readall_inputs+0x154>)
 8000b36:	f003 f897 	bl	8003c68 <HAL_GPIO_ReadPin>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	f003 0301 	and.w	r3, r3, #1
 8000b40:	b2d9      	uxtb	r1, r3
 8000b42:	4a47      	ldr	r2, [pc, #284]	; (8000c60 <readall_inputs+0x150>)
 8000b44:	7813      	ldrb	r3, [r2, #0]
 8000b46:	f361 1304 	bfi	r3, r1, #4, #1
 8000b4a:	7013      	strb	r3, [r2, #0]
	system_in.Crash = HAL_GPIO_ReadPin(CRASH_GPIO_Port, CRASH_Pin);								// Crash Eingang
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	4846      	ldr	r0, [pc, #280]	; (8000c68 <readall_inputs+0x158>)
 8000b50:	f003 f88a 	bl	8003c68 <HAL_GPIO_ReadPin>
 8000b54:	4603      	mov	r3, r0
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	b2d9      	uxtb	r1, r3
 8000b5c:	4a40      	ldr	r2, [pc, #256]	; (8000c60 <readall_inputs+0x150>)
 8000b5e:	7813      	ldrb	r3, [r2, #0]
 8000b60:	f361 1345 	bfi	r3, r1, #5, #1
 8000b64:	7013      	strb	r3, [r2, #0]
	system_in.Wakeup = HAL_GPIO_ReadPin(HW_WAKE_GPIO_Port, HW_WAKE_Pin);						// Eingang Hardware Wakeup
 8000b66:	2104      	movs	r1, #4
 8000b68:	483f      	ldr	r0, [pc, #252]	; (8000c68 <readall_inputs+0x158>)
 8000b6a:	f003 f87d 	bl	8003c68 <HAL_GPIO_ReadPin>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	f003 0301 	and.w	r3, r3, #1
 8000b74:	b2d9      	uxtb	r1, r3
 8000b76:	4a3a      	ldr	r2, [pc, #232]	; (8000c60 <readall_inputs+0x150>)
 8000b78:	7813      	ldrb	r3, [r2, #0]
 8000b7a:	f361 1386 	bfi	r3, r1, #6, #1
 8000b7e:	7013      	strb	r3, [r2, #0]

	// SDC-Eingaenge einlesen
	sdc_in.IMD_OK_IN = HAL_GPIO_ReadPin(IMD_OK_IN_GPIO_Port, IMD_OK_IN_Pin);					// IMD OK, Akku
 8000b80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b84:	4835      	ldr	r0, [pc, #212]	; (8000c5c <readall_inputs+0x14c>)
 8000b86:	f003 f86f 	bl	8003c68 <HAL_GPIO_ReadPin>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	f003 0301 	and.w	r3, r3, #1
 8000b90:	b2d9      	uxtb	r1, r3
 8000b92:	4a36      	ldr	r2, [pc, #216]	; (8000c6c <readall_inputs+0x15c>)
 8000b94:	7813      	ldrb	r3, [r2, #0]
 8000b96:	f361 0300 	bfi	r3, r1, #0, #1
 8000b9a:	7013      	strb	r3, [r2, #0]
	sdc_in.HVIL = HAL_GPIO_ReadPin(SENSE_SDC_HVIL_GPIO_Port, SENSE_SDC_HVIL_Pin);				// Shutdown-Circuit HVIL, OK
 8000b9c:	2108      	movs	r1, #8
 8000b9e:	482f      	ldr	r0, [pc, #188]	; (8000c5c <readall_inputs+0x14c>)
 8000ba0:	f003 f862 	bl	8003c68 <HAL_GPIO_ReadPin>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	b2d9      	uxtb	r1, r3
 8000bac:	4a2f      	ldr	r2, [pc, #188]	; (8000c6c <readall_inputs+0x15c>)
 8000bae:	7813      	ldrb	r3, [r2, #0]
 8000bb0:	f361 0341 	bfi	r3, r1, #1, #1
 8000bb4:	7013      	strb	r3, [r2, #0]
	sdc_in.MotorSDC = HAL_GPIO_ReadPin(SENSE_SDC_MOTOR_GPIO_Port, SENSE_SDC_MOTOR_Pin);			// Shutdown-Circuit Akku, OK
 8000bb6:	2120      	movs	r1, #32
 8000bb8:	4828      	ldr	r0, [pc, #160]	; (8000c5c <readall_inputs+0x14c>)
 8000bba:	f003 f855 	bl	8003c68 <HAL_GPIO_ReadPin>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	f003 0301 	and.w	r3, r3, #1
 8000bc4:	b2d9      	uxtb	r1, r3
 8000bc6:	4a29      	ldr	r2, [pc, #164]	; (8000c6c <readall_inputs+0x15c>)
 8000bc8:	7813      	ldrb	r3, [r2, #0]
 8000bca:	f361 0382 	bfi	r3, r1, #2, #1
 8000bce:	7013      	strb	r3, [r2, #0]
	sdc_in.BTB_SDC = HAL_GPIO_ReadPin(SENSE_SDC_BTB_GPIO_Port, SENSE_SDC_BTB_Pin);				// Shutdown-Circuit Bamocar, OK
 8000bd0:	2110      	movs	r1, #16
 8000bd2:	4822      	ldr	r0, [pc, #136]	; (8000c5c <readall_inputs+0x14c>)
 8000bd4:	f003 f848 	bl	8003c68 <HAL_GPIO_ReadPin>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	b2d9      	uxtb	r1, r3
 8000be0:	4a22      	ldr	r2, [pc, #136]	; (8000c6c <readall_inputs+0x15c>)
 8000be2:	7813      	ldrb	r3, [r2, #0]
 8000be4:	f361 03c3 	bfi	r3, r1, #3, #1
 8000be8:	7013      	strb	r3, [r2, #0]
	sdc_in.PrechargeIn = HAL_GPIO_ReadPin(PRECHARGE_IN_GPIO_Port, PRECHARGE_IN_Pin);			// Eingang Precharge abgeschlossen
 8000bea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bee:	4820      	ldr	r0, [pc, #128]	; (8000c70 <readall_inputs+0x160>)
 8000bf0:	f003 f83a 	bl	8003c68 <HAL_GPIO_ReadPin>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	b2d9      	uxtb	r1, r3
 8000bfc:	4a1b      	ldr	r2, [pc, #108]	; (8000c6c <readall_inputs+0x15c>)
 8000bfe:	7813      	ldrb	r3, [r2, #0]
 8000c00:	f361 1304 	bfi	r3, r1, #4, #1
 8000c04:	7013      	strb	r3, [r2, #0]

	// Komforteingaenge einlesen
	komfort_in.OVC = HAL_GPIO_ReadPin(OVC_SENSE_GPIO_Port, OVC_SENSE_Pin);						// Eingang Overcurrent erkannt
 8000c06:	2104      	movs	r1, #4
 8000c08:	4819      	ldr	r0, [pc, #100]	; (8000c70 <readall_inputs+0x160>)
 8000c0a:	f003 f82d 	bl	8003c68 <HAL_GPIO_ReadPin>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	f003 0301 	and.w	r3, r3, #1
 8000c14:	b2d9      	uxtb	r1, r3
 8000c16:	4a17      	ldr	r2, [pc, #92]	; (8000c74 <readall_inputs+0x164>)
 8000c18:	7813      	ldrb	r3, [r2, #0]
 8000c1a:	f361 0300 	bfi	r3, r1, #0, #1
 8000c1e:	7013      	strb	r3, [r2, #0]
	komfort_in.Button1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);						// Zusatzeingang Taster 1
 8000c20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c24:	4810      	ldr	r0, [pc, #64]	; (8000c68 <readall_inputs+0x158>)
 8000c26:	f003 f81f 	bl	8003c68 <HAL_GPIO_ReadPin>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	f003 0301 	and.w	r3, r3, #1
 8000c30:	b2d9      	uxtb	r1, r3
 8000c32:	4a10      	ldr	r2, [pc, #64]	; (8000c74 <readall_inputs+0x164>)
 8000c34:	7813      	ldrb	r3, [r2, #0]
 8000c36:	f361 0341 	bfi	r3, r1, #1, #1
 8000c3a:	7013      	strb	r3, [r2, #0]
	komfort_in.Button2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);						// Zusatzeingang Taster 2
 8000c3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c40:	4809      	ldr	r0, [pc, #36]	; (8000c68 <readall_inputs+0x158>)
 8000c42:	f003 f811 	bl	8003c68 <HAL_GPIO_ReadPin>
 8000c46:	4603      	mov	r3, r0
 8000c48:	f003 0301 	and.w	r3, r3, #1
 8000c4c:	b2d9      	uxtb	r1, r3
 8000c4e:	4a09      	ldr	r2, [pc, #36]	; (8000c74 <readall_inputs+0x164>)
 8000c50:	7813      	ldrb	r3, [r2, #0]
 8000c52:	f361 0382 	bfi	r3, r1, #2, #1
 8000c56:	7013      	strb	r3, [r2, #0]
}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	20000034 	.word	0x20000034
 8000c64:	40020c00 	.word	0x40020c00
 8000c68:	40020000 	.word	0x40020000
 8000c6c:	2000003c 	.word	0x2000003c
 8000c70:	40021400 	.word	0x40021400
 8000c74:	20000038 	.word	0x20000038

08000c78 <testPCB_Leds>:
//----------------------------------------------------------------------

// Teste Platinen LEDs
//----------------------------------------------------------------------
void testPCB_Leds(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
	// Leds Testen
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);								// Blaue LED Platine setzen
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	2180      	movs	r1, #128	; 0x80
 8000c80:	481b      	ldr	r0, [pc, #108]	; (8000cf0 <testPCB_Leds+0x78>)
 8000c82:	f003 f809 	bl	8003c98 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000c86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c8a:	f001 fbc1 	bl	8002410 <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);							// Blaue LED Platine zuruecksetzen
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2180      	movs	r1, #128	; 0x80
 8000c92:	4817      	ldr	r0, [pc, #92]	; (8000cf0 <testPCB_Leds+0x78>)
 8000c94:	f003 f800 	bl	8003c98 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000c98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c9c:	f001 fbb8 	bl	8002410 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);							// Gruene LED Platine setzen
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	2104      	movs	r1, #4
 8000ca4:	4812      	ldr	r0, [pc, #72]	; (8000cf0 <testPCB_Leds+0x78>)
 8000ca6:	f002 fff7 	bl	8003c98 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000caa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cae:	f001 fbaf 	bl	8002410 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);							// Gruene LED Platine zuruecksetzen
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2104      	movs	r1, #4
 8000cb6:	480e      	ldr	r0, [pc, #56]	; (8000cf0 <testPCB_Leds+0x78>)
 8000cb8:	f002 ffee 	bl	8003c98 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000cbc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cc0:	f001 fba6 	bl	8002410 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);								// Rote LED Platine setzen
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cca:	4809      	ldr	r0, [pc, #36]	; (8000cf0 <testPCB_Leds+0x78>)
 8000ccc:	f002 ffe4 	bl	8003c98 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000cd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cd4:	f001 fb9c 	bl	8002410 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);								// Rote LED Platine zuruecksetzen
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cde:	4804      	ldr	r0, [pc, #16]	; (8000cf0 <testPCB_Leds+0x78>)
 8000ce0:	f002 ffda 	bl	8003c98 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000ce4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ce8:	f001 fb92 	bl	8002410 <HAL_Delay>
}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40020400 	.word	0x40020400

08000cf4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cfa:	463b      	mov	r3, r7
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d06:	4b44      	ldr	r3, [pc, #272]	; (8000e18 <MX_ADC1_Init+0x124>)
 8000d08:	4a44      	ldr	r2, [pc, #272]	; (8000e1c <MX_ADC1_Init+0x128>)
 8000d0a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d0c:	4b42      	ldr	r3, [pc, #264]	; (8000e18 <MX_ADC1_Init+0x124>)
 8000d0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d12:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d14:	4b40      	ldr	r3, [pc, #256]	; (8000e18 <MX_ADC1_Init+0x124>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d1a:	4b3f      	ldr	r3, [pc, #252]	; (8000e18 <MX_ADC1_Init+0x124>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d20:	4b3d      	ldr	r3, [pc, #244]	; (8000e18 <MX_ADC1_Init+0x124>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d26:	4b3c      	ldr	r3, [pc, #240]	; (8000e18 <MX_ADC1_Init+0x124>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d2e:	4b3a      	ldr	r3, [pc, #232]	; (8000e18 <MX_ADC1_Init+0x124>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d34:	4b38      	ldr	r3, [pc, #224]	; (8000e18 <MX_ADC1_Init+0x124>)
 8000d36:	4a3a      	ldr	r2, [pc, #232]	; (8000e20 <MX_ADC1_Init+0x12c>)
 8000d38:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d3a:	4b37      	ldr	r3, [pc, #220]	; (8000e18 <MX_ADC1_Init+0x124>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8000d40:	4b35      	ldr	r3, [pc, #212]	; (8000e18 <MX_ADC1_Init+0x124>)
 8000d42:	2206      	movs	r2, #6
 8000d44:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d46:	4b34      	ldr	r3, [pc, #208]	; (8000e18 <MX_ADC1_Init+0x124>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d4e:	4b32      	ldr	r3, [pc, #200]	; (8000e18 <MX_ADC1_Init+0x124>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d54:	4830      	ldr	r0, [pc, #192]	; (8000e18 <MX_ADC1_Init+0x124>)
 8000d56:	f001 fbc7 	bl	80024e8 <HAL_ADC_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000d60:	f000 feb2 	bl	8001ac8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000d64:	2307      	movs	r3, #7
 8000d66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d70:	463b      	mov	r3, r7
 8000d72:	4619      	mov	r1, r3
 8000d74:	4828      	ldr	r0, [pc, #160]	; (8000e18 <MX_ADC1_Init+0x124>)
 8000d76:	f001 fbfb 	bl	8002570 <HAL_ADC_ConfigChannel>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000d80:	f000 fea2 	bl	8001ac8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000d84:	2303      	movs	r3, #3
 8000d86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d8c:	463b      	mov	r3, r7
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4821      	ldr	r0, [pc, #132]	; (8000e18 <MX_ADC1_Init+0x124>)
 8000d92:	f001 fbed 	bl	8002570 <HAL_ADC_ConfigChannel>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000d9c:	f000 fe94 	bl	8001ac8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000da0:	2304      	movs	r3, #4
 8000da2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000da4:	2303      	movs	r3, #3
 8000da6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000da8:	463b      	mov	r3, r7
 8000daa:	4619      	mov	r1, r3
 8000dac:	481a      	ldr	r0, [pc, #104]	; (8000e18 <MX_ADC1_Init+0x124>)
 8000dae:	f001 fbdf 	bl	8002570 <HAL_ADC_ConfigChannel>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000db8:	f000 fe86 	bl	8001ac8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000dbc:	2305      	movs	r3, #5
 8000dbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000dc0:	2304      	movs	r3, #4
 8000dc2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4813      	ldr	r0, [pc, #76]	; (8000e18 <MX_ADC1_Init+0x124>)
 8000dca:	f001 fbd1 	bl	8002570 <HAL_ADC_ConfigChannel>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000dd4:	f000 fe78 	bl	8001ac8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000dd8:	2306      	movs	r3, #6
 8000dda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000ddc:	2305      	movs	r3, #5
 8000dde:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000de0:	463b      	mov	r3, r7
 8000de2:	4619      	mov	r1, r3
 8000de4:	480c      	ldr	r0, [pc, #48]	; (8000e18 <MX_ADC1_Init+0x124>)
 8000de6:	f001 fbc3 	bl	8002570 <HAL_ADC_ConfigChannel>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000df0:	f000 fe6a 	bl	8001ac8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000df4:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <MX_ADC1_Init+0x130>)
 8000df6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000df8:	2306      	movs	r3, #6
 8000dfa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dfc:	463b      	mov	r3, r7
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4805      	ldr	r0, [pc, #20]	; (8000e18 <MX_ADC1_Init+0x124>)
 8000e02:	f001 fbb5 	bl	8002570 <HAL_ADC_ConfigChannel>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000e0c:	f000 fe5c 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e10:	bf00      	nop
 8000e12:	3710      	adds	r7, #16
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000050 	.word	0x20000050
 8000e1c:	40012000 	.word	0x40012000
 8000e20:	0f000001 	.word	0x0f000001
 8000e24:	10000012 	.word	0x10000012

08000e28 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08a      	sub	sp, #40	; 0x28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a15      	ldr	r2, [pc, #84]	; (8000e9c <HAL_ADC_MspInit+0x74>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d123      	bne.n	8000e92 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <HAL_ADC_MspInit+0x78>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	4a14      	ldr	r2, [pc, #80]	; (8000ea0 <HAL_ADC_MspInit+0x78>)
 8000e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e54:	6453      	str	r3, [r2, #68]	; 0x44
 8000e56:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <HAL_ADC_MspInit+0x78>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e62:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <HAL_ADC_MspInit+0x78>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a0e      	ldr	r2, [pc, #56]	; (8000ea0 <HAL_ADC_MspInit+0x78>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <HAL_ADC_MspInit+0x78>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = SENSE_TEMP1_Pin|SENSE_TEMP2_Pin|SENSE_TEMP3_Pin|SENSE_TEMP4_Pin
 8000e7a:	23f8      	movs	r3, #248	; 0xf8
 8000e7c:	617b      	str	r3, [r7, #20]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e86:	f107 0314 	add.w	r3, r7, #20
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <HAL_ADC_MspInit+0x7c>)
 8000e8e:	f002 fd3f 	bl	8003910 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e92:	bf00      	nop
 8000e94:	3728      	adds	r7, #40	; 0x28
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40012000 	.word	0x40012000
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40020000 	.word	0x40020000

08000ea8 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan3;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000eac:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000eae:	4a18      	ldr	r2, [pc, #96]	; (8000f10 <MX_CAN1_Init+0x68>)
 8000eb0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000eb2:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000eb4:	2210      	movs	r2, #16
 8000eb6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000eb8:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ebe:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000ec4:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000ec6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000eca:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000ede:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000ee4:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000eea:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ef6:	4805      	ldr	r0, [pc, #20]	; (8000f0c <MX_CAN1_Init+0x64>)
 8000ef8:	f001 fd8a 	bl	8002a10 <HAL_CAN_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000f02:	f000 fde1 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	200000c0 	.word	0x200000c0
 8000f10:	40006400 	.word	0x40006400

08000f14 <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8000f18:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <MX_CAN3_Init+0x64>)
 8000f1a:	4a18      	ldr	r2, [pc, #96]	; (8000f7c <MX_CAN3_Init+0x68>)
 8000f1c:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 8000f1e:	4b16      	ldr	r3, [pc, #88]	; (8000f78 <MX_CAN3_Init+0x64>)
 8000f20:	2206      	movs	r2, #6
 8000f22:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8000f24:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <MX_CAN3_Init+0x64>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f2a:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <MX_CAN3_Init+0x64>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000f30:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <MX_CAN3_Init+0x64>)
 8000f32:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000f36:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000f38:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <MX_CAN3_Init+0x64>)
 8000f3a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000f3e:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8000f40:	4b0d      	ldr	r3, [pc, #52]	; (8000f78 <MX_CAN3_Init+0x64>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 8000f46:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <MX_CAN3_Init+0x64>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8000f4c:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <MX_CAN3_Init+0x64>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8000f52:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <MX_CAN3_Init+0x64>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8000f58:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <MX_CAN3_Init+0x64>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8000f5e:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <MX_CAN3_Init+0x64>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8000f64:	4804      	ldr	r0, [pc, #16]	; (8000f78 <MX_CAN3_Init+0x64>)
 8000f66:	f001 fd53 	bl	8002a10 <HAL_CAN_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8000f70:	f000 fdaa 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000098 	.word	0x20000098
 8000f7c:	40003400 	.word	0x40003400

08000f80 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08e      	sub	sp, #56	; 0x38
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a47      	ldr	r2, [pc, #284]	; (80010bc <HAL_CAN_MspInit+0x13c>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d131      	bne.n	8001006 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000fa2:	4b47      	ldr	r3, [pc, #284]	; (80010c0 <HAL_CAN_MspInit+0x140>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	4a45      	ldr	r2, [pc, #276]	; (80010c0 <HAL_CAN_MspInit+0x140>)
 8000faa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000fac:	4b44      	ldr	r3, [pc, #272]	; (80010c0 <HAL_CAN_MspInit+0x140>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d10b      	bne.n	8000fcc <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000fb4:	4b43      	ldr	r3, [pc, #268]	; (80010c4 <HAL_CAN_MspInit+0x144>)
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb8:	4a42      	ldr	r2, [pc, #264]	; (80010c4 <HAL_CAN_MspInit+0x144>)
 8000fba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fbe:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc0:	4b40      	ldr	r3, [pc, #256]	; (80010c4 <HAL_CAN_MspInit+0x144>)
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fc8:	623b      	str	r3, [r7, #32]
 8000fca:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fcc:	4b3d      	ldr	r3, [pc, #244]	; (80010c4 <HAL_CAN_MspInit+0x144>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd0:	4a3c      	ldr	r2, [pc, #240]	; (80010c4 <HAL_CAN_MspInit+0x144>)
 8000fd2:	f043 0308 	orr.w	r3, r3, #8
 8000fd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd8:	4b3a      	ldr	r3, [pc, #232]	; (80010c4 <HAL_CAN_MspInit+0x144>)
 8000fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fdc:	f003 0308 	and.w	r3, r3, #8
 8000fe0:	61fb      	str	r3, [r7, #28]
 8000fe2:	69fb      	ldr	r3, [r7, #28]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000ff4:	2309      	movs	r3, #9
 8000ff6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ff8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4832      	ldr	r0, [pc, #200]	; (80010c8 <HAL_CAN_MspInit+0x148>)
 8001000:	f002 fc86 	bl	8003910 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 8001004:	e056      	b.n	80010b4 <HAL_CAN_MspInit+0x134>
  else if(canHandle->Instance==CAN3)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a30      	ldr	r2, [pc, #192]	; (80010cc <HAL_CAN_MspInit+0x14c>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d151      	bne.n	80010b4 <HAL_CAN_MspInit+0x134>
    __HAL_RCC_CAN3_CLK_ENABLE();
 8001010:	4b2c      	ldr	r3, [pc, #176]	; (80010c4 <HAL_CAN_MspInit+0x144>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001014:	4a2b      	ldr	r2, [pc, #172]	; (80010c4 <HAL_CAN_MspInit+0x144>)
 8001016:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800101a:	6413      	str	r3, [r2, #64]	; 0x40
 800101c:	4b29      	ldr	r3, [pc, #164]	; (80010c4 <HAL_CAN_MspInit+0x144>)
 800101e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001020:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001024:	61bb      	str	r3, [r7, #24]
 8001026:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001028:	4b26      	ldr	r3, [pc, #152]	; (80010c4 <HAL_CAN_MspInit+0x144>)
 800102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102c:	4a25      	ldr	r2, [pc, #148]	; (80010c4 <HAL_CAN_MspInit+0x144>)
 800102e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001032:	6413      	str	r3, [r2, #64]	; 0x40
 8001034:	4b23      	ldr	r3, [pc, #140]	; (80010c4 <HAL_CAN_MspInit+0x144>)
 8001036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001038:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800103c:	617b      	str	r3, [r7, #20]
 800103e:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001040:	4b1f      	ldr	r3, [pc, #124]	; (80010c0 <HAL_CAN_MspInit+0x140>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	3301      	adds	r3, #1
 8001046:	4a1e      	ldr	r2, [pc, #120]	; (80010c0 <HAL_CAN_MspInit+0x140>)
 8001048:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800104a:	4b1d      	ldr	r3, [pc, #116]	; (80010c0 <HAL_CAN_MspInit+0x140>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d10b      	bne.n	800106a <HAL_CAN_MspInit+0xea>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001052:	4b1c      	ldr	r3, [pc, #112]	; (80010c4 <HAL_CAN_MspInit+0x144>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	4a1b      	ldr	r2, [pc, #108]	; (80010c4 <HAL_CAN_MspInit+0x144>)
 8001058:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800105c:	6413      	str	r3, [r2, #64]	; 0x40
 800105e:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <HAL_CAN_MspInit+0x144>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106a:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <HAL_CAN_MspInit+0x144>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	4a15      	ldr	r2, [pc, #84]	; (80010c4 <HAL_CAN_MspInit+0x144>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6313      	str	r3, [r2, #48]	; 0x30
 8001076:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <HAL_CAN_MspInit+0x144>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8001082:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001086:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001088:	2302      	movs	r3, #2
 800108a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001090:	2303      	movs	r3, #3
 8001092:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8001094:	230b      	movs	r3, #11
 8001096:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109c:	4619      	mov	r1, r3
 800109e:	480c      	ldr	r0, [pc, #48]	; (80010d0 <HAL_CAN_MspInit+0x150>)
 80010a0:	f002 fc36 	bl	8003910 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN3_RX0_IRQn, 0, 0);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2100      	movs	r1, #0
 80010a8:	2069      	movs	r0, #105	; 0x69
 80010aa:	f002 fbfa 	bl	80038a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
 80010ae:	2069      	movs	r0, #105	; 0x69
 80010b0:	f002 fc13 	bl	80038da <HAL_NVIC_EnableIRQ>
}
 80010b4:	bf00      	nop
 80010b6:	3738      	adds	r7, #56	; 0x38
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40006400 	.word	0x40006400
 80010c0:	20000028 	.word	0x20000028
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40020c00 	.word	0x40020c00
 80010cc:	40003400 	.word	0x40003400
 80010d0:	40020000 	.word	0x40020000

080010d4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08e      	sub	sp, #56	; 0x38
 80010d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
 80010e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010ea:	4bb6      	ldr	r3, [pc, #728]	; (80013c4 <MX_GPIO_Init+0x2f0>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4ab5      	ldr	r2, [pc, #724]	; (80013c4 <MX_GPIO_Init+0x2f0>)
 80010f0:	f043 0310 	orr.w	r3, r3, #16
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4bb3      	ldr	r3, [pc, #716]	; (80013c4 <MX_GPIO_Init+0x2f0>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0310 	and.w	r3, r3, #16
 80010fe:	623b      	str	r3, [r7, #32]
 8001100:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001102:	4bb0      	ldr	r3, [pc, #704]	; (80013c4 <MX_GPIO_Init+0x2f0>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4aaf      	ldr	r2, [pc, #700]	; (80013c4 <MX_GPIO_Init+0x2f0>)
 8001108:	f043 0304 	orr.w	r3, r3, #4
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4bad      	ldr	r3, [pc, #692]	; (80013c4 <MX_GPIO_Init+0x2f0>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f003 0304 	and.w	r3, r3, #4
 8001116:	61fb      	str	r3, [r7, #28]
 8001118:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800111a:	4baa      	ldr	r3, [pc, #680]	; (80013c4 <MX_GPIO_Init+0x2f0>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4aa9      	ldr	r2, [pc, #676]	; (80013c4 <MX_GPIO_Init+0x2f0>)
 8001120:	f043 0320 	orr.w	r3, r3, #32
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4ba7      	ldr	r3, [pc, #668]	; (80013c4 <MX_GPIO_Init+0x2f0>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0320 	and.w	r3, r3, #32
 800112e:	61bb      	str	r3, [r7, #24]
 8001130:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001132:	4ba4      	ldr	r3, [pc, #656]	; (80013c4 <MX_GPIO_Init+0x2f0>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4aa3      	ldr	r2, [pc, #652]	; (80013c4 <MX_GPIO_Init+0x2f0>)
 8001138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4ba1      	ldr	r3, [pc, #644]	; (80013c4 <MX_GPIO_Init+0x2f0>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001146:	617b      	str	r3, [r7, #20]
 8001148:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800114a:	4b9e      	ldr	r3, [pc, #632]	; (80013c4 <MX_GPIO_Init+0x2f0>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a9d      	ldr	r2, [pc, #628]	; (80013c4 <MX_GPIO_Init+0x2f0>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b9b      	ldr	r3, [pc, #620]	; (80013c4 <MX_GPIO_Init+0x2f0>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	613b      	str	r3, [r7, #16]
 8001160:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001162:	4b98      	ldr	r3, [pc, #608]	; (80013c4 <MX_GPIO_Init+0x2f0>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a97      	ldr	r2, [pc, #604]	; (80013c4 <MX_GPIO_Init+0x2f0>)
 8001168:	f043 0302 	orr.w	r3, r3, #2
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b95      	ldr	r3, [pc, #596]	; (80013c4 <MX_GPIO_Init+0x2f0>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800117a:	4b92      	ldr	r3, [pc, #584]	; (80013c4 <MX_GPIO_Init+0x2f0>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a91      	ldr	r2, [pc, #580]	; (80013c4 <MX_GPIO_Init+0x2f0>)
 8001180:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b8f      	ldr	r3, [pc, #572]	; (80013c4 <MX_GPIO_Init+0x2f0>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001192:	4b8c      	ldr	r3, [pc, #560]	; (80013c4 <MX_GPIO_Init+0x2f0>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a8b      	ldr	r2, [pc, #556]	; (80013c4 <MX_GPIO_Init+0x2f0>)
 8001198:	f043 0308 	orr.w	r3, r3, #8
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b89      	ldr	r3, [pc, #548]	; (80013c4 <MX_GPIO_Init+0x2f0>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0308 	and.w	r3, r3, #8
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, INLET_RED_Pin|AMS_OK_Pin|ISOSPI_EN_Pin|FREIGABE_Pin
 80011aa:	2200      	movs	r2, #0
 80011ac:	f248 0187 	movw	r1, #32903	; 0x8087
 80011b0:	4885      	ldr	r0, [pc, #532]	; (80013c8 <MX_GPIO_Init+0x2f4>)
 80011b2:	f002 fd71 	bl	8003c98 <HAL_GPIO_WritePin>
                          |INLET_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POWER_ON_GPIO_Port, POWER_ON_Pin, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011bc:	4883      	ldr	r0, [pc, #524]	; (80013cc <MX_GPIO_Init+0x2f8>)
 80011be:	f002 fd6b 	bl	8003c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin, GPIO_PIN_RESET);
 80011c2:	2200      	movs	r2, #0
 80011c4:	f242 0102 	movw	r1, #8194	; 0x2002
 80011c8:	4881      	ldr	r0, [pc, #516]	; (80013d0 <MX_GPIO_Init+0x2fc>)
 80011ca:	f002 fd65 	bl	8003c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin, GPIO_PIN_RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	f240 6102 	movw	r1, #1538	; 0x602
 80011d4:	487f      	ldr	r0, [pc, #508]	; (80013d4 <MX_GPIO_Init+0x300>)
 80011d6:	f002 fd5f 	bl	8003c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	f244 0184 	movw	r1, #16516	; 0x4084
 80011e0:	487d      	ldr	r0, [pc, #500]	; (80013d8 <MX_GPIO_Init+0x304>)
 80011e2:	f002 fd59 	bl	8003c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 80011e6:	2200      	movs	r2, #0
 80011e8:	f24f 01bc 	movw	r1, #61628	; 0xf0bc
 80011ec:	487b      	ldr	r0, [pc, #492]	; (80013dc <MX_GPIO_Init+0x308>)
 80011ee:	f002 fd53 	bl	8003c98 <HAL_GPIO_WritePin>
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DIGITAL1_Pin|DIGITAL2_Pin, GPIO_PIN_RESET);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2118      	movs	r1, #24
 80011f6:	487a      	ldr	r0, [pc, #488]	; (80013e0 <MX_GPIO_Init+0x30c>)
 80011f8:	f002 fd4e 	bl	8003c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = INLET_RED_Pin|AMS_OK_Pin|ISOSPI_EN_Pin|FREIGABE_Pin
 80011fc:	f248 0387 	movw	r3, #32903	; 0x8087
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
                          |INLET_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001202:	2301      	movs	r3, #1
 8001204:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2300      	movs	r3, #0
 800120c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800120e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001212:	4619      	mov	r1, r3
 8001214:	486c      	ldr	r0, [pc, #432]	; (80013c8 <MX_GPIO_Init+0x2f4>)
 8001216:	f002 fb7b 	bl	8003910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SENSE_SDC_HVIL_Pin|SENSE_SDC_BTB_Pin|SENSE_SDC_MOTOR_Pin|IMD_OK_IN_Pin;
 800121a:	f44f 739c 	mov.w	r3, #312	; 0x138
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001220:	2300      	movs	r3, #0
 8001222:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001228:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800122c:	4619      	mov	r1, r3
 800122e:	4866      	ldr	r0, [pc, #408]	; (80013c8 <MX_GPIO_Init+0x2f4>)
 8001230:	f002 fb6e 	bl	8003910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 8001234:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800123a:	2303      	movs	r3, #3
 800123c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001242:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001246:	4619      	mov	r1, r3
 8001248:	485f      	ldr	r0, [pc, #380]	; (80013c8 <MX_GPIO_Init+0x2f4>)
 800124a:	f002 fb61 	bl	8003910 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 800124e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001254:	2301      	movs	r3, #1
 8001256:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125c:	2300      	movs	r3, #0
 800125e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 8001260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001264:	4619      	mov	r1, r3
 8001266:	4859      	ldr	r0, [pc, #356]	; (80013cc <MX_GPIO_Init+0x2f8>)
 8001268:	f002 fb52 	bl	8003910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PC3 PC4 PC5
                           PCPin PC7 PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 800126c:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |SD_SW_Pin|GPIO_PIN_7|SD_D0_Pin|SD_D1_Pin
                          |SD_D2_Pin|SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001272:	2303      	movs	r3, #3
 8001274:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800127a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800127e:	4619      	mov	r1, r3
 8001280:	4852      	ldr	r0, [pc, #328]	; (80013cc <MX_GPIO_Init+0x2f8>)
 8001282:	f002 fb45 	bl	8003910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF3 PF4 PF5
                           PFPin PFPin PFPin PFPin
                           PF10 PF11 PF12 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001286:	f645 73f9 	movw	r3, #24569	; 0x5ff9
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPI_CS_Pin|SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800128c:	2303      	movs	r3, #3
 800128e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001294:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001298:	4619      	mov	r1, r3
 800129a:	484d      	ldr	r0, [pc, #308]	; (80013d0 <MX_GPIO_Init+0x2fc>)
 800129c:	f002 fb38 	bl	8003910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin;
 80012a0:	f242 0302 	movw	r3, #8194	; 0x2002
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a6:	2301      	movs	r3, #1
 80012a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ae:	2300      	movs	r3, #0
 80012b0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b6:	4619      	mov	r1, r3
 80012b8:	4845      	ldr	r0, [pc, #276]	; (80013d0 <MX_GPIO_Init+0x2fc>)
 80012ba:	f002 fb29 	bl	8003910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OVC_SENSE_Pin|PRECHARGE_IN_Pin;
 80012be:	f248 0304 	movw	r3, #32772	; 0x8004
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c4:	2300      	movs	r3, #0
 80012c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d0:	4619      	mov	r1, r3
 80012d2:	483f      	ldr	r0, [pc, #252]	; (80013d0 <MX_GPIO_Init+0x2fc>)
 80012d4:	f002 fb1c 	bl	8003910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|HW_WAKE_Pin|BUTTON2_Pin|BUTTON1_Pin;
 80012d8:	f641 0305 	movw	r3, #6149	; 0x1805
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012de:	2300      	movs	r3, #0
 80012e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ea:	4619      	mov	r1, r3
 80012ec:	4839      	ldr	r0, [pc, #228]	; (80013d4 <MX_GPIO_Init+0x300>)
 80012ee:	f002 fb0f 	bl	8003910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin;
 80012f2:	f240 6302 	movw	r3, #1538	; 0x602
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f8:	2301      	movs	r3, #1
 80012fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	2300      	movs	r3, #0
 8001302:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001308:	4619      	mov	r1, r3
 800130a:	4832      	ldr	r0, [pc, #200]	; (80013d4 <MX_GPIO_Init+0x300>)
 800130c:	f002 fb00 	bl	8003910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB15 PB4
                           PB5 PB6 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8001310:	f64b 7373 	movw	r3, #49011	; 0xbf73
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|I2C_SCL_Pin|I2C_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001316:	2303      	movs	r3, #3
 8001318:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001322:	4619      	mov	r1, r3
 8001324:	482c      	ldr	r0, [pc, #176]	; (80013d8 <MX_GPIO_Init+0x304>)
 8001326:	f002 faf3 	bl	8003910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin;
 800132a:	f244 0384 	movw	r3, #16516	; 0x4084
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001330:	2301      	movs	r3, #1
 8001332:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001338:	2300      	movs	r3, #0
 800133a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001340:	4619      	mov	r1, r3
 8001342:	4825      	ldr	r0, [pc, #148]	; (80013d8 <MX_GPIO_Init+0x304>)
 8001344:	f002 fae4 	bl	8003910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG6 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_8;
 8001348:	f240 1343 	movw	r3, #323	; 0x143
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800134e:	2303      	movs	r3, #3
 8001350:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135a:	4619      	mov	r1, r3
 800135c:	481f      	ldr	r0, [pc, #124]	; (80013dc <MX_GPIO_Init+0x308>)
 800135e:	f002 fad7 	bl	8003910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|SD_CMD_Pin;
 8001362:	f240 7304 	movw	r3, #1796	; 0x704
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001368:	2303      	movs	r3, #3
 800136a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001374:	4619      	mov	r1, r3
 8001376:	481a      	ldr	r0, [pc, #104]	; (80013e0 <MX_GPIO_Init+0x30c>)
 8001378:	f002 faca 	bl	8003910 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KL15_Pin;
 800137c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001382:	2300      	movs	r3, #0
 8001384:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KL15_GPIO_Port, &GPIO_InitStruct);
 800138a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138e:	4619      	mov	r1, r3
 8001390:	4813      	ldr	r0, [pc, #76]	; (80013e0 <MX_GPIO_Init+0x30c>)
 8001392:	f002 fabd 	bl	8003910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 8001396:	f24f 03bc 	movw	r3, #61628	; 0xf0bc
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139c:	2301      	movs	r3, #1
 800139e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a4:	2300      	movs	r3, #0
 80013a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ac:	4619      	mov	r1, r3
 80013ae:	480b      	ldr	r0, [pc, #44]	; (80013dc <MX_GPIO_Init+0x308>)
 80013b0:	f002 faae 	bl	8003910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|DIGITAL2_Pin;
 80013b4:	2318      	movs	r3, #24
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b8:	2301      	movs	r3, #1
 80013ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c0:	2300      	movs	r3, #0
 80013c2:	e00f      	b.n	80013e4 <MX_GPIO_Init+0x310>
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40021000 	.word	0x40021000
 80013cc:	40020800 	.word	0x40020800
 80013d0:	40021400 	.word	0x40021400
 80013d4:	40020000 	.word	0x40020000
 80013d8:	40020400 	.word	0x40020400
 80013dc:	40021800 	.word	0x40021800
 80013e0:	40020c00 	.word	0x40020c00
 80013e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ea:	4619      	mov	r1, r3
 80013ec:	4803      	ldr	r0, [pc, #12]	; (80013fc <MX_GPIO_Init+0x328>)
 80013ee:	f002 fa8f 	bl	8003910 <HAL_GPIO_Init>

}
 80013f2:	bf00      	nop
 80013f4:	3738      	adds	r7, #56	; 0x38
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40020c00 	.word	0x40020c00

08001400 <calculateMovingAverage>:
static uint16_t getDifference(uint16_t a, uint16_t b);

// Gleitenden Mittelwert berechnen, sehr Speicher arm
//----------------------------------------------------------------------
static int calculateMovingAverage(int oldValue, int newValue, int n)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
	return (oldValue + ((newValue - oldValue) / n));						// MovingAverage Calculation x_n  = x_{n-1} + ((x_n+x_{n-1})/n)
 800140c:	68ba      	ldr	r2, [r7, #8]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	1ad2      	subs	r2, r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	fb92 f2f3 	sdiv	r2, r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4413      	add	r3, r2
}
 800141c:	4618      	mov	r0, r3
 800141e:	3714      	adds	r7, #20
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001428:	b5b0      	push	{r4, r5, r7, lr}
 800142a:	b0a2      	sub	sp, #136	; 0x88
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800142e:	f000 ff92 	bl	8002356 <HAL_Init>

  /* USER CODE BEGIN Init */
	// Definiere Variablen fuer Main-Funktion
	uint16_t dutyCycle, timerPeriod, frequency, count = 0, R_IMD;
 8001432:	2300      	movs	r3, #0
 8001434:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	uint8_t start_flag = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	// Definiere Variablen fuer Main-Funktion
	uint8_t TxData[8], OutData[4], InData[3], status;
  	CAN_FilterTypeDef sFilterConfig;

  	// Erstelle Can-Nachrichten
  	CAN_TxHeaderTypeDef TxMessage = {0x124, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 800143e:	4b9b      	ldr	r3, [pc, #620]	; (80016ac <main+0x284>)
 8001440:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001444:	461d      	mov	r5, r3
 8001446:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001448:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800144a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800144e:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxOutput = {BMS_CAN_DIGITAL_OUT, 0, CAN_RTR_DATA, CAN_ID_STD, 4, DISABLE};
 8001452:	4b97      	ldr	r3, [pc, #604]	; (80016b0 <main+0x288>)
 8001454:	f107 0418 	add.w	r4, r7, #24
 8001458:	461d      	mov	r5, r3
 800145a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800145c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800145e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001462:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxInput = {BMS_CAN_DIGITAL_IN, 0, CAN_RTR_DATA, CAN_ID_STD, 3, DISABLE};
 8001466:	4b93      	ldr	r3, [pc, #588]	; (80016b4 <main+0x28c>)
 8001468:	463c      	mov	r4, r7
 800146a:	461d      	mov	r5, r3
 800146c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800146e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001470:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001474:	e884 0003 	stmia.w	r4, {r0, r1}
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001478:	f000 fa54 	bl	8001924 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800147c:	f7ff fe2a 	bl	80010d4 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001480:	f7ff fd12 	bl	8000ea8 <MX_CAN1_Init>
  MX_SPI4_Init();
 8001484:	f000 fb66 	bl	8001b54 <MX_SPI4_Init>
  MX_USART2_UART_Init();
 8001488:	f000 feae 	bl	80021e8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800148c:	f7ff fc32 	bl	8000cf4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001490:	f000 fcb0 	bl	8001df4 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001494:	f000 fd34 	bl	8001f00 <MX_TIM4_Init>
  MX_SPI1_Init();
 8001498:	f000 fb1e 	bl	8001ad8 <MX_SPI1_Init>
  MX_CAN3_Init();
 800149c:	f7ff fd3a 	bl	8000f14 <MX_CAN3_Init>
  MX_TIM6_Init();
 80014a0:	f000 fdaa 	bl	8001ff8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

	/* Schreibe Resetquelle auf die Konsole */
#ifdef DEBUG
	printResetSource(readResetSource());
 80014a4:	f7ff fa42 	bl	800092c <readResetSource>
 80014a8:	4603      	mov	r3, r0
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fa90 	bl	80009d0 <printResetSource>

	/* Teste serielle Schnittstelle*/
	#define TEST_STRING_UART		"\nUART2 Transmitting in polling mode, Hello Diveturtle93!\n"
	uartTransmit(TEST_STRING_UART, sizeof(TEST_STRING_UART));
 80014b0:	213a      	movs	r1, #58	; 0x3a
 80014b2:	4881      	ldr	r0, [pc, #516]	; (80016b8 <main+0x290>)
 80014b4:	f7ff f844 	bl	8000540 <uartTransmit>

  	// Sammel Systeminformationen
  	collectSystemInfo();
 80014b8:	f7ff fa0e 	bl	80008d8 <collectSystemInfo>
#endif

	timerPeriod = (HAL_RCC_GetPCLK2Freq() / htim1.Init.Prescaler);
 80014bc:	f003 f8c6 	bl	800464c <HAL_RCC_GetPCLK2Freq>
 80014c0:	4602      	mov	r2, r0
 80014c2:	4b7e      	ldr	r3, [pc, #504]	; (80016bc <main+0x294>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ca:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
  	// Start timer
	if (HAL_TIM_Base_Start_IT(&htim1) != HAL_OK);
 80014ce:	487b      	ldr	r0, [pc, #492]	; (80016bc <main+0x294>)
 80014d0:	f003 fdfa 	bl	80050c8 <HAL_TIM_Base_Start_IT>
	if (HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1) != HAL_OK);
 80014d4:	2100      	movs	r1, #0
 80014d6:	4879      	ldr	r0, [pc, #484]	; (80016bc <main+0x294>)
 80014d8:	f003 ff1c 	bl	8005314 <HAL_TIM_IC_Start_IT>
	if (HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2) != HAL_OK);
 80014dc:	2104      	movs	r1, #4
 80014de:	4877      	ldr	r0, [pc, #476]	; (80016bc <main+0x294>)
 80014e0:	f003 ff18 	bl	8005314 <HAL_TIM_IC_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim6);
 80014e4:	4876      	ldr	r0, [pc, #472]	; (80016c0 <main+0x298>)
 80014e6:	f003 fdef 	bl	80050c8 <HAL_TIM_Base_Start_IT>

	// Leds Testen
	testPCB_Leds();
 80014ea:	f7ff fbc5 	bl	8000c78 <testPCB_Leds>
	//testInletLeds();
	//testCockpitLeds();

	// Lese alle Eingaenge
	readall_inputs();
 80014ee:	f7ff fb0f 	bl	8000b10 <readall_inputs>

  	// Starte CAN Bus
  	if((status = HAL_CAN_Start(&hcan3)) != HAL_OK)
 80014f2:	4874      	ldr	r0, [pc, #464]	; (80016c4 <main+0x29c>)
 80014f4:	f001 fc74 	bl	8002de0 <HAL_CAN_Start>
 80014f8:	4603      	mov	r3, r0
 80014fa:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 80014fe:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8001502:	2b00      	cmp	r3, #0
 8001504:	d006      	beq.n	8001514 <main+0xec>
  	{
  		/* Start Error */
  		hal_error(status);
 8001506:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff fad0 	bl	8000ab0 <hal_error>
  		Error_Handler();
 8001510:	f000 fada 	bl	8001ac8 <Error_Handler>
  	}
  	uartTransmit("CAN START\n", 10);
 8001514:	210a      	movs	r1, #10
 8001516:	486c      	ldr	r0, [pc, #432]	; (80016c8 <main+0x2a0>)
 8001518:	f7ff f812 	bl	8000540 <uartTransmit>

  	// Aktiviere Interrupts für CAN Bus
  	if((status = HAL_CAN_ActivateNotification(&hcan3, CAN_IT_RX_FIFO0_MSG_PENDING)) != HAL_OK)
 800151c:	2102      	movs	r1, #2
 800151e:	4869      	ldr	r0, [pc, #420]	; (80016c4 <main+0x29c>)
 8001520:	f001 fe8f 	bl	8003242 <HAL_CAN_ActivateNotification>
 8001524:	4603      	mov	r3, r0
 8001526:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800152a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800152e:	2b00      	cmp	r3, #0
 8001530:	d006      	beq.n	8001540 <main+0x118>
  	{
  		/* Notification Error */
  		hal_error(status);
 8001532:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff faba 	bl	8000ab0 <hal_error>
  		Error_Handler();
 800153c:	f000 fac4 	bl	8001ac8 <Error_Handler>
  	}
  	uartTransmit("Send Message\n", 13);
 8001540:	210d      	movs	r1, #13
 8001542:	4862      	ldr	r0, [pc, #392]	; (80016cc <main+0x2a4>)
 8001544:	f7fe fffc 	bl	8000540 <uartTransmit>

  	// Filter Bank initialisieren um Daten zu empfangen
    sFilterConfig.FilterBank = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	65fb      	str	r3, [r7, #92]	; 0x5c
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800154c:	2300      	movs	r3, #0
 800154e:	663b      	str	r3, [r7, #96]	; 0x60
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001550:	2301      	movs	r3, #1
 8001552:	667b      	str	r3, [r7, #100]	; 0x64
    sFilterConfig.FilterIdHigh = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	64bb      	str	r3, [r7, #72]	; 0x48
    sFilterConfig.FilterIdLow = 0;
 8001558:	2300      	movs	r3, #0
 800155a:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFilterConfig.FilterMaskIdHigh = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	653b      	str	r3, [r7, #80]	; 0x50
    sFilterConfig.FilterMaskIdLow = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	657b      	str	r3, [r7, #84]	; 0x54
    sFilterConfig.FilterFIFOAssignment = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	65bb      	str	r3, [r7, #88]	; 0x58
    sFilterConfig.FilterActivation = ENABLE;
 8001568:	2301      	movs	r3, #1
 800156a:	66bb      	str	r3, [r7, #104]	; 0x68

    // Filter Bank schreiben
    if((status = HAL_CAN_ConfigFilter(&hcan3, &sFilterConfig)) != HAL_OK)
 800156c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001570:	4619      	mov	r1, r3
 8001572:	4854      	ldr	r0, [pc, #336]	; (80016c4 <main+0x29c>)
 8001574:	f001 fb48 	bl	8002c08 <HAL_CAN_ConfigFilter>
 8001578:	4603      	mov	r3, r0
 800157a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 800157e:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8001582:	2b00      	cmp	r3, #0
 8001584:	d006      	beq.n	8001594 <main+0x16c>
    {
    	/* Filter configuration Error */
  		hal_error(status);
 8001586:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fa90 	bl	8000ab0 <hal_error>
  		Error_Handler();
 8001590:	f000 fa9a 	bl	8001ac8 <Error_Handler>
    }

    // Test CAN Nachricht beschreiben
    for (uint8_t j = 0; j < 8; j++)
 8001594:	2300      	movs	r3, #0
 8001596:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
 800159a:	e00f      	b.n	80015bc <main+0x194>
    {
    	TxData[j] = (j + 1);
 800159c:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80015a0:	f897 2084 	ldrb.w	r2, [r7, #132]	; 0x84
 80015a4:	3201      	adds	r2, #1
 80015a6:	b2d2      	uxtb	r2, r2
 80015a8:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80015ac:	440b      	add	r3, r1
 80015ae:	f803 2c10 	strb.w	r2, [r3, #-16]
    for (uint8_t j = 0; j < 8; j++)
 80015b2:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80015b6:	3301      	adds	r3, #1
 80015b8:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
 80015bc:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80015c0:	2b07      	cmp	r3, #7
 80015c2:	d9eb      	bls.n	800159c <main+0x174>
    }

    uartTransmitNumber(sdc_in.sdcinput, 2);
 80015c4:	4b42      	ldr	r3, [pc, #264]	; (80016d0 <main+0x2a8>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2102      	movs	r1, #2
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7fe ffcc 	bl	8000568 <uartTransmitNumber>

	if ((sdc_in.sdcinput & 0x0E) && (sdc_in.IMD_OK_IN != 1))					// SDC OK; Motor, BTB, IMD und HVIL OK
 80015d0:	4b3f      	ldr	r3, [pc, #252]	; (80016d0 <main+0x2a8>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	f003 030e 	and.w	r3, r3, #14
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f000 808b 	beq.w	80016f4 <main+0x2cc>
 80015de:	4b3c      	ldr	r3, [pc, #240]	; (80016d0 <main+0x2a8>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f040 8083 	bne.w	80016f4 <main+0x2cc>
	{
		#define SDC_STRING_ERROR			"\nSDC ist nicht geschlossen"
		uartTransmit(SDC_STRING_ERROR, sizeof(SDC_STRING_ERROR));
 80015ee:	211b      	movs	r1, #27
 80015f0:	4838      	ldr	r0, [pc, #224]	; (80016d4 <main+0x2ac>)
 80015f2:	f7fe ffa5 	bl	8000540 <uartTransmit>

		// LEDs setzen bei SDC Fehler
		leuchten_out.GreenLed = 0;
 80015f6:	4a38      	ldr	r2, [pc, #224]	; (80016d8 <main+0x2b0>)
 80015f8:	7813      	ldrb	r3, [r2, #0]
 80015fa:	f36f 1386 	bfc	r3, #6, #1
 80015fe:	7013      	strb	r3, [r2, #0]
		leuchten_out.RedLed = 1;
 8001600:	4a35      	ldr	r2, [pc, #212]	; (80016d8 <main+0x2b0>)
 8001602:	7813      	ldrb	r3, [r2, #0]
 8001604:	f043 0320 	orr.w	r3, r3, #32
 8001608:	7013      	strb	r3, [r2, #0]
		leuchten_out.AkkuErrorLed = 0;
 800160a:	4a33      	ldr	r2, [pc, #204]	; (80016d8 <main+0x2b0>)
 800160c:	7813      	ldrb	r3, [r2, #0]
 800160e:	f36f 0382 	bfc	r3, #2, #1
 8001612:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);
 8001614:	4b30      	ldr	r3, [pc, #192]	; (80016d8 <main+0x2b0>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800161c:	b2db      	uxtb	r3, r3
 800161e:	461a      	mov	r2, r3
 8001620:	2104      	movs	r1, #4
 8001622:	482e      	ldr	r0, [pc, #184]	; (80016dc <main+0x2b4>)
 8001624:	f002 fb38 	bl	8003c98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);
 8001628:	4b2b      	ldr	r3, [pc, #172]	; (80016d8 <main+0x2b0>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001630:	b2db      	uxtb	r3, r3
 8001632:	461a      	mov	r2, r3
 8001634:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001638:	4828      	ldr	r0, [pc, #160]	; (80016dc <main+0x2b4>)
 800163a:	f002 fb2d 	bl	8003c98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AKKU_LED_GPIO_Port, AKKU_LED_Pin, leuchten_out.AkkuErrorLed);
 800163e:	4b26      	ldr	r3, [pc, #152]	; (80016d8 <main+0x2b0>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001646:	b2db      	uxtb	r3, r3
 8001648:	461a      	mov	r2, r3
 800164a:	2180      	movs	r1, #128	; 0x80
 800164c:	4824      	ldr	r0, [pc, #144]	; (80016e0 <main+0x2b8>)
 800164e:	f002 fb23 	bl	8003c98 <HAL_GPIO_WritePin>

		// Ausgabe welcher Fehler vorhanden
		// Motorsteuergeraet Fehler
		if((sdc_in.MotorSDC == 1))
 8001652:	4b1f      	ldr	r3, [pc, #124]	; (80016d0 <main+0x2a8>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	f003 0304 	and.w	r3, r3, #4
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b00      	cmp	r3, #0
 800165e:	d003      	beq.n	8001668 <main+0x240>
		{
			#define SDC_STRING_MOTOR		"\nSDC Motor hat einen Fehler und ist offen"
			uartTransmit(SDC_STRING_MOTOR, sizeof(SDC_STRING_MOTOR));
 8001660:	212a      	movs	r1, #42	; 0x2a
 8001662:	4820      	ldr	r0, [pc, #128]	; (80016e4 <main+0x2bc>)
 8001664:	f7fe ff6c 	bl	8000540 <uartTransmit>
		}

		// BamoCar Fehler
		if ((sdc_in.BTB_SDC == 1))
 8001668:	4b19      	ldr	r3, [pc, #100]	; (80016d0 <main+0x2a8>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	f003 0308 	and.w	r3, r3, #8
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <main+0x256>
		{
			#define SDC_STRING_BTB			"\nSDC BTB hat einen Fehler und ist offen"
			uartTransmit(SDC_STRING_BTB, sizeof(SDC_STRING_BTB));
 8001676:	2128      	movs	r1, #40	; 0x28
 8001678:	481b      	ldr	r0, [pc, #108]	; (80016e8 <main+0x2c0>)
 800167a:	f7fe ff61 	bl	8000540 <uartTransmit>
		}

		// HVIL Fehler
		if ((sdc_in.HVIL == 1))
 800167e:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <main+0x2a8>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b00      	cmp	r3, #0
 800168a:	d003      	beq.n	8001694 <main+0x26c>
		{
			#define SDC_STRING_HVIL			"\nSDC HVIL ist nicht geschlossen"
			uartTransmit(SDC_STRING_HVIL, sizeof(SDC_STRING_HVIL));
 800168c:	2120      	movs	r1, #32
 800168e:	4817      	ldr	r0, [pc, #92]	; (80016ec <main+0x2c4>)
 8001690:	f7fe ff56 	bl	8000540 <uartTransmit>
		}

		// IMD Fehler
		if (!(sdc_in.IMD_OK_IN == 1))
 8001694:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <main+0x2a8>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d14a      	bne.n	8001738 <main+0x310>
		{
			#define SDC_STRING_IMD			"\nSDC IMD hat einen Fehler"
			uartTransmit(SDC_STRING_IMD, sizeof(SDC_STRING_IMD));
 80016a2:	211a      	movs	r1, #26
 80016a4:	4812      	ldr	r0, [pc, #72]	; (80016f0 <main+0x2c8>)
 80016a6:	f7fe ff4b 	bl	8000540 <uartTransmit>
		if (!(sdc_in.IMD_OK_IN == 1))
 80016aa:	e045      	b.n	8001738 <main+0x310>
 80016ac:	08007814 	.word	0x08007814
 80016b0:	0800782c 	.word	0x0800782c
 80016b4:	08007844 	.word	0x08007844
 80016b8:	080076f8 	.word	0x080076f8
 80016bc:	20000274 	.word	0x20000274
 80016c0:	20000228 	.word	0x20000228
 80016c4:	20000098 	.word	0x20000098
 80016c8:	08007734 	.word	0x08007734
 80016cc:	08007740 	.word	0x08007740
 80016d0:	2000003c 	.word	0x2000003c
 80016d4:	08007750 	.word	0x08007750
 80016d8:	2000004c 	.word	0x2000004c
 80016dc:	40020400 	.word	0x40020400
 80016e0:	40021800 	.word	0x40021800
 80016e4:	0800776c 	.word	0x0800776c
 80016e8:	08007798 	.word	0x08007798
 80016ec:	080077c0 	.word	0x080077c0
 80016f0:	080077e0 	.word	0x080077e0
		}
	}
	else
	{
		// Keine Fehler, LEDs fuer OK setzen
		system_out.AmsOK = 1;
 80016f4:	4a7b      	ldr	r2, [pc, #492]	; (80018e4 <main+0x4bc>)
 80016f6:	7813      	ldrb	r3, [r2, #0]
 80016f8:	f043 0304 	orr.w	r3, r3, #4
 80016fc:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin, system_out.AmsOK);
 80016fe:	4b79      	ldr	r3, [pc, #484]	; (80018e4 <main+0x4bc>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001706:	b2db      	uxtb	r3, r3
 8001708:	461a      	mov	r2, r3
 800170a:	2180      	movs	r1, #128	; 0x80
 800170c:	4876      	ldr	r0, [pc, #472]	; (80018e8 <main+0x4c0>)
 800170e:	f002 fac3 	bl	8003c98 <HAL_GPIO_WritePin>
		leuchten_out.GreenLed = 1;
 8001712:	4a76      	ldr	r2, [pc, #472]	; (80018ec <main+0x4c4>)
 8001714:	7813      	ldrb	r3, [r2, #0]
 8001716:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800171a:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);
 800171c:	4b73      	ldr	r3, [pc, #460]	; (80018ec <main+0x4c4>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001724:	b2db      	uxtb	r3, r3
 8001726:	461a      	mov	r2, r3
 8001728:	2104      	movs	r1, #4
 800172a:	4871      	ldr	r0, [pc, #452]	; (80018f0 <main+0x4c8>)
 800172c:	f002 fab4 	bl	8003c98 <HAL_GPIO_WritePin>

		// Ausgabe SDC geschlossen
		#define SDC_STRING_OK				"\nSDC ist geschlossen"
		uartTransmit(SDC_STRING_OK, sizeof(SDC_STRING_OK));
 8001730:	2115      	movs	r1, #21
 8001732:	4870      	ldr	r0, [pc, #448]	; (80018f4 <main+0x4cc>)
 8001734:	f7fe ff04 	bl	8000540 <uartTransmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		// Task wird jede Millisekunde ausgefuehrt
		if (millisekunden_flag_1 == 1)
 8001738:	4b6f      	ldr	r3, [pc, #444]	; (80018f8 <main+0x4d0>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b01      	cmp	r3, #1
 8001740:	d10a      	bne.n	8001758 <main+0x330>
		{
			count++;													// Zaehler count hochzaehlen
 8001742:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001746:	3301      	adds	r3, #1
 8001748:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
			millisekunden_flag_1 = 0;									// Setze Millisekunden-Flag zurueck
 800174c:	4b6a      	ldr	r3, [pc, #424]	; (80018f8 <main+0x4d0>)
 800174e:	2200      	movs	r2, #0
 8001750:	701a      	strb	r2, [r3, #0]

			// Setzen des Start Flags,  damit Tasks nur einmal pro ms aufgerufen werden kann
			start_flag = 1;												// Setze Start Flag
 8001752:	2301      	movs	r3, #1
 8001754:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		}

		// Task wird alle 200 Millisekunden ausgefuehrt
		if (((count % 200) == 0) && (start_flag == 1))
 8001758:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800175c:	4a67      	ldr	r2, [pc, #412]	; (80018fc <main+0x4d4>)
 800175e:	fba2 1203 	umull	r1, r2, r2, r3
 8001762:	0992      	lsrs	r2, r2, #6
 8001764:	21c8      	movs	r1, #200	; 0xc8
 8001766:	fb01 f202 	mul.w	r2, r1, r2
 800176a:	1a9b      	subs	r3, r3, r2
 800176c:	b29b      	uxth	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d141      	bne.n	80017f6 <main+0x3ce>
 8001772:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8001776:	2b01      	cmp	r3, #1
 8001778:	d13d      	bne.n	80017f6 <main+0x3ce>
		{
			// Lese Eingaenge
			readall_inputs();
 800177a:	f7ff f9c9 	bl	8000b10 <readall_inputs>

			// Daten fuer Ausgaenge zusammenfuehren
			OutData[0] = system_out.systemoutput;
 800177e:	4b59      	ldr	r3, [pc, #356]	; (80018e4 <main+0x4bc>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
			OutData[1] = highcurrent_out.high_out;
 8001786:	4b5e      	ldr	r3, [pc, #376]	; (8001900 <main+0x4d8>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
			OutData[2] = leuchten_out.ledoutput;
 800178e:	4b57      	ldr	r3, [pc, #348]	; (80018ec <main+0x4c4>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
			OutData[3] = komfort_out.komfortoutput;
 8001796:	4b5b      	ldr	r3, [pc, #364]	; (8001904 <main+0x4dc>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

			// Sende Nachricht digitale Ausgaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxOutput, OutData, (uint32_t *)CAN_TX_MAILBOX0);
 800179e:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80017a2:	f107 0118 	add.w	r1, r7, #24
 80017a6:	2301      	movs	r3, #1
 80017a8:	4857      	ldr	r0, [pc, #348]	; (8001908 <main+0x4e0>)
 80017aa:	f001 fb5d 	bl	8002e68 <HAL_CAN_AddTxMessage>
 80017ae:	4603      	mov	r3, r0
 80017b0:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81

			// Daten fuer Eingaenge zusammenfuehren
			InData[0] = system_in.systeminput;
 80017b4:	4b55      	ldr	r3, [pc, #340]	; (800190c <main+0x4e4>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
			InData[1] = sdc_in.sdcinput;
 80017bc:	4b54      	ldr	r3, [pc, #336]	; (8001910 <main+0x4e8>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
			InData[2] = komfort_in.komfortinput;
 80017c4:	4b53      	ldr	r3, [pc, #332]	; (8001914 <main+0x4ec>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72

			// Sende Nachricht digitale Eingaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxInput, InData, (uint32_t *)CAN_TX_MAILBOX0);
 80017cc:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80017d0:	4639      	mov	r1, r7
 80017d2:	2301      	movs	r3, #1
 80017d4:	484c      	ldr	r0, [pc, #304]	; (8001908 <main+0x4e0>)
 80017d6:	f001 fb47 	bl	8002e68 <HAL_CAN_AddTxMessage>
 80017da:	4603      	mov	r3, r0
 80017dc:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81

			// Sende Nachricht digitale Eingaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxMessage, TxData, (uint32_t *)CAN_TX_MAILBOX0);
 80017e0:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80017e4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80017e8:	2301      	movs	r3, #1
 80017ea:	4847      	ldr	r0, [pc, #284]	; (8001908 <main+0x4e0>)
 80017ec:	f001 fb3c 	bl	8002e68 <HAL_CAN_AddTxMessage>
 80017f0:	4603      	mov	r3, r0
 80017f2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
		}

		// Task wird alle 400 Millisekunden ausgefuehrt
		if (((count % 400) == 0) && (start_flag == 1))
 80017f6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80017fa:	4a40      	ldr	r2, [pc, #256]	; (80018fc <main+0x4d4>)
 80017fc:	fba2 1203 	umull	r1, r2, r2, r3
 8001800:	09d2      	lsrs	r2, r2, #7
 8001802:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001806:	fb01 f202 	mul.w	r2, r1, r2
 800180a:	1a9b      	subs	r3, r3, r2
 800180c:	b29b      	uxth	r3, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	d164      	bne.n	80018dc <main+0x4b4>
 8001812:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8001816:	2b01      	cmp	r3, #1
 8001818:	d160      	bne.n	80018dc <main+0x4b4>
		{
			if(can_change == 1)
 800181a:	4b3f      	ldr	r3, [pc, #252]	; (8001918 <main+0x4f0>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2b01      	cmp	r3, #1
 8001822:	d158      	bne.n	80018d6 <main+0x4ae>
			{

				if((RxMessage.StdId == 0x111) && ((RxData[0] & 0x01) == 1))
 8001824:	4b3d      	ldr	r3, [pc, #244]	; (800191c <main+0x4f4>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f240 1211 	movw	r2, #273	; 0x111
 800182c:	4293      	cmp	r3, r2
 800182e:	d124      	bne.n	800187a <main+0x452>
 8001830:	4b3b      	ldr	r3, [pc, #236]	; (8001920 <main+0x4f8>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	2b00      	cmp	r3, #0
 800183a:	d01e      	beq.n	800187a <main+0x452>
				{
					highcurrent_out.IsoEN = 1;
 800183c:	4a30      	ldr	r2, [pc, #192]	; (8001900 <main+0x4d8>)
 800183e:	7813      	ldrb	r3, [r2, #0]
 8001840:	f043 0320 	orr.w	r3, r3, #32
 8001844:	7013      	strb	r3, [r2, #0]
					HAL_GPIO_WritePin(ISOSPI_EN_GPIO_Port, ISOSPI_EN_Pin, highcurrent_out.IsoEN);
 8001846:	4b2e      	ldr	r3, [pc, #184]	; (8001900 <main+0x4d8>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800184e:	b2db      	uxtb	r3, r3
 8001850:	461a      	mov	r2, r3
 8001852:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001856:	4824      	ldr	r0, [pc, #144]	; (80018e8 <main+0x4c0>)
 8001858:	f002 fa1e 	bl	8003c98 <HAL_GPIO_WritePin>
					leuchten_out.BlueLed = 1;
 800185c:	4a23      	ldr	r2, [pc, #140]	; (80018ec <main+0x4c4>)
 800185e:	7813      	ldrb	r3, [r2, #0]
 8001860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001864:	7013      	strb	r3, [r2, #0]
					HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, leuchten_out.BlueLed);
 8001866:	4b21      	ldr	r3, [pc, #132]	; (80018ec <main+0x4c4>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800186e:	b2db      	uxtb	r3, r3
 8001870:	461a      	mov	r2, r3
 8001872:	2180      	movs	r1, #128	; 0x80
 8001874:	481e      	ldr	r0, [pc, #120]	; (80018f0 <main+0x4c8>)
 8001876:	f002 fa0f 	bl	8003c98 <HAL_GPIO_WritePin>
				}

				if((RxMessage.StdId == 0x111) && ((RxData[0] & 0x01) != 1))
 800187a:	4b28      	ldr	r3, [pc, #160]	; (800191c <main+0x4f4>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f240 1211 	movw	r2, #273	; 0x111
 8001882:	4293      	cmp	r3, r2
 8001884:	d124      	bne.n	80018d0 <main+0x4a8>
 8001886:	4b26      	ldr	r3, [pc, #152]	; (8001920 <main+0x4f8>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	2b00      	cmp	r3, #0
 8001890:	d11e      	bne.n	80018d0 <main+0x4a8>
				{
					highcurrent_out.IsoEN = 0;
 8001892:	4a1b      	ldr	r2, [pc, #108]	; (8001900 <main+0x4d8>)
 8001894:	7813      	ldrb	r3, [r2, #0]
 8001896:	f36f 1345 	bfc	r3, #5, #1
 800189a:	7013      	strb	r3, [r2, #0]
					HAL_GPIO_WritePin(ISOSPI_EN_GPIO_Port, ISOSPI_EN_Pin, highcurrent_out.IsoEN);
 800189c:	4b18      	ldr	r3, [pc, #96]	; (8001900 <main+0x4d8>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	461a      	mov	r2, r3
 80018a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018ac:	480e      	ldr	r0, [pc, #56]	; (80018e8 <main+0x4c0>)
 80018ae:	f002 f9f3 	bl	8003c98 <HAL_GPIO_WritePin>
					leuchten_out.BlueLed = 0;
 80018b2:	4a0e      	ldr	r2, [pc, #56]	; (80018ec <main+0x4c4>)
 80018b4:	7813      	ldrb	r3, [r2, #0]
 80018b6:	f36f 13c7 	bfc	r3, #7, #1
 80018ba:	7013      	strb	r3, [r2, #0]
					HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, leuchten_out.BlueLed);
 80018bc:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <main+0x4c4>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	461a      	mov	r2, r3
 80018c8:	2180      	movs	r1, #128	; 0x80
 80018ca:	4809      	ldr	r0, [pc, #36]	; (80018f0 <main+0x4c8>)
 80018cc:	f002 f9e4 	bl	8003c98 <HAL_GPIO_WritePin>
				}
				can_change = 0;
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <main+0x4f0>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	701a      	strb	r2, [r3, #0]
			}
	
			count = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
		}

		// Zuruecksetzen des Start Flags, damit Tasks erst nach einer ms wieder aufgerufen werden kann
		start_flag = 0;																		// Zuruechsetze Start Flag
 80018dc:	2300      	movs	r3, #0
 80018de:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		if (millisekunden_flag_1 == 1)
 80018e2:	e729      	b.n	8001738 <main+0x310>
 80018e4:	20000044 	.word	0x20000044
 80018e8:	40021000 	.word	0x40021000
 80018ec:	2000004c 	.word	0x2000004c
 80018f0:	40020400 	.word	0x40020400
 80018f4:	080077fc 	.word	0x080077fc
 80018f8:	20000030 	.word	0x20000030
 80018fc:	51eb851f 	.word	0x51eb851f
 8001900:	20000048 	.word	0x20000048
 8001904:	20000040 	.word	0x20000040
 8001908:	20000098 	.word	0x20000098
 800190c:	20000034 	.word	0x20000034
 8001910:	2000003c 	.word	0x2000003c
 8001914:	20000038 	.word	0x20000038
 8001918:	20000031 	.word	0x20000031
 800191c:	200000f8 	.word	0x200000f8
 8001920:	200000e8 	.word	0x200000e8

08001924 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b094      	sub	sp, #80	; 0x50
 8001928:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800192a:	f107 031c 	add.w	r3, r7, #28
 800192e:	2234      	movs	r2, #52	; 0x34
 8001930:	2100      	movs	r1, #0
 8001932:	4618      	mov	r0, r3
 8001934:	f005 fce0 	bl	80072f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001938:	f107 0308 	add.w	r3, r7, #8
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001948:	4b2c      	ldr	r3, [pc, #176]	; (80019fc <SystemClock_Config+0xd8>)
 800194a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194c:	4a2b      	ldr	r2, [pc, #172]	; (80019fc <SystemClock_Config+0xd8>)
 800194e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001952:	6413      	str	r3, [r2, #64]	; 0x40
 8001954:	4b29      	ldr	r3, [pc, #164]	; (80019fc <SystemClock_Config+0xd8>)
 8001956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195c:	607b      	str	r3, [r7, #4]
 800195e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001960:	4b27      	ldr	r3, [pc, #156]	; (8001a00 <SystemClock_Config+0xdc>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a26      	ldr	r2, [pc, #152]	; (8001a00 <SystemClock_Config+0xdc>)
 8001966:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800196a:	6013      	str	r3, [r2, #0]
 800196c:	4b24      	ldr	r3, [pc, #144]	; (8001a00 <SystemClock_Config+0xdc>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001974:	603b      	str	r3, [r7, #0]
 8001976:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001978:	2301      	movs	r3, #1
 800197a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800197c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001980:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001982:	2302      	movs	r3, #2
 8001984:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001986:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800198a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 800198c:	2319      	movs	r3, #25
 800198e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001990:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001994:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001996:	2302      	movs	r3, #2
 8001998:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800199a:	2308      	movs	r3, #8
 800199c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800199e:	2302      	movs	r3, #2
 80019a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019a2:	f107 031c 	add.w	r3, r7, #28
 80019a6:	4618      	mov	r0, r3
 80019a8:	f002 f9e0 	bl	8003d6c <HAL_RCC_OscConfig>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80019b2:	f000 f889 	bl	8001ac8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80019b6:	f002 f989 	bl	8003ccc <HAL_PWREx_EnableOverDrive>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80019c0:	f000 f882 	bl	8001ac8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019c4:	230f      	movs	r3, #15
 80019c6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019c8:	2302      	movs	r3, #2
 80019ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019cc:	2300      	movs	r3, #0
 80019ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019da:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80019dc:	f107 0308 	add.w	r3, r7, #8
 80019e0:	2107      	movs	r1, #7
 80019e2:	4618      	mov	r0, r3
 80019e4:	f002 fc70 	bl	80042c8 <HAL_RCC_ClockConfig>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80019ee:	f000 f86b 	bl	8001ac8 <Error_Handler>
  }
}
 80019f2:	bf00      	nop
 80019f4:	3750      	adds	r7, #80	; 0x50
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40007000 	.word	0x40007000

08001a04 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
// Interrupts
// Can-Interrupt: Nachricht wartet
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxMessage, RxData);
 8001a0c:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8001a0e:	4a07      	ldr	r2, [pc, #28]	; (8001a2c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8001a10:	2100      	movs	r1, #0
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f001 fb03 	bl	800301e <HAL_CAN_GetRxMessage>
	can_change = 1;
 8001a18:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	701a      	strb	r2, [r3, #0]
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	200000e8 	.word	0x200000e8
 8001a2c:	200000f8 	.word	0x200000f8
 8001a30:	20000031 	.word	0x20000031

08001a34 <HAL_TIM_PeriodElapsedCallback>:

// Timer-Interrupt: Timer ist uebergelaufen
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a34:	b590      	push	{r4, r7, lr}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
	// Kontrolliere welcher Timer den Ueberlauf ausgeloest hat
	if (htim == &htim6)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a1d      	ldr	r2, [pc, #116]	; (8001ab4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d102      	bne.n	8001a4a <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		millisekunden_flag_1 = 1;
 8001a44:	4b1c      	ldr	r3, [pc, #112]	; (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001a46:	2201      	movs	r2, #1
 8001a48:	701a      	strb	r2, [r3, #0]
	}

	// Timer IMD
	if (htim == &htim1)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a1b      	ldr	r2, [pc, #108]	; (8001abc <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d12c      	bne.n	8001aac <HAL_TIM_PeriodElapsedCallback+0x78>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	7f1b      	ldrb	r3, [r3, #28]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d112      	bne.n	8001a80 <HAL_TIM_PeriodElapsedCallback+0x4c>
		{
			rising = calculateMovingAverage(rising, HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1), 64);
 8001a5a:	4b19      	ldr	r3, [pc, #100]	; (8001ac0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001a5c:	881b      	ldrh	r3, [r3, #0]
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	461c      	mov	r4, r3
 8001a62:	2100      	movs	r1, #0
 8001a64:	4815      	ldr	r0, [pc, #84]	; (8001abc <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001a66:	f004 f8b7 	bl	8005bd8 <HAL_TIM_ReadCapturedValue>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2240      	movs	r2, #64	; 0x40
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4620      	mov	r0, r4
 8001a72:	f7ff fcc5 	bl	8001400 <calculateMovingAverage>
 8001a76:	4603      	mov	r3, r0
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001a7c:	801a      	strh	r2, [r3, #0]
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
		{
			falling = calculateMovingAverage(falling, HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2), 64);
		}
	}
}
 8001a7e:	e015      	b.n	8001aac <HAL_TIM_PeriodElapsedCallback+0x78>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	7f1b      	ldrb	r3, [r3, #28]
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d111      	bne.n	8001aac <HAL_TIM_PeriodElapsedCallback+0x78>
			falling = calculateMovingAverage(falling, HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2), 64);
 8001a88:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001a8a:	881b      	ldrh	r3, [r3, #0]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	461c      	mov	r4, r3
 8001a90:	2104      	movs	r1, #4
 8001a92:	480a      	ldr	r0, [pc, #40]	; (8001abc <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001a94:	f004 f8a0 	bl	8005bd8 <HAL_TIM_ReadCapturedValue>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2240      	movs	r2, #64	; 0x40
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4620      	mov	r0, r4
 8001aa0:	f7ff fcae 	bl	8001400 <calculateMovingAverage>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001aaa:	801a      	strh	r2, [r3, #0]
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd90      	pop	{r4, r7, pc}
 8001ab4:	20000228 	.word	0x20000228
 8001ab8:	20000030 	.word	0x20000030
 8001abc:	20000274 	.word	0x20000274
 8001ac0:	2000002c 	.word	0x2000002c
 8001ac4:	2000002e 	.word	0x2000002e

08001ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
	...

08001ad8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001adc:	4b1b      	ldr	r3, [pc, #108]	; (8001b4c <MX_SPI1_Init+0x74>)
 8001ade:	4a1c      	ldr	r2, [pc, #112]	; (8001b50 <MX_SPI1_Init+0x78>)
 8001ae0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ae2:	4b1a      	ldr	r3, [pc, #104]	; (8001b4c <MX_SPI1_Init+0x74>)
 8001ae4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ae8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001aea:	4b18      	ldr	r3, [pc, #96]	; (8001b4c <MX_SPI1_Init+0x74>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001af0:	4b16      	ldr	r3, [pc, #88]	; (8001b4c <MX_SPI1_Init+0x74>)
 8001af2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001af6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001af8:	4b14      	ldr	r3, [pc, #80]	; (8001b4c <MX_SPI1_Init+0x74>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001afe:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <MX_SPI1_Init+0x74>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001b04:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <MX_SPI1_Init+0x74>)
 8001b06:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001b0a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b0c:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <MX_SPI1_Init+0x74>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b12:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <MX_SPI1_Init+0x74>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <MX_SPI1_Init+0x74>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b1e:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <MX_SPI1_Init+0x74>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001b24:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <MX_SPI1_Init+0x74>)
 8001b26:	2207      	movs	r2, #7
 8001b28:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b2a:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <MX_SPI1_Init+0x74>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b30:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <MX_SPI1_Init+0x74>)
 8001b32:	2208      	movs	r2, #8
 8001b34:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b36:	4805      	ldr	r0, [pc, #20]	; (8001b4c <MX_SPI1_Init+0x74>)
 8001b38:	f003 f9c4 	bl	8004ec4 <HAL_SPI_Init>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001b42:	f7ff ffc1 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000178 	.word	0x20000178
 8001b50:	40013000 	.word	0x40013000

08001b54 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001b58:	4b1b      	ldr	r3, [pc, #108]	; (8001bc8 <MX_SPI4_Init+0x74>)
 8001b5a:	4a1c      	ldr	r2, [pc, #112]	; (8001bcc <MX_SPI4_Init+0x78>)
 8001b5c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001b5e:	4b1a      	ldr	r3, [pc, #104]	; (8001bc8 <MX_SPI4_Init+0x74>)
 8001b60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b64:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001b66:	4b18      	ldr	r3, [pc, #96]	; (8001bc8 <MX_SPI4_Init+0x74>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8001b6c:	4b16      	ldr	r3, [pc, #88]	; (8001bc8 <MX_SPI4_Init+0x74>)
 8001b6e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001b72:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b74:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <MX_SPI4_Init+0x74>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b7a:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <MX_SPI4_Init+0x74>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001b80:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <MX_SPI4_Init+0x74>)
 8001b82:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001b86:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b88:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <MX_SPI4_Init+0x74>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b8e:	4b0e      	ldr	r3, [pc, #56]	; (8001bc8 <MX_SPI4_Init+0x74>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b94:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <MX_SPI4_Init+0x74>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b9a:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <MX_SPI4_Init+0x74>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001ba0:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <MX_SPI4_Init+0x74>)
 8001ba2:	2207      	movs	r2, #7
 8001ba4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ba6:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <MX_SPI4_Init+0x74>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <MX_SPI4_Init+0x74>)
 8001bae:	2208      	movs	r2, #8
 8001bb0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001bb2:	4805      	ldr	r0, [pc, #20]	; (8001bc8 <MX_SPI4_Init+0x74>)
 8001bb4:	f003 f986 	bl	8004ec4 <HAL_SPI_Init>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001bbe:	f7ff ff83 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000114 	.word	0x20000114
 8001bcc:	40013400 	.word	0x40013400

08001bd0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08c      	sub	sp, #48	; 0x30
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 031c 	add.w	r3, r7, #28
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a3d      	ldr	r2, [pc, #244]	; (8001ce4 <HAL_SPI_MspInit+0x114>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d145      	bne.n	8001c7e <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bf2:	4b3d      	ldr	r3, [pc, #244]	; (8001ce8 <HAL_SPI_MspInit+0x118>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	4a3c      	ldr	r2, [pc, #240]	; (8001ce8 <HAL_SPI_MspInit+0x118>)
 8001bf8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bfe:	4b3a      	ldr	r3, [pc, #232]	; (8001ce8 <HAL_SPI_MspInit+0x118>)
 8001c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c06:	61bb      	str	r3, [r7, #24]
 8001c08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c0a:	4b37      	ldr	r3, [pc, #220]	; (8001ce8 <HAL_SPI_MspInit+0x118>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	4a36      	ldr	r2, [pc, #216]	; (8001ce8 <HAL_SPI_MspInit+0x118>)
 8001c10:	f043 0308 	orr.w	r3, r3, #8
 8001c14:	6313      	str	r3, [r2, #48]	; 0x30
 8001c16:	4b34      	ldr	r3, [pc, #208]	; (8001ce8 <HAL_SPI_MspInit+0x118>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	f003 0308 	and.w	r3, r3, #8
 8001c1e:	617b      	str	r3, [r7, #20]
 8001c20:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c22:	4b31      	ldr	r3, [pc, #196]	; (8001ce8 <HAL_SPI_MspInit+0x118>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	4a30      	ldr	r2, [pc, #192]	; (8001ce8 <HAL_SPI_MspInit+0x118>)
 8001c28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2e:	4b2e      	ldr	r3, [pc, #184]	; (8001ce8 <HAL_SPI_MspInit+0x118>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	693b      	ldr	r3, [r7, #16]
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG10     ------> SPI1_NSS
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = POTI_MOSI_Pin;
 8001c3a:	2380      	movs	r3, #128	; 0x80
 8001c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c46:	2303      	movs	r3, #3
 8001c48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c4a:	2305      	movs	r3, #5
 8001c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(POTI_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001c4e:	f107 031c 	add.w	r3, r7, #28
 8001c52:	4619      	mov	r1, r3
 8001c54:	4825      	ldr	r0, [pc, #148]	; (8001cec <HAL_SPI_MspInit+0x11c>)
 8001c56:	f001 fe5b 	bl	8003910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POTI_MISO_Pin|POTI_CS_Pin|POTI_SCK_Pin;
 8001c5a:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8001c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c60:	2302      	movs	r3, #2
 8001c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c6c:	2305      	movs	r3, #5
 8001c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c70:	f107 031c 	add.w	r3, r7, #28
 8001c74:	4619      	mov	r1, r3
 8001c76:	481e      	ldr	r0, [pc, #120]	; (8001cf0 <HAL_SPI_MspInit+0x120>)
 8001c78:	f001 fe4a 	bl	8003910 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001c7c:	e02d      	b.n	8001cda <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI4)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a1c      	ldr	r2, [pc, #112]	; (8001cf4 <HAL_SPI_MspInit+0x124>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d128      	bne.n	8001cda <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001c88:	4b17      	ldr	r3, [pc, #92]	; (8001ce8 <HAL_SPI_MspInit+0x118>)
 8001c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8c:	4a16      	ldr	r2, [pc, #88]	; (8001ce8 <HAL_SPI_MspInit+0x118>)
 8001c8e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c92:	6453      	str	r3, [r2, #68]	; 0x44
 8001c94:	4b14      	ldr	r3, [pc, #80]	; (8001ce8 <HAL_SPI_MspInit+0x118>)
 8001c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ca0:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <HAL_SPI_MspInit+0x118>)
 8001ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca4:	4a10      	ldr	r2, [pc, #64]	; (8001ce8 <HAL_SPI_MspInit+0x118>)
 8001ca6:	f043 0310 	orr.w	r3, r3, #16
 8001caa:	6313      	str	r3, [r2, #48]	; 0x30
 8001cac:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <HAL_SPI_MspInit+0x118>)
 8001cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb0:	f003 0310 	and.w	r3, r3, #16
 8001cb4:	60bb      	str	r3, [r7, #8]
 8001cb6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ISOSPI_CS_Pin|ISOSPI_SCK_Pin|ISOSPI_MISO_Pin|ISOSPI_MOSI_Pin;
 8001cb8:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8001cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001cca:	2305      	movs	r3, #5
 8001ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cce:	f107 031c 	add.w	r3, r7, #28
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4808      	ldr	r0, [pc, #32]	; (8001cf8 <HAL_SPI_MspInit+0x128>)
 8001cd6:	f001 fe1b 	bl	8003910 <HAL_GPIO_Init>
}
 8001cda:	bf00      	nop
 8001cdc:	3730      	adds	r7, #48	; 0x30
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40013000 	.word	0x40013000
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	40020c00 	.word	0x40020c00
 8001cf0:	40021800 	.word	0x40021800
 8001cf4:	40013400 	.word	0x40013400
 8001cf8:	40021000 	.word	0x40021000

08001cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d02:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <HAL_MspInit+0x44>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	4a0e      	ldr	r2, [pc, #56]	; (8001d40 <HAL_MspInit+0x44>)
 8001d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d0e:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <HAL_MspInit+0x44>)
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d16:	607b      	str	r3, [r7, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d1a:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <HAL_MspInit+0x44>)
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1e:	4a08      	ldr	r2, [pc, #32]	; (8001d40 <HAL_MspInit+0x44>)
 8001d20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d24:	6453      	str	r3, [r2, #68]	; 0x44
 8001d26:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <HAL_MspInit+0x44>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d2e:	603b      	str	r3, [r7, #0]
 8001d30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40023800 	.word	0x40023800

08001d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d56:	e7fe      	b.n	8001d56 <HardFault_Handler+0x4>

08001d58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d5c:	e7fe      	b.n	8001d5c <MemManage_Handler+0x4>

08001d5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d62:	e7fe      	b.n	8001d62 <BusFault_Handler+0x4>

08001d64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d68:	e7fe      	b.n	8001d68 <UsageFault_Handler+0x4>

08001d6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d7c:	bf00      	nop
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d86:	b480      	push	{r7}
 8001d88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d98:	f000 fb1a 	bl	80023d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d9c:	bf00      	nop
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001da4:	4802      	ldr	r0, [pc, #8]	; (8001db0 <TIM6_DAC_IRQHandler+0x10>)
 8001da6:	f003 fc05 	bl	80055b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000228 	.word	0x20000228

08001db4 <CAN3_RX0_IRQHandler>:

/**
  * @brief This function handles CAN3 RX0 interrupt.
  */
void CAN3_RX0_IRQHandler(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX0_IRQn 0 */

  /* USER CODE END CAN3_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 8001db8:	4802      	ldr	r0, [pc, #8]	; (8001dc4 <CAN3_RX0_IRQHandler+0x10>)
 8001dba:	f001 fa68 	bl	800328e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX0_IRQn 1 */

  /* USER CODE END CAN3_RX0_IRQn 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000098 	.word	0x20000098

08001dc8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dcc:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <SystemInit+0x28>)
 8001dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dd2:	4a07      	ldr	r2, [pc, #28]	; (8001df0 <SystemInit+0x28>)
 8001dd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ddc:	4b04      	ldr	r3, [pc, #16]	; (8001df0 <SystemInit+0x28>)
 8001dde:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001de2:	609a      	str	r2, [r3, #8]
#endif
}
 8001de4:	bf00      	nop
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08c      	sub	sp, #48	; 0x30
 8001df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001dfa:	f107 031c 	add.w	r3, r7, #28
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	605a      	str	r2, [r3, #4]
 8001e04:	609a      	str	r2, [r3, #8]
 8001e06:	60da      	str	r2, [r3, #12]
 8001e08:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001e0a:	f107 030c 	add.w	r3, r7, #12
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	605a      	str	r2, [r3, #4]
 8001e14:	609a      	str	r2, [r3, #8]
 8001e16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e18:	463b      	mov	r3, r7
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	605a      	str	r2, [r3, #4]
 8001e20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e22:	4b35      	ldr	r3, [pc, #212]	; (8001ef8 <MX_TIM1_Init+0x104>)
 8001e24:	4a35      	ldr	r2, [pc, #212]	; (8001efc <MX_TIM1_Init+0x108>)
 8001e26:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001e28:	4b33      	ldr	r3, [pc, #204]	; (8001ef8 <MX_TIM1_Init+0x104>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e2e:	4b32      	ldr	r3, [pc, #200]	; (8001ef8 <MX_TIM1_Init+0x104>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001e34:	4b30      	ldr	r3, [pc, #192]	; (8001ef8 <MX_TIM1_Init+0x104>)
 8001e36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e3a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e3c:	4b2e      	ldr	r3, [pc, #184]	; (8001ef8 <MX_TIM1_Init+0x104>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e42:	4b2d      	ldr	r3, [pc, #180]	; (8001ef8 <MX_TIM1_Init+0x104>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e48:	4b2b      	ldr	r3, [pc, #172]	; (8001ef8 <MX_TIM1_Init+0x104>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001e4e:	482a      	ldr	r0, [pc, #168]	; (8001ef8 <MX_TIM1_Init+0x104>)
 8001e50:	f003 fa09 	bl	8005266 <HAL_TIM_IC_Init>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8001e5a:	f7ff fe35 	bl	8001ac8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001e5e:	2304      	movs	r3, #4
 8001e60:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001e62:	2350      	movs	r3, #80	; 0x50
 8001e64:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001e66:	2300      	movs	r3, #0
 8001e68:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001e72:	f107 031c 	add.w	r3, r7, #28
 8001e76:	4619      	mov	r1, r3
 8001e78:	481f      	ldr	r0, [pc, #124]	; (8001ef8 <MX_TIM1_Init+0x104>)
 8001e7a:	f003 fe6b 	bl	8005b54 <HAL_TIM_SlaveConfigSynchro>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001e84:	f7ff fe20 	bl	8001ac8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001e94:	2300      	movs	r3, #0
 8001e96:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001e98:	f107 030c 	add.w	r3, r7, #12
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4815      	ldr	r0, [pc, #84]	; (8001ef8 <MX_TIM1_Init+0x104>)
 8001ea2:	f003 fca6 	bl	80057f2 <HAL_TIM_IC_ConfigChannel>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001eac:	f7ff fe0c 	bl	8001ac8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001eb8:	f107 030c 	add.w	r3, r7, #12
 8001ebc:	2204      	movs	r2, #4
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	480d      	ldr	r0, [pc, #52]	; (8001ef8 <MX_TIM1_Init+0x104>)
 8001ec2:	f003 fc96 	bl	80057f2 <HAL_TIM_IC_ConfigChannel>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001ecc:	f7ff fdfc 	bl	8001ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001edc:	463b      	mov	r3, r7
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4805      	ldr	r0, [pc, #20]	; (8001ef8 <MX_TIM1_Init+0x104>)
 8001ee2:	f004 fc45 	bl	8006770 <HAL_TIMEx_MasterConfigSynchronization>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001eec:	f7ff fdec 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001ef0:	bf00      	nop
 8001ef2:	3730      	adds	r7, #48	; 0x30
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20000274 	.word	0x20000274
 8001efc:	40010000 	.word	0x40010000

08001f00 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08a      	sub	sp, #40	; 0x28
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f06:	f107 031c 	add.w	r3, r7, #28
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	605a      	str	r2, [r3, #4]
 8001f10:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f12:	463b      	mov	r3, r7
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
 8001f20:	615a      	str	r2, [r3, #20]
 8001f22:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f24:	4b32      	ldr	r3, [pc, #200]	; (8001ff0 <MX_TIM4_Init+0xf0>)
 8001f26:	4a33      	ldr	r2, [pc, #204]	; (8001ff4 <MX_TIM4_Init+0xf4>)
 8001f28:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001f2a:	4b31      	ldr	r3, [pc, #196]	; (8001ff0 <MX_TIM4_Init+0xf0>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f30:	4b2f      	ldr	r3, [pc, #188]	; (8001ff0 <MX_TIM4_Init+0xf0>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001f36:	4b2e      	ldr	r3, [pc, #184]	; (8001ff0 <MX_TIM4_Init+0xf0>)
 8001f38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f3c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f3e:	4b2c      	ldr	r3, [pc, #176]	; (8001ff0 <MX_TIM4_Init+0xf0>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f44:	4b2a      	ldr	r3, [pc, #168]	; (8001ff0 <MX_TIM4_Init+0xf0>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001f4a:	4829      	ldr	r0, [pc, #164]	; (8001ff0 <MX_TIM4_Init+0xf0>)
 8001f4c:	f003 f934 	bl	80051b8 <HAL_TIM_PWM_Init>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001f56:	f7ff fdb7 	bl	8001ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f62:	f107 031c 	add.w	r3, r7, #28
 8001f66:	4619      	mov	r1, r3
 8001f68:	4821      	ldr	r0, [pc, #132]	; (8001ff0 <MX_TIM4_Init+0xf0>)
 8001f6a:	f004 fc01 	bl	8006770 <HAL_TIMEx_MasterConfigSynchronization>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001f74:	f7ff fda8 	bl	8001ac8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f78:	2360      	movs	r3, #96	; 0x60
 8001f7a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f80:	2300      	movs	r3, #0
 8001f82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f84:	2300      	movs	r3, #0
 8001f86:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f88:	463b      	mov	r3, r7
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4818      	ldr	r0, [pc, #96]	; (8001ff0 <MX_TIM4_Init+0xf0>)
 8001f90:	f003 fccc 	bl	800592c <HAL_TIM_PWM_ConfigChannel>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001f9a:	f7ff fd95 	bl	8001ac8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f9e:	463b      	mov	r3, r7
 8001fa0:	2204      	movs	r2, #4
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4812      	ldr	r0, [pc, #72]	; (8001ff0 <MX_TIM4_Init+0xf0>)
 8001fa6:	f003 fcc1 	bl	800592c <HAL_TIM_PWM_ConfigChannel>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001fb0:	f7ff fd8a 	bl	8001ac8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001fb4:	463b      	mov	r3, r7
 8001fb6:	2208      	movs	r2, #8
 8001fb8:	4619      	mov	r1, r3
 8001fba:	480d      	ldr	r0, [pc, #52]	; (8001ff0 <MX_TIM4_Init+0xf0>)
 8001fbc:	f003 fcb6 	bl	800592c <HAL_TIM_PWM_ConfigChannel>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8001fc6:	f7ff fd7f 	bl	8001ac8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001fca:	463b      	mov	r3, r7
 8001fcc:	220c      	movs	r2, #12
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4807      	ldr	r0, [pc, #28]	; (8001ff0 <MX_TIM4_Init+0xf0>)
 8001fd2:	f003 fcab 	bl	800592c <HAL_TIM_PWM_ConfigChannel>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8001fdc:	f7ff fd74 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001fe0:	4803      	ldr	r0, [pc, #12]	; (8001ff0 <MX_TIM4_Init+0xf0>)
 8001fe2:	f000 f8c9 	bl	8002178 <HAL_TIM_MspPostInit>

}
 8001fe6:	bf00      	nop
 8001fe8:	3728      	adds	r7, #40	; 0x28
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	200001dc 	.word	0x200001dc
 8001ff4:	40000800 	.word	0x40000800

08001ff8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ffe:	1d3b      	adds	r3, r7, #4
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002008:	4b14      	ldr	r3, [pc, #80]	; (800205c <MX_TIM6_Init+0x64>)
 800200a:	4a15      	ldr	r2, [pc, #84]	; (8002060 <MX_TIM6_Init+0x68>)
 800200c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 27;
 800200e:	4b13      	ldr	r3, [pc, #76]	; (800205c <MX_TIM6_Init+0x64>)
 8002010:	221b      	movs	r2, #27
 8002012:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002014:	4b11      	ldr	r3, [pc, #68]	; (800205c <MX_TIM6_Init+0x64>)
 8002016:	2200      	movs	r2, #0
 8002018:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4000;
 800201a:	4b10      	ldr	r3, [pc, #64]	; (800205c <MX_TIM6_Init+0x64>)
 800201c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002020:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002022:	4b0e      	ldr	r3, [pc, #56]	; (800205c <MX_TIM6_Init+0x64>)
 8002024:	2200      	movs	r2, #0
 8002026:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002028:	480c      	ldr	r0, [pc, #48]	; (800205c <MX_TIM6_Init+0x64>)
 800202a:	f002 fff6 	bl	800501a <HAL_TIM_Base_Init>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002034:	f7ff fd48 	bl	8001ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002038:	2300      	movs	r3, #0
 800203a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800203c:	2300      	movs	r3, #0
 800203e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002040:	1d3b      	adds	r3, r7, #4
 8002042:	4619      	mov	r1, r3
 8002044:	4805      	ldr	r0, [pc, #20]	; (800205c <MX_TIM6_Init+0x64>)
 8002046:	f004 fb93 	bl	8006770 <HAL_TIMEx_MasterConfigSynchronization>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002050:	f7ff fd3a 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002054:	bf00      	nop
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	20000228 	.word	0x20000228
 8002060:	40001000 	.word	0x40001000

08002064 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b08a      	sub	sp, #40	; 0x28
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206c:	f107 0314 	add.w	r3, r7, #20
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a17      	ldr	r2, [pc, #92]	; (80020e0 <HAL_TIM_IC_MspInit+0x7c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d128      	bne.n	80020d8 <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002086:	4b17      	ldr	r3, [pc, #92]	; (80020e4 <HAL_TIM_IC_MspInit+0x80>)
 8002088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208a:	4a16      	ldr	r2, [pc, #88]	; (80020e4 <HAL_TIM_IC_MspInit+0x80>)
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	6453      	str	r3, [r2, #68]	; 0x44
 8002092:	4b14      	ldr	r3, [pc, #80]	; (80020e4 <HAL_TIM_IC_MspInit+0x80>)
 8002094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	613b      	str	r3, [r7, #16]
 800209c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800209e:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <HAL_TIM_IC_MspInit+0x80>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	4a10      	ldr	r2, [pc, #64]	; (80020e4 <HAL_TIM_IC_MspInit+0x80>)
 80020a4:	f043 0310 	orr.w	r3, r3, #16
 80020a8:	6313      	str	r3, [r2, #48]	; 0x30
 80020aa:	4b0e      	ldr	r3, [pc, #56]	; (80020e4 <HAL_TIM_IC_MspInit+0x80>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	f003 0310 	and.w	r3, r3, #16
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = IMD_PWM_Pin;
 80020b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020bc:	2302      	movs	r3, #2
 80020be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c4:	2300      	movs	r3, #0
 80020c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020c8:	2301      	movs	r3, #1
 80020ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(IMD_PWM_GPIO_Port, &GPIO_InitStruct);
 80020cc:	f107 0314 	add.w	r3, r7, #20
 80020d0:	4619      	mov	r1, r3
 80020d2:	4805      	ldr	r0, [pc, #20]	; (80020e8 <HAL_TIM_IC_MspInit+0x84>)
 80020d4:	f001 fc1c 	bl	8003910 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80020d8:	bf00      	nop
 80020da:	3728      	adds	r7, #40	; 0x28
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40010000 	.word	0x40010000
 80020e4:	40023800 	.word	0x40023800
 80020e8:	40021000 	.word	0x40021000

080020ec <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <HAL_TIM_PWM_MspInit+0x38>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d10b      	bne.n	8002116 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020fe:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <HAL_TIM_PWM_MspInit+0x3c>)
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	4a09      	ldr	r2, [pc, #36]	; (8002128 <HAL_TIM_PWM_MspInit+0x3c>)
 8002104:	f043 0304 	orr.w	r3, r3, #4
 8002108:	6413      	str	r3, [r2, #64]	; 0x40
 800210a:	4b07      	ldr	r3, [pc, #28]	; (8002128 <HAL_TIM_PWM_MspInit+0x3c>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	f003 0304 	and.w	r3, r3, #4
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002116:	bf00      	nop
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	40000800 	.word	0x40000800
 8002128:	40023800 	.word	0x40023800

0800212c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a0d      	ldr	r2, [pc, #52]	; (8002170 <HAL_TIM_Base_MspInit+0x44>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d113      	bne.n	8002166 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800213e:	4b0d      	ldr	r3, [pc, #52]	; (8002174 <HAL_TIM_Base_MspInit+0x48>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	4a0c      	ldr	r2, [pc, #48]	; (8002174 <HAL_TIM_Base_MspInit+0x48>)
 8002144:	f043 0310 	orr.w	r3, r3, #16
 8002148:	6413      	str	r3, [r2, #64]	; 0x40
 800214a:	4b0a      	ldr	r3, [pc, #40]	; (8002174 <HAL_TIM_Base_MspInit+0x48>)
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	f003 0310 	and.w	r3, r3, #16
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002156:	2200      	movs	r2, #0
 8002158:	2100      	movs	r1, #0
 800215a:	2036      	movs	r0, #54	; 0x36
 800215c:	f001 fba1 	bl	80038a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002160:	2036      	movs	r0, #54	; 0x36
 8002162:	f001 fbba 	bl	80038da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002166:	bf00      	nop
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40001000 	.word	0x40001000
 8002174:	40023800 	.word	0x40023800

08002178 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b088      	sub	sp, #32
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002180:	f107 030c 	add.w	r3, r7, #12
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	60da      	str	r2, [r3, #12]
 800218e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a11      	ldr	r2, [pc, #68]	; (80021dc <HAL_TIM_MspPostInit+0x64>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d11c      	bne.n	80021d4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800219a:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <HAL_TIM_MspPostInit+0x68>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	4a10      	ldr	r2, [pc, #64]	; (80021e0 <HAL_TIM_MspPostInit+0x68>)
 80021a0:	f043 0308 	orr.w	r3, r3, #8
 80021a4:	6313      	str	r3, [r2, #48]	; 0x30
 80021a6:	4b0e      	ldr	r3, [pc, #56]	; (80021e0 <HAL_TIM_MspPostInit+0x68>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	f003 0308 	and.w	r3, r3, #8
 80021ae:	60bb      	str	r3, [r7, #8]
 80021b0:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PWM_HV_N_Pin|PWM_HV_P_Pin|PWM_HV_M_Pin|PWM_HV_Charger_Pin;
 80021b2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80021b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b8:	2302      	movs	r3, #2
 80021ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c0:	2300      	movs	r3, #0
 80021c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80021c4:	2302      	movs	r3, #2
 80021c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021c8:	f107 030c 	add.w	r3, r7, #12
 80021cc:	4619      	mov	r1, r3
 80021ce:	4805      	ldr	r0, [pc, #20]	; (80021e4 <HAL_TIM_MspPostInit+0x6c>)
 80021d0:	f001 fb9e 	bl	8003910 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80021d4:	bf00      	nop
 80021d6:	3720      	adds	r7, #32
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40000800 	.word	0x40000800
 80021e0:	40023800 	.word	0x40023800
 80021e4:	40020c00 	.word	0x40020c00

080021e8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021ec:	4b14      	ldr	r3, [pc, #80]	; (8002240 <MX_USART2_UART_Init+0x58>)
 80021ee:	4a15      	ldr	r2, [pc, #84]	; (8002244 <MX_USART2_UART_Init+0x5c>)
 80021f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80021f2:	4b13      	ldr	r3, [pc, #76]	; (8002240 <MX_USART2_UART_Init+0x58>)
 80021f4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80021f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021fa:	4b11      	ldr	r3, [pc, #68]	; (8002240 <MX_USART2_UART_Init+0x58>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002200:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <MX_USART2_UART_Init+0x58>)
 8002202:	2200      	movs	r2, #0
 8002204:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002206:	4b0e      	ldr	r3, [pc, #56]	; (8002240 <MX_USART2_UART_Init+0x58>)
 8002208:	2200      	movs	r2, #0
 800220a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800220c:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <MX_USART2_UART_Init+0x58>)
 800220e:	220c      	movs	r2, #12
 8002210:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002212:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <MX_USART2_UART_Init+0x58>)
 8002214:	2200      	movs	r2, #0
 8002216:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002218:	4b09      	ldr	r3, [pc, #36]	; (8002240 <MX_USART2_UART_Init+0x58>)
 800221a:	2200      	movs	r2, #0
 800221c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800221e:	4b08      	ldr	r3, [pc, #32]	; (8002240 <MX_USART2_UART_Init+0x58>)
 8002220:	2200      	movs	r2, #0
 8002222:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002224:	4b06      	ldr	r3, [pc, #24]	; (8002240 <MX_USART2_UART_Init+0x58>)
 8002226:	2200      	movs	r2, #0
 8002228:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800222a:	4805      	ldr	r0, [pc, #20]	; (8002240 <MX_USART2_UART_Init+0x58>)
 800222c:	f004 fb4c 	bl	80068c8 <HAL_UART_Init>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002236:	f7ff fc47 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	200002c0 	.word	0x200002c0
 8002244:	40004400 	.word	0x40004400

08002248 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b0ae      	sub	sp, #184	; 0xb8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002250:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	60da      	str	r2, [r3, #12]
 800225e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002260:	f107 0314 	add.w	r3, r7, #20
 8002264:	2290      	movs	r2, #144	; 0x90
 8002266:	2100      	movs	r1, #0
 8002268:	4618      	mov	r0, r3
 800226a:	f005 f845 	bl	80072f8 <memset>
  if(uartHandle->Instance==USART2)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a21      	ldr	r2, [pc, #132]	; (80022f8 <HAL_UART_MspInit+0xb0>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d13a      	bne.n	80022ee <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002278:	2380      	movs	r3, #128	; 0x80
 800227a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800227c:	2300      	movs	r3, #0
 800227e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002280:	f107 0314 	add.w	r3, r7, #20
 8002284:	4618      	mov	r0, r3
 8002286:	f002 f9f5 	bl	8004674 <HAL_RCCEx_PeriphCLKConfig>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002290:	f7ff fc1a 	bl	8001ac8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002294:	4b19      	ldr	r3, [pc, #100]	; (80022fc <HAL_UART_MspInit+0xb4>)
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	4a18      	ldr	r2, [pc, #96]	; (80022fc <HAL_UART_MspInit+0xb4>)
 800229a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800229e:	6413      	str	r3, [r2, #64]	; 0x40
 80022a0:	4b16      	ldr	r3, [pc, #88]	; (80022fc <HAL_UART_MspInit+0xb4>)
 80022a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a8:	613b      	str	r3, [r7, #16]
 80022aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022ac:	4b13      	ldr	r3, [pc, #76]	; (80022fc <HAL_UART_MspInit+0xb4>)
 80022ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b0:	4a12      	ldr	r2, [pc, #72]	; (80022fc <HAL_UART_MspInit+0xb4>)
 80022b2:	f043 0308 	orr.w	r3, r3, #8
 80022b6:	6313      	str	r3, [r2, #48]	; 0x30
 80022b8:	4b10      	ldr	r3, [pc, #64]	; (80022fc <HAL_UART_MspInit+0xb4>)
 80022ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022bc:	f003 0308 	and.w	r3, r3, #8
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80022c4:	2360      	movs	r3, #96	; 0x60
 80022c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ca:	2302      	movs	r3, #2
 80022cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d6:	2303      	movs	r3, #3
 80022d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022dc:	2307      	movs	r3, #7
 80022de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022e2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80022e6:	4619      	mov	r1, r3
 80022e8:	4805      	ldr	r0, [pc, #20]	; (8002300 <HAL_UART_MspInit+0xb8>)
 80022ea:	f001 fb11 	bl	8003910 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80022ee:	bf00      	nop
 80022f0:	37b8      	adds	r7, #184	; 0xb8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40004400 	.word	0x40004400
 80022fc:	40023800 	.word	0x40023800
 8002300:	40020c00 	.word	0x40020c00

08002304 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002304:	f8df d034 	ldr.w	sp, [pc, #52]	; 800233c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002308:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800230a:	e003      	b.n	8002314 <LoopCopyDataInit>

0800230c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800230c:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800230e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002310:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002312:	3104      	adds	r1, #4

08002314 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002314:	480b      	ldr	r0, [pc, #44]	; (8002344 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002316:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002318:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800231a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800231c:	d3f6      	bcc.n	800230c <CopyDataInit>
  ldr  r2, =_sbss
 800231e:	4a0b      	ldr	r2, [pc, #44]	; (800234c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002320:	e002      	b.n	8002328 <LoopFillZerobss>

08002322 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002322:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002324:	f842 3b04 	str.w	r3, [r2], #4

08002328 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002328:	4b09      	ldr	r3, [pc, #36]	; (8002350 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800232a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800232c:	d3f9      	bcc.n	8002322 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800232e:	f7ff fd4b 	bl	8001dc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002332:	f004 ffbd 	bl	80072b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002336:	f7ff f877 	bl	8001428 <main>
  bx  lr    
 800233a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800233c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002340:	080078ac 	.word	0x080078ac
  ldr  r0, =_sdata
 8002344:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002348:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800234c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002350:	20000348 	.word	0x20000348

08002354 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002354:	e7fe      	b.n	8002354 <ADC_IRQHandler>

08002356 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800235a:	2003      	movs	r0, #3
 800235c:	f001 fa96 	bl	800388c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002360:	2000      	movs	r0, #0
 8002362:	f000 f805 	bl	8002370 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002366:	f7ff fcc9 	bl	8001cfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	bd80      	pop	{r7, pc}

08002370 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002378:	4b12      	ldr	r3, [pc, #72]	; (80023c4 <HAL_InitTick+0x54>)
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	4b12      	ldr	r3, [pc, #72]	; (80023c8 <HAL_InitTick+0x58>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	4619      	mov	r1, r3
 8002382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002386:	fbb3 f3f1 	udiv	r3, r3, r1
 800238a:	fbb2 f3f3 	udiv	r3, r2, r3
 800238e:	4618      	mov	r0, r3
 8002390:	f001 fab1 	bl	80038f6 <HAL_SYSTICK_Config>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e00e      	b.n	80023bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b0f      	cmp	r3, #15
 80023a2:	d80a      	bhi.n	80023ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023a4:	2200      	movs	r2, #0
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	f04f 30ff 	mov.w	r0, #4294967295
 80023ac:	f001 fa79 	bl	80038a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023b0:	4a06      	ldr	r2, [pc, #24]	; (80023cc <HAL_InitTick+0x5c>)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
 80023b8:	e000      	b.n	80023bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	20000000 	.word	0x20000000
 80023c8:	20000008 	.word	0x20000008
 80023cc:	20000004 	.word	0x20000004

080023d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023d4:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <HAL_IncTick+0x20>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	461a      	mov	r2, r3
 80023da:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <HAL_IncTick+0x24>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4413      	add	r3, r2
 80023e0:	4a04      	ldr	r2, [pc, #16]	; (80023f4 <HAL_IncTick+0x24>)
 80023e2:	6013      	str	r3, [r2, #0]
}
 80023e4:	bf00      	nop
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	20000008 	.word	0x20000008
 80023f4:	20000344 	.word	0x20000344

080023f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  return uwTick;
 80023fc:	4b03      	ldr	r3, [pc, #12]	; (800240c <HAL_GetTick+0x14>)
 80023fe:	681b      	ldr	r3, [r3, #0]
}
 8002400:	4618      	mov	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	20000344 	.word	0x20000344

08002410 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002418:	f7ff ffee 	bl	80023f8 <HAL_GetTick>
 800241c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002428:	d005      	beq.n	8002436 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800242a:	4b0a      	ldr	r3, [pc, #40]	; (8002454 <HAL_Delay+0x44>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	461a      	mov	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	4413      	add	r3, r2
 8002434:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002436:	bf00      	nop
 8002438:	f7ff ffde 	bl	80023f8 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	429a      	cmp	r2, r3
 8002446:	d8f7      	bhi.n	8002438 <HAL_Delay+0x28>
  {
  }
}
 8002448:	bf00      	nop
 800244a:	bf00      	nop
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	20000008 	.word	0x20000008

08002458 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  return __STM32F7xx_HAL_VERSION;
 800245c:	4b02      	ldr	r3, [pc, #8]	; (8002468 <HAL_GetHalVersion+0x10>)
}
 800245e:	4618      	mov	r0, r3
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	01020a00 	.word	0x01020a00

0800246c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8002470:	4b03      	ldr	r3, [pc, #12]	; (8002480 <HAL_GetREVID+0x14>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	0c1b      	lsrs	r3, r3, #16
}
 8002476:	4618      	mov	r0, r3
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	e0042000 	.word	0xe0042000

08002484 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8002488:	4b04      	ldr	r3, [pc, #16]	; (800249c <HAL_GetDEVID+0x18>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8002490:	4618      	mov	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	e0042000 	.word	0xe0042000

080024a0 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 80024a4:	4b03      	ldr	r3, [pc, #12]	; (80024b4 <HAL_GetUIDw0+0x14>)
 80024a6:	681b      	ldr	r3, [r3, #0]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	1ff0f420 	.word	0x1ff0f420

080024b8 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80024bc:	4b03      	ldr	r3, [pc, #12]	; (80024cc <HAL_GetUIDw1+0x14>)
 80024be:	681b      	ldr	r3, [r3, #0]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	1ff0f424 	.word	0x1ff0f424

080024d0 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80024d4:	4b03      	ldr	r3, [pc, #12]	; (80024e4 <HAL_GetUIDw2+0x14>)
 80024d6:	681b      	ldr	r3, [r3, #0]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	1ff0f428 	.word	0x1ff0f428

080024e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024f0:	2300      	movs	r3, #0
 80024f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e031      	b.n	8002562 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	2b00      	cmp	r3, #0
 8002504:	d109      	bne.n	800251a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7fe fc8e 	bl	8000e28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	f003 0310 	and.w	r3, r3, #16
 8002522:	2b00      	cmp	r3, #0
 8002524:	d116      	bne.n	8002554 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800252a:	4b10      	ldr	r3, [pc, #64]	; (800256c <HAL_ADC_Init+0x84>)
 800252c:	4013      	ands	r3, r2
 800252e:	f043 0202 	orr.w	r2, r3, #2
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f970 	bl	800281c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	f023 0303 	bic.w	r3, r3, #3
 800254a:	f043 0201 	orr.w	r2, r3, #1
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	641a      	str	r2, [r3, #64]	; 0x40
 8002552:	e001      	b.n	8002558 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002560:	7bfb      	ldrb	r3, [r7, #15]
}
 8002562:	4618      	mov	r0, r3
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	ffffeefd 	.word	0xffffeefd

08002570 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800257a:	2300      	movs	r3, #0
 800257c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002584:	2b01      	cmp	r3, #1
 8002586:	d101      	bne.n	800258c <HAL_ADC_ConfigChannel+0x1c>
 8002588:	2302      	movs	r3, #2
 800258a:	e136      	b.n	80027fa <HAL_ADC_ConfigChannel+0x28a>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2b09      	cmp	r3, #9
 800259a:	d93a      	bls.n	8002612 <HAL_ADC_ConfigChannel+0xa2>
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025a4:	d035      	beq.n	8002612 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68d9      	ldr	r1, [r3, #12]
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	461a      	mov	r2, r3
 80025b4:	4613      	mov	r3, r2
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	4413      	add	r3, r2
 80025ba:	3b1e      	subs	r3, #30
 80025bc:	2207      	movs	r2, #7
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43da      	mvns	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	400a      	ands	r2, r1
 80025ca:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a8d      	ldr	r2, [pc, #564]	; (8002808 <HAL_ADC_ConfigChannel+0x298>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d10a      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68d9      	ldr	r1, [r3, #12]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	061a      	lsls	r2, r3, #24
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025ea:	e035      	b.n	8002658 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68d9      	ldr	r1, [r3, #12]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	689a      	ldr	r2, [r3, #8]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	4618      	mov	r0, r3
 80025fe:	4603      	mov	r3, r0
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	4403      	add	r3, r0
 8002604:	3b1e      	subs	r3, #30
 8002606:	409a      	lsls	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	430a      	orrs	r2, r1
 800260e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002610:	e022      	b.n	8002658 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6919      	ldr	r1, [r3, #16]
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	b29b      	uxth	r3, r3
 800261e:	461a      	mov	r2, r3
 8002620:	4613      	mov	r3, r2
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	4413      	add	r3, r2
 8002626:	2207      	movs	r2, #7
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	43da      	mvns	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	400a      	ands	r2, r1
 8002634:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6919      	ldr	r1, [r3, #16]
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	b29b      	uxth	r3, r3
 8002646:	4618      	mov	r0, r3
 8002648:	4603      	mov	r3, r0
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	4403      	add	r3, r0
 800264e:	409a      	lsls	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	430a      	orrs	r2, r1
 8002656:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	2b06      	cmp	r3, #6
 800265e:	d824      	bhi.n	80026aa <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685a      	ldr	r2, [r3, #4]
 800266a:	4613      	mov	r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	4413      	add	r3, r2
 8002670:	3b05      	subs	r3, #5
 8002672:	221f      	movs	r2, #31
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	43da      	mvns	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	400a      	ands	r2, r1
 8002680:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	b29b      	uxth	r3, r3
 800268e:	4618      	mov	r0, r3
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	4613      	mov	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	3b05      	subs	r3, #5
 800269c:	fa00 f203 	lsl.w	r2, r0, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	430a      	orrs	r2, r1
 80026a6:	635a      	str	r2, [r3, #52]	; 0x34
 80026a8:	e04c      	b.n	8002744 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b0c      	cmp	r3, #12
 80026b0:	d824      	bhi.n	80026fc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	4613      	mov	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	3b23      	subs	r3, #35	; 0x23
 80026c4:	221f      	movs	r2, #31
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	43da      	mvns	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	400a      	ands	r2, r1
 80026d2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	b29b      	uxth	r3, r3
 80026e0:	4618      	mov	r0, r3
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	4613      	mov	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	4413      	add	r3, r2
 80026ec:	3b23      	subs	r3, #35	; 0x23
 80026ee:	fa00 f203 	lsl.w	r2, r0, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	631a      	str	r2, [r3, #48]	; 0x30
 80026fa:	e023      	b.n	8002744 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	4613      	mov	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	3b41      	subs	r3, #65	; 0x41
 800270e:	221f      	movs	r2, #31
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	43da      	mvns	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	400a      	ands	r2, r1
 800271c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	b29b      	uxth	r3, r3
 800272a:	4618      	mov	r0, r3
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	3b41      	subs	r3, #65	; 0x41
 8002738:	fa00 f203 	lsl.w	r2, r0, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a30      	ldr	r2, [pc, #192]	; (800280c <HAL_ADC_ConfigChannel+0x29c>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d10a      	bne.n	8002764 <HAL_ADC_ConfigChannel+0x1f4>
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002756:	d105      	bne.n	8002764 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002758:	4b2d      	ldr	r3, [pc, #180]	; (8002810 <HAL_ADC_ConfigChannel+0x2a0>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	4a2c      	ldr	r2, [pc, #176]	; (8002810 <HAL_ADC_ConfigChannel+0x2a0>)
 800275e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002762:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a28      	ldr	r2, [pc, #160]	; (800280c <HAL_ADC_ConfigChannel+0x29c>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d10f      	bne.n	800278e <HAL_ADC_ConfigChannel+0x21e>
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2b12      	cmp	r3, #18
 8002774:	d10b      	bne.n	800278e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002776:	4b26      	ldr	r3, [pc, #152]	; (8002810 <HAL_ADC_ConfigChannel+0x2a0>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	4a25      	ldr	r2, [pc, #148]	; (8002810 <HAL_ADC_ConfigChannel+0x2a0>)
 800277c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002780:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002782:	4b23      	ldr	r3, [pc, #140]	; (8002810 <HAL_ADC_ConfigChannel+0x2a0>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	4a22      	ldr	r2, [pc, #136]	; (8002810 <HAL_ADC_ConfigChannel+0x2a0>)
 8002788:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800278c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a1e      	ldr	r2, [pc, #120]	; (800280c <HAL_ADC_ConfigChannel+0x29c>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d12b      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0x280>
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a1a      	ldr	r2, [pc, #104]	; (8002808 <HAL_ADC_ConfigChannel+0x298>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d003      	beq.n	80027aa <HAL_ADC_ConfigChannel+0x23a>
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2b11      	cmp	r3, #17
 80027a8:	d122      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80027aa:	4b19      	ldr	r3, [pc, #100]	; (8002810 <HAL_ADC_ConfigChannel+0x2a0>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	4a18      	ldr	r2, [pc, #96]	; (8002810 <HAL_ADC_ConfigChannel+0x2a0>)
 80027b0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80027b4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80027b6:	4b16      	ldr	r3, [pc, #88]	; (8002810 <HAL_ADC_ConfigChannel+0x2a0>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	4a15      	ldr	r2, [pc, #84]	; (8002810 <HAL_ADC_ConfigChannel+0x2a0>)
 80027bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027c0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a10      	ldr	r2, [pc, #64]	; (8002808 <HAL_ADC_ConfigChannel+0x298>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d111      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80027cc:	4b11      	ldr	r3, [pc, #68]	; (8002814 <HAL_ADC_ConfigChannel+0x2a4>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a11      	ldr	r2, [pc, #68]	; (8002818 <HAL_ADC_ConfigChannel+0x2a8>)
 80027d2:	fba2 2303 	umull	r2, r3, r2, r3
 80027d6:	0c9a      	lsrs	r2, r3, #18
 80027d8:	4613      	mov	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4413      	add	r3, r2
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80027e2:	e002      	b.n	80027ea <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	3b01      	subs	r3, #1
 80027e8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1f9      	bne.n	80027e4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3714      	adds	r7, #20
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	10000012 	.word	0x10000012
 800280c:	40012000 	.word	0x40012000
 8002810:	40012300 	.word	0x40012300
 8002814:	20000000 	.word	0x20000000
 8002818:	431bde83 	.word	0x431bde83

0800281c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002824:	4b78      	ldr	r3, [pc, #480]	; (8002a08 <ADC_Init+0x1ec>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	4a77      	ldr	r2, [pc, #476]	; (8002a08 <ADC_Init+0x1ec>)
 800282a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800282e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002830:	4b75      	ldr	r3, [pc, #468]	; (8002a08 <ADC_Init+0x1ec>)
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	4973      	ldr	r1, [pc, #460]	; (8002a08 <ADC_Init+0x1ec>)
 800283a:	4313      	orrs	r3, r2
 800283c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800284c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	6859      	ldr	r1, [r3, #4]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	021a      	lsls	r2, r3, #8
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002870:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6859      	ldr	r1, [r3, #4]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	430a      	orrs	r2, r1
 8002882:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689a      	ldr	r2, [r3, #8]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002892:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6899      	ldr	r1, [r3, #8]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68da      	ldr	r2, [r3, #12]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028aa:	4a58      	ldr	r2, [pc, #352]	; (8002a0c <ADC_Init+0x1f0>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d022      	beq.n	80028f6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689a      	ldr	r2, [r3, #8]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6899      	ldr	r1, [r3, #8]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6899      	ldr	r1, [r3, #8]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	430a      	orrs	r2, r1
 80028f2:	609a      	str	r2, [r3, #8]
 80028f4:	e00f      	b.n	8002916 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002904:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689a      	ldr	r2, [r3, #8]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002914:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 0202 	bic.w	r2, r2, #2
 8002924:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6899      	ldr	r1, [r3, #8]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	005a      	lsls	r2, r3, #1
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	430a      	orrs	r2, r1
 8002938:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d01b      	beq.n	800297c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002952:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002962:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6859      	ldr	r1, [r3, #4]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	3b01      	subs	r3, #1
 8002970:	035a      	lsls	r2, r3, #13
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	605a      	str	r2, [r3, #4]
 800297a:	e007      	b.n	800298c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800298a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800299a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	3b01      	subs	r3, #1
 80029a8:	051a      	lsls	r2, r3, #20
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80029c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	6899      	ldr	r1, [r3, #8]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029ce:	025a      	lsls	r2, r3, #9
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	430a      	orrs	r2, r1
 80029d6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689a      	ldr	r2, [r3, #8]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6899      	ldr	r1, [r3, #8]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	029a      	lsls	r2, r3, #10
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	430a      	orrs	r2, r1
 80029fa:	609a      	str	r2, [r3, #8]
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	40012300 	.word	0x40012300
 8002a0c:	0f000001 	.word	0x0f000001

08002a10 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e0ed      	b.n	8002bfe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d102      	bne.n	8002a34 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7fe faa6 	bl	8000f80 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f042 0201 	orr.w	r2, r2, #1
 8002a42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a44:	f7ff fcd8 	bl	80023f8 <HAL_GetTick>
 8002a48:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002a4a:	e012      	b.n	8002a72 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a4c:	f7ff fcd4 	bl	80023f8 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b0a      	cmp	r3, #10
 8002a58:	d90b      	bls.n	8002a72 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2205      	movs	r2, #5
 8002a6a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e0c5      	b.n	8002bfe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0e5      	beq.n	8002a4c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0202 	bic.w	r2, r2, #2
 8002a8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a90:	f7ff fcb2 	bl	80023f8 <HAL_GetTick>
 8002a94:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002a96:	e012      	b.n	8002abe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a98:	f7ff fcae 	bl	80023f8 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b0a      	cmp	r3, #10
 8002aa4:	d90b      	bls.n	8002abe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aaa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2205      	movs	r2, #5
 8002ab6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e09f      	b.n	8002bfe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1e5      	bne.n	8002a98 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	7e1b      	ldrb	r3, [r3, #24]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d108      	bne.n	8002ae6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	e007      	b.n	8002af6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002af4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	7e5b      	ldrb	r3, [r3, #25]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d108      	bne.n	8002b10 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	e007      	b.n	8002b20 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	7e9b      	ldrb	r3, [r3, #26]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d108      	bne.n	8002b3a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f042 0220 	orr.w	r2, r2, #32
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	e007      	b.n	8002b4a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 0220 	bic.w	r2, r2, #32
 8002b48:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	7edb      	ldrb	r3, [r3, #27]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d108      	bne.n	8002b64 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 0210 	bic.w	r2, r2, #16
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	e007      	b.n	8002b74 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 0210 	orr.w	r2, r2, #16
 8002b72:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	7f1b      	ldrb	r3, [r3, #28]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d108      	bne.n	8002b8e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f042 0208 	orr.w	r2, r2, #8
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	e007      	b.n	8002b9e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 0208 	bic.w	r2, r2, #8
 8002b9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	7f5b      	ldrb	r3, [r3, #29]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d108      	bne.n	8002bb8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f042 0204 	orr.w	r2, r2, #4
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	e007      	b.n	8002bc8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 0204 	bic.w	r2, r2, #4
 8002bc6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	ea42 0103 	orr.w	r1, r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	1e5a      	subs	r2, r3, #1
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	430a      	orrs	r2, r1
 8002bec:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
	...

08002c08 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c1e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002c20:	7cfb      	ldrb	r3, [r7, #19]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d003      	beq.n	8002c2e <HAL_CAN_ConfigFilter+0x26>
 8002c26:	7cfb      	ldrb	r3, [r7, #19]
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	f040 80c7 	bne.w	8002dbc <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a69      	ldr	r2, [pc, #420]	; (8002dd8 <HAL_CAN_ConfigFilter+0x1d0>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d001      	beq.n	8002c3c <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8002c38:	4b68      	ldr	r3, [pc, #416]	; (8002ddc <HAL_CAN_ConfigFilter+0x1d4>)
 8002c3a:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c42:	f043 0201 	orr.w	r2, r3, #1
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	4a63      	ldr	r2, [pc, #396]	; (8002ddc <HAL_CAN_ConfigFilter+0x1d4>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d111      	bne.n	8002c78 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c5a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6e:	021b      	lsls	r3, r3, #8
 8002c70:	431a      	orrs	r2, r3
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	f003 031f 	and.w	r3, r3, #31
 8002c80:	2201      	movs	r2, #1
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	43db      	mvns	r3, r3
 8002c92:	401a      	ands	r2, r3
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d123      	bne.n	8002cea <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	43db      	mvns	r3, r3
 8002cac:	401a      	ands	r2, r3
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002cc4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	3248      	adds	r2, #72	; 0x48
 8002cca:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002cde:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ce0:	6979      	ldr	r1, [r7, #20]
 8002ce2:	3348      	adds	r3, #72	; 0x48
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	440b      	add	r3, r1
 8002ce8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d122      	bne.n	8002d38 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002d12:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	3248      	adds	r2, #72	; 0x48
 8002d18:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002d2c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d2e:	6979      	ldr	r1, [r7, #20]
 8002d30:	3348      	adds	r3, #72	; 0x48
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	440b      	add	r3, r1
 8002d36:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d109      	bne.n	8002d54 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	401a      	ands	r2, r3
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002d52:	e007      	b.n	8002d64 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d109      	bne.n	8002d80 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	43db      	mvns	r3, r3
 8002d76:	401a      	ands	r2, r3
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002d7e:	e007      	b.n	8002d90 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	431a      	orrs	r2, r3
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	6a1b      	ldr	r3, [r3, #32]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d107      	bne.n	8002da8 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	431a      	orrs	r2, r3
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002dae:	f023 0201 	bic.w	r2, r3, #1
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002db8:	2300      	movs	r3, #0
 8002dba:	e006      	b.n	8002dca <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
  }
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	371c      	adds	r7, #28
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	40003400 	.word	0x40003400
 8002ddc:	40006400 	.word	0x40006400

08002de0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d12e      	bne.n	8002e52 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2202      	movs	r2, #2
 8002df8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 0201 	bic.w	r2, r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e0c:	f7ff faf4 	bl	80023f8 <HAL_GetTick>
 8002e10:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002e12:	e012      	b.n	8002e3a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e14:	f7ff faf0 	bl	80023f8 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b0a      	cmp	r3, #10
 8002e20:	d90b      	bls.n	8002e3a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e26:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2205      	movs	r2, #5
 8002e32:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e012      	b.n	8002e60 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1e5      	bne.n	8002e14 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	e006      	b.n	8002e60 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e56:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
  }
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b089      	sub	sp, #36	; 0x24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
 8002e74:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e7c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002e86:	7ffb      	ldrb	r3, [r7, #31]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d003      	beq.n	8002e94 <HAL_CAN_AddTxMessage+0x2c>
 8002e8c:	7ffb      	ldrb	r3, [r7, #31]
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	f040 80b8 	bne.w	8003004 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d10a      	bne.n	8002eb4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d105      	bne.n	8002eb4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f000 80a0 	beq.w	8002ff4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	0e1b      	lsrs	r3, r3, #24
 8002eb8:	f003 0303 	and.w	r3, r3, #3
 8002ebc:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d907      	bls.n	8002ed4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e09e      	b.n	8003012 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	409a      	lsls	r2, r3
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10d      	bne.n	8002f02 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002ef0:	68f9      	ldr	r1, [r7, #12]
 8002ef2:	6809      	ldr	r1, [r1, #0]
 8002ef4:	431a      	orrs	r2, r3
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	3318      	adds	r3, #24
 8002efa:	011b      	lsls	r3, r3, #4
 8002efc:	440b      	add	r3, r1
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	e00f      	b.n	8002f22 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f0c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f12:	68f9      	ldr	r1, [r7, #12]
 8002f14:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002f16:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	3318      	adds	r3, #24
 8002f1c:	011b      	lsls	r3, r3, #4
 8002f1e:	440b      	add	r3, r1
 8002f20:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6819      	ldr	r1, [r3, #0]
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	691a      	ldr	r2, [r3, #16]
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	3318      	adds	r3, #24
 8002f2e:	011b      	lsls	r3, r3, #4
 8002f30:	440b      	add	r3, r1
 8002f32:	3304      	adds	r3, #4
 8002f34:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	7d1b      	ldrb	r3, [r3, #20]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d111      	bne.n	8002f62 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	3318      	adds	r3, #24
 8002f46:	011b      	lsls	r3, r3, #4
 8002f48:	4413      	add	r3, r2
 8002f4a:	3304      	adds	r3, #4
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	6811      	ldr	r1, [r2, #0]
 8002f52:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	3318      	adds	r3, #24
 8002f5a:	011b      	lsls	r3, r3, #4
 8002f5c:	440b      	add	r3, r1
 8002f5e:	3304      	adds	r3, #4
 8002f60:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	3307      	adds	r3, #7
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	061a      	lsls	r2, r3, #24
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	3306      	adds	r3, #6
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	041b      	lsls	r3, r3, #16
 8002f72:	431a      	orrs	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3305      	adds	r3, #5
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	021b      	lsls	r3, r3, #8
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	3204      	adds	r2, #4
 8002f82:	7812      	ldrb	r2, [r2, #0]
 8002f84:	4610      	mov	r0, r2
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	6811      	ldr	r1, [r2, #0]
 8002f8a:	ea43 0200 	orr.w	r2, r3, r0
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	011b      	lsls	r3, r3, #4
 8002f92:	440b      	add	r3, r1
 8002f94:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002f98:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	3303      	adds	r3, #3
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	061a      	lsls	r2, r3, #24
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	3302      	adds	r3, #2
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	041b      	lsls	r3, r3, #16
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	021b      	lsls	r3, r3, #8
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	7812      	ldrb	r2, [r2, #0]
 8002fba:	4610      	mov	r0, r2
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	6811      	ldr	r1, [r2, #0]
 8002fc0:	ea43 0200 	orr.w	r2, r3, r0
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	011b      	lsls	r3, r3, #4
 8002fc8:	440b      	add	r3, r1
 8002fca:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002fce:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	3318      	adds	r3, #24
 8002fd8:	011b      	lsls	r3, r3, #4
 8002fda:	4413      	add	r3, r2
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	6811      	ldr	r1, [r2, #0]
 8002fe2:	f043 0201 	orr.w	r2, r3, #1
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	3318      	adds	r3, #24
 8002fea:	011b      	lsls	r3, r3, #4
 8002fec:	440b      	add	r3, r1
 8002fee:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	e00e      	b.n	8003012 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e006      	b.n	8003012 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003008:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
  }
}
 8003012:	4618      	mov	r0, r3
 8003014:	3724      	adds	r7, #36	; 0x24
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800301e:	b480      	push	{r7}
 8003020:	b087      	sub	sp, #28
 8003022:	af00      	add	r7, sp, #0
 8003024:	60f8      	str	r0, [r7, #12]
 8003026:	60b9      	str	r1, [r7, #8]
 8003028:	607a      	str	r2, [r7, #4]
 800302a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003032:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003034:	7dfb      	ldrb	r3, [r7, #23]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d003      	beq.n	8003042 <HAL_CAN_GetRxMessage+0x24>
 800303a:	7dfb      	ldrb	r3, [r7, #23]
 800303c:	2b02      	cmp	r3, #2
 800303e:	f040 80f3 	bne.w	8003228 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d10e      	bne.n	8003066 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d116      	bne.n	8003084 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e0e7      	b.n	8003236 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	f003 0303 	and.w	r3, r3, #3
 8003070:	2b00      	cmp	r3, #0
 8003072:	d107      	bne.n	8003084 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e0d8      	b.n	8003236 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	331b      	adds	r3, #27
 800308c:	011b      	lsls	r3, r3, #4
 800308e:	4413      	add	r3, r2
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0204 	and.w	r2, r3, #4
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10c      	bne.n	80030bc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	331b      	adds	r3, #27
 80030aa:	011b      	lsls	r3, r3, #4
 80030ac:	4413      	add	r3, r2
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	0d5b      	lsrs	r3, r3, #21
 80030b2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	e00b      	b.n	80030d4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	331b      	adds	r3, #27
 80030c4:	011b      	lsls	r3, r3, #4
 80030c6:	4413      	add	r3, r2
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	08db      	lsrs	r3, r3, #3
 80030cc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	331b      	adds	r3, #27
 80030dc:	011b      	lsls	r3, r3, #4
 80030de:	4413      	add	r3, r2
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0202 	and.w	r2, r3, #2
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	331b      	adds	r3, #27
 80030f2:	011b      	lsls	r3, r3, #4
 80030f4:	4413      	add	r3, r2
 80030f6:	3304      	adds	r3, #4
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 020f 	and.w	r2, r3, #15
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	331b      	adds	r3, #27
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	4413      	add	r3, r2
 800310e:	3304      	adds	r3, #4
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	0a1b      	lsrs	r3, r3, #8
 8003114:	b2da      	uxtb	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	331b      	adds	r3, #27
 8003122:	011b      	lsls	r3, r3, #4
 8003124:	4413      	add	r3, r2
 8003126:	3304      	adds	r3, #4
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	0c1b      	lsrs	r3, r3, #16
 800312c:	b29a      	uxth	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	011b      	lsls	r3, r3, #4
 800313a:	4413      	add	r3, r2
 800313c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	b2da      	uxtb	r2, r3
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	011b      	lsls	r3, r3, #4
 8003150:	4413      	add	r3, r2
 8003152:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	0a1a      	lsrs	r2, r3, #8
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	3301      	adds	r3, #1
 800315e:	b2d2      	uxtb	r2, r2
 8003160:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	011b      	lsls	r3, r3, #4
 800316a:	4413      	add	r3, r2
 800316c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	0c1a      	lsrs	r2, r3, #16
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	3302      	adds	r3, #2
 8003178:	b2d2      	uxtb	r2, r2
 800317a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	011b      	lsls	r3, r3, #4
 8003184:	4413      	add	r3, r2
 8003186:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	0e1a      	lsrs	r2, r3, #24
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	3303      	adds	r3, #3
 8003192:	b2d2      	uxtb	r2, r2
 8003194:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	011b      	lsls	r3, r3, #4
 800319e:	4413      	add	r3, r2
 80031a0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	3304      	adds	r3, #4
 80031aa:	b2d2      	uxtb	r2, r2
 80031ac:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	011b      	lsls	r3, r3, #4
 80031b6:	4413      	add	r3, r2
 80031b8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	0a1a      	lsrs	r2, r3, #8
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	3305      	adds	r3, #5
 80031c4:	b2d2      	uxtb	r2, r2
 80031c6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	011b      	lsls	r3, r3, #4
 80031d0:	4413      	add	r3, r2
 80031d2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	0c1a      	lsrs	r2, r3, #16
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	3306      	adds	r3, #6
 80031de:	b2d2      	uxtb	r2, r2
 80031e0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	011b      	lsls	r3, r3, #4
 80031ea:	4413      	add	r3, r2
 80031ec:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	0e1a      	lsrs	r2, r3, #24
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	3307      	adds	r3, #7
 80031f8:	b2d2      	uxtb	r2, r2
 80031fa:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d108      	bne.n	8003214 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68da      	ldr	r2, [r3, #12]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f042 0220 	orr.w	r2, r2, #32
 8003210:	60da      	str	r2, [r3, #12]
 8003212:	e007      	b.n	8003224 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	691a      	ldr	r2, [r3, #16]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0220 	orr.w	r2, r2, #32
 8003222:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003224:	2300      	movs	r3, #0
 8003226:	e006      	b.n	8003236 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
  }
}
 8003236:	4618      	mov	r0, r3
 8003238:	371c      	adds	r7, #28
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr

08003242 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003242:	b480      	push	{r7}
 8003244:	b085      	sub	sp, #20
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
 800324a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003252:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003254:	7bfb      	ldrb	r3, [r7, #15]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d002      	beq.n	8003260 <HAL_CAN_ActivateNotification+0x1e>
 800325a:	7bfb      	ldrb	r3, [r7, #15]
 800325c:	2b02      	cmp	r3, #2
 800325e:	d109      	bne.n	8003274 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6959      	ldr	r1, [r3, #20]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	430a      	orrs	r2, r1
 800326e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003270:	2300      	movs	r3, #0
 8003272:	e006      	b.n	8003282 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003278:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
  }
}
 8003282:	4618      	mov	r0, r3
 8003284:	3714      	adds	r7, #20
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr

0800328e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b08a      	sub	sp, #40	; 0x28
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003296:	2300      	movs	r3, #0
 8003298:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80032ca:	6a3b      	ldr	r3, [r7, #32]
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d07c      	beq.n	80033ce <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d023      	beq.n	8003326 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2201      	movs	r2, #1
 80032e4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d003      	beq.n	80032f8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 f983 	bl	80035fc <HAL_CAN_TxMailbox0CompleteCallback>
 80032f6:	e016      	b.n	8003326 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	f003 0304 	and.w	r3, r3, #4
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d004      	beq.n	800330c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003308:	627b      	str	r3, [r7, #36]	; 0x24
 800330a:	e00c      	b.n	8003326 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	f003 0308 	and.w	r3, r3, #8
 8003312:	2b00      	cmp	r3, #0
 8003314:	d004      	beq.n	8003320 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800331c:	627b      	str	r3, [r7, #36]	; 0x24
 800331e:	e002      	b.n	8003326 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 f989 	bl	8003638 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332c:	2b00      	cmp	r3, #0
 800332e:	d024      	beq.n	800337a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003338:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003340:	2b00      	cmp	r3, #0
 8003342:	d003      	beq.n	800334c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 f963 	bl	8003610 <HAL_CAN_TxMailbox1CompleteCallback>
 800334a:	e016      	b.n	800337a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003352:	2b00      	cmp	r3, #0
 8003354:	d004      	beq.n	8003360 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003358:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800335c:	627b      	str	r3, [r7, #36]	; 0x24
 800335e:	e00c      	b.n	800337a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003366:	2b00      	cmp	r3, #0
 8003368:	d004      	beq.n	8003374 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003370:	627b      	str	r3, [r7, #36]	; 0x24
 8003372:	e002      	b.n	800337a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 f969 	bl	800364c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d024      	beq.n	80033ce <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800338c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d003      	beq.n	80033a0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 f943 	bl	8003624 <HAL_CAN_TxMailbox2CompleteCallback>
 800339e:	e016      	b.n	80033ce <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d004      	beq.n	80033b4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80033aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033b0:	627b      	str	r3, [r7, #36]	; 0x24
 80033b2:	e00c      	b.n	80033ce <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d004      	beq.n	80033c8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80033be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c4:	627b      	str	r3, [r7, #36]	; 0x24
 80033c6:	e002      	b.n	80033ce <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 f949 	bl	8003660 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80033ce:	6a3b      	ldr	r3, [r7, #32]
 80033d0:	f003 0308 	and.w	r3, r3, #8
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00c      	beq.n	80033f2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f003 0310 	and.w	r3, r3, #16
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d007      	beq.n	80033f2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033e8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2210      	movs	r2, #16
 80033f0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	f003 0304 	and.w	r3, r3, #4
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00b      	beq.n	8003414 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f003 0308 	and.w	r3, r3, #8
 8003402:	2b00      	cmp	r3, #0
 8003404:	d006      	beq.n	8003414 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2208      	movs	r2, #8
 800340c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f930 	bl	8003674 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d009      	beq.n	8003432 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	f003 0303 	and.w	r3, r3, #3
 8003428:	2b00      	cmp	r3, #0
 800342a:	d002      	beq.n	8003432 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f7fe fae9 	bl	8001a04 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003432:	6a3b      	ldr	r3, [r7, #32]
 8003434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00c      	beq.n	8003456 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	f003 0310 	and.w	r3, r3, #16
 8003442:	2b00      	cmp	r3, #0
 8003444:	d007      	beq.n	8003456 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800344c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2210      	movs	r2, #16
 8003454:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003456:	6a3b      	ldr	r3, [r7, #32]
 8003458:	f003 0320 	and.w	r3, r3, #32
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00b      	beq.n	8003478 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	f003 0308 	and.w	r3, r3, #8
 8003466:	2b00      	cmp	r3, #0
 8003468:	d006      	beq.n	8003478 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2208      	movs	r2, #8
 8003470:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f912 	bl	800369c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003478:	6a3b      	ldr	r3, [r7, #32]
 800347a:	f003 0310 	and.w	r3, r3, #16
 800347e:	2b00      	cmp	r3, #0
 8003480:	d009      	beq.n	8003496 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	f003 0303 	and.w	r3, r3, #3
 800348c:	2b00      	cmp	r3, #0
 800348e:	d002      	beq.n	8003496 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 f8f9 	bl	8003688 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003496:	6a3b      	ldr	r3, [r7, #32]
 8003498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00b      	beq.n	80034b8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	f003 0310 	and.w	r3, r3, #16
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d006      	beq.n	80034b8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2210      	movs	r2, #16
 80034b0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f8fc 	bl	80036b0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80034b8:	6a3b      	ldr	r3, [r7, #32]
 80034ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00b      	beq.n	80034da <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	f003 0308 	and.w	r3, r3, #8
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d006      	beq.n	80034da <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2208      	movs	r2, #8
 80034d2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 f8f5 	bl	80036c4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80034da:	6a3b      	ldr	r3, [r7, #32]
 80034dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d07b      	beq.n	80035dc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	f003 0304 	and.w	r3, r3, #4
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d072      	beq.n	80035d4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d008      	beq.n	800350a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003504:	f043 0301 	orr.w	r3, r3, #1
 8003508:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800350a:	6a3b      	ldr	r3, [r7, #32]
 800350c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003510:	2b00      	cmp	r3, #0
 8003512:	d008      	beq.n	8003526 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	f043 0302 	orr.w	r3, r3, #2
 8003524:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003526:	6a3b      	ldr	r3, [r7, #32]
 8003528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800352c:	2b00      	cmp	r3, #0
 800352e:	d008      	beq.n	8003542 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	f043 0304 	orr.w	r3, r3, #4
 8003540:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003542:	6a3b      	ldr	r3, [r7, #32]
 8003544:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003548:	2b00      	cmp	r3, #0
 800354a:	d043      	beq.n	80035d4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003552:	2b00      	cmp	r3, #0
 8003554:	d03e      	beq.n	80035d4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800355c:	2b60      	cmp	r3, #96	; 0x60
 800355e:	d02b      	beq.n	80035b8 <HAL_CAN_IRQHandler+0x32a>
 8003560:	2b60      	cmp	r3, #96	; 0x60
 8003562:	d82e      	bhi.n	80035c2 <HAL_CAN_IRQHandler+0x334>
 8003564:	2b50      	cmp	r3, #80	; 0x50
 8003566:	d022      	beq.n	80035ae <HAL_CAN_IRQHandler+0x320>
 8003568:	2b50      	cmp	r3, #80	; 0x50
 800356a:	d82a      	bhi.n	80035c2 <HAL_CAN_IRQHandler+0x334>
 800356c:	2b40      	cmp	r3, #64	; 0x40
 800356e:	d019      	beq.n	80035a4 <HAL_CAN_IRQHandler+0x316>
 8003570:	2b40      	cmp	r3, #64	; 0x40
 8003572:	d826      	bhi.n	80035c2 <HAL_CAN_IRQHandler+0x334>
 8003574:	2b30      	cmp	r3, #48	; 0x30
 8003576:	d010      	beq.n	800359a <HAL_CAN_IRQHandler+0x30c>
 8003578:	2b30      	cmp	r3, #48	; 0x30
 800357a:	d822      	bhi.n	80035c2 <HAL_CAN_IRQHandler+0x334>
 800357c:	2b10      	cmp	r3, #16
 800357e:	d002      	beq.n	8003586 <HAL_CAN_IRQHandler+0x2f8>
 8003580:	2b20      	cmp	r3, #32
 8003582:	d005      	beq.n	8003590 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003584:	e01d      	b.n	80035c2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	f043 0308 	orr.w	r3, r3, #8
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800358e:	e019      	b.n	80035c4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003592:	f043 0310 	orr.w	r3, r3, #16
 8003596:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003598:	e014      	b.n	80035c4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800359a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359c:	f043 0320 	orr.w	r3, r3, #32
 80035a0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035a2:	e00f      	b.n	80035c4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80035a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035aa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035ac:	e00a      	b.n	80035c4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035b4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035b6:	e005      	b.n	80035c4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80035b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035be:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035c0:	e000      	b.n	80035c4 <HAL_CAN_IRQHandler+0x336>
            break;
 80035c2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	699a      	ldr	r2, [r3, #24]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80035d2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2204      	movs	r2, #4
 80035da:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80035dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d008      	beq.n	80035f4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e8:	431a      	orrs	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 f872 	bl	80036d8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80035f4:	bf00      	nop
 80035f6:	3728      	adds	r7, #40	; 0x28
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f003 0307 	and.w	r3, r3, #7
 80036fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036fc:	4b0b      	ldr	r3, [pc, #44]	; (800372c <__NVIC_SetPriorityGrouping+0x40>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003702:	68ba      	ldr	r2, [r7, #8]
 8003704:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003708:	4013      	ands	r3, r2
 800370a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003714:	4b06      	ldr	r3, [pc, #24]	; (8003730 <__NVIC_SetPriorityGrouping+0x44>)
 8003716:	4313      	orrs	r3, r2
 8003718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800371a:	4a04      	ldr	r2, [pc, #16]	; (800372c <__NVIC_SetPriorityGrouping+0x40>)
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	60d3      	str	r3, [r2, #12]
}
 8003720:	bf00      	nop
 8003722:	3714      	adds	r7, #20
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	e000ed00 	.word	0xe000ed00
 8003730:	05fa0000 	.word	0x05fa0000

08003734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003738:	4b04      	ldr	r3, [pc, #16]	; (800374c <__NVIC_GetPriorityGrouping+0x18>)
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	0a1b      	lsrs	r3, r3, #8
 800373e:	f003 0307 	and.w	r3, r3, #7
}
 8003742:	4618      	mov	r0, r3
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	e000ed00 	.word	0xe000ed00

08003750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	4603      	mov	r3, r0
 8003758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800375a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800375e:	2b00      	cmp	r3, #0
 8003760:	db0b      	blt.n	800377a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003762:	79fb      	ldrb	r3, [r7, #7]
 8003764:	f003 021f 	and.w	r2, r3, #31
 8003768:	4907      	ldr	r1, [pc, #28]	; (8003788 <__NVIC_EnableIRQ+0x38>)
 800376a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376e:	095b      	lsrs	r3, r3, #5
 8003770:	2001      	movs	r0, #1
 8003772:	fa00 f202 	lsl.w	r2, r0, r2
 8003776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800377a:	bf00      	nop
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	e000e100 	.word	0xe000e100

0800378c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	4603      	mov	r3, r0
 8003794:	6039      	str	r1, [r7, #0]
 8003796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379c:	2b00      	cmp	r3, #0
 800379e:	db0a      	blt.n	80037b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	b2da      	uxtb	r2, r3
 80037a4:	490c      	ldr	r1, [pc, #48]	; (80037d8 <__NVIC_SetPriority+0x4c>)
 80037a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037aa:	0112      	lsls	r2, r2, #4
 80037ac:	b2d2      	uxtb	r2, r2
 80037ae:	440b      	add	r3, r1
 80037b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037b4:	e00a      	b.n	80037cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	4908      	ldr	r1, [pc, #32]	; (80037dc <__NVIC_SetPriority+0x50>)
 80037bc:	79fb      	ldrb	r3, [r7, #7]
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	3b04      	subs	r3, #4
 80037c4:	0112      	lsls	r2, r2, #4
 80037c6:	b2d2      	uxtb	r2, r2
 80037c8:	440b      	add	r3, r1
 80037ca:	761a      	strb	r2, [r3, #24]
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	e000e100 	.word	0xe000e100
 80037dc:	e000ed00 	.word	0xe000ed00

080037e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b089      	sub	sp, #36	; 0x24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	f1c3 0307 	rsb	r3, r3, #7
 80037fa:	2b04      	cmp	r3, #4
 80037fc:	bf28      	it	cs
 80037fe:	2304      	movcs	r3, #4
 8003800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	3304      	adds	r3, #4
 8003806:	2b06      	cmp	r3, #6
 8003808:	d902      	bls.n	8003810 <NVIC_EncodePriority+0x30>
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	3b03      	subs	r3, #3
 800380e:	e000      	b.n	8003812 <NVIC_EncodePriority+0x32>
 8003810:	2300      	movs	r3, #0
 8003812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003814:	f04f 32ff 	mov.w	r2, #4294967295
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	fa02 f303 	lsl.w	r3, r2, r3
 800381e:	43da      	mvns	r2, r3
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	401a      	ands	r2, r3
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003828:	f04f 31ff 	mov.w	r1, #4294967295
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	fa01 f303 	lsl.w	r3, r1, r3
 8003832:	43d9      	mvns	r1, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003838:	4313      	orrs	r3, r2
         );
}
 800383a:	4618      	mov	r0, r3
 800383c:	3724      	adds	r7, #36	; 0x24
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
	...

08003848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	3b01      	subs	r3, #1
 8003854:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003858:	d301      	bcc.n	800385e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800385a:	2301      	movs	r3, #1
 800385c:	e00f      	b.n	800387e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800385e:	4a0a      	ldr	r2, [pc, #40]	; (8003888 <SysTick_Config+0x40>)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3b01      	subs	r3, #1
 8003864:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003866:	210f      	movs	r1, #15
 8003868:	f04f 30ff 	mov.w	r0, #4294967295
 800386c:	f7ff ff8e 	bl	800378c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003870:	4b05      	ldr	r3, [pc, #20]	; (8003888 <SysTick_Config+0x40>)
 8003872:	2200      	movs	r2, #0
 8003874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003876:	4b04      	ldr	r3, [pc, #16]	; (8003888 <SysTick_Config+0x40>)
 8003878:	2207      	movs	r2, #7
 800387a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	e000e010 	.word	0xe000e010

0800388c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f7ff ff29 	bl	80036ec <__NVIC_SetPriorityGrouping>
}
 800389a:	bf00      	nop
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b086      	sub	sp, #24
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	4603      	mov	r3, r0
 80038aa:	60b9      	str	r1, [r7, #8]
 80038ac:	607a      	str	r2, [r7, #4]
 80038ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80038b0:	2300      	movs	r3, #0
 80038b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038b4:	f7ff ff3e 	bl	8003734 <__NVIC_GetPriorityGrouping>
 80038b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	68b9      	ldr	r1, [r7, #8]
 80038be:	6978      	ldr	r0, [r7, #20]
 80038c0:	f7ff ff8e 	bl	80037e0 <NVIC_EncodePriority>
 80038c4:	4602      	mov	r2, r0
 80038c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ca:	4611      	mov	r1, r2
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7ff ff5d 	bl	800378c <__NVIC_SetPriority>
}
 80038d2:	bf00      	nop
 80038d4:	3718      	adds	r7, #24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b082      	sub	sp, #8
 80038de:	af00      	add	r7, sp, #0
 80038e0:	4603      	mov	r3, r0
 80038e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7ff ff31 	bl	8003750 <__NVIC_EnableIRQ>
}
 80038ee:	bf00      	nop
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b082      	sub	sp, #8
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7ff ffa2 	bl	8003848 <SysTick_Config>
 8003904:	4603      	mov	r3, r0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
	...

08003910 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003910:	b480      	push	{r7}
 8003912:	b089      	sub	sp, #36	; 0x24
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800391a:	2300      	movs	r3, #0
 800391c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800391e:	2300      	movs	r3, #0
 8003920:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003922:	2300      	movs	r3, #0
 8003924:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003926:	2300      	movs	r3, #0
 8003928:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800392a:	2300      	movs	r3, #0
 800392c:	61fb      	str	r3, [r7, #28]
 800392e:	e175      	b.n	8003c1c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003930:	2201      	movs	r2, #1
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	4013      	ands	r3, r2
 8003942:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	429a      	cmp	r2, r3
 800394a:	f040 8164 	bne.w	8003c16 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f003 0303 	and.w	r3, r3, #3
 8003956:	2b01      	cmp	r3, #1
 8003958:	d005      	beq.n	8003966 <HAL_GPIO_Init+0x56>
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f003 0303 	and.w	r3, r3, #3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d130      	bne.n	80039c8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	2203      	movs	r2, #3
 8003972:	fa02 f303 	lsl.w	r3, r2, r3
 8003976:	43db      	mvns	r3, r3
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	4013      	ands	r3, r2
 800397c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	68da      	ldr	r2, [r3, #12]
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	fa02 f303 	lsl.w	r3, r2, r3
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	4313      	orrs	r3, r2
 800398e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800399c:	2201      	movs	r2, #1
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	43db      	mvns	r3, r3
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	4013      	ands	r3, r2
 80039aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	091b      	lsrs	r3, r3, #4
 80039b2:	f003 0201 	and.w	r2, r3, #1
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	4313      	orrs	r3, r2
 80039c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f003 0303 	and.w	r3, r3, #3
 80039d0:	2b03      	cmp	r3, #3
 80039d2:	d017      	beq.n	8003a04 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	2203      	movs	r2, #3
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	43db      	mvns	r3, r3
 80039e6:	69ba      	ldr	r2, [r7, #24]
 80039e8:	4013      	ands	r3, r2
 80039ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	689a      	ldr	r2, [r3, #8]
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f003 0303 	and.w	r3, r3, #3
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d123      	bne.n	8003a58 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	08da      	lsrs	r2, r3, #3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	3208      	adds	r2, #8
 8003a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	f003 0307 	and.w	r3, r3, #7
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	220f      	movs	r2, #15
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	43db      	mvns	r3, r3
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	4013      	ands	r3, r2
 8003a32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	691a      	ldr	r2, [r3, #16]
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	f003 0307 	and.w	r3, r3, #7
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	08da      	lsrs	r2, r3, #3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	3208      	adds	r2, #8
 8003a52:	69b9      	ldr	r1, [r7, #24]
 8003a54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	005b      	lsls	r3, r3, #1
 8003a62:	2203      	movs	r2, #3
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	43db      	mvns	r3, r3
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f003 0203 	and.w	r2, r3, #3
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 80be 	beq.w	8003c16 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a9a:	4b66      	ldr	r3, [pc, #408]	; (8003c34 <HAL_GPIO_Init+0x324>)
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9e:	4a65      	ldr	r2, [pc, #404]	; (8003c34 <HAL_GPIO_Init+0x324>)
 8003aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8003aa6:	4b63      	ldr	r3, [pc, #396]	; (8003c34 <HAL_GPIO_Init+0x324>)
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aae:	60fb      	str	r3, [r7, #12]
 8003ab0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003ab2:	4a61      	ldr	r2, [pc, #388]	; (8003c38 <HAL_GPIO_Init+0x328>)
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	089b      	lsrs	r3, r3, #2
 8003ab8:	3302      	adds	r3, #2
 8003aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	f003 0303 	and.w	r3, r3, #3
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	220f      	movs	r2, #15
 8003aca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ace:	43db      	mvns	r3, r3
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a58      	ldr	r2, [pc, #352]	; (8003c3c <HAL_GPIO_Init+0x32c>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d037      	beq.n	8003b4e <HAL_GPIO_Init+0x23e>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a57      	ldr	r2, [pc, #348]	; (8003c40 <HAL_GPIO_Init+0x330>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d031      	beq.n	8003b4a <HAL_GPIO_Init+0x23a>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a56      	ldr	r2, [pc, #344]	; (8003c44 <HAL_GPIO_Init+0x334>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d02b      	beq.n	8003b46 <HAL_GPIO_Init+0x236>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a55      	ldr	r2, [pc, #340]	; (8003c48 <HAL_GPIO_Init+0x338>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d025      	beq.n	8003b42 <HAL_GPIO_Init+0x232>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a54      	ldr	r2, [pc, #336]	; (8003c4c <HAL_GPIO_Init+0x33c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d01f      	beq.n	8003b3e <HAL_GPIO_Init+0x22e>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a53      	ldr	r2, [pc, #332]	; (8003c50 <HAL_GPIO_Init+0x340>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d019      	beq.n	8003b3a <HAL_GPIO_Init+0x22a>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a52      	ldr	r2, [pc, #328]	; (8003c54 <HAL_GPIO_Init+0x344>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d013      	beq.n	8003b36 <HAL_GPIO_Init+0x226>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a51      	ldr	r2, [pc, #324]	; (8003c58 <HAL_GPIO_Init+0x348>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d00d      	beq.n	8003b32 <HAL_GPIO_Init+0x222>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a50      	ldr	r2, [pc, #320]	; (8003c5c <HAL_GPIO_Init+0x34c>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d007      	beq.n	8003b2e <HAL_GPIO_Init+0x21e>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a4f      	ldr	r2, [pc, #316]	; (8003c60 <HAL_GPIO_Init+0x350>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d101      	bne.n	8003b2a <HAL_GPIO_Init+0x21a>
 8003b26:	2309      	movs	r3, #9
 8003b28:	e012      	b.n	8003b50 <HAL_GPIO_Init+0x240>
 8003b2a:	230a      	movs	r3, #10
 8003b2c:	e010      	b.n	8003b50 <HAL_GPIO_Init+0x240>
 8003b2e:	2308      	movs	r3, #8
 8003b30:	e00e      	b.n	8003b50 <HAL_GPIO_Init+0x240>
 8003b32:	2307      	movs	r3, #7
 8003b34:	e00c      	b.n	8003b50 <HAL_GPIO_Init+0x240>
 8003b36:	2306      	movs	r3, #6
 8003b38:	e00a      	b.n	8003b50 <HAL_GPIO_Init+0x240>
 8003b3a:	2305      	movs	r3, #5
 8003b3c:	e008      	b.n	8003b50 <HAL_GPIO_Init+0x240>
 8003b3e:	2304      	movs	r3, #4
 8003b40:	e006      	b.n	8003b50 <HAL_GPIO_Init+0x240>
 8003b42:	2303      	movs	r3, #3
 8003b44:	e004      	b.n	8003b50 <HAL_GPIO_Init+0x240>
 8003b46:	2302      	movs	r3, #2
 8003b48:	e002      	b.n	8003b50 <HAL_GPIO_Init+0x240>
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e000      	b.n	8003b50 <HAL_GPIO_Init+0x240>
 8003b4e:	2300      	movs	r3, #0
 8003b50:	69fa      	ldr	r2, [r7, #28]
 8003b52:	f002 0203 	and.w	r2, r2, #3
 8003b56:	0092      	lsls	r2, r2, #2
 8003b58:	4093      	lsls	r3, r2
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003b60:	4935      	ldr	r1, [pc, #212]	; (8003c38 <HAL_GPIO_Init+0x328>)
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	089b      	lsrs	r3, r3, #2
 8003b66:	3302      	adds	r3, #2
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b6e:	4b3d      	ldr	r3, [pc, #244]	; (8003c64 <HAL_GPIO_Init+0x354>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	43db      	mvns	r3, r3
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b92:	4a34      	ldr	r2, [pc, #208]	; (8003c64 <HAL_GPIO_Init+0x354>)
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b98:	4b32      	ldr	r3, [pc, #200]	; (8003c64 <HAL_GPIO_Init+0x354>)
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d003      	beq.n	8003bbc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003bbc:	4a29      	ldr	r2, [pc, #164]	; (8003c64 <HAL_GPIO_Init+0x354>)
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003bc2:	4b28      	ldr	r3, [pc, #160]	; (8003c64 <HAL_GPIO_Init+0x354>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	43db      	mvns	r3, r3
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003be6:	4a1f      	ldr	r2, [pc, #124]	; (8003c64 <HAL_GPIO_Init+0x354>)
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bec:	4b1d      	ldr	r3, [pc, #116]	; (8003c64 <HAL_GPIO_Init+0x354>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	43db      	mvns	r3, r3
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d003      	beq.n	8003c10 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c10:	4a14      	ldr	r2, [pc, #80]	; (8003c64 <HAL_GPIO_Init+0x354>)
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	3301      	adds	r3, #1
 8003c1a:	61fb      	str	r3, [r7, #28]
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	2b0f      	cmp	r3, #15
 8003c20:	f67f ae86 	bls.w	8003930 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003c24:	bf00      	nop
 8003c26:	bf00      	nop
 8003c28:	3724      	adds	r7, #36	; 0x24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	40023800 	.word	0x40023800
 8003c38:	40013800 	.word	0x40013800
 8003c3c:	40020000 	.word	0x40020000
 8003c40:	40020400 	.word	0x40020400
 8003c44:	40020800 	.word	0x40020800
 8003c48:	40020c00 	.word	0x40020c00
 8003c4c:	40021000 	.word	0x40021000
 8003c50:	40021400 	.word	0x40021400
 8003c54:	40021800 	.word	0x40021800
 8003c58:	40021c00 	.word	0x40021c00
 8003c5c:	40022000 	.word	0x40022000
 8003c60:	40022400 	.word	0x40022400
 8003c64:	40013c00 	.word	0x40013c00

08003c68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	460b      	mov	r3, r1
 8003c72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	691a      	ldr	r2, [r3, #16]
 8003c78:	887b      	ldrh	r3, [r7, #2]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d002      	beq.n	8003c86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c80:	2301      	movs	r3, #1
 8003c82:	73fb      	strb	r3, [r7, #15]
 8003c84:	e001      	b.n	8003c8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c86:	2300      	movs	r3, #0
 8003c88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3714      	adds	r7, #20
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	807b      	strh	r3, [r7, #2]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ca8:	787b      	ldrb	r3, [r7, #1]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cae:	887a      	ldrh	r2, [r7, #2]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003cb4:	e003      	b.n	8003cbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003cb6:	887b      	ldrh	r3, [r7, #2]
 8003cb8:	041a      	lsls	r2, r3, #16
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	619a      	str	r2, [r3, #24]
}
 8003cbe:	bf00      	nop
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
	...

08003ccc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003cd6:	4b23      	ldr	r3, [pc, #140]	; (8003d64 <HAL_PWREx_EnableOverDrive+0x98>)
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	4a22      	ldr	r2, [pc, #136]	; (8003d64 <HAL_PWREx_EnableOverDrive+0x98>)
 8003cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ce2:	4b20      	ldr	r3, [pc, #128]	; (8003d64 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cea:	603b      	str	r3, [r7, #0]
 8003cec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003cee:	4b1e      	ldr	r3, [pc, #120]	; (8003d68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a1d      	ldr	r2, [pc, #116]	; (8003d68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cf8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cfa:	f7fe fb7d 	bl	80023f8 <HAL_GetTick>
 8003cfe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d00:	e009      	b.n	8003d16 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d02:	f7fe fb79 	bl	80023f8 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d10:	d901      	bls.n	8003d16 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e022      	b.n	8003d5c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d16:	4b14      	ldr	r3, [pc, #80]	; (8003d68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d22:	d1ee      	bne.n	8003d02 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003d24:	4b10      	ldr	r3, [pc, #64]	; (8003d68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a0f      	ldr	r2, [pc, #60]	; (8003d68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d2e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d30:	f7fe fb62 	bl	80023f8 <HAL_GetTick>
 8003d34:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003d36:	e009      	b.n	8003d4c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d38:	f7fe fb5e 	bl	80023f8 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d46:	d901      	bls.n	8003d4c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e007      	b.n	8003d5c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003d4c:	4b06      	ldr	r3, [pc, #24]	; (8003d68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d58:	d1ee      	bne.n	8003d38 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	40023800 	.word	0x40023800
 8003d68:	40007000 	.word	0x40007000

08003d6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003d74:	2300      	movs	r3, #0
 8003d76:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e29b      	b.n	80042ba <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f000 8087 	beq.w	8003e9e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d90:	4b96      	ldr	r3, [pc, #600]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f003 030c 	and.w	r3, r3, #12
 8003d98:	2b04      	cmp	r3, #4
 8003d9a:	d00c      	beq.n	8003db6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d9c:	4b93      	ldr	r3, [pc, #588]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f003 030c 	and.w	r3, r3, #12
 8003da4:	2b08      	cmp	r3, #8
 8003da6:	d112      	bne.n	8003dce <HAL_RCC_OscConfig+0x62>
 8003da8:	4b90      	ldr	r3, [pc, #576]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003db0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003db4:	d10b      	bne.n	8003dce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003db6:	4b8d      	ldr	r3, [pc, #564]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d06c      	beq.n	8003e9c <HAL_RCC_OscConfig+0x130>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d168      	bne.n	8003e9c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e275      	b.n	80042ba <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dd6:	d106      	bne.n	8003de6 <HAL_RCC_OscConfig+0x7a>
 8003dd8:	4b84      	ldr	r3, [pc, #528]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a83      	ldr	r2, [pc, #524]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003dde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003de2:	6013      	str	r3, [r2, #0]
 8003de4:	e02e      	b.n	8003e44 <HAL_RCC_OscConfig+0xd8>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10c      	bne.n	8003e08 <HAL_RCC_OscConfig+0x9c>
 8003dee:	4b7f      	ldr	r3, [pc, #508]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a7e      	ldr	r2, [pc, #504]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003df4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003df8:	6013      	str	r3, [r2, #0]
 8003dfa:	4b7c      	ldr	r3, [pc, #496]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a7b      	ldr	r2, [pc, #492]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003e00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e04:	6013      	str	r3, [r2, #0]
 8003e06:	e01d      	b.n	8003e44 <HAL_RCC_OscConfig+0xd8>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e10:	d10c      	bne.n	8003e2c <HAL_RCC_OscConfig+0xc0>
 8003e12:	4b76      	ldr	r3, [pc, #472]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a75      	ldr	r2, [pc, #468]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003e18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e1c:	6013      	str	r3, [r2, #0]
 8003e1e:	4b73      	ldr	r3, [pc, #460]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a72      	ldr	r2, [pc, #456]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e28:	6013      	str	r3, [r2, #0]
 8003e2a:	e00b      	b.n	8003e44 <HAL_RCC_OscConfig+0xd8>
 8003e2c:	4b6f      	ldr	r3, [pc, #444]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a6e      	ldr	r2, [pc, #440]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e36:	6013      	str	r3, [r2, #0]
 8003e38:	4b6c      	ldr	r3, [pc, #432]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a6b      	ldr	r2, [pc, #428]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003e3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d013      	beq.n	8003e74 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4c:	f7fe fad4 	bl	80023f8 <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e54:	f7fe fad0 	bl	80023f8 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b64      	cmp	r3, #100	; 0x64
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e229      	b.n	80042ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e66:	4b61      	ldr	r3, [pc, #388]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d0f0      	beq.n	8003e54 <HAL_RCC_OscConfig+0xe8>
 8003e72:	e014      	b.n	8003e9e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e74:	f7fe fac0 	bl	80023f8 <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e7c:	f7fe fabc 	bl	80023f8 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b64      	cmp	r3, #100	; 0x64
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e215      	b.n	80042ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e8e:	4b57      	ldr	r3, [pc, #348]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1f0      	bne.n	8003e7c <HAL_RCC_OscConfig+0x110>
 8003e9a:	e000      	b.n	8003e9e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d069      	beq.n	8003f7e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003eaa:	4b50      	ldr	r3, [pc, #320]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 030c 	and.w	r3, r3, #12
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00b      	beq.n	8003ece <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eb6:	4b4d      	ldr	r3, [pc, #308]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f003 030c 	and.w	r3, r3, #12
 8003ebe:	2b08      	cmp	r3, #8
 8003ec0:	d11c      	bne.n	8003efc <HAL_RCC_OscConfig+0x190>
 8003ec2:	4b4a      	ldr	r3, [pc, #296]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d116      	bne.n	8003efc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ece:	4b47      	ldr	r3, [pc, #284]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d005      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x17a>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d001      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e1e9      	b.n	80042ba <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ee6:	4b41      	ldr	r3, [pc, #260]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	493d      	ldr	r1, [pc, #244]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003efa:	e040      	b.n	8003f7e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d023      	beq.n	8003f4c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f04:	4b39      	ldr	r3, [pc, #228]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a38      	ldr	r2, [pc, #224]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003f0a:	f043 0301 	orr.w	r3, r3, #1
 8003f0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f10:	f7fe fa72 	bl	80023f8 <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f16:	e008      	b.n	8003f2a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f18:	f7fe fa6e 	bl	80023f8 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e1c7      	b.n	80042ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f2a:	4b30      	ldr	r3, [pc, #192]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d0f0      	beq.n	8003f18 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f36:	4b2d      	ldr	r3, [pc, #180]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	4929      	ldr	r1, [pc, #164]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	600b      	str	r3, [r1, #0]
 8003f4a:	e018      	b.n	8003f7e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f4c:	4b27      	ldr	r3, [pc, #156]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a26      	ldr	r2, [pc, #152]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003f52:	f023 0301 	bic.w	r3, r3, #1
 8003f56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f58:	f7fe fa4e 	bl	80023f8 <HAL_GetTick>
 8003f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f60:	f7fe fa4a 	bl	80023f8 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e1a3      	b.n	80042ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f72:	4b1e      	ldr	r3, [pc, #120]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1f0      	bne.n	8003f60 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0308 	and.w	r3, r3, #8
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d038      	beq.n	8003ffc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d019      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f92:	4b16      	ldr	r3, [pc, #88]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003f94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f96:	4a15      	ldr	r2, [pc, #84]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003f98:	f043 0301 	orr.w	r3, r3, #1
 8003f9c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f9e:	f7fe fa2b 	bl	80023f8 <HAL_GetTick>
 8003fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fa4:	e008      	b.n	8003fb8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fa6:	f7fe fa27 	bl	80023f8 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e180      	b.n	80042ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fb8:	4b0c      	ldr	r3, [pc, #48]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003fba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fbc:	f003 0302 	and.w	r3, r3, #2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d0f0      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x23a>
 8003fc4:	e01a      	b.n	8003ffc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fc6:	4b09      	ldr	r3, [pc, #36]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003fc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fca:	4a08      	ldr	r2, [pc, #32]	; (8003fec <HAL_RCC_OscConfig+0x280>)
 8003fcc:	f023 0301 	bic.w	r3, r3, #1
 8003fd0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd2:	f7fe fa11 	bl	80023f8 <HAL_GetTick>
 8003fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fd8:	e00a      	b.n	8003ff0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fda:	f7fe fa0d 	bl	80023f8 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d903      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e166      	b.n	80042ba <HAL_RCC_OscConfig+0x54e>
 8003fec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ff0:	4b92      	ldr	r3, [pc, #584]	; (800423c <HAL_RCC_OscConfig+0x4d0>)
 8003ff2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1ee      	bne.n	8003fda <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 80a4 	beq.w	8004152 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800400a:	4b8c      	ldr	r3, [pc, #560]	; (800423c <HAL_RCC_OscConfig+0x4d0>)
 800400c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d10d      	bne.n	8004032 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004016:	4b89      	ldr	r3, [pc, #548]	; (800423c <HAL_RCC_OscConfig+0x4d0>)
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	4a88      	ldr	r2, [pc, #544]	; (800423c <HAL_RCC_OscConfig+0x4d0>)
 800401c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004020:	6413      	str	r3, [r2, #64]	; 0x40
 8004022:	4b86      	ldr	r3, [pc, #536]	; (800423c <HAL_RCC_OscConfig+0x4d0>)
 8004024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800402a:	60bb      	str	r3, [r7, #8]
 800402c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800402e:	2301      	movs	r3, #1
 8004030:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004032:	4b83      	ldr	r3, [pc, #524]	; (8004240 <HAL_RCC_OscConfig+0x4d4>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800403a:	2b00      	cmp	r3, #0
 800403c:	d118      	bne.n	8004070 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800403e:	4b80      	ldr	r3, [pc, #512]	; (8004240 <HAL_RCC_OscConfig+0x4d4>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a7f      	ldr	r2, [pc, #508]	; (8004240 <HAL_RCC_OscConfig+0x4d4>)
 8004044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004048:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800404a:	f7fe f9d5 	bl	80023f8 <HAL_GetTick>
 800404e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004050:	e008      	b.n	8004064 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004052:	f7fe f9d1 	bl	80023f8 <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	2b64      	cmp	r3, #100	; 0x64
 800405e:	d901      	bls.n	8004064 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e12a      	b.n	80042ba <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004064:	4b76      	ldr	r3, [pc, #472]	; (8004240 <HAL_RCC_OscConfig+0x4d4>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800406c:	2b00      	cmp	r3, #0
 800406e:	d0f0      	beq.n	8004052 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d106      	bne.n	8004086 <HAL_RCC_OscConfig+0x31a>
 8004078:	4b70      	ldr	r3, [pc, #448]	; (800423c <HAL_RCC_OscConfig+0x4d0>)
 800407a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800407c:	4a6f      	ldr	r2, [pc, #444]	; (800423c <HAL_RCC_OscConfig+0x4d0>)
 800407e:	f043 0301 	orr.w	r3, r3, #1
 8004082:	6713      	str	r3, [r2, #112]	; 0x70
 8004084:	e02d      	b.n	80040e2 <HAL_RCC_OscConfig+0x376>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10c      	bne.n	80040a8 <HAL_RCC_OscConfig+0x33c>
 800408e:	4b6b      	ldr	r3, [pc, #428]	; (800423c <HAL_RCC_OscConfig+0x4d0>)
 8004090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004092:	4a6a      	ldr	r2, [pc, #424]	; (800423c <HAL_RCC_OscConfig+0x4d0>)
 8004094:	f023 0301 	bic.w	r3, r3, #1
 8004098:	6713      	str	r3, [r2, #112]	; 0x70
 800409a:	4b68      	ldr	r3, [pc, #416]	; (800423c <HAL_RCC_OscConfig+0x4d0>)
 800409c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409e:	4a67      	ldr	r2, [pc, #412]	; (800423c <HAL_RCC_OscConfig+0x4d0>)
 80040a0:	f023 0304 	bic.w	r3, r3, #4
 80040a4:	6713      	str	r3, [r2, #112]	; 0x70
 80040a6:	e01c      	b.n	80040e2 <HAL_RCC_OscConfig+0x376>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	2b05      	cmp	r3, #5
 80040ae:	d10c      	bne.n	80040ca <HAL_RCC_OscConfig+0x35e>
 80040b0:	4b62      	ldr	r3, [pc, #392]	; (800423c <HAL_RCC_OscConfig+0x4d0>)
 80040b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b4:	4a61      	ldr	r2, [pc, #388]	; (800423c <HAL_RCC_OscConfig+0x4d0>)
 80040b6:	f043 0304 	orr.w	r3, r3, #4
 80040ba:	6713      	str	r3, [r2, #112]	; 0x70
 80040bc:	4b5f      	ldr	r3, [pc, #380]	; (800423c <HAL_RCC_OscConfig+0x4d0>)
 80040be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c0:	4a5e      	ldr	r2, [pc, #376]	; (800423c <HAL_RCC_OscConfig+0x4d0>)
 80040c2:	f043 0301 	orr.w	r3, r3, #1
 80040c6:	6713      	str	r3, [r2, #112]	; 0x70
 80040c8:	e00b      	b.n	80040e2 <HAL_RCC_OscConfig+0x376>
 80040ca:	4b5c      	ldr	r3, [pc, #368]	; (800423c <HAL_RCC_OscConfig+0x4d0>)
 80040cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ce:	4a5b      	ldr	r2, [pc, #364]	; (800423c <HAL_RCC_OscConfig+0x4d0>)
 80040d0:	f023 0301 	bic.w	r3, r3, #1
 80040d4:	6713      	str	r3, [r2, #112]	; 0x70
 80040d6:	4b59      	ldr	r3, [pc, #356]	; (800423c <HAL_RCC_OscConfig+0x4d0>)
 80040d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040da:	4a58      	ldr	r2, [pc, #352]	; (800423c <HAL_RCC_OscConfig+0x4d0>)
 80040dc:	f023 0304 	bic.w	r3, r3, #4
 80040e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d015      	beq.n	8004116 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ea:	f7fe f985 	bl	80023f8 <HAL_GetTick>
 80040ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040f0:	e00a      	b.n	8004108 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040f2:	f7fe f981 	bl	80023f8 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004100:	4293      	cmp	r3, r2
 8004102:	d901      	bls.n	8004108 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e0d8      	b.n	80042ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004108:	4b4c      	ldr	r3, [pc, #304]	; (800423c <HAL_RCC_OscConfig+0x4d0>)
 800410a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d0ee      	beq.n	80040f2 <HAL_RCC_OscConfig+0x386>
 8004114:	e014      	b.n	8004140 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004116:	f7fe f96f 	bl	80023f8 <HAL_GetTick>
 800411a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800411c:	e00a      	b.n	8004134 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800411e:	f7fe f96b 	bl	80023f8 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	f241 3288 	movw	r2, #5000	; 0x1388
 800412c:	4293      	cmp	r3, r2
 800412e:	d901      	bls.n	8004134 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e0c2      	b.n	80042ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004134:	4b41      	ldr	r3, [pc, #260]	; (800423c <HAL_RCC_OscConfig+0x4d0>)
 8004136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1ee      	bne.n	800411e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004140:	7dfb      	ldrb	r3, [r7, #23]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d105      	bne.n	8004152 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004146:	4b3d      	ldr	r3, [pc, #244]	; (800423c <HAL_RCC_OscConfig+0x4d0>)
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	4a3c      	ldr	r2, [pc, #240]	; (800423c <HAL_RCC_OscConfig+0x4d0>)
 800414c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004150:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	2b00      	cmp	r3, #0
 8004158:	f000 80ae 	beq.w	80042b8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800415c:	4b37      	ldr	r3, [pc, #220]	; (800423c <HAL_RCC_OscConfig+0x4d0>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f003 030c 	and.w	r3, r3, #12
 8004164:	2b08      	cmp	r3, #8
 8004166:	d06d      	beq.n	8004244 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	2b02      	cmp	r3, #2
 800416e:	d14b      	bne.n	8004208 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004170:	4b32      	ldr	r3, [pc, #200]	; (800423c <HAL_RCC_OscConfig+0x4d0>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a31      	ldr	r2, [pc, #196]	; (800423c <HAL_RCC_OscConfig+0x4d0>)
 8004176:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800417a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800417c:	f7fe f93c 	bl	80023f8 <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004182:	e008      	b.n	8004196 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004184:	f7fe f938 	bl	80023f8 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b02      	cmp	r3, #2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e091      	b.n	80042ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004196:	4b29      	ldr	r3, [pc, #164]	; (800423c <HAL_RCC_OscConfig+0x4d0>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1f0      	bne.n	8004184 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	69da      	ldr	r2, [r3, #28]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	431a      	orrs	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	019b      	lsls	r3, r3, #6
 80041b2:	431a      	orrs	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b8:	085b      	lsrs	r3, r3, #1
 80041ba:	3b01      	subs	r3, #1
 80041bc:	041b      	lsls	r3, r3, #16
 80041be:	431a      	orrs	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c4:	061b      	lsls	r3, r3, #24
 80041c6:	431a      	orrs	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041cc:	071b      	lsls	r3, r3, #28
 80041ce:	491b      	ldr	r1, [pc, #108]	; (800423c <HAL_RCC_OscConfig+0x4d0>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041d4:	4b19      	ldr	r3, [pc, #100]	; (800423c <HAL_RCC_OscConfig+0x4d0>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a18      	ldr	r2, [pc, #96]	; (800423c <HAL_RCC_OscConfig+0x4d0>)
 80041da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e0:	f7fe f90a 	bl	80023f8 <HAL_GetTick>
 80041e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041e6:	e008      	b.n	80041fa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041e8:	f7fe f906 	bl	80023f8 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e05f      	b.n	80042ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041fa:	4b10      	ldr	r3, [pc, #64]	; (800423c <HAL_RCC_OscConfig+0x4d0>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d0f0      	beq.n	80041e8 <HAL_RCC_OscConfig+0x47c>
 8004206:	e057      	b.n	80042b8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004208:	4b0c      	ldr	r3, [pc, #48]	; (800423c <HAL_RCC_OscConfig+0x4d0>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a0b      	ldr	r2, [pc, #44]	; (800423c <HAL_RCC_OscConfig+0x4d0>)
 800420e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004212:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004214:	f7fe f8f0 	bl	80023f8 <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800421c:	f7fe f8ec 	bl	80023f8 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e045      	b.n	80042ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800422e:	4b03      	ldr	r3, [pc, #12]	; (800423c <HAL_RCC_OscConfig+0x4d0>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1f0      	bne.n	800421c <HAL_RCC_OscConfig+0x4b0>
 800423a:	e03d      	b.n	80042b8 <HAL_RCC_OscConfig+0x54c>
 800423c:	40023800 	.word	0x40023800
 8004240:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004244:	4b1f      	ldr	r3, [pc, #124]	; (80042c4 <HAL_RCC_OscConfig+0x558>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d030      	beq.n	80042b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800425c:	429a      	cmp	r2, r3
 800425e:	d129      	bne.n	80042b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800426a:	429a      	cmp	r2, r3
 800426c:	d122      	bne.n	80042b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004274:	4013      	ands	r3, r2
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800427a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800427c:	4293      	cmp	r3, r2
 800427e:	d119      	bne.n	80042b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428a:	085b      	lsrs	r3, r3, #1
 800428c:	3b01      	subs	r3, #1
 800428e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004290:	429a      	cmp	r2, r3
 8004292:	d10f      	bne.n	80042b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d107      	bne.n	80042b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ae:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d001      	beq.n	80042b8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e000      	b.n	80042ba <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3718      	adds	r7, #24
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	40023800 	.word	0x40023800

080042c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80042d2:	2300      	movs	r3, #0
 80042d4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d101      	bne.n	80042e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e0d0      	b.n	8004482 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042e0:	4b6a      	ldr	r3, [pc, #424]	; (800448c <HAL_RCC_ClockConfig+0x1c4>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 030f 	and.w	r3, r3, #15
 80042e8:	683a      	ldr	r2, [r7, #0]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d910      	bls.n	8004310 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ee:	4b67      	ldr	r3, [pc, #412]	; (800448c <HAL_RCC_ClockConfig+0x1c4>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f023 020f 	bic.w	r2, r3, #15
 80042f6:	4965      	ldr	r1, [pc, #404]	; (800448c <HAL_RCC_ClockConfig+0x1c4>)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042fe:	4b63      	ldr	r3, [pc, #396]	; (800448c <HAL_RCC_ClockConfig+0x1c4>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 030f 	and.w	r3, r3, #15
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	429a      	cmp	r2, r3
 800430a:	d001      	beq.n	8004310 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e0b8      	b.n	8004482 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d020      	beq.n	800435e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0304 	and.w	r3, r3, #4
 8004324:	2b00      	cmp	r3, #0
 8004326:	d005      	beq.n	8004334 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004328:	4b59      	ldr	r3, [pc, #356]	; (8004490 <HAL_RCC_ClockConfig+0x1c8>)
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	4a58      	ldr	r2, [pc, #352]	; (8004490 <HAL_RCC_ClockConfig+0x1c8>)
 800432e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004332:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0308 	and.w	r3, r3, #8
 800433c:	2b00      	cmp	r3, #0
 800433e:	d005      	beq.n	800434c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004340:	4b53      	ldr	r3, [pc, #332]	; (8004490 <HAL_RCC_ClockConfig+0x1c8>)
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	4a52      	ldr	r2, [pc, #328]	; (8004490 <HAL_RCC_ClockConfig+0x1c8>)
 8004346:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800434a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800434c:	4b50      	ldr	r3, [pc, #320]	; (8004490 <HAL_RCC_ClockConfig+0x1c8>)
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	494d      	ldr	r1, [pc, #308]	; (8004490 <HAL_RCC_ClockConfig+0x1c8>)
 800435a:	4313      	orrs	r3, r2
 800435c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b00      	cmp	r3, #0
 8004368:	d040      	beq.n	80043ec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d107      	bne.n	8004382 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004372:	4b47      	ldr	r3, [pc, #284]	; (8004490 <HAL_RCC_ClockConfig+0x1c8>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d115      	bne.n	80043aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e07f      	b.n	8004482 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	2b02      	cmp	r3, #2
 8004388:	d107      	bne.n	800439a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800438a:	4b41      	ldr	r3, [pc, #260]	; (8004490 <HAL_RCC_ClockConfig+0x1c8>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d109      	bne.n	80043aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e073      	b.n	8004482 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800439a:	4b3d      	ldr	r3, [pc, #244]	; (8004490 <HAL_RCC_ClockConfig+0x1c8>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e06b      	b.n	8004482 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043aa:	4b39      	ldr	r3, [pc, #228]	; (8004490 <HAL_RCC_ClockConfig+0x1c8>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f023 0203 	bic.w	r2, r3, #3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	4936      	ldr	r1, [pc, #216]	; (8004490 <HAL_RCC_ClockConfig+0x1c8>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043bc:	f7fe f81c 	bl	80023f8 <HAL_GetTick>
 80043c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043c2:	e00a      	b.n	80043da <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043c4:	f7fe f818 	bl	80023f8 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e053      	b.n	8004482 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043da:	4b2d      	ldr	r3, [pc, #180]	; (8004490 <HAL_RCC_ClockConfig+0x1c8>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f003 020c 	and.w	r2, r3, #12
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d1eb      	bne.n	80043c4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043ec:	4b27      	ldr	r3, [pc, #156]	; (800448c <HAL_RCC_ClockConfig+0x1c4>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 030f 	and.w	r3, r3, #15
 80043f4:	683a      	ldr	r2, [r7, #0]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d210      	bcs.n	800441c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043fa:	4b24      	ldr	r3, [pc, #144]	; (800448c <HAL_RCC_ClockConfig+0x1c4>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f023 020f 	bic.w	r2, r3, #15
 8004402:	4922      	ldr	r1, [pc, #136]	; (800448c <HAL_RCC_ClockConfig+0x1c4>)
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	4313      	orrs	r3, r2
 8004408:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800440a:	4b20      	ldr	r3, [pc, #128]	; (800448c <HAL_RCC_ClockConfig+0x1c4>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 030f 	and.w	r3, r3, #15
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	429a      	cmp	r2, r3
 8004416:	d001      	beq.n	800441c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e032      	b.n	8004482 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0304 	and.w	r3, r3, #4
 8004424:	2b00      	cmp	r3, #0
 8004426:	d008      	beq.n	800443a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004428:	4b19      	ldr	r3, [pc, #100]	; (8004490 <HAL_RCC_ClockConfig+0x1c8>)
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	4916      	ldr	r1, [pc, #88]	; (8004490 <HAL_RCC_ClockConfig+0x1c8>)
 8004436:	4313      	orrs	r3, r2
 8004438:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0308 	and.w	r3, r3, #8
 8004442:	2b00      	cmp	r3, #0
 8004444:	d009      	beq.n	800445a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004446:	4b12      	ldr	r3, [pc, #72]	; (8004490 <HAL_RCC_ClockConfig+0x1c8>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	00db      	lsls	r3, r3, #3
 8004454:	490e      	ldr	r1, [pc, #56]	; (8004490 <HAL_RCC_ClockConfig+0x1c8>)
 8004456:	4313      	orrs	r3, r2
 8004458:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800445a:	f000 f821 	bl	80044a0 <HAL_RCC_GetSysClockFreq>
 800445e:	4602      	mov	r2, r0
 8004460:	4b0b      	ldr	r3, [pc, #44]	; (8004490 <HAL_RCC_ClockConfig+0x1c8>)
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	091b      	lsrs	r3, r3, #4
 8004466:	f003 030f 	and.w	r3, r3, #15
 800446a:	490a      	ldr	r1, [pc, #40]	; (8004494 <HAL_RCC_ClockConfig+0x1cc>)
 800446c:	5ccb      	ldrb	r3, [r1, r3]
 800446e:	fa22 f303 	lsr.w	r3, r2, r3
 8004472:	4a09      	ldr	r2, [pc, #36]	; (8004498 <HAL_RCC_ClockConfig+0x1d0>)
 8004474:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004476:	4b09      	ldr	r3, [pc, #36]	; (800449c <HAL_RCC_ClockConfig+0x1d4>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4618      	mov	r0, r3
 800447c:	f7fd ff78 	bl	8002370 <HAL_InitTick>

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	40023c00 	.word	0x40023c00
 8004490:	40023800 	.word	0x40023800
 8004494:	0800785c 	.word	0x0800785c
 8004498:	20000000 	.word	0x20000000
 800449c:	20000004 	.word	0x20000004

080044a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044a0:	b5b0      	push	{r4, r5, r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80044a6:	2100      	movs	r1, #0
 80044a8:	6079      	str	r1, [r7, #4]
 80044aa:	2100      	movs	r1, #0
 80044ac:	60f9      	str	r1, [r7, #12]
 80044ae:	2100      	movs	r1, #0
 80044b0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80044b2:	2100      	movs	r1, #0
 80044b4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044b6:	4952      	ldr	r1, [pc, #328]	; (8004600 <HAL_RCC_GetSysClockFreq+0x160>)
 80044b8:	6889      	ldr	r1, [r1, #8]
 80044ba:	f001 010c 	and.w	r1, r1, #12
 80044be:	2908      	cmp	r1, #8
 80044c0:	d00d      	beq.n	80044de <HAL_RCC_GetSysClockFreq+0x3e>
 80044c2:	2908      	cmp	r1, #8
 80044c4:	f200 8094 	bhi.w	80045f0 <HAL_RCC_GetSysClockFreq+0x150>
 80044c8:	2900      	cmp	r1, #0
 80044ca:	d002      	beq.n	80044d2 <HAL_RCC_GetSysClockFreq+0x32>
 80044cc:	2904      	cmp	r1, #4
 80044ce:	d003      	beq.n	80044d8 <HAL_RCC_GetSysClockFreq+0x38>
 80044d0:	e08e      	b.n	80045f0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044d2:	4b4c      	ldr	r3, [pc, #304]	; (8004604 <HAL_RCC_GetSysClockFreq+0x164>)
 80044d4:	60bb      	str	r3, [r7, #8]
      break;
 80044d6:	e08e      	b.n	80045f6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044d8:	4b4b      	ldr	r3, [pc, #300]	; (8004608 <HAL_RCC_GetSysClockFreq+0x168>)
 80044da:	60bb      	str	r3, [r7, #8]
      break;
 80044dc:	e08b      	b.n	80045f6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044de:	4948      	ldr	r1, [pc, #288]	; (8004600 <HAL_RCC_GetSysClockFreq+0x160>)
 80044e0:	6849      	ldr	r1, [r1, #4]
 80044e2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80044e6:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80044e8:	4945      	ldr	r1, [pc, #276]	; (8004600 <HAL_RCC_GetSysClockFreq+0x160>)
 80044ea:	6849      	ldr	r1, [r1, #4]
 80044ec:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80044f0:	2900      	cmp	r1, #0
 80044f2:	d024      	beq.n	800453e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044f4:	4942      	ldr	r1, [pc, #264]	; (8004600 <HAL_RCC_GetSysClockFreq+0x160>)
 80044f6:	6849      	ldr	r1, [r1, #4]
 80044f8:	0989      	lsrs	r1, r1, #6
 80044fa:	4608      	mov	r0, r1
 80044fc:	f04f 0100 	mov.w	r1, #0
 8004500:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004504:	f04f 0500 	mov.w	r5, #0
 8004508:	ea00 0204 	and.w	r2, r0, r4
 800450c:	ea01 0305 	and.w	r3, r1, r5
 8004510:	493d      	ldr	r1, [pc, #244]	; (8004608 <HAL_RCC_GetSysClockFreq+0x168>)
 8004512:	fb01 f003 	mul.w	r0, r1, r3
 8004516:	2100      	movs	r1, #0
 8004518:	fb01 f102 	mul.w	r1, r1, r2
 800451c:	1844      	adds	r4, r0, r1
 800451e:	493a      	ldr	r1, [pc, #232]	; (8004608 <HAL_RCC_GetSysClockFreq+0x168>)
 8004520:	fba2 0101 	umull	r0, r1, r2, r1
 8004524:	1863      	adds	r3, r4, r1
 8004526:	4619      	mov	r1, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	461a      	mov	r2, r3
 800452c:	f04f 0300 	mov.w	r3, #0
 8004530:	f7fb fe8a 	bl	8000248 <__aeabi_uldivmod>
 8004534:	4602      	mov	r2, r0
 8004536:	460b      	mov	r3, r1
 8004538:	4613      	mov	r3, r2
 800453a:	60fb      	str	r3, [r7, #12]
 800453c:	e04a      	b.n	80045d4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800453e:	4b30      	ldr	r3, [pc, #192]	; (8004600 <HAL_RCC_GetSysClockFreq+0x160>)
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	099b      	lsrs	r3, r3, #6
 8004544:	461a      	mov	r2, r3
 8004546:	f04f 0300 	mov.w	r3, #0
 800454a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800454e:	f04f 0100 	mov.w	r1, #0
 8004552:	ea02 0400 	and.w	r4, r2, r0
 8004556:	ea03 0501 	and.w	r5, r3, r1
 800455a:	4620      	mov	r0, r4
 800455c:	4629      	mov	r1, r5
 800455e:	f04f 0200 	mov.w	r2, #0
 8004562:	f04f 0300 	mov.w	r3, #0
 8004566:	014b      	lsls	r3, r1, #5
 8004568:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800456c:	0142      	lsls	r2, r0, #5
 800456e:	4610      	mov	r0, r2
 8004570:	4619      	mov	r1, r3
 8004572:	1b00      	subs	r0, r0, r4
 8004574:	eb61 0105 	sbc.w	r1, r1, r5
 8004578:	f04f 0200 	mov.w	r2, #0
 800457c:	f04f 0300 	mov.w	r3, #0
 8004580:	018b      	lsls	r3, r1, #6
 8004582:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004586:	0182      	lsls	r2, r0, #6
 8004588:	1a12      	subs	r2, r2, r0
 800458a:	eb63 0301 	sbc.w	r3, r3, r1
 800458e:	f04f 0000 	mov.w	r0, #0
 8004592:	f04f 0100 	mov.w	r1, #0
 8004596:	00d9      	lsls	r1, r3, #3
 8004598:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800459c:	00d0      	lsls	r0, r2, #3
 800459e:	4602      	mov	r2, r0
 80045a0:	460b      	mov	r3, r1
 80045a2:	1912      	adds	r2, r2, r4
 80045a4:	eb45 0303 	adc.w	r3, r5, r3
 80045a8:	f04f 0000 	mov.w	r0, #0
 80045ac:	f04f 0100 	mov.w	r1, #0
 80045b0:	0299      	lsls	r1, r3, #10
 80045b2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80045b6:	0290      	lsls	r0, r2, #10
 80045b8:	4602      	mov	r2, r0
 80045ba:	460b      	mov	r3, r1
 80045bc:	4610      	mov	r0, r2
 80045be:	4619      	mov	r1, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	461a      	mov	r2, r3
 80045c4:	f04f 0300 	mov.w	r3, #0
 80045c8:	f7fb fe3e 	bl	8000248 <__aeabi_uldivmod>
 80045cc:	4602      	mov	r2, r0
 80045ce:	460b      	mov	r3, r1
 80045d0:	4613      	mov	r3, r2
 80045d2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80045d4:	4b0a      	ldr	r3, [pc, #40]	; (8004600 <HAL_RCC_GetSysClockFreq+0x160>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	0c1b      	lsrs	r3, r3, #16
 80045da:	f003 0303 	and.w	r3, r3, #3
 80045de:	3301      	adds	r3, #1
 80045e0:	005b      	lsls	r3, r3, #1
 80045e2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ec:	60bb      	str	r3, [r7, #8]
      break;
 80045ee:	e002      	b.n	80045f6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045f0:	4b04      	ldr	r3, [pc, #16]	; (8004604 <HAL_RCC_GetSysClockFreq+0x164>)
 80045f2:	60bb      	str	r3, [r7, #8]
      break;
 80045f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045f6:	68bb      	ldr	r3, [r7, #8]
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bdb0      	pop	{r4, r5, r7, pc}
 8004600:	40023800 	.word	0x40023800
 8004604:	00f42400 	.word	0x00f42400
 8004608:	017d7840 	.word	0x017d7840

0800460c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004610:	4b03      	ldr	r3, [pc, #12]	; (8004620 <HAL_RCC_GetHCLKFreq+0x14>)
 8004612:	681b      	ldr	r3, [r3, #0]
}
 8004614:	4618      	mov	r0, r3
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	20000000 	.word	0x20000000

08004624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004628:	f7ff fff0 	bl	800460c <HAL_RCC_GetHCLKFreq>
 800462c:	4602      	mov	r2, r0
 800462e:	4b05      	ldr	r3, [pc, #20]	; (8004644 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	0a9b      	lsrs	r3, r3, #10
 8004634:	f003 0307 	and.w	r3, r3, #7
 8004638:	4903      	ldr	r1, [pc, #12]	; (8004648 <HAL_RCC_GetPCLK1Freq+0x24>)
 800463a:	5ccb      	ldrb	r3, [r1, r3]
 800463c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004640:	4618      	mov	r0, r3
 8004642:	bd80      	pop	{r7, pc}
 8004644:	40023800 	.word	0x40023800
 8004648:	0800786c 	.word	0x0800786c

0800464c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004650:	f7ff ffdc 	bl	800460c <HAL_RCC_GetHCLKFreq>
 8004654:	4602      	mov	r2, r0
 8004656:	4b05      	ldr	r3, [pc, #20]	; (800466c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	0b5b      	lsrs	r3, r3, #13
 800465c:	f003 0307 	and.w	r3, r3, #7
 8004660:	4903      	ldr	r1, [pc, #12]	; (8004670 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004662:	5ccb      	ldrb	r3, [r1, r3]
 8004664:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004668:	4618      	mov	r0, r3
 800466a:	bd80      	pop	{r7, pc}
 800466c:	40023800 	.word	0x40023800
 8004670:	0800786c 	.word	0x0800786c

08004674 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b088      	sub	sp, #32
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800467c:	2300      	movs	r3, #0
 800467e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004680:	2300      	movs	r3, #0
 8004682:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004684:	2300      	movs	r3, #0
 8004686:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004688:	2300      	movs	r3, #0
 800468a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800468c:	2300      	movs	r3, #0
 800468e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0301 	and.w	r3, r3, #1
 8004698:	2b00      	cmp	r3, #0
 800469a:	d012      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800469c:	4b69      	ldr	r3, [pc, #420]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	4a68      	ldr	r2, [pc, #416]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046a2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80046a6:	6093      	str	r3, [r2, #8]
 80046a8:	4b66      	ldr	r3, [pc, #408]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046aa:	689a      	ldr	r2, [r3, #8]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b0:	4964      	ldr	r1, [pc, #400]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80046be:	2301      	movs	r3, #1
 80046c0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d017      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046ce:	4b5d      	ldr	r3, [pc, #372]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046dc:	4959      	ldr	r1, [pc, #356]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046ec:	d101      	bne.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80046ee:	2301      	movs	r3, #1
 80046f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80046fa:	2301      	movs	r3, #1
 80046fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d017      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800470a:	4b4e      	ldr	r3, [pc, #312]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800470c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004710:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004718:	494a      	ldr	r1, [pc, #296]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800471a:	4313      	orrs	r3, r2
 800471c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004724:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004728:	d101      	bne.n	800472e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800472a:	2301      	movs	r3, #1
 800472c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004736:	2301      	movs	r3, #1
 8004738:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004746:	2301      	movs	r3, #1
 8004748:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0320 	and.w	r3, r3, #32
 8004752:	2b00      	cmp	r3, #0
 8004754:	f000 808b 	beq.w	800486e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004758:	4b3a      	ldr	r3, [pc, #232]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800475a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475c:	4a39      	ldr	r2, [pc, #228]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800475e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004762:	6413      	str	r3, [r2, #64]	; 0x40
 8004764:	4b37      	ldr	r3, [pc, #220]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800476c:	60bb      	str	r3, [r7, #8]
 800476e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004770:	4b35      	ldr	r3, [pc, #212]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a34      	ldr	r2, [pc, #208]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800477a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800477c:	f7fd fe3c 	bl	80023f8 <HAL_GetTick>
 8004780:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004782:	e008      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004784:	f7fd fe38 	bl	80023f8 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b64      	cmp	r3, #100	; 0x64
 8004790:	d901      	bls.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e38f      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004796:	4b2c      	ldr	r3, [pc, #176]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d0f0      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047a2:	4b28      	ldr	r3, [pc, #160]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047aa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d035      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ba:	693a      	ldr	r2, [r7, #16]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d02e      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047c0:	4b20      	ldr	r3, [pc, #128]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047c8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047ca:	4b1e      	ldr	r3, [pc, #120]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ce:	4a1d      	ldr	r2, [pc, #116]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047d4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047d6:	4b1b      	ldr	r3, [pc, #108]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047da:	4a1a      	ldr	r2, [pc, #104]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047e0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80047e2:	4a18      	ldr	r2, [pc, #96]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80047e8:	4b16      	ldr	r3, [pc, #88]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ec:	f003 0301 	and.w	r3, r3, #1
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d114      	bne.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f4:	f7fd fe00 	bl	80023f8 <HAL_GetTick>
 80047f8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047fa:	e00a      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047fc:	f7fd fdfc 	bl	80023f8 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	f241 3288 	movw	r2, #5000	; 0x1388
 800480a:	4293      	cmp	r3, r2
 800480c:	d901      	bls.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e351      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004812:	4b0c      	ldr	r3, [pc, #48]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d0ee      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004826:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800482a:	d111      	bne.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800482c:	4b05      	ldr	r3, [pc, #20]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004838:	4b04      	ldr	r3, [pc, #16]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800483a:	400b      	ands	r3, r1
 800483c:	4901      	ldr	r1, [pc, #4]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800483e:	4313      	orrs	r3, r2
 8004840:	608b      	str	r3, [r1, #8]
 8004842:	e00b      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004844:	40023800 	.word	0x40023800
 8004848:	40007000 	.word	0x40007000
 800484c:	0ffffcff 	.word	0x0ffffcff
 8004850:	4bb3      	ldr	r3, [pc, #716]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	4ab2      	ldr	r2, [pc, #712]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004856:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800485a:	6093      	str	r3, [r2, #8]
 800485c:	4bb0      	ldr	r3, [pc, #704]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800485e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004864:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004868:	49ad      	ldr	r1, [pc, #692]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800486a:	4313      	orrs	r3, r2
 800486c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0310 	and.w	r3, r3, #16
 8004876:	2b00      	cmp	r3, #0
 8004878:	d010      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800487a:	4ba9      	ldr	r3, [pc, #676]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800487c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004880:	4aa7      	ldr	r2, [pc, #668]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004882:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004886:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800488a:	4ba5      	ldr	r3, [pc, #660]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800488c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004894:	49a2      	ldr	r1, [pc, #648]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004896:	4313      	orrs	r3, r2
 8004898:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00a      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048a8:	4b9d      	ldr	r3, [pc, #628]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048b6:	499a      	ldr	r1, [pc, #616]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00a      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048ca:	4b95      	ldr	r3, [pc, #596]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048d8:	4991      	ldr	r1, [pc, #580]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00a      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048ec:	4b8c      	ldr	r3, [pc, #560]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048fa:	4989      	ldr	r1, [pc, #548]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00a      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800490e:	4b84      	ldr	r3, [pc, #528]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004914:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800491c:	4980      	ldr	r1, [pc, #512]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800491e:	4313      	orrs	r3, r2
 8004920:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00a      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004930:	4b7b      	ldr	r3, [pc, #492]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004936:	f023 0203 	bic.w	r2, r3, #3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493e:	4978      	ldr	r1, [pc, #480]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004940:	4313      	orrs	r3, r2
 8004942:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00a      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004952:	4b73      	ldr	r3, [pc, #460]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004958:	f023 020c 	bic.w	r2, r3, #12
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004960:	496f      	ldr	r1, [pc, #444]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004962:	4313      	orrs	r3, r2
 8004964:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00a      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004974:	4b6a      	ldr	r3, [pc, #424]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800497a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004982:	4967      	ldr	r1, [pc, #412]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004984:	4313      	orrs	r3, r2
 8004986:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00a      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004996:	4b62      	ldr	r3, [pc, #392]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800499c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a4:	495e      	ldr	r1, [pc, #376]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00a      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049b8:	4b59      	ldr	r3, [pc, #356]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c6:	4956      	ldr	r1, [pc, #344]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00a      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80049da:	4b51      	ldr	r3, [pc, #324]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e8:	494d      	ldr	r1, [pc, #308]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00a      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80049fc:	4b48      	ldr	r3, [pc, #288]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a02:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a0a:	4945      	ldr	r1, [pc, #276]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00a      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004a1e:	4b40      	ldr	r3, [pc, #256]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a24:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a2c:	493c      	ldr	r1, [pc, #240]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00a      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a40:	4b37      	ldr	r3, [pc, #220]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a46:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a4e:	4934      	ldr	r1, [pc, #208]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d011      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004a62:	4b2f      	ldr	r3, [pc, #188]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a68:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a70:	492b      	ldr	r1, [pc, #172]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a80:	d101      	bne.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004a82:	2301      	movs	r3, #1
 8004a84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0308 	and.w	r3, r3, #8
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004a92:	2301      	movs	r3, #1
 8004a94:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00a      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004aa2:	4b1f      	ldr	r3, [pc, #124]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ab0:	491b      	ldr	r1, [pc, #108]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00b      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ac4:	4b16      	ldr	r3, [pc, #88]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ad4:	4912      	ldr	r1, [pc, #72]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00b      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004ae8:	4b0d      	ldr	r3, [pc, #52]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aee:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004af8:	4909      	ldr	r1, [pc, #36]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00f      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b0c:	4b04      	ldr	r3, [pc, #16]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b12:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b1c:	e002      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004b1e:	bf00      	nop
 8004b20:	40023800 	.word	0x40023800
 8004b24:	4986      	ldr	r1, [pc, #536]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00b      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004b38:	4b81      	ldr	r3, [pc, #516]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b3e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b48:	497d      	ldr	r1, [pc, #500]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d006      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f000 80d6 	beq.w	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b64:	4b76      	ldr	r3, [pc, #472]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a75      	ldr	r2, [pc, #468]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b6a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b70:	f7fd fc42 	bl	80023f8 <HAL_GetTick>
 8004b74:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b76:	e008      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b78:	f7fd fc3e 	bl	80023f8 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2b64      	cmp	r3, #100	; 0x64
 8004b84:	d901      	bls.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e195      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b8a:	4b6d      	ldr	r3, [pc, #436]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1f0      	bne.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d021      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d11d      	bne.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004baa:	4b65      	ldr	r3, [pc, #404]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bb0:	0c1b      	lsrs	r3, r3, #16
 8004bb2:	f003 0303 	and.w	r3, r3, #3
 8004bb6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004bb8:	4b61      	ldr	r3, [pc, #388]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bbe:	0e1b      	lsrs	r3, r3, #24
 8004bc0:	f003 030f 	and.w	r3, r3, #15
 8004bc4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	019a      	lsls	r2, r3, #6
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	041b      	lsls	r3, r3, #16
 8004bd0:	431a      	orrs	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	061b      	lsls	r3, r3, #24
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	071b      	lsls	r3, r3, #28
 8004bde:	4958      	ldr	r1, [pc, #352]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d004      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bfa:	d00a      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d02e      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c10:	d129      	bne.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004c12:	4b4b      	ldr	r3, [pc, #300]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c18:	0c1b      	lsrs	r3, r3, #16
 8004c1a:	f003 0303 	and.w	r3, r3, #3
 8004c1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c20:	4b47      	ldr	r3, [pc, #284]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c26:	0f1b      	lsrs	r3, r3, #28
 8004c28:	f003 0307 	and.w	r3, r3, #7
 8004c2c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	019a      	lsls	r2, r3, #6
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	041b      	lsls	r3, r3, #16
 8004c38:	431a      	orrs	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	061b      	lsls	r3, r3, #24
 8004c40:	431a      	orrs	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	071b      	lsls	r3, r3, #28
 8004c46:	493e      	ldr	r1, [pc, #248]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004c4e:	4b3c      	ldr	r3, [pc, #240]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c54:	f023 021f 	bic.w	r2, r3, #31
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	4938      	ldr	r1, [pc, #224]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d01d      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004c72:	4b33      	ldr	r3, [pc, #204]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c78:	0e1b      	lsrs	r3, r3, #24
 8004c7a:	f003 030f 	and.w	r3, r3, #15
 8004c7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c80:	4b2f      	ldr	r3, [pc, #188]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c86:	0f1b      	lsrs	r3, r3, #28
 8004c88:	f003 0307 	and.w	r3, r3, #7
 8004c8c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	019a      	lsls	r2, r3, #6
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	041b      	lsls	r3, r3, #16
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	061b      	lsls	r3, r3, #24
 8004ca0:	431a      	orrs	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	071b      	lsls	r3, r3, #28
 8004ca6:	4926      	ldr	r1, [pc, #152]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d011      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	019a      	lsls	r2, r3, #6
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	041b      	lsls	r3, r3, #16
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	061b      	lsls	r3, r3, #24
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	071b      	lsls	r3, r3, #28
 8004cd6:	491a      	ldr	r1, [pc, #104]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004cde:	4b18      	ldr	r3, [pc, #96]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a17      	ldr	r2, [pc, #92]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ce4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ce8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cea:	f7fd fb85 	bl	80023f8 <HAL_GetTick>
 8004cee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cf0:	e008      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004cf2:	f7fd fb81 	bl	80023f8 <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	2b64      	cmp	r3, #100	; 0x64
 8004cfe:	d901      	bls.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e0d8      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d04:	4b0e      	ldr	r3, [pc, #56]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d0f0      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	f040 80ce 	bne.w	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004d18:	4b09      	ldr	r3, [pc, #36]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a08      	ldr	r2, [pc, #32]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d24:	f7fd fb68 	bl	80023f8 <HAL_GetTick>
 8004d28:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d2a:	e00b      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d2c:	f7fd fb64 	bl	80023f8 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b64      	cmp	r3, #100	; 0x64
 8004d38:	d904      	bls.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e0bb      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004d3e:	bf00      	nop
 8004d40:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d44:	4b5e      	ldr	r3, [pc, #376]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d50:	d0ec      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d003      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d009      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d02e      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d12a      	bne.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d7a:	4b51      	ldr	r3, [pc, #324]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d80:	0c1b      	lsrs	r3, r3, #16
 8004d82:	f003 0303 	and.w	r3, r3, #3
 8004d86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d88:	4b4d      	ldr	r3, [pc, #308]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d8e:	0f1b      	lsrs	r3, r3, #28
 8004d90:	f003 0307 	and.w	r3, r3, #7
 8004d94:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	019a      	lsls	r2, r3, #6
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	041b      	lsls	r3, r3, #16
 8004da0:	431a      	orrs	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	061b      	lsls	r3, r3, #24
 8004da8:	431a      	orrs	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	071b      	lsls	r3, r3, #28
 8004dae:	4944      	ldr	r1, [pc, #272]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004db6:	4b42      	ldr	r3, [pc, #264]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004db8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dbc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	021b      	lsls	r3, r3, #8
 8004dc8:	493d      	ldr	r1, [pc, #244]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d022      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004de0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004de4:	d11d      	bne.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004de6:	4b36      	ldr	r3, [pc, #216]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dec:	0e1b      	lsrs	r3, r3, #24
 8004dee:	f003 030f 	and.w	r3, r3, #15
 8004df2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004df4:	4b32      	ldr	r3, [pc, #200]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dfa:	0f1b      	lsrs	r3, r3, #28
 8004dfc:	f003 0307 	and.w	r3, r3, #7
 8004e00:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	019a      	lsls	r2, r3, #6
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a1b      	ldr	r3, [r3, #32]
 8004e0c:	041b      	lsls	r3, r3, #16
 8004e0e:	431a      	orrs	r2, r3
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	061b      	lsls	r3, r3, #24
 8004e14:	431a      	orrs	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	071b      	lsls	r3, r3, #28
 8004e1a:	4929      	ldr	r1, [pc, #164]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0308 	and.w	r3, r3, #8
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d028      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e2e:	4b24      	ldr	r3, [pc, #144]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e34:	0e1b      	lsrs	r3, r3, #24
 8004e36:	f003 030f 	and.w	r3, r3, #15
 8004e3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004e3c:	4b20      	ldr	r3, [pc, #128]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e42:	0c1b      	lsrs	r3, r3, #16
 8004e44:	f003 0303 	and.w	r3, r3, #3
 8004e48:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	019a      	lsls	r2, r3, #6
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	041b      	lsls	r3, r3, #16
 8004e54:	431a      	orrs	r2, r3
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	061b      	lsls	r3, r3, #24
 8004e5a:	431a      	orrs	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	69db      	ldr	r3, [r3, #28]
 8004e60:	071b      	lsls	r3, r3, #28
 8004e62:	4917      	ldr	r1, [pc, #92]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004e6a:	4b15      	ldr	r3, [pc, #84]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e78:	4911      	ldr	r1, [pc, #68]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004e80:	4b0f      	ldr	r3, [pc, #60]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a0e      	ldr	r2, [pc, #56]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e8c:	f7fd fab4 	bl	80023f8 <HAL_GetTick>
 8004e90:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e92:	e008      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e94:	f7fd fab0 	bl	80023f8 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b64      	cmp	r3, #100	; 0x64
 8004ea0:	d901      	bls.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e007      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ea6:	4b06      	ldr	r3, [pc, #24]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004eae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004eb2:	d1ef      	bne.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3720      	adds	r7, #32
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	40023800 	.word	0x40023800

08004ec4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d101      	bne.n	8004ed6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e09d      	b.n	8005012 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d108      	bne.n	8004ef0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ee6:	d009      	beq.n	8004efc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	61da      	str	r2, [r3, #28]
 8004eee:	e005      	b.n	8004efc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d106      	bne.n	8004f1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f7fc fe5a 	bl	8001bd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2202      	movs	r2, #2
 8004f20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f32:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f3c:	d902      	bls.n	8004f44 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	60fb      	str	r3, [r7, #12]
 8004f42:	e002      	b.n	8004f4a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004f44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f48:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004f52:	d007      	beq.n	8004f64 <HAL_SPI_Init+0xa0>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f5c:	d002      	beq.n	8004f64 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004f74:	431a      	orrs	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	431a      	orrs	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f92:	431a      	orrs	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	69db      	ldr	r3, [r3, #28]
 8004f98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f9c:	431a      	orrs	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa6:	ea42 0103 	orr.w	r1, r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fae:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	0c1b      	lsrs	r3, r3, #16
 8004fc0:	f003 0204 	and.w	r2, r3, #4
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc8:	f003 0310 	and.w	r3, r3, #16
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd2:	f003 0308 	and.w	r3, r3, #8
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004fe0:	ea42 0103 	orr.w	r1, r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	69da      	ldr	r2, [r3, #28]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005000:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800501a:	b580      	push	{r7, lr}
 800501c:	b082      	sub	sp, #8
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d101      	bne.n	800502c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e049      	b.n	80050c0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b00      	cmp	r3, #0
 8005036:	d106      	bne.n	8005046 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f7fd f873 	bl	800212c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2202      	movs	r2, #2
 800504a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	3304      	adds	r3, #4
 8005056:	4619      	mov	r1, r3
 8005058:	4610      	mov	r0, r2
 800505a:	f000 fe29 	bl	8005cb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2201      	movs	r2, #1
 800506a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2201      	movs	r2, #1
 8005072:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2201      	movs	r2, #1
 800507a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3708      	adds	r7, #8
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d001      	beq.n	80050e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e054      	b.n	800518a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2202      	movs	r2, #2
 80050e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68da      	ldr	r2, [r3, #12]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f042 0201 	orr.w	r2, r2, #1
 80050f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a26      	ldr	r2, [pc, #152]	; (8005198 <HAL_TIM_Base_Start_IT+0xd0>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d022      	beq.n	8005148 <HAL_TIM_Base_Start_IT+0x80>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800510a:	d01d      	beq.n	8005148 <HAL_TIM_Base_Start_IT+0x80>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a22      	ldr	r2, [pc, #136]	; (800519c <HAL_TIM_Base_Start_IT+0xd4>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d018      	beq.n	8005148 <HAL_TIM_Base_Start_IT+0x80>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a21      	ldr	r2, [pc, #132]	; (80051a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d013      	beq.n	8005148 <HAL_TIM_Base_Start_IT+0x80>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a1f      	ldr	r2, [pc, #124]	; (80051a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d00e      	beq.n	8005148 <HAL_TIM_Base_Start_IT+0x80>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a1e      	ldr	r2, [pc, #120]	; (80051a8 <HAL_TIM_Base_Start_IT+0xe0>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d009      	beq.n	8005148 <HAL_TIM_Base_Start_IT+0x80>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a1c      	ldr	r2, [pc, #112]	; (80051ac <HAL_TIM_Base_Start_IT+0xe4>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d004      	beq.n	8005148 <HAL_TIM_Base_Start_IT+0x80>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a1b      	ldr	r2, [pc, #108]	; (80051b0 <HAL_TIM_Base_Start_IT+0xe8>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d115      	bne.n	8005174 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	689a      	ldr	r2, [r3, #8]
 800514e:	4b19      	ldr	r3, [pc, #100]	; (80051b4 <HAL_TIM_Base_Start_IT+0xec>)
 8005150:	4013      	ands	r3, r2
 8005152:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2b06      	cmp	r3, #6
 8005158:	d015      	beq.n	8005186 <HAL_TIM_Base_Start_IT+0xbe>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005160:	d011      	beq.n	8005186 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f042 0201 	orr.w	r2, r2, #1
 8005170:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005172:	e008      	b.n	8005186 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f042 0201 	orr.w	r2, r2, #1
 8005182:	601a      	str	r2, [r3, #0]
 8005184:	e000      	b.n	8005188 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005186:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3714      	adds	r7, #20
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	40010000 	.word	0x40010000
 800519c:	40000400 	.word	0x40000400
 80051a0:	40000800 	.word	0x40000800
 80051a4:	40000c00 	.word	0x40000c00
 80051a8:	40010400 	.word	0x40010400
 80051ac:	40014000 	.word	0x40014000
 80051b0:	40001800 	.word	0x40001800
 80051b4:	00010007 	.word	0x00010007

080051b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e049      	b.n	800525e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d106      	bne.n	80051e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7fc ff84 	bl	80020ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2202      	movs	r2, #2
 80051e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	3304      	adds	r3, #4
 80051f4:	4619      	mov	r1, r3
 80051f6:	4610      	mov	r0, r2
 80051f8:	f000 fd5a 	bl	8005cb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b082      	sub	sp, #8
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d101      	bne.n	8005278 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e049      	b.n	800530c <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800527e:	b2db      	uxtb	r3, r3
 8005280:	2b00      	cmp	r3, #0
 8005282:	d106      	bne.n	8005292 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f7fc fee9 	bl	8002064 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2202      	movs	r2, #2
 8005296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	3304      	adds	r3, #4
 80052a2:	4619      	mov	r1, r3
 80052a4:	4610      	mov	r0, r2
 80052a6:	f000 fd03 	bl	8005cb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3708      	adds	r7, #8
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800531e:	2300      	movs	r3, #0
 8005320:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d104      	bne.n	8005332 <HAL_TIM_IC_Start_IT+0x1e>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800532e:	b2db      	uxtb	r3, r3
 8005330:	e023      	b.n	800537a <HAL_TIM_IC_Start_IT+0x66>
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2b04      	cmp	r3, #4
 8005336:	d104      	bne.n	8005342 <HAL_TIM_IC_Start_IT+0x2e>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800533e:	b2db      	uxtb	r3, r3
 8005340:	e01b      	b.n	800537a <HAL_TIM_IC_Start_IT+0x66>
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	2b08      	cmp	r3, #8
 8005346:	d104      	bne.n	8005352 <HAL_TIM_IC_Start_IT+0x3e>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800534e:	b2db      	uxtb	r3, r3
 8005350:	e013      	b.n	800537a <HAL_TIM_IC_Start_IT+0x66>
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	2b0c      	cmp	r3, #12
 8005356:	d104      	bne.n	8005362 <HAL_TIM_IC_Start_IT+0x4e>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800535e:	b2db      	uxtb	r3, r3
 8005360:	e00b      	b.n	800537a <HAL_TIM_IC_Start_IT+0x66>
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2b10      	cmp	r3, #16
 8005366:	d104      	bne.n	8005372 <HAL_TIM_IC_Start_IT+0x5e>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800536e:	b2db      	uxtb	r3, r3
 8005370:	e003      	b.n	800537a <HAL_TIM_IC_Start_IT+0x66>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005378:	b2db      	uxtb	r3, r3
 800537a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d104      	bne.n	800538c <HAL_TIM_IC_Start_IT+0x78>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005388:	b2db      	uxtb	r3, r3
 800538a:	e013      	b.n	80053b4 <HAL_TIM_IC_Start_IT+0xa0>
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	2b04      	cmp	r3, #4
 8005390:	d104      	bne.n	800539c <HAL_TIM_IC_Start_IT+0x88>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005398:	b2db      	uxtb	r3, r3
 800539a:	e00b      	b.n	80053b4 <HAL_TIM_IC_Start_IT+0xa0>
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	2b08      	cmp	r3, #8
 80053a0:	d104      	bne.n	80053ac <HAL_TIM_IC_Start_IT+0x98>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	e003      	b.n	80053b4 <HAL_TIM_IC_Start_IT+0xa0>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80053b6:	7bbb      	ldrb	r3, [r7, #14]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d102      	bne.n	80053c2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80053bc:	7b7b      	ldrb	r3, [r7, #13]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d001      	beq.n	80053c6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e0e2      	b.n	800558c <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d104      	bne.n	80053d6 <HAL_TIM_IC_Start_IT+0xc2>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2202      	movs	r2, #2
 80053d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053d4:	e023      	b.n	800541e <HAL_TIM_IC_Start_IT+0x10a>
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	2b04      	cmp	r3, #4
 80053da:	d104      	bne.n	80053e6 <HAL_TIM_IC_Start_IT+0xd2>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2202      	movs	r2, #2
 80053e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053e4:	e01b      	b.n	800541e <HAL_TIM_IC_Start_IT+0x10a>
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	2b08      	cmp	r3, #8
 80053ea:	d104      	bne.n	80053f6 <HAL_TIM_IC_Start_IT+0xe2>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2202      	movs	r2, #2
 80053f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053f4:	e013      	b.n	800541e <HAL_TIM_IC_Start_IT+0x10a>
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	2b0c      	cmp	r3, #12
 80053fa:	d104      	bne.n	8005406 <HAL_TIM_IC_Start_IT+0xf2>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2202      	movs	r2, #2
 8005400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005404:	e00b      	b.n	800541e <HAL_TIM_IC_Start_IT+0x10a>
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	2b10      	cmp	r3, #16
 800540a:	d104      	bne.n	8005416 <HAL_TIM_IC_Start_IT+0x102>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2202      	movs	r2, #2
 8005410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005414:	e003      	b.n	800541e <HAL_TIM_IC_Start_IT+0x10a>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2202      	movs	r2, #2
 800541a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d104      	bne.n	800542e <HAL_TIM_IC_Start_IT+0x11a>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2202      	movs	r2, #2
 8005428:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800542c:	e013      	b.n	8005456 <HAL_TIM_IC_Start_IT+0x142>
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b04      	cmp	r3, #4
 8005432:	d104      	bne.n	800543e <HAL_TIM_IC_Start_IT+0x12a>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2202      	movs	r2, #2
 8005438:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800543c:	e00b      	b.n	8005456 <HAL_TIM_IC_Start_IT+0x142>
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	2b08      	cmp	r3, #8
 8005442:	d104      	bne.n	800544e <HAL_TIM_IC_Start_IT+0x13a>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2202      	movs	r2, #2
 8005448:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800544c:	e003      	b.n	8005456 <HAL_TIM_IC_Start_IT+0x142>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2202      	movs	r2, #2
 8005452:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	2b0c      	cmp	r3, #12
 800545a:	d841      	bhi.n	80054e0 <HAL_TIM_IC_Start_IT+0x1cc>
 800545c:	a201      	add	r2, pc, #4	; (adr r2, 8005464 <HAL_TIM_IC_Start_IT+0x150>)
 800545e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005462:	bf00      	nop
 8005464:	08005499 	.word	0x08005499
 8005468:	080054e1 	.word	0x080054e1
 800546c:	080054e1 	.word	0x080054e1
 8005470:	080054e1 	.word	0x080054e1
 8005474:	080054ab 	.word	0x080054ab
 8005478:	080054e1 	.word	0x080054e1
 800547c:	080054e1 	.word	0x080054e1
 8005480:	080054e1 	.word	0x080054e1
 8005484:	080054bd 	.word	0x080054bd
 8005488:	080054e1 	.word	0x080054e1
 800548c:	080054e1 	.word	0x080054e1
 8005490:	080054e1 	.word	0x080054e1
 8005494:	080054cf 	.word	0x080054cf
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68da      	ldr	r2, [r3, #12]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f042 0202 	orr.w	r2, r2, #2
 80054a6:	60da      	str	r2, [r3, #12]
      break;
 80054a8:	e01d      	b.n	80054e6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68da      	ldr	r2, [r3, #12]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f042 0204 	orr.w	r2, r2, #4
 80054b8:	60da      	str	r2, [r3, #12]
      break;
 80054ba:	e014      	b.n	80054e6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68da      	ldr	r2, [r3, #12]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f042 0208 	orr.w	r2, r2, #8
 80054ca:	60da      	str	r2, [r3, #12]
      break;
 80054cc:	e00b      	b.n	80054e6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68da      	ldr	r2, [r3, #12]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f042 0210 	orr.w	r2, r2, #16
 80054dc:	60da      	str	r2, [r3, #12]
      break;
 80054de:	e002      	b.n	80054e6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	73fb      	strb	r3, [r7, #15]
      break;
 80054e4:	bf00      	nop
  }

  if (status == HAL_OK)
 80054e6:	7bfb      	ldrb	r3, [r7, #15]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d14e      	bne.n	800558a <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2201      	movs	r2, #1
 80054f2:	6839      	ldr	r1, [r7, #0]
 80054f4:	4618      	mov	r0, r3
 80054f6:	f001 f916 	bl	8006726 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a25      	ldr	r2, [pc, #148]	; (8005594 <HAL_TIM_IC_Start_IT+0x280>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d022      	beq.n	800554a <HAL_TIM_IC_Start_IT+0x236>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800550c:	d01d      	beq.n	800554a <HAL_TIM_IC_Start_IT+0x236>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a21      	ldr	r2, [pc, #132]	; (8005598 <HAL_TIM_IC_Start_IT+0x284>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d018      	beq.n	800554a <HAL_TIM_IC_Start_IT+0x236>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a1f      	ldr	r2, [pc, #124]	; (800559c <HAL_TIM_IC_Start_IT+0x288>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d013      	beq.n	800554a <HAL_TIM_IC_Start_IT+0x236>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a1e      	ldr	r2, [pc, #120]	; (80055a0 <HAL_TIM_IC_Start_IT+0x28c>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d00e      	beq.n	800554a <HAL_TIM_IC_Start_IT+0x236>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a1c      	ldr	r2, [pc, #112]	; (80055a4 <HAL_TIM_IC_Start_IT+0x290>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d009      	beq.n	800554a <HAL_TIM_IC_Start_IT+0x236>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a1b      	ldr	r2, [pc, #108]	; (80055a8 <HAL_TIM_IC_Start_IT+0x294>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d004      	beq.n	800554a <HAL_TIM_IC_Start_IT+0x236>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a19      	ldr	r2, [pc, #100]	; (80055ac <HAL_TIM_IC_Start_IT+0x298>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d115      	bne.n	8005576 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	689a      	ldr	r2, [r3, #8]
 8005550:	4b17      	ldr	r3, [pc, #92]	; (80055b0 <HAL_TIM_IC_Start_IT+0x29c>)
 8005552:	4013      	ands	r3, r2
 8005554:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	2b06      	cmp	r3, #6
 800555a:	d015      	beq.n	8005588 <HAL_TIM_IC_Start_IT+0x274>
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005562:	d011      	beq.n	8005588 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f042 0201 	orr.w	r2, r2, #1
 8005572:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005574:	e008      	b.n	8005588 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f042 0201 	orr.w	r2, r2, #1
 8005584:	601a      	str	r2, [r3, #0]
 8005586:	e000      	b.n	800558a <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005588:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800558a:	7bfb      	ldrb	r3, [r7, #15]
}
 800558c:	4618      	mov	r0, r3
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	40010000 	.word	0x40010000
 8005598:	40000400 	.word	0x40000400
 800559c:	40000800 	.word	0x40000800
 80055a0:	40000c00 	.word	0x40000c00
 80055a4:	40010400 	.word	0x40010400
 80055a8:	40014000 	.word	0x40014000
 80055ac:	40001800 	.word	0x40001800
 80055b0:	00010007 	.word	0x00010007

080055b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d122      	bne.n	8005610 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	f003 0302 	and.w	r3, r3, #2
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d11b      	bne.n	8005610 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f06f 0202 	mvn.w	r2, #2
 80055e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	f003 0303 	and.w	r3, r3, #3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d003      	beq.n	80055fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 fb3c 	bl	8005c74 <HAL_TIM_IC_CaptureCallback>
 80055fc:	e005      	b.n	800560a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 fb2e 	bl	8005c60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 fb3f 	bl	8005c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	f003 0304 	and.w	r3, r3, #4
 800561a:	2b04      	cmp	r3, #4
 800561c:	d122      	bne.n	8005664 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	f003 0304 	and.w	r3, r3, #4
 8005628:	2b04      	cmp	r3, #4
 800562a:	d11b      	bne.n	8005664 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f06f 0204 	mvn.w	r2, #4
 8005634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2202      	movs	r2, #2
 800563a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005646:	2b00      	cmp	r3, #0
 8005648:	d003      	beq.n	8005652 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 fb12 	bl	8005c74 <HAL_TIM_IC_CaptureCallback>
 8005650:	e005      	b.n	800565e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 fb04 	bl	8005c60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 fb15 	bl	8005c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	f003 0308 	and.w	r3, r3, #8
 800566e:	2b08      	cmp	r3, #8
 8005670:	d122      	bne.n	80056b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	f003 0308 	and.w	r3, r3, #8
 800567c:	2b08      	cmp	r3, #8
 800567e:	d11b      	bne.n	80056b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f06f 0208 	mvn.w	r2, #8
 8005688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2204      	movs	r2, #4
 800568e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	69db      	ldr	r3, [r3, #28]
 8005696:	f003 0303 	and.w	r3, r3, #3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d003      	beq.n	80056a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 fae8 	bl	8005c74 <HAL_TIM_IC_CaptureCallback>
 80056a4:	e005      	b.n	80056b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 fada 	bl	8005c60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 faeb 	bl	8005c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	f003 0310 	and.w	r3, r3, #16
 80056c2:	2b10      	cmp	r3, #16
 80056c4:	d122      	bne.n	800570c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	f003 0310 	and.w	r3, r3, #16
 80056d0:	2b10      	cmp	r3, #16
 80056d2:	d11b      	bne.n	800570c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f06f 0210 	mvn.w	r2, #16
 80056dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2208      	movs	r2, #8
 80056e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	69db      	ldr	r3, [r3, #28]
 80056ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d003      	beq.n	80056fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 fabe 	bl	8005c74 <HAL_TIM_IC_CaptureCallback>
 80056f8:	e005      	b.n	8005706 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 fab0 	bl	8005c60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 fac1 	bl	8005c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	f003 0301 	and.w	r3, r3, #1
 8005716:	2b01      	cmp	r3, #1
 8005718:	d10e      	bne.n	8005738 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	f003 0301 	and.w	r3, r3, #1
 8005724:	2b01      	cmp	r3, #1
 8005726:	d107      	bne.n	8005738 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f06f 0201 	mvn.w	r2, #1
 8005730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f7fc f97e 	bl	8001a34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005742:	2b80      	cmp	r3, #128	; 0x80
 8005744:	d10e      	bne.n	8005764 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005750:	2b80      	cmp	r3, #128	; 0x80
 8005752:	d107      	bne.n	8005764 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800575c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f001 f89e 	bl	80068a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800576e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005772:	d10e      	bne.n	8005792 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800577e:	2b80      	cmp	r3, #128	; 0x80
 8005780:	d107      	bne.n	8005792 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800578a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f001 f891 	bl	80068b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800579c:	2b40      	cmp	r3, #64	; 0x40
 800579e:	d10e      	bne.n	80057be <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057aa:	2b40      	cmp	r3, #64	; 0x40
 80057ac:	d107      	bne.n	80057be <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 fa6f 	bl	8005c9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	f003 0320 	and.w	r3, r3, #32
 80057c8:	2b20      	cmp	r3, #32
 80057ca:	d10e      	bne.n	80057ea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	f003 0320 	and.w	r3, r3, #32
 80057d6:	2b20      	cmp	r3, #32
 80057d8:	d107      	bne.n	80057ea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f06f 0220 	mvn.w	r2, #32
 80057e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f001 f851 	bl	800688c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057ea:	bf00      	nop
 80057ec:	3708      	adds	r7, #8
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b086      	sub	sp, #24
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	60f8      	str	r0, [r7, #12]
 80057fa:	60b9      	str	r1, [r7, #8]
 80057fc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057fe:	2300      	movs	r3, #0
 8005800:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005808:	2b01      	cmp	r3, #1
 800580a:	d101      	bne.n	8005810 <HAL_TIM_IC_ConfigChannel+0x1e>
 800580c:	2302      	movs	r3, #2
 800580e:	e088      	b.n	8005922 <HAL_TIM_IC_ConfigChannel+0x130>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d11b      	bne.n	8005856 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6818      	ldr	r0, [r3, #0]
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	6819      	ldr	r1, [r3, #0]
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	685a      	ldr	r2, [r3, #4]
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	f000 fdd1 	bl	80063d4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	699a      	ldr	r2, [r3, #24]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f022 020c 	bic.w	r2, r2, #12
 8005840:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	6999      	ldr	r1, [r3, #24]
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	689a      	ldr	r2, [r3, #8]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	430a      	orrs	r2, r1
 8005852:	619a      	str	r2, [r3, #24]
 8005854:	e060      	b.n	8005918 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2b04      	cmp	r3, #4
 800585a:	d11c      	bne.n	8005896 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6818      	ldr	r0, [r3, #0]
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	6819      	ldr	r1, [r3, #0]
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	f000 fe55 	bl	800651a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	699a      	ldr	r2, [r3, #24]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800587e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	6999      	ldr	r1, [r3, #24]
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	021a      	lsls	r2, r3, #8
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	430a      	orrs	r2, r1
 8005892:	619a      	str	r2, [r3, #24]
 8005894:	e040      	b.n	8005918 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2b08      	cmp	r3, #8
 800589a:	d11b      	bne.n	80058d4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6818      	ldr	r0, [r3, #0]
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	6819      	ldr	r1, [r3, #0]
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	685a      	ldr	r2, [r3, #4]
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	f000 fea2 	bl	80065f4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	69da      	ldr	r2, [r3, #28]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f022 020c 	bic.w	r2, r2, #12
 80058be:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	69d9      	ldr	r1, [r3, #28]
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	689a      	ldr	r2, [r3, #8]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	430a      	orrs	r2, r1
 80058d0:	61da      	str	r2, [r3, #28]
 80058d2:	e021      	b.n	8005918 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b0c      	cmp	r3, #12
 80058d8:	d11c      	bne.n	8005914 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6818      	ldr	r0, [r3, #0]
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	6819      	ldr	r1, [r3, #0]
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	685a      	ldr	r2, [r3, #4]
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	f000 febf 	bl	800666c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	69da      	ldr	r2, [r3, #28]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80058fc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	69d9      	ldr	r1, [r3, #28]
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	021a      	lsls	r2, r3, #8
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	430a      	orrs	r2, r1
 8005910:	61da      	str	r2, [r3, #28]
 8005912:	e001      	b.n	8005918 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005920:	7dfb      	ldrb	r3, [r7, #23]
}
 8005922:	4618      	mov	r0, r3
 8005924:	3718      	adds	r7, #24
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
	...

0800592c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b086      	sub	sp, #24
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005938:	2300      	movs	r3, #0
 800593a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005942:	2b01      	cmp	r3, #1
 8005944:	d101      	bne.n	800594a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005946:	2302      	movs	r3, #2
 8005948:	e0ff      	b.n	8005b4a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2b14      	cmp	r3, #20
 8005956:	f200 80f0 	bhi.w	8005b3a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800595a:	a201      	add	r2, pc, #4	; (adr r2, 8005960 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800595c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005960:	080059b5 	.word	0x080059b5
 8005964:	08005b3b 	.word	0x08005b3b
 8005968:	08005b3b 	.word	0x08005b3b
 800596c:	08005b3b 	.word	0x08005b3b
 8005970:	080059f5 	.word	0x080059f5
 8005974:	08005b3b 	.word	0x08005b3b
 8005978:	08005b3b 	.word	0x08005b3b
 800597c:	08005b3b 	.word	0x08005b3b
 8005980:	08005a37 	.word	0x08005a37
 8005984:	08005b3b 	.word	0x08005b3b
 8005988:	08005b3b 	.word	0x08005b3b
 800598c:	08005b3b 	.word	0x08005b3b
 8005990:	08005a77 	.word	0x08005a77
 8005994:	08005b3b 	.word	0x08005b3b
 8005998:	08005b3b 	.word	0x08005b3b
 800599c:	08005b3b 	.word	0x08005b3b
 80059a0:	08005ab9 	.word	0x08005ab9
 80059a4:	08005b3b 	.word	0x08005b3b
 80059a8:	08005b3b 	.word	0x08005b3b
 80059ac:	08005b3b 	.word	0x08005b3b
 80059b0:	08005af9 	.word	0x08005af9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68b9      	ldr	r1, [r7, #8]
 80059ba:	4618      	mov	r0, r3
 80059bc:	f000 fa18 	bl	8005df0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	699a      	ldr	r2, [r3, #24]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f042 0208 	orr.w	r2, r2, #8
 80059ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	699a      	ldr	r2, [r3, #24]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f022 0204 	bic.w	r2, r2, #4
 80059de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6999      	ldr	r1, [r3, #24]
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	691a      	ldr	r2, [r3, #16]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	430a      	orrs	r2, r1
 80059f0:	619a      	str	r2, [r3, #24]
      break;
 80059f2:	e0a5      	b.n	8005b40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68b9      	ldr	r1, [r7, #8]
 80059fa:	4618      	mov	r0, r3
 80059fc:	f000 fa6a 	bl	8005ed4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	699a      	ldr	r2, [r3, #24]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	699a      	ldr	r2, [r3, #24]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	6999      	ldr	r1, [r3, #24]
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	021a      	lsls	r2, r3, #8
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	430a      	orrs	r2, r1
 8005a32:	619a      	str	r2, [r3, #24]
      break;
 8005a34:	e084      	b.n	8005b40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68b9      	ldr	r1, [r7, #8]
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f000 fac1 	bl	8005fc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	69da      	ldr	r2, [r3, #28]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f042 0208 	orr.w	r2, r2, #8
 8005a50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	69da      	ldr	r2, [r3, #28]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f022 0204 	bic.w	r2, r2, #4
 8005a60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	69d9      	ldr	r1, [r3, #28]
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	691a      	ldr	r2, [r3, #16]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	430a      	orrs	r2, r1
 8005a72:	61da      	str	r2, [r3, #28]
      break;
 8005a74:	e064      	b.n	8005b40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68b9      	ldr	r1, [r7, #8]
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f000 fb17 	bl	80060b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	69da      	ldr	r2, [r3, #28]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	69da      	ldr	r2, [r3, #28]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	69d9      	ldr	r1, [r3, #28]
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	021a      	lsls	r2, r3, #8
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	61da      	str	r2, [r3, #28]
      break;
 8005ab6:	e043      	b.n	8005b40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68b9      	ldr	r1, [r7, #8]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 fb4e 	bl	8006160 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f042 0208 	orr.w	r2, r2, #8
 8005ad2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f022 0204 	bic.w	r2, r2, #4
 8005ae2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	691a      	ldr	r2, [r3, #16]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	430a      	orrs	r2, r1
 8005af4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005af6:	e023      	b.n	8005b40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68b9      	ldr	r1, [r7, #8]
 8005afe:	4618      	mov	r0, r3
 8005b00:	f000 fb80 	bl	8006204 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b12:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b22:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	021a      	lsls	r2, r3, #8
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	430a      	orrs	r2, r1
 8005b36:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005b38:	e002      	b.n	8005b40 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	75fb      	strb	r3, [r7, #23]
      break;
 8005b3e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b48:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3718      	adds	r7, #24
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop

08005b54 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d101      	bne.n	8005b6c <HAL_TIM_SlaveConfigSynchro+0x18>
 8005b68:	2302      	movs	r3, #2
 8005b6a:	e031      	b.n	8005bd0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2202      	movs	r2, #2
 8005b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005b7c:	6839      	ldr	r1, [r7, #0]
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 fb94 	bl	80062ac <TIM_SlaveTimer_SetConfig>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d009      	beq.n	8005b9e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e018      	b.n	8005bd0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68da      	ldr	r2, [r3, #12]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bac:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68da      	ldr	r2, [r3, #12]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005bbc:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3708      	adds	r7, #8
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005be2:	2300      	movs	r3, #0
 8005be4:	60fb      	str	r3, [r7, #12]
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	2b0c      	cmp	r3, #12
 8005bea:	d831      	bhi.n	8005c50 <HAL_TIM_ReadCapturedValue+0x78>
 8005bec:	a201      	add	r2, pc, #4	; (adr r2, 8005bf4 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf2:	bf00      	nop
 8005bf4:	08005c29 	.word	0x08005c29
 8005bf8:	08005c51 	.word	0x08005c51
 8005bfc:	08005c51 	.word	0x08005c51
 8005c00:	08005c51 	.word	0x08005c51
 8005c04:	08005c33 	.word	0x08005c33
 8005c08:	08005c51 	.word	0x08005c51
 8005c0c:	08005c51 	.word	0x08005c51
 8005c10:	08005c51 	.word	0x08005c51
 8005c14:	08005c3d 	.word	0x08005c3d
 8005c18:	08005c51 	.word	0x08005c51
 8005c1c:	08005c51 	.word	0x08005c51
 8005c20:	08005c51 	.word	0x08005c51
 8005c24:	08005c47 	.word	0x08005c47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c2e:	60fb      	str	r3, [r7, #12]

      break;
 8005c30:	e00f      	b.n	8005c52 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c38:	60fb      	str	r3, [r7, #12]

      break;
 8005c3a:	e00a      	b.n	8005c52 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c42:	60fb      	str	r3, [r7, #12]

      break;
 8005c44:	e005      	b.n	8005c52 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4c:	60fb      	str	r3, [r7, #12]

      break;
 8005c4e:	e000      	b.n	8005c52 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005c50:	bf00      	nop
  }

  return tmpreg;
 8005c52:	68fb      	ldr	r3, [r7, #12]
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3714      	adds	r7, #20
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c68:	bf00      	nop
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c7c:	bf00      	nop
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a40      	ldr	r2, [pc, #256]	; (8005dc4 <TIM_Base_SetConfig+0x114>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d013      	beq.n	8005cf0 <TIM_Base_SetConfig+0x40>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cce:	d00f      	beq.n	8005cf0 <TIM_Base_SetConfig+0x40>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a3d      	ldr	r2, [pc, #244]	; (8005dc8 <TIM_Base_SetConfig+0x118>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d00b      	beq.n	8005cf0 <TIM_Base_SetConfig+0x40>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a3c      	ldr	r2, [pc, #240]	; (8005dcc <TIM_Base_SetConfig+0x11c>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d007      	beq.n	8005cf0 <TIM_Base_SetConfig+0x40>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a3b      	ldr	r2, [pc, #236]	; (8005dd0 <TIM_Base_SetConfig+0x120>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d003      	beq.n	8005cf0 <TIM_Base_SetConfig+0x40>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a3a      	ldr	r2, [pc, #232]	; (8005dd4 <TIM_Base_SetConfig+0x124>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d108      	bne.n	8005d02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a2f      	ldr	r2, [pc, #188]	; (8005dc4 <TIM_Base_SetConfig+0x114>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d02b      	beq.n	8005d62 <TIM_Base_SetConfig+0xb2>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d10:	d027      	beq.n	8005d62 <TIM_Base_SetConfig+0xb2>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a2c      	ldr	r2, [pc, #176]	; (8005dc8 <TIM_Base_SetConfig+0x118>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d023      	beq.n	8005d62 <TIM_Base_SetConfig+0xb2>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a2b      	ldr	r2, [pc, #172]	; (8005dcc <TIM_Base_SetConfig+0x11c>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d01f      	beq.n	8005d62 <TIM_Base_SetConfig+0xb2>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a2a      	ldr	r2, [pc, #168]	; (8005dd0 <TIM_Base_SetConfig+0x120>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d01b      	beq.n	8005d62 <TIM_Base_SetConfig+0xb2>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a29      	ldr	r2, [pc, #164]	; (8005dd4 <TIM_Base_SetConfig+0x124>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d017      	beq.n	8005d62 <TIM_Base_SetConfig+0xb2>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a28      	ldr	r2, [pc, #160]	; (8005dd8 <TIM_Base_SetConfig+0x128>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d013      	beq.n	8005d62 <TIM_Base_SetConfig+0xb2>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a27      	ldr	r2, [pc, #156]	; (8005ddc <TIM_Base_SetConfig+0x12c>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d00f      	beq.n	8005d62 <TIM_Base_SetConfig+0xb2>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a26      	ldr	r2, [pc, #152]	; (8005de0 <TIM_Base_SetConfig+0x130>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d00b      	beq.n	8005d62 <TIM_Base_SetConfig+0xb2>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a25      	ldr	r2, [pc, #148]	; (8005de4 <TIM_Base_SetConfig+0x134>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d007      	beq.n	8005d62 <TIM_Base_SetConfig+0xb2>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a24      	ldr	r2, [pc, #144]	; (8005de8 <TIM_Base_SetConfig+0x138>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d003      	beq.n	8005d62 <TIM_Base_SetConfig+0xb2>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a23      	ldr	r2, [pc, #140]	; (8005dec <TIM_Base_SetConfig+0x13c>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d108      	bne.n	8005d74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	695b      	ldr	r3, [r3, #20]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	689a      	ldr	r2, [r3, #8]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a0a      	ldr	r2, [pc, #40]	; (8005dc4 <TIM_Base_SetConfig+0x114>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d003      	beq.n	8005da8 <TIM_Base_SetConfig+0xf8>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a0c      	ldr	r2, [pc, #48]	; (8005dd4 <TIM_Base_SetConfig+0x124>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d103      	bne.n	8005db0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	691a      	ldr	r2, [r3, #16]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	615a      	str	r2, [r3, #20]
}
 8005db6:	bf00      	nop
 8005db8:	3714      	adds	r7, #20
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	40010000 	.word	0x40010000
 8005dc8:	40000400 	.word	0x40000400
 8005dcc:	40000800 	.word	0x40000800
 8005dd0:	40000c00 	.word	0x40000c00
 8005dd4:	40010400 	.word	0x40010400
 8005dd8:	40014000 	.word	0x40014000
 8005ddc:	40014400 	.word	0x40014400
 8005de0:	40014800 	.word	0x40014800
 8005de4:	40001800 	.word	0x40001800
 8005de8:	40001c00 	.word	0x40001c00
 8005dec:	40002000 	.word	0x40002000

08005df0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b087      	sub	sp, #28
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
 8005dfe:	f023 0201 	bic.w	r2, r3, #1
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	4b2b      	ldr	r3, [pc, #172]	; (8005ec8 <TIM_OC1_SetConfig+0xd8>)
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f023 0303 	bic.w	r3, r3, #3
 8005e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f023 0302 	bic.w	r3, r3, #2
 8005e38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	697a      	ldr	r2, [r7, #20]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a21      	ldr	r2, [pc, #132]	; (8005ecc <TIM_OC1_SetConfig+0xdc>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d003      	beq.n	8005e54 <TIM_OC1_SetConfig+0x64>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a20      	ldr	r2, [pc, #128]	; (8005ed0 <TIM_OC1_SetConfig+0xe0>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d10c      	bne.n	8005e6e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	f023 0308 	bic.w	r3, r3, #8
 8005e5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	f023 0304 	bic.w	r3, r3, #4
 8005e6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a16      	ldr	r2, [pc, #88]	; (8005ecc <TIM_OC1_SetConfig+0xdc>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d003      	beq.n	8005e7e <TIM_OC1_SetConfig+0x8e>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a15      	ldr	r2, [pc, #84]	; (8005ed0 <TIM_OC1_SetConfig+0xe0>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d111      	bne.n	8005ea2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	695b      	ldr	r3, [r3, #20]
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	685a      	ldr	r2, [r3, #4]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	621a      	str	r2, [r3, #32]
}
 8005ebc:	bf00      	nop
 8005ebe:	371c      	adds	r7, #28
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr
 8005ec8:	fffeff8f 	.word	0xfffeff8f
 8005ecc:	40010000 	.word	0x40010000
 8005ed0:	40010400 	.word	0x40010400

08005ed4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b087      	sub	sp, #28
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	f023 0210 	bic.w	r2, r3, #16
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a1b      	ldr	r3, [r3, #32]
 8005eee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	4b2e      	ldr	r3, [pc, #184]	; (8005fb8 <TIM_OC2_SetConfig+0xe4>)
 8005f00:	4013      	ands	r3, r2
 8005f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	021b      	lsls	r3, r3, #8
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	f023 0320 	bic.w	r3, r3, #32
 8005f1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	011b      	lsls	r3, r3, #4
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a23      	ldr	r2, [pc, #140]	; (8005fbc <TIM_OC2_SetConfig+0xe8>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d003      	beq.n	8005f3c <TIM_OC2_SetConfig+0x68>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a22      	ldr	r2, [pc, #136]	; (8005fc0 <TIM_OC2_SetConfig+0xec>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d10d      	bne.n	8005f58 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	011b      	lsls	r3, r3, #4
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a18      	ldr	r2, [pc, #96]	; (8005fbc <TIM_OC2_SetConfig+0xe8>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d003      	beq.n	8005f68 <TIM_OC2_SetConfig+0x94>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a17      	ldr	r2, [pc, #92]	; (8005fc0 <TIM_OC2_SetConfig+0xec>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d113      	bne.n	8005f90 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	695b      	ldr	r3, [r3, #20]
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	693a      	ldr	r2, [r7, #16]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	699b      	ldr	r3, [r3, #24]
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	693a      	ldr	r2, [r7, #16]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	693a      	ldr	r2, [r7, #16]
 8005f94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	685a      	ldr	r2, [r3, #4]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	621a      	str	r2, [r3, #32]
}
 8005faa:	bf00      	nop
 8005fac:	371c      	adds	r7, #28
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop
 8005fb8:	feff8fff 	.word	0xfeff8fff
 8005fbc:	40010000 	.word	0x40010000
 8005fc0:	40010400 	.word	0x40010400

08005fc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b087      	sub	sp, #28
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a1b      	ldr	r3, [r3, #32]
 8005fde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	4b2d      	ldr	r3, [pc, #180]	; (80060a4 <TIM_OC3_SetConfig+0xe0>)
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f023 0303 	bic.w	r3, r3, #3
 8005ffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	4313      	orrs	r3, r2
 8006004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800600c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	021b      	lsls	r3, r3, #8
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	4313      	orrs	r3, r2
 8006018:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a22      	ldr	r2, [pc, #136]	; (80060a8 <TIM_OC3_SetConfig+0xe4>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d003      	beq.n	800602a <TIM_OC3_SetConfig+0x66>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a21      	ldr	r2, [pc, #132]	; (80060ac <TIM_OC3_SetConfig+0xe8>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d10d      	bne.n	8006046 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006030:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	021b      	lsls	r3, r3, #8
 8006038:	697a      	ldr	r2, [r7, #20]
 800603a:	4313      	orrs	r3, r2
 800603c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006044:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a17      	ldr	r2, [pc, #92]	; (80060a8 <TIM_OC3_SetConfig+0xe4>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d003      	beq.n	8006056 <TIM_OC3_SetConfig+0x92>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a16      	ldr	r2, [pc, #88]	; (80060ac <TIM_OC3_SetConfig+0xe8>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d113      	bne.n	800607e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800605c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006064:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	011b      	lsls	r3, r3, #4
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	4313      	orrs	r3, r2
 8006070:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	011b      	lsls	r3, r3, #4
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	4313      	orrs	r3, r2
 800607c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	685a      	ldr	r2, [r3, #4]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	697a      	ldr	r2, [r7, #20]
 8006096:	621a      	str	r2, [r3, #32]
}
 8006098:	bf00      	nop
 800609a:	371c      	adds	r7, #28
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr
 80060a4:	fffeff8f 	.word	0xfffeff8f
 80060a8:	40010000 	.word	0x40010000
 80060ac:	40010400 	.word	0x40010400

080060b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b087      	sub	sp, #28
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a1b      	ldr	r3, [r3, #32]
 80060be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	69db      	ldr	r3, [r3, #28]
 80060d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	4b1e      	ldr	r3, [pc, #120]	; (8006154 <TIM_OC4_SetConfig+0xa4>)
 80060dc:	4013      	ands	r3, r2
 80060de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	021b      	lsls	r3, r3, #8
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	031b      	lsls	r3, r3, #12
 8006102:	693a      	ldr	r2, [r7, #16]
 8006104:	4313      	orrs	r3, r2
 8006106:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a13      	ldr	r2, [pc, #76]	; (8006158 <TIM_OC4_SetConfig+0xa8>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d003      	beq.n	8006118 <TIM_OC4_SetConfig+0x68>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a12      	ldr	r2, [pc, #72]	; (800615c <TIM_OC4_SetConfig+0xac>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d109      	bne.n	800612c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800611e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	695b      	ldr	r3, [r3, #20]
 8006124:	019b      	lsls	r3, r3, #6
 8006126:	697a      	ldr	r2, [r7, #20]
 8006128:	4313      	orrs	r3, r2
 800612a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	685a      	ldr	r2, [r3, #4]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	693a      	ldr	r2, [r7, #16]
 8006144:	621a      	str	r2, [r3, #32]
}
 8006146:	bf00      	nop
 8006148:	371c      	adds	r7, #28
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	feff8fff 	.word	0xfeff8fff
 8006158:	40010000 	.word	0x40010000
 800615c:	40010400 	.word	0x40010400

08006160 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006160:	b480      	push	{r7}
 8006162:	b087      	sub	sp, #28
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a1b      	ldr	r3, [r3, #32]
 800616e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a1b      	ldr	r3, [r3, #32]
 800617a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	4b1b      	ldr	r3, [pc, #108]	; (80061f8 <TIM_OC5_SetConfig+0x98>)
 800618c:	4013      	ands	r3, r2
 800618e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	4313      	orrs	r3, r2
 8006198:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80061a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	041b      	lsls	r3, r3, #16
 80061a8:	693a      	ldr	r2, [r7, #16]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a12      	ldr	r2, [pc, #72]	; (80061fc <TIM_OC5_SetConfig+0x9c>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d003      	beq.n	80061be <TIM_OC5_SetConfig+0x5e>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a11      	ldr	r2, [pc, #68]	; (8006200 <TIM_OC5_SetConfig+0xa0>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d109      	bne.n	80061d2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	695b      	ldr	r3, [r3, #20]
 80061ca:	021b      	lsls	r3, r3, #8
 80061cc:	697a      	ldr	r2, [r7, #20]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	697a      	ldr	r2, [r7, #20]
 80061d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	685a      	ldr	r2, [r3, #4]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	621a      	str	r2, [r3, #32]
}
 80061ec:	bf00      	nop
 80061ee:	371c      	adds	r7, #28
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr
 80061f8:	fffeff8f 	.word	0xfffeff8f
 80061fc:	40010000 	.word	0x40010000
 8006200:	40010400 	.word	0x40010400

08006204 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006204:	b480      	push	{r7}
 8006206:	b087      	sub	sp, #28
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a1b      	ldr	r3, [r3, #32]
 8006212:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a1b      	ldr	r3, [r3, #32]
 800621e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800622a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	4b1c      	ldr	r3, [pc, #112]	; (80062a0 <TIM_OC6_SetConfig+0x9c>)
 8006230:	4013      	ands	r3, r2
 8006232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	021b      	lsls	r3, r3, #8
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	4313      	orrs	r3, r2
 800623e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006246:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	051b      	lsls	r3, r3, #20
 800624e:	693a      	ldr	r2, [r7, #16]
 8006250:	4313      	orrs	r3, r2
 8006252:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a13      	ldr	r2, [pc, #76]	; (80062a4 <TIM_OC6_SetConfig+0xa0>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d003      	beq.n	8006264 <TIM_OC6_SetConfig+0x60>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a12      	ldr	r2, [pc, #72]	; (80062a8 <TIM_OC6_SetConfig+0xa4>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d109      	bne.n	8006278 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800626a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	695b      	ldr	r3, [r3, #20]
 8006270:	029b      	lsls	r3, r3, #10
 8006272:	697a      	ldr	r2, [r7, #20]
 8006274:	4313      	orrs	r3, r2
 8006276:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	697a      	ldr	r2, [r7, #20]
 800627c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	685a      	ldr	r2, [r3, #4]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	693a      	ldr	r2, [r7, #16]
 8006290:	621a      	str	r2, [r3, #32]
}
 8006292:	bf00      	nop
 8006294:	371c      	adds	r7, #28
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	feff8fff 	.word	0xfeff8fff
 80062a4:	40010000 	.word	0x40010000
 80062a8:	40010400 	.word	0x40010400

080062ac <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b086      	sub	sp, #24
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062b6:	2300      	movs	r3, #0
 80062b8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062c8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	693a      	ldr	r2, [r7, #16]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80062d4:	693a      	ldr	r2, [r7, #16]
 80062d6:	4b3e      	ldr	r3, [pc, #248]	; (80063d0 <TIM_SlaveTimer_SetConfig+0x124>)
 80062d8:	4013      	ands	r3, r2
 80062da:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	693a      	ldr	r2, [r7, #16]
 80062ec:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	2b70      	cmp	r3, #112	; 0x70
 80062f4:	d01a      	beq.n	800632c <TIM_SlaveTimer_SetConfig+0x80>
 80062f6:	2b70      	cmp	r3, #112	; 0x70
 80062f8:	d860      	bhi.n	80063bc <TIM_SlaveTimer_SetConfig+0x110>
 80062fa:	2b60      	cmp	r3, #96	; 0x60
 80062fc:	d054      	beq.n	80063a8 <TIM_SlaveTimer_SetConfig+0xfc>
 80062fe:	2b60      	cmp	r3, #96	; 0x60
 8006300:	d85c      	bhi.n	80063bc <TIM_SlaveTimer_SetConfig+0x110>
 8006302:	2b50      	cmp	r3, #80	; 0x50
 8006304:	d046      	beq.n	8006394 <TIM_SlaveTimer_SetConfig+0xe8>
 8006306:	2b50      	cmp	r3, #80	; 0x50
 8006308:	d858      	bhi.n	80063bc <TIM_SlaveTimer_SetConfig+0x110>
 800630a:	2b40      	cmp	r3, #64	; 0x40
 800630c:	d019      	beq.n	8006342 <TIM_SlaveTimer_SetConfig+0x96>
 800630e:	2b40      	cmp	r3, #64	; 0x40
 8006310:	d854      	bhi.n	80063bc <TIM_SlaveTimer_SetConfig+0x110>
 8006312:	2b30      	cmp	r3, #48	; 0x30
 8006314:	d055      	beq.n	80063c2 <TIM_SlaveTimer_SetConfig+0x116>
 8006316:	2b30      	cmp	r3, #48	; 0x30
 8006318:	d850      	bhi.n	80063bc <TIM_SlaveTimer_SetConfig+0x110>
 800631a:	2b20      	cmp	r3, #32
 800631c:	d051      	beq.n	80063c2 <TIM_SlaveTimer_SetConfig+0x116>
 800631e:	2b20      	cmp	r3, #32
 8006320:	d84c      	bhi.n	80063bc <TIM_SlaveTimer_SetConfig+0x110>
 8006322:	2b00      	cmp	r3, #0
 8006324:	d04d      	beq.n	80063c2 <TIM_SlaveTimer_SetConfig+0x116>
 8006326:	2b10      	cmp	r3, #16
 8006328:	d04b      	beq.n	80063c2 <TIM_SlaveTimer_SetConfig+0x116>
 800632a:	e047      	b.n	80063bc <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6818      	ldr	r0, [r3, #0]
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	68d9      	ldr	r1, [r3, #12]
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	689a      	ldr	r2, [r3, #8]
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	f000 f9d3 	bl	80066e6 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8006340:	e040      	b.n	80063c4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2b05      	cmp	r3, #5
 8006348:	d101      	bne.n	800634e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e03b      	b.n	80063c6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	6a1b      	ldr	r3, [r3, #32]
 8006354:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	6a1a      	ldr	r2, [r3, #32]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f022 0201 	bic.w	r2, r2, #1
 8006364:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	699b      	ldr	r3, [r3, #24]
 800636c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006374:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	011b      	lsls	r3, r3, #4
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	4313      	orrs	r3, r2
 8006380:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68ba      	ldr	r2, [r7, #8]
 8006388:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	621a      	str	r2, [r3, #32]
      break;
 8006392:	e017      	b.n	80063c4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6818      	ldr	r0, [r3, #0]
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	6899      	ldr	r1, [r3, #8]
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	461a      	mov	r2, r3
 80063a2:	f000 f88b 	bl	80064bc <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80063a6:	e00d      	b.n	80063c4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6818      	ldr	r0, [r3, #0]
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	6899      	ldr	r1, [r3, #8]
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	461a      	mov	r2, r3
 80063b6:	f000 f8ed 	bl	8006594 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80063ba:	e003      	b.n	80063c4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	75fb      	strb	r3, [r7, #23]
      break;
 80063c0:	e000      	b.n	80063c4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80063c2:	bf00      	nop
  }

  return status;
 80063c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3718      	adds	r7, #24
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	fffefff8 	.word	0xfffefff8

080063d4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b087      	sub	sp, #28
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	607a      	str	r2, [r7, #4]
 80063e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6a1b      	ldr	r3, [r3, #32]
 80063e6:	f023 0201 	bic.w	r2, r3, #1
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6a1b      	ldr	r3, [r3, #32]
 80063f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	4a28      	ldr	r2, [pc, #160]	; (80064a0 <TIM_TI1_SetConfig+0xcc>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d01b      	beq.n	800643a <TIM_TI1_SetConfig+0x66>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006408:	d017      	beq.n	800643a <TIM_TI1_SetConfig+0x66>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	4a25      	ldr	r2, [pc, #148]	; (80064a4 <TIM_TI1_SetConfig+0xd0>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d013      	beq.n	800643a <TIM_TI1_SetConfig+0x66>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	4a24      	ldr	r2, [pc, #144]	; (80064a8 <TIM_TI1_SetConfig+0xd4>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d00f      	beq.n	800643a <TIM_TI1_SetConfig+0x66>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	4a23      	ldr	r2, [pc, #140]	; (80064ac <TIM_TI1_SetConfig+0xd8>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d00b      	beq.n	800643a <TIM_TI1_SetConfig+0x66>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	4a22      	ldr	r2, [pc, #136]	; (80064b0 <TIM_TI1_SetConfig+0xdc>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d007      	beq.n	800643a <TIM_TI1_SetConfig+0x66>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	4a21      	ldr	r2, [pc, #132]	; (80064b4 <TIM_TI1_SetConfig+0xe0>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d003      	beq.n	800643a <TIM_TI1_SetConfig+0x66>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	4a20      	ldr	r2, [pc, #128]	; (80064b8 <TIM_TI1_SetConfig+0xe4>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d101      	bne.n	800643e <TIM_TI1_SetConfig+0x6a>
 800643a:	2301      	movs	r3, #1
 800643c:	e000      	b.n	8006440 <TIM_TI1_SetConfig+0x6c>
 800643e:	2300      	movs	r3, #0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d008      	beq.n	8006456 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	f023 0303 	bic.w	r3, r3, #3
 800644a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800644c:	697a      	ldr	r2, [r7, #20]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4313      	orrs	r3, r2
 8006452:	617b      	str	r3, [r7, #20]
 8006454:	e003      	b.n	800645e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	f043 0301 	orr.w	r3, r3, #1
 800645c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006464:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	011b      	lsls	r3, r3, #4
 800646a:	b2db      	uxtb	r3, r3
 800646c:	697a      	ldr	r2, [r7, #20]
 800646e:	4313      	orrs	r3, r2
 8006470:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	f023 030a 	bic.w	r3, r3, #10
 8006478:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	f003 030a 	and.w	r3, r3, #10
 8006480:	693a      	ldr	r2, [r7, #16]
 8006482:	4313      	orrs	r3, r2
 8006484:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	697a      	ldr	r2, [r7, #20]
 800648a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	693a      	ldr	r2, [r7, #16]
 8006490:	621a      	str	r2, [r3, #32]
}
 8006492:	bf00      	nop
 8006494:	371c      	adds	r7, #28
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	40010000 	.word	0x40010000
 80064a4:	40000400 	.word	0x40000400
 80064a8:	40000800 	.word	0x40000800
 80064ac:	40000c00 	.word	0x40000c00
 80064b0:	40010400 	.word	0x40010400
 80064b4:	40014000 	.word	0x40014000
 80064b8:	40001800 	.word	0x40001800

080064bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064bc:	b480      	push	{r7}
 80064be:	b087      	sub	sp, #28
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6a1b      	ldr	r3, [r3, #32]
 80064cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6a1b      	ldr	r3, [r3, #32]
 80064d2:	f023 0201 	bic.w	r2, r3, #1
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	011b      	lsls	r3, r3, #4
 80064ec:	693a      	ldr	r2, [r7, #16]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f023 030a 	bic.w	r3, r3, #10
 80064f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064fa:	697a      	ldr	r2, [r7, #20]
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	4313      	orrs	r3, r2
 8006500:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	693a      	ldr	r2, [r7, #16]
 8006506:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	697a      	ldr	r2, [r7, #20]
 800650c:	621a      	str	r2, [r3, #32]
}
 800650e:	bf00      	nop
 8006510:	371c      	adds	r7, #28
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr

0800651a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800651a:	b480      	push	{r7}
 800651c:	b087      	sub	sp, #28
 800651e:	af00      	add	r7, sp, #0
 8006520:	60f8      	str	r0, [r7, #12]
 8006522:	60b9      	str	r1, [r7, #8]
 8006524:	607a      	str	r2, [r7, #4]
 8006526:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6a1b      	ldr	r3, [r3, #32]
 800652c:	f023 0210 	bic.w	r2, r3, #16
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	699b      	ldr	r3, [r3, #24]
 8006538:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6a1b      	ldr	r3, [r3, #32]
 800653e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006546:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	021b      	lsls	r3, r3, #8
 800654c:	697a      	ldr	r2, [r7, #20]
 800654e:	4313      	orrs	r3, r2
 8006550:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006558:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	031b      	lsls	r3, r3, #12
 800655e:	b29b      	uxth	r3, r3
 8006560:	697a      	ldr	r2, [r7, #20]
 8006562:	4313      	orrs	r3, r2
 8006564:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800656c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	011b      	lsls	r3, r3, #4
 8006572:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006576:	693a      	ldr	r2, [r7, #16]
 8006578:	4313      	orrs	r3, r2
 800657a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	697a      	ldr	r2, [r7, #20]
 8006580:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	621a      	str	r2, [r3, #32]
}
 8006588:	bf00      	nop
 800658a:	371c      	adds	r7, #28
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006594:	b480      	push	{r7}
 8006596:	b087      	sub	sp, #28
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6a1b      	ldr	r3, [r3, #32]
 80065a4:	f023 0210 	bic.w	r2, r3, #16
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	699b      	ldr	r3, [r3, #24]
 80065b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6a1b      	ldr	r3, [r3, #32]
 80065b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	031b      	lsls	r3, r3, #12
 80065c4:	697a      	ldr	r2, [r7, #20]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80065d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	011b      	lsls	r3, r3, #4
 80065d6:	693a      	ldr	r2, [r7, #16]
 80065d8:	4313      	orrs	r3, r2
 80065da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	697a      	ldr	r2, [r7, #20]
 80065e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	621a      	str	r2, [r3, #32]
}
 80065e8:	bf00      	nop
 80065ea:	371c      	adds	r7, #28
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b087      	sub	sp, #28
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	607a      	str	r2, [r7, #4]
 8006600:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6a1b      	ldr	r3, [r3, #32]
 8006606:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	69db      	ldr	r3, [r3, #28]
 8006612:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6a1b      	ldr	r3, [r3, #32]
 8006618:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	f023 0303 	bic.w	r3, r3, #3
 8006620:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006622:	697a      	ldr	r2, [r7, #20]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4313      	orrs	r3, r2
 8006628:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006630:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	011b      	lsls	r3, r3, #4
 8006636:	b2db      	uxtb	r3, r3
 8006638:	697a      	ldr	r2, [r7, #20]
 800663a:	4313      	orrs	r3, r2
 800663c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006644:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	021b      	lsls	r3, r3, #8
 800664a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800664e:	693a      	ldr	r2, [r7, #16]
 8006650:	4313      	orrs	r3, r2
 8006652:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	697a      	ldr	r2, [r7, #20]
 8006658:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	693a      	ldr	r2, [r7, #16]
 800665e:	621a      	str	r2, [r3, #32]
}
 8006660:	bf00      	nop
 8006662:	371c      	adds	r7, #28
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800666c:	b480      	push	{r7}
 800666e:	b087      	sub	sp, #28
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	607a      	str	r2, [r7, #4]
 8006678:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6a1b      	ldr	r3, [r3, #32]
 800667e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	69db      	ldr	r3, [r3, #28]
 800668a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6a1b      	ldr	r3, [r3, #32]
 8006690:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006698:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	021b      	lsls	r3, r3, #8
 800669e:	697a      	ldr	r2, [r7, #20]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066aa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	031b      	lsls	r3, r3, #12
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	697a      	ldr	r2, [r7, #20]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80066be:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	031b      	lsls	r3, r3, #12
 80066c4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	697a      	ldr	r2, [r7, #20]
 80066d2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	621a      	str	r2, [r3, #32]
}
 80066da:	bf00      	nop
 80066dc:	371c      	adds	r7, #28
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr

080066e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066e6:	b480      	push	{r7}
 80066e8:	b087      	sub	sp, #28
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	60f8      	str	r0, [r7, #12]
 80066ee:	60b9      	str	r1, [r7, #8]
 80066f0:	607a      	str	r2, [r7, #4]
 80066f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006700:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	021a      	lsls	r2, r3, #8
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	431a      	orrs	r2, r3
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	4313      	orrs	r3, r2
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	4313      	orrs	r3, r2
 8006712:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	697a      	ldr	r2, [r7, #20]
 8006718:	609a      	str	r2, [r3, #8]
}
 800671a:	bf00      	nop
 800671c:	371c      	adds	r7, #28
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr

08006726 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006726:	b480      	push	{r7}
 8006728:	b087      	sub	sp, #28
 800672a:	af00      	add	r7, sp, #0
 800672c:	60f8      	str	r0, [r7, #12]
 800672e:	60b9      	str	r1, [r7, #8]
 8006730:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	f003 031f 	and.w	r3, r3, #31
 8006738:	2201      	movs	r2, #1
 800673a:	fa02 f303 	lsl.w	r3, r2, r3
 800673e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6a1a      	ldr	r2, [r3, #32]
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	43db      	mvns	r3, r3
 8006748:	401a      	ands	r2, r3
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6a1a      	ldr	r2, [r3, #32]
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	f003 031f 	and.w	r3, r3, #31
 8006758:	6879      	ldr	r1, [r7, #4]
 800675a:	fa01 f303 	lsl.w	r3, r1, r3
 800675e:	431a      	orrs	r2, r3
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	621a      	str	r2, [r3, #32]
}
 8006764:	bf00      	nop
 8006766:	371c      	adds	r7, #28
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006780:	2b01      	cmp	r3, #1
 8006782:	d101      	bne.n	8006788 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006784:	2302      	movs	r3, #2
 8006786:	e06d      	b.n	8006864 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2202      	movs	r2, #2
 8006794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a30      	ldr	r2, [pc, #192]	; (8006870 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d004      	beq.n	80067bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a2f      	ldr	r2, [pc, #188]	; (8006874 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d108      	bne.n	80067ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80067c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	68fa      	ldr	r2, [r7, #12]
 80067dc:	4313      	orrs	r3, r2
 80067de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a20      	ldr	r2, [pc, #128]	; (8006870 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d022      	beq.n	8006838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067fa:	d01d      	beq.n	8006838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a1d      	ldr	r2, [pc, #116]	; (8006878 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d018      	beq.n	8006838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a1c      	ldr	r2, [pc, #112]	; (800687c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d013      	beq.n	8006838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a1a      	ldr	r2, [pc, #104]	; (8006880 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d00e      	beq.n	8006838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a15      	ldr	r2, [pc, #84]	; (8006874 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d009      	beq.n	8006838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a16      	ldr	r2, [pc, #88]	; (8006884 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d004      	beq.n	8006838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a15      	ldr	r2, [pc, #84]	; (8006888 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d10c      	bne.n	8006852 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800683e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	68ba      	ldr	r2, [r7, #8]
 8006846:	4313      	orrs	r3, r2
 8006848:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	68ba      	ldr	r2, [r7, #8]
 8006850:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2201      	movs	r2, #1
 8006856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	3714      	adds	r7, #20
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr
 8006870:	40010000 	.word	0x40010000
 8006874:	40010400 	.word	0x40010400
 8006878:	40000400 	.word	0x40000400
 800687c:	40000800 	.word	0x40000800
 8006880:	40000c00 	.word	0x40000c00
 8006884:	40014000 	.word	0x40014000
 8006888:	40001800 	.word	0x40001800

0800688c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006894:	bf00      	nop
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068a8:	bf00      	nop
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80068bc:	bf00      	nop
 80068be:	370c      	adds	r7, #12
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d101      	bne.n	80068da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e040      	b.n	800695c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d106      	bne.n	80068f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f7fb fcac 	bl	8002248 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2224      	movs	r2, #36	; 0x24
 80068f4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f022 0201 	bic.w	r2, r2, #1
 8006904:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 f8c0 	bl	8006a8c <UART_SetConfig>
 800690c:	4603      	mov	r3, r0
 800690e:	2b01      	cmp	r3, #1
 8006910:	d101      	bne.n	8006916 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e022      	b.n	800695c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691a:	2b00      	cmp	r3, #0
 800691c:	d002      	beq.n	8006924 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 fb16 	bl	8006f50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	685a      	ldr	r2, [r3, #4]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006932:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	689a      	ldr	r2, [r3, #8]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006942:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f042 0201 	orr.w	r2, r2, #1
 8006952:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 fb9d 	bl	8007094 <UART_CheckIdleState>
 800695a:	4603      	mov	r3, r0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3708      	adds	r7, #8
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b08a      	sub	sp, #40	; 0x28
 8006968:	af02      	add	r7, sp, #8
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	603b      	str	r3, [r7, #0]
 8006970:	4613      	mov	r3, r2
 8006972:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006978:	2b20      	cmp	r3, #32
 800697a:	f040 8081 	bne.w	8006a80 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d002      	beq.n	800698a <HAL_UART_Transmit+0x26>
 8006984:	88fb      	ldrh	r3, [r7, #6]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d101      	bne.n	800698e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e079      	b.n	8006a82 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006994:	2b01      	cmp	r3, #1
 8006996:	d101      	bne.n	800699c <HAL_UART_Transmit+0x38>
 8006998:	2302      	movs	r3, #2
 800699a:	e072      	b.n	8006a82 <HAL_UART_Transmit+0x11e>
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2221      	movs	r2, #33	; 0x21
 80069b0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069b2:	f7fb fd21 	bl	80023f8 <HAL_GetTick>
 80069b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	88fa      	ldrh	r2, [r7, #6]
 80069bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	88fa      	ldrh	r2, [r7, #6]
 80069c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069d0:	d108      	bne.n	80069e4 <HAL_UART_Transmit+0x80>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d104      	bne.n	80069e4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80069da:	2300      	movs	r3, #0
 80069dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	61bb      	str	r3, [r7, #24]
 80069e2:	e003      	b.n	80069ec <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069e8:	2300      	movs	r3, #0
 80069ea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80069f4:	e02c      	b.n	8006a50 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	9300      	str	r3, [sp, #0]
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	2200      	movs	r2, #0
 80069fe:	2180      	movs	r1, #128	; 0x80
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f000 fb90 	bl	8007126 <UART_WaitOnFlagUntilTimeout>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d001      	beq.n	8006a10 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	e038      	b.n	8006a82 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d10b      	bne.n	8006a2e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	881b      	ldrh	r3, [r3, #0]
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a24:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	3302      	adds	r3, #2
 8006a2a:	61bb      	str	r3, [r7, #24]
 8006a2c:	e007      	b.n	8006a3e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	781a      	ldrb	r2, [r3, #0]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	3b01      	subs	r3, #1
 8006a48:	b29a      	uxth	r2, r3
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d1cc      	bne.n	80069f6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	9300      	str	r3, [sp, #0]
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	2200      	movs	r2, #0
 8006a64:	2140      	movs	r1, #64	; 0x40
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f000 fb5d 	bl	8007126 <UART_WaitOnFlagUntilTimeout>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d001      	beq.n	8006a76 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006a72:	2303      	movs	r3, #3
 8006a74:	e005      	b.n	8006a82 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2220      	movs	r2, #32
 8006a7a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	e000      	b.n	8006a82 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006a80:	2302      	movs	r3, #2
  }
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3720      	adds	r7, #32
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
	...

08006a8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b088      	sub	sp, #32
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a94:	2300      	movs	r3, #0
 8006a96:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	689a      	ldr	r2, [r3, #8]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	691b      	ldr	r3, [r3, #16]
 8006aa0:	431a      	orrs	r2, r3
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	695b      	ldr	r3, [r3, #20]
 8006aa6:	431a      	orrs	r2, r3
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	69db      	ldr	r3, [r3, #28]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	4ba7      	ldr	r3, [pc, #668]	; (8006d54 <UART_SetConfig+0x2c8>)
 8006ab8:	4013      	ands	r3, r2
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	6812      	ldr	r2, [r2, #0]
 8006abe:	6979      	ldr	r1, [r7, #20]
 8006ac0:	430b      	orrs	r3, r1
 8006ac2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	68da      	ldr	r2, [r3, #12]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	430a      	orrs	r2, r1
 8006ad8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6a1b      	ldr	r3, [r3, #32]
 8006ae4:	697a      	ldr	r2, [r7, #20]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	697a      	ldr	r2, [r7, #20]
 8006afa:	430a      	orrs	r2, r1
 8006afc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a95      	ldr	r2, [pc, #596]	; (8006d58 <UART_SetConfig+0x2cc>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d120      	bne.n	8006b4a <UART_SetConfig+0xbe>
 8006b08:	4b94      	ldr	r3, [pc, #592]	; (8006d5c <UART_SetConfig+0x2d0>)
 8006b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b0e:	f003 0303 	and.w	r3, r3, #3
 8006b12:	2b03      	cmp	r3, #3
 8006b14:	d816      	bhi.n	8006b44 <UART_SetConfig+0xb8>
 8006b16:	a201      	add	r2, pc, #4	; (adr r2, 8006b1c <UART_SetConfig+0x90>)
 8006b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b1c:	08006b2d 	.word	0x08006b2d
 8006b20:	08006b39 	.word	0x08006b39
 8006b24:	08006b33 	.word	0x08006b33
 8006b28:	08006b3f 	.word	0x08006b3f
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	77fb      	strb	r3, [r7, #31]
 8006b30:	e14f      	b.n	8006dd2 <UART_SetConfig+0x346>
 8006b32:	2302      	movs	r3, #2
 8006b34:	77fb      	strb	r3, [r7, #31]
 8006b36:	e14c      	b.n	8006dd2 <UART_SetConfig+0x346>
 8006b38:	2304      	movs	r3, #4
 8006b3a:	77fb      	strb	r3, [r7, #31]
 8006b3c:	e149      	b.n	8006dd2 <UART_SetConfig+0x346>
 8006b3e:	2308      	movs	r3, #8
 8006b40:	77fb      	strb	r3, [r7, #31]
 8006b42:	e146      	b.n	8006dd2 <UART_SetConfig+0x346>
 8006b44:	2310      	movs	r3, #16
 8006b46:	77fb      	strb	r3, [r7, #31]
 8006b48:	e143      	b.n	8006dd2 <UART_SetConfig+0x346>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a84      	ldr	r2, [pc, #528]	; (8006d60 <UART_SetConfig+0x2d4>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d132      	bne.n	8006bba <UART_SetConfig+0x12e>
 8006b54:	4b81      	ldr	r3, [pc, #516]	; (8006d5c <UART_SetConfig+0x2d0>)
 8006b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b5a:	f003 030c 	and.w	r3, r3, #12
 8006b5e:	2b0c      	cmp	r3, #12
 8006b60:	d828      	bhi.n	8006bb4 <UART_SetConfig+0x128>
 8006b62:	a201      	add	r2, pc, #4	; (adr r2, 8006b68 <UART_SetConfig+0xdc>)
 8006b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b68:	08006b9d 	.word	0x08006b9d
 8006b6c:	08006bb5 	.word	0x08006bb5
 8006b70:	08006bb5 	.word	0x08006bb5
 8006b74:	08006bb5 	.word	0x08006bb5
 8006b78:	08006ba9 	.word	0x08006ba9
 8006b7c:	08006bb5 	.word	0x08006bb5
 8006b80:	08006bb5 	.word	0x08006bb5
 8006b84:	08006bb5 	.word	0x08006bb5
 8006b88:	08006ba3 	.word	0x08006ba3
 8006b8c:	08006bb5 	.word	0x08006bb5
 8006b90:	08006bb5 	.word	0x08006bb5
 8006b94:	08006bb5 	.word	0x08006bb5
 8006b98:	08006baf 	.word	0x08006baf
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	77fb      	strb	r3, [r7, #31]
 8006ba0:	e117      	b.n	8006dd2 <UART_SetConfig+0x346>
 8006ba2:	2302      	movs	r3, #2
 8006ba4:	77fb      	strb	r3, [r7, #31]
 8006ba6:	e114      	b.n	8006dd2 <UART_SetConfig+0x346>
 8006ba8:	2304      	movs	r3, #4
 8006baa:	77fb      	strb	r3, [r7, #31]
 8006bac:	e111      	b.n	8006dd2 <UART_SetConfig+0x346>
 8006bae:	2308      	movs	r3, #8
 8006bb0:	77fb      	strb	r3, [r7, #31]
 8006bb2:	e10e      	b.n	8006dd2 <UART_SetConfig+0x346>
 8006bb4:	2310      	movs	r3, #16
 8006bb6:	77fb      	strb	r3, [r7, #31]
 8006bb8:	e10b      	b.n	8006dd2 <UART_SetConfig+0x346>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a69      	ldr	r2, [pc, #420]	; (8006d64 <UART_SetConfig+0x2d8>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d120      	bne.n	8006c06 <UART_SetConfig+0x17a>
 8006bc4:	4b65      	ldr	r3, [pc, #404]	; (8006d5c <UART_SetConfig+0x2d0>)
 8006bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006bce:	2b30      	cmp	r3, #48	; 0x30
 8006bd0:	d013      	beq.n	8006bfa <UART_SetConfig+0x16e>
 8006bd2:	2b30      	cmp	r3, #48	; 0x30
 8006bd4:	d814      	bhi.n	8006c00 <UART_SetConfig+0x174>
 8006bd6:	2b20      	cmp	r3, #32
 8006bd8:	d009      	beq.n	8006bee <UART_SetConfig+0x162>
 8006bda:	2b20      	cmp	r3, #32
 8006bdc:	d810      	bhi.n	8006c00 <UART_SetConfig+0x174>
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d002      	beq.n	8006be8 <UART_SetConfig+0x15c>
 8006be2:	2b10      	cmp	r3, #16
 8006be4:	d006      	beq.n	8006bf4 <UART_SetConfig+0x168>
 8006be6:	e00b      	b.n	8006c00 <UART_SetConfig+0x174>
 8006be8:	2300      	movs	r3, #0
 8006bea:	77fb      	strb	r3, [r7, #31]
 8006bec:	e0f1      	b.n	8006dd2 <UART_SetConfig+0x346>
 8006bee:	2302      	movs	r3, #2
 8006bf0:	77fb      	strb	r3, [r7, #31]
 8006bf2:	e0ee      	b.n	8006dd2 <UART_SetConfig+0x346>
 8006bf4:	2304      	movs	r3, #4
 8006bf6:	77fb      	strb	r3, [r7, #31]
 8006bf8:	e0eb      	b.n	8006dd2 <UART_SetConfig+0x346>
 8006bfa:	2308      	movs	r3, #8
 8006bfc:	77fb      	strb	r3, [r7, #31]
 8006bfe:	e0e8      	b.n	8006dd2 <UART_SetConfig+0x346>
 8006c00:	2310      	movs	r3, #16
 8006c02:	77fb      	strb	r3, [r7, #31]
 8006c04:	e0e5      	b.n	8006dd2 <UART_SetConfig+0x346>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a57      	ldr	r2, [pc, #348]	; (8006d68 <UART_SetConfig+0x2dc>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d120      	bne.n	8006c52 <UART_SetConfig+0x1c6>
 8006c10:	4b52      	ldr	r3, [pc, #328]	; (8006d5c <UART_SetConfig+0x2d0>)
 8006c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c16:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006c1a:	2bc0      	cmp	r3, #192	; 0xc0
 8006c1c:	d013      	beq.n	8006c46 <UART_SetConfig+0x1ba>
 8006c1e:	2bc0      	cmp	r3, #192	; 0xc0
 8006c20:	d814      	bhi.n	8006c4c <UART_SetConfig+0x1c0>
 8006c22:	2b80      	cmp	r3, #128	; 0x80
 8006c24:	d009      	beq.n	8006c3a <UART_SetConfig+0x1ae>
 8006c26:	2b80      	cmp	r3, #128	; 0x80
 8006c28:	d810      	bhi.n	8006c4c <UART_SetConfig+0x1c0>
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d002      	beq.n	8006c34 <UART_SetConfig+0x1a8>
 8006c2e:	2b40      	cmp	r3, #64	; 0x40
 8006c30:	d006      	beq.n	8006c40 <UART_SetConfig+0x1b4>
 8006c32:	e00b      	b.n	8006c4c <UART_SetConfig+0x1c0>
 8006c34:	2300      	movs	r3, #0
 8006c36:	77fb      	strb	r3, [r7, #31]
 8006c38:	e0cb      	b.n	8006dd2 <UART_SetConfig+0x346>
 8006c3a:	2302      	movs	r3, #2
 8006c3c:	77fb      	strb	r3, [r7, #31]
 8006c3e:	e0c8      	b.n	8006dd2 <UART_SetConfig+0x346>
 8006c40:	2304      	movs	r3, #4
 8006c42:	77fb      	strb	r3, [r7, #31]
 8006c44:	e0c5      	b.n	8006dd2 <UART_SetConfig+0x346>
 8006c46:	2308      	movs	r3, #8
 8006c48:	77fb      	strb	r3, [r7, #31]
 8006c4a:	e0c2      	b.n	8006dd2 <UART_SetConfig+0x346>
 8006c4c:	2310      	movs	r3, #16
 8006c4e:	77fb      	strb	r3, [r7, #31]
 8006c50:	e0bf      	b.n	8006dd2 <UART_SetConfig+0x346>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a45      	ldr	r2, [pc, #276]	; (8006d6c <UART_SetConfig+0x2e0>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d125      	bne.n	8006ca8 <UART_SetConfig+0x21c>
 8006c5c:	4b3f      	ldr	r3, [pc, #252]	; (8006d5c <UART_SetConfig+0x2d0>)
 8006c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c6a:	d017      	beq.n	8006c9c <UART_SetConfig+0x210>
 8006c6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c70:	d817      	bhi.n	8006ca2 <UART_SetConfig+0x216>
 8006c72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c76:	d00b      	beq.n	8006c90 <UART_SetConfig+0x204>
 8006c78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c7c:	d811      	bhi.n	8006ca2 <UART_SetConfig+0x216>
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d003      	beq.n	8006c8a <UART_SetConfig+0x1fe>
 8006c82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c86:	d006      	beq.n	8006c96 <UART_SetConfig+0x20a>
 8006c88:	e00b      	b.n	8006ca2 <UART_SetConfig+0x216>
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	77fb      	strb	r3, [r7, #31]
 8006c8e:	e0a0      	b.n	8006dd2 <UART_SetConfig+0x346>
 8006c90:	2302      	movs	r3, #2
 8006c92:	77fb      	strb	r3, [r7, #31]
 8006c94:	e09d      	b.n	8006dd2 <UART_SetConfig+0x346>
 8006c96:	2304      	movs	r3, #4
 8006c98:	77fb      	strb	r3, [r7, #31]
 8006c9a:	e09a      	b.n	8006dd2 <UART_SetConfig+0x346>
 8006c9c:	2308      	movs	r3, #8
 8006c9e:	77fb      	strb	r3, [r7, #31]
 8006ca0:	e097      	b.n	8006dd2 <UART_SetConfig+0x346>
 8006ca2:	2310      	movs	r3, #16
 8006ca4:	77fb      	strb	r3, [r7, #31]
 8006ca6:	e094      	b.n	8006dd2 <UART_SetConfig+0x346>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a30      	ldr	r2, [pc, #192]	; (8006d70 <UART_SetConfig+0x2e4>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d125      	bne.n	8006cfe <UART_SetConfig+0x272>
 8006cb2:	4b2a      	ldr	r3, [pc, #168]	; (8006d5c <UART_SetConfig+0x2d0>)
 8006cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cb8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006cbc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cc0:	d017      	beq.n	8006cf2 <UART_SetConfig+0x266>
 8006cc2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cc6:	d817      	bhi.n	8006cf8 <UART_SetConfig+0x26c>
 8006cc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ccc:	d00b      	beq.n	8006ce6 <UART_SetConfig+0x25a>
 8006cce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cd2:	d811      	bhi.n	8006cf8 <UART_SetConfig+0x26c>
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d003      	beq.n	8006ce0 <UART_SetConfig+0x254>
 8006cd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cdc:	d006      	beq.n	8006cec <UART_SetConfig+0x260>
 8006cde:	e00b      	b.n	8006cf8 <UART_SetConfig+0x26c>
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	77fb      	strb	r3, [r7, #31]
 8006ce4:	e075      	b.n	8006dd2 <UART_SetConfig+0x346>
 8006ce6:	2302      	movs	r3, #2
 8006ce8:	77fb      	strb	r3, [r7, #31]
 8006cea:	e072      	b.n	8006dd2 <UART_SetConfig+0x346>
 8006cec:	2304      	movs	r3, #4
 8006cee:	77fb      	strb	r3, [r7, #31]
 8006cf0:	e06f      	b.n	8006dd2 <UART_SetConfig+0x346>
 8006cf2:	2308      	movs	r3, #8
 8006cf4:	77fb      	strb	r3, [r7, #31]
 8006cf6:	e06c      	b.n	8006dd2 <UART_SetConfig+0x346>
 8006cf8:	2310      	movs	r3, #16
 8006cfa:	77fb      	strb	r3, [r7, #31]
 8006cfc:	e069      	b.n	8006dd2 <UART_SetConfig+0x346>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a1c      	ldr	r2, [pc, #112]	; (8006d74 <UART_SetConfig+0x2e8>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d137      	bne.n	8006d78 <UART_SetConfig+0x2ec>
 8006d08:	4b14      	ldr	r3, [pc, #80]	; (8006d5c <UART_SetConfig+0x2d0>)
 8006d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d0e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006d12:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d16:	d017      	beq.n	8006d48 <UART_SetConfig+0x2bc>
 8006d18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d1c:	d817      	bhi.n	8006d4e <UART_SetConfig+0x2c2>
 8006d1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d22:	d00b      	beq.n	8006d3c <UART_SetConfig+0x2b0>
 8006d24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d28:	d811      	bhi.n	8006d4e <UART_SetConfig+0x2c2>
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d003      	beq.n	8006d36 <UART_SetConfig+0x2aa>
 8006d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d32:	d006      	beq.n	8006d42 <UART_SetConfig+0x2b6>
 8006d34:	e00b      	b.n	8006d4e <UART_SetConfig+0x2c2>
 8006d36:	2300      	movs	r3, #0
 8006d38:	77fb      	strb	r3, [r7, #31]
 8006d3a:	e04a      	b.n	8006dd2 <UART_SetConfig+0x346>
 8006d3c:	2302      	movs	r3, #2
 8006d3e:	77fb      	strb	r3, [r7, #31]
 8006d40:	e047      	b.n	8006dd2 <UART_SetConfig+0x346>
 8006d42:	2304      	movs	r3, #4
 8006d44:	77fb      	strb	r3, [r7, #31]
 8006d46:	e044      	b.n	8006dd2 <UART_SetConfig+0x346>
 8006d48:	2308      	movs	r3, #8
 8006d4a:	77fb      	strb	r3, [r7, #31]
 8006d4c:	e041      	b.n	8006dd2 <UART_SetConfig+0x346>
 8006d4e:	2310      	movs	r3, #16
 8006d50:	77fb      	strb	r3, [r7, #31]
 8006d52:	e03e      	b.n	8006dd2 <UART_SetConfig+0x346>
 8006d54:	efff69f3 	.word	0xefff69f3
 8006d58:	40011000 	.word	0x40011000
 8006d5c:	40023800 	.word	0x40023800
 8006d60:	40004400 	.word	0x40004400
 8006d64:	40004800 	.word	0x40004800
 8006d68:	40004c00 	.word	0x40004c00
 8006d6c:	40005000 	.word	0x40005000
 8006d70:	40011400 	.word	0x40011400
 8006d74:	40007800 	.word	0x40007800
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a71      	ldr	r2, [pc, #452]	; (8006f44 <UART_SetConfig+0x4b8>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d125      	bne.n	8006dce <UART_SetConfig+0x342>
 8006d82:	4b71      	ldr	r3, [pc, #452]	; (8006f48 <UART_SetConfig+0x4bc>)
 8006d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006d8c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006d90:	d017      	beq.n	8006dc2 <UART_SetConfig+0x336>
 8006d92:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006d96:	d817      	bhi.n	8006dc8 <UART_SetConfig+0x33c>
 8006d98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d9c:	d00b      	beq.n	8006db6 <UART_SetConfig+0x32a>
 8006d9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006da2:	d811      	bhi.n	8006dc8 <UART_SetConfig+0x33c>
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d003      	beq.n	8006db0 <UART_SetConfig+0x324>
 8006da8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006dac:	d006      	beq.n	8006dbc <UART_SetConfig+0x330>
 8006dae:	e00b      	b.n	8006dc8 <UART_SetConfig+0x33c>
 8006db0:	2300      	movs	r3, #0
 8006db2:	77fb      	strb	r3, [r7, #31]
 8006db4:	e00d      	b.n	8006dd2 <UART_SetConfig+0x346>
 8006db6:	2302      	movs	r3, #2
 8006db8:	77fb      	strb	r3, [r7, #31]
 8006dba:	e00a      	b.n	8006dd2 <UART_SetConfig+0x346>
 8006dbc:	2304      	movs	r3, #4
 8006dbe:	77fb      	strb	r3, [r7, #31]
 8006dc0:	e007      	b.n	8006dd2 <UART_SetConfig+0x346>
 8006dc2:	2308      	movs	r3, #8
 8006dc4:	77fb      	strb	r3, [r7, #31]
 8006dc6:	e004      	b.n	8006dd2 <UART_SetConfig+0x346>
 8006dc8:	2310      	movs	r3, #16
 8006dca:	77fb      	strb	r3, [r7, #31]
 8006dcc:	e001      	b.n	8006dd2 <UART_SetConfig+0x346>
 8006dce:	2310      	movs	r3, #16
 8006dd0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	69db      	ldr	r3, [r3, #28]
 8006dd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dda:	d15a      	bne.n	8006e92 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8006ddc:	7ffb      	ldrb	r3, [r7, #31]
 8006dde:	2b08      	cmp	r3, #8
 8006de0:	d827      	bhi.n	8006e32 <UART_SetConfig+0x3a6>
 8006de2:	a201      	add	r2, pc, #4	; (adr r2, 8006de8 <UART_SetConfig+0x35c>)
 8006de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de8:	08006e0d 	.word	0x08006e0d
 8006dec:	08006e15 	.word	0x08006e15
 8006df0:	08006e1d 	.word	0x08006e1d
 8006df4:	08006e33 	.word	0x08006e33
 8006df8:	08006e23 	.word	0x08006e23
 8006dfc:	08006e33 	.word	0x08006e33
 8006e00:	08006e33 	.word	0x08006e33
 8006e04:	08006e33 	.word	0x08006e33
 8006e08:	08006e2b 	.word	0x08006e2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e0c:	f7fd fc0a 	bl	8004624 <HAL_RCC_GetPCLK1Freq>
 8006e10:	61b8      	str	r0, [r7, #24]
        break;
 8006e12:	e013      	b.n	8006e3c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e14:	f7fd fc1a 	bl	800464c <HAL_RCC_GetPCLK2Freq>
 8006e18:	61b8      	str	r0, [r7, #24]
        break;
 8006e1a:	e00f      	b.n	8006e3c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e1c:	4b4b      	ldr	r3, [pc, #300]	; (8006f4c <UART_SetConfig+0x4c0>)
 8006e1e:	61bb      	str	r3, [r7, #24]
        break;
 8006e20:	e00c      	b.n	8006e3c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e22:	f7fd fb3d 	bl	80044a0 <HAL_RCC_GetSysClockFreq>
 8006e26:	61b8      	str	r0, [r7, #24]
        break;
 8006e28:	e008      	b.n	8006e3c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e2e:	61bb      	str	r3, [r7, #24]
        break;
 8006e30:	e004      	b.n	8006e3c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8006e32:	2300      	movs	r3, #0
 8006e34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	77bb      	strb	r3, [r7, #30]
        break;
 8006e3a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d074      	beq.n	8006f2c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	005a      	lsls	r2, r3, #1
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	085b      	lsrs	r3, r3, #1
 8006e4c:	441a      	add	r2, r3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e56:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	2b0f      	cmp	r3, #15
 8006e5c:	d916      	bls.n	8006e8c <UART_SetConfig+0x400>
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e64:	d212      	bcs.n	8006e8c <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	f023 030f 	bic.w	r3, r3, #15
 8006e6e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	085b      	lsrs	r3, r3, #1
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	f003 0307 	and.w	r3, r3, #7
 8006e7a:	b29a      	uxth	r2, r3
 8006e7c:	89fb      	ldrh	r3, [r7, #14]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	89fa      	ldrh	r2, [r7, #14]
 8006e88:	60da      	str	r2, [r3, #12]
 8006e8a:	e04f      	b.n	8006f2c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	77bb      	strb	r3, [r7, #30]
 8006e90:	e04c      	b.n	8006f2c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e92:	7ffb      	ldrb	r3, [r7, #31]
 8006e94:	2b08      	cmp	r3, #8
 8006e96:	d828      	bhi.n	8006eea <UART_SetConfig+0x45e>
 8006e98:	a201      	add	r2, pc, #4	; (adr r2, 8006ea0 <UART_SetConfig+0x414>)
 8006e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e9e:	bf00      	nop
 8006ea0:	08006ec5 	.word	0x08006ec5
 8006ea4:	08006ecd 	.word	0x08006ecd
 8006ea8:	08006ed5 	.word	0x08006ed5
 8006eac:	08006eeb 	.word	0x08006eeb
 8006eb0:	08006edb 	.word	0x08006edb
 8006eb4:	08006eeb 	.word	0x08006eeb
 8006eb8:	08006eeb 	.word	0x08006eeb
 8006ebc:	08006eeb 	.word	0x08006eeb
 8006ec0:	08006ee3 	.word	0x08006ee3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ec4:	f7fd fbae 	bl	8004624 <HAL_RCC_GetPCLK1Freq>
 8006ec8:	61b8      	str	r0, [r7, #24]
        break;
 8006eca:	e013      	b.n	8006ef4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ecc:	f7fd fbbe 	bl	800464c <HAL_RCC_GetPCLK2Freq>
 8006ed0:	61b8      	str	r0, [r7, #24]
        break;
 8006ed2:	e00f      	b.n	8006ef4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ed4:	4b1d      	ldr	r3, [pc, #116]	; (8006f4c <UART_SetConfig+0x4c0>)
 8006ed6:	61bb      	str	r3, [r7, #24]
        break;
 8006ed8:	e00c      	b.n	8006ef4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006eda:	f7fd fae1 	bl	80044a0 <HAL_RCC_GetSysClockFreq>
 8006ede:	61b8      	str	r0, [r7, #24]
        break;
 8006ee0:	e008      	b.n	8006ef4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ee2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ee6:	61bb      	str	r3, [r7, #24]
        break;
 8006ee8:	e004      	b.n	8006ef4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006eea:	2300      	movs	r3, #0
 8006eec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	77bb      	strb	r3, [r7, #30]
        break;
 8006ef2:	bf00      	nop
    }

    if (pclk != 0U)
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d018      	beq.n	8006f2c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	085a      	lsrs	r2, r3, #1
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	441a      	add	r2, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f0c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	2b0f      	cmp	r3, #15
 8006f12:	d909      	bls.n	8006f28 <UART_SetConfig+0x49c>
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f1a:	d205      	bcs.n	8006f28 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	b29a      	uxth	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	60da      	str	r2, [r3, #12]
 8006f26:	e001      	b.n	8006f2c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006f38:	7fbb      	ldrb	r3, [r7, #30]
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3720      	adds	r7, #32
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	40007c00 	.word	0x40007c00
 8006f48:	40023800 	.word	0x40023800
 8006f4c:	00f42400 	.word	0x00f42400

08006f50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5c:	f003 0301 	and.w	r3, r3, #1
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00a      	beq.n	8006f7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	430a      	orrs	r2, r1
 8006f78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7e:	f003 0302 	and.w	r3, r3, #2
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d00a      	beq.n	8006f9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	430a      	orrs	r2, r1
 8006f9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa0:	f003 0304 	and.w	r3, r3, #4
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d00a      	beq.n	8006fbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	430a      	orrs	r2, r1
 8006fbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc2:	f003 0308 	and.w	r3, r3, #8
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00a      	beq.n	8006fe0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	430a      	orrs	r2, r1
 8006fde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe4:	f003 0310 	and.w	r3, r3, #16
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d00a      	beq.n	8007002 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	430a      	orrs	r2, r1
 8007000:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007006:	f003 0320 	and.w	r3, r3, #32
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00a      	beq.n	8007024 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	430a      	orrs	r2, r1
 8007022:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800702c:	2b00      	cmp	r3, #0
 800702e:	d01a      	beq.n	8007066 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	430a      	orrs	r2, r1
 8007044:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800704e:	d10a      	bne.n	8007066 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	430a      	orrs	r2, r1
 8007064:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800706e:	2b00      	cmp	r3, #0
 8007070:	d00a      	beq.n	8007088 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	430a      	orrs	r2, r1
 8007086:	605a      	str	r2, [r3, #4]
  }
}
 8007088:	bf00      	nop
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b086      	sub	sp, #24
 8007098:	af02      	add	r7, sp, #8
 800709a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070a4:	f7fb f9a8 	bl	80023f8 <HAL_GetTick>
 80070a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 0308 	and.w	r3, r3, #8
 80070b4:	2b08      	cmp	r3, #8
 80070b6:	d10e      	bne.n	80070d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070bc:	9300      	str	r3, [sp, #0]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 f82d 	bl	8007126 <UART_WaitOnFlagUntilTimeout>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d001      	beq.n	80070d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070d2:	2303      	movs	r3, #3
 80070d4:	e023      	b.n	800711e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 0304 	and.w	r3, r3, #4
 80070e0:	2b04      	cmp	r3, #4
 80070e2:	d10e      	bne.n	8007102 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070e8:	9300      	str	r3, [sp, #0]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 f817 	bl	8007126 <UART_WaitOnFlagUntilTimeout>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d001      	beq.n	8007102 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070fe:	2303      	movs	r3, #3
 8007100:	e00d      	b.n	800711e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2220      	movs	r2, #32
 8007106:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2220      	movs	r2, #32
 800710c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b09c      	sub	sp, #112	; 0x70
 800712a:	af00      	add	r7, sp, #0
 800712c:	60f8      	str	r0, [r7, #12]
 800712e:	60b9      	str	r1, [r7, #8]
 8007130:	603b      	str	r3, [r7, #0]
 8007132:	4613      	mov	r3, r2
 8007134:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007136:	e0a5      	b.n	8007284 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007138:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800713a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800713e:	f000 80a1 	beq.w	8007284 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007142:	f7fb f959 	bl	80023f8 <HAL_GetTick>
 8007146:	4602      	mov	r2, r0
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	1ad3      	subs	r3, r2, r3
 800714c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800714e:	429a      	cmp	r2, r3
 8007150:	d302      	bcc.n	8007158 <UART_WaitOnFlagUntilTimeout+0x32>
 8007152:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007154:	2b00      	cmp	r3, #0
 8007156:	d13e      	bne.n	80071d6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007160:	e853 3f00 	ldrex	r3, [r3]
 8007164:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007168:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800716c:	667b      	str	r3, [r7, #100]	; 0x64
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	461a      	mov	r2, r3
 8007174:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007176:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007178:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800717c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800717e:	e841 2300 	strex	r3, r2, [r1]
 8007182:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007184:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1e6      	bne.n	8007158 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	3308      	adds	r3, #8
 8007190:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007194:	e853 3f00 	ldrex	r3, [r3]
 8007198:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800719a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800719c:	f023 0301 	bic.w	r3, r3, #1
 80071a0:	663b      	str	r3, [r7, #96]	; 0x60
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	3308      	adds	r3, #8
 80071a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80071aa:	64ba      	str	r2, [r7, #72]	; 0x48
 80071ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80071b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071b2:	e841 2300 	strex	r3, r2, [r1]
 80071b6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80071b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d1e5      	bne.n	800718a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2220      	movs	r2, #32
 80071c2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2220      	movs	r2, #32
 80071c8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2200      	movs	r2, #0
 80071ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80071d2:	2303      	movs	r3, #3
 80071d4:	e067      	b.n	80072a6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 0304 	and.w	r3, r3, #4
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d04f      	beq.n	8007284 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	69db      	ldr	r3, [r3, #28]
 80071ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071f2:	d147      	bne.n	8007284 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071fc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007206:	e853 3f00 	ldrex	r3, [r3]
 800720a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800720c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007212:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	461a      	mov	r2, r3
 800721a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800721c:	637b      	str	r3, [r7, #52]	; 0x34
 800721e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007220:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007222:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007224:	e841 2300 	strex	r3, r2, [r1]
 8007228:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800722a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1e6      	bne.n	80071fe <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	3308      	adds	r3, #8
 8007236:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	e853 3f00 	ldrex	r3, [r3]
 800723e:	613b      	str	r3, [r7, #16]
   return(result);
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	f023 0301 	bic.w	r3, r3, #1
 8007246:	66bb      	str	r3, [r7, #104]	; 0x68
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	3308      	adds	r3, #8
 800724e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007250:	623a      	str	r2, [r7, #32]
 8007252:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007254:	69f9      	ldr	r1, [r7, #28]
 8007256:	6a3a      	ldr	r2, [r7, #32]
 8007258:	e841 2300 	strex	r3, r2, [r1]
 800725c:	61bb      	str	r3, [r7, #24]
   return(result);
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d1e5      	bne.n	8007230 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2220      	movs	r2, #32
 8007268:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2220      	movs	r2, #32
 800726e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2220      	movs	r2, #32
 8007274:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2200      	movs	r2, #0
 800727c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007280:	2303      	movs	r3, #3
 8007282:	e010      	b.n	80072a6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	69da      	ldr	r2, [r3, #28]
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	4013      	ands	r3, r2
 800728e:	68ba      	ldr	r2, [r7, #8]
 8007290:	429a      	cmp	r2, r3
 8007292:	bf0c      	ite	eq
 8007294:	2301      	moveq	r3, #1
 8007296:	2300      	movne	r3, #0
 8007298:	b2db      	uxtb	r3, r3
 800729a:	461a      	mov	r2, r3
 800729c:	79fb      	ldrb	r3, [r7, #7]
 800729e:	429a      	cmp	r2, r3
 80072a0:	f43f af4a 	beq.w	8007138 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072a4:	2300      	movs	r3, #0
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3770      	adds	r7, #112	; 0x70
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
	...

080072b0 <__libc_init_array>:
 80072b0:	b570      	push	{r4, r5, r6, lr}
 80072b2:	4d0d      	ldr	r5, [pc, #52]	; (80072e8 <__libc_init_array+0x38>)
 80072b4:	4c0d      	ldr	r4, [pc, #52]	; (80072ec <__libc_init_array+0x3c>)
 80072b6:	1b64      	subs	r4, r4, r5
 80072b8:	10a4      	asrs	r4, r4, #2
 80072ba:	2600      	movs	r6, #0
 80072bc:	42a6      	cmp	r6, r4
 80072be:	d109      	bne.n	80072d4 <__libc_init_array+0x24>
 80072c0:	4d0b      	ldr	r5, [pc, #44]	; (80072f0 <__libc_init_array+0x40>)
 80072c2:	4c0c      	ldr	r4, [pc, #48]	; (80072f4 <__libc_init_array+0x44>)
 80072c4:	f000 f864 	bl	8007390 <_init>
 80072c8:	1b64      	subs	r4, r4, r5
 80072ca:	10a4      	asrs	r4, r4, #2
 80072cc:	2600      	movs	r6, #0
 80072ce:	42a6      	cmp	r6, r4
 80072d0:	d105      	bne.n	80072de <__libc_init_array+0x2e>
 80072d2:	bd70      	pop	{r4, r5, r6, pc}
 80072d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80072d8:	4798      	blx	r3
 80072da:	3601      	adds	r6, #1
 80072dc:	e7ee      	b.n	80072bc <__libc_init_array+0xc>
 80072de:	f855 3b04 	ldr.w	r3, [r5], #4
 80072e2:	4798      	blx	r3
 80072e4:	3601      	adds	r6, #1
 80072e6:	e7f2      	b.n	80072ce <__libc_init_array+0x1e>
 80072e8:	080078a4 	.word	0x080078a4
 80072ec:	080078a4 	.word	0x080078a4
 80072f0:	080078a4 	.word	0x080078a4
 80072f4:	080078a8 	.word	0x080078a8

080072f8 <memset>:
 80072f8:	4402      	add	r2, r0
 80072fa:	4603      	mov	r3, r0
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d100      	bne.n	8007302 <memset+0xa>
 8007300:	4770      	bx	lr
 8007302:	f803 1b01 	strb.w	r1, [r3], #1
 8007306:	e7f9      	b.n	80072fc <memset+0x4>

08007308 <__utoa>:
 8007308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800730a:	4c1f      	ldr	r4, [pc, #124]	; (8007388 <__utoa+0x80>)
 800730c:	b08b      	sub	sp, #44	; 0x2c
 800730e:	4605      	mov	r5, r0
 8007310:	460b      	mov	r3, r1
 8007312:	466e      	mov	r6, sp
 8007314:	f104 0c20 	add.w	ip, r4, #32
 8007318:	6820      	ldr	r0, [r4, #0]
 800731a:	6861      	ldr	r1, [r4, #4]
 800731c:	4637      	mov	r7, r6
 800731e:	c703      	stmia	r7!, {r0, r1}
 8007320:	3408      	adds	r4, #8
 8007322:	4564      	cmp	r4, ip
 8007324:	463e      	mov	r6, r7
 8007326:	d1f7      	bne.n	8007318 <__utoa+0x10>
 8007328:	7921      	ldrb	r1, [r4, #4]
 800732a:	7139      	strb	r1, [r7, #4]
 800732c:	1e91      	subs	r1, r2, #2
 800732e:	6820      	ldr	r0, [r4, #0]
 8007330:	6038      	str	r0, [r7, #0]
 8007332:	2922      	cmp	r1, #34	; 0x22
 8007334:	f04f 0100 	mov.w	r1, #0
 8007338:	d904      	bls.n	8007344 <__utoa+0x3c>
 800733a:	7019      	strb	r1, [r3, #0]
 800733c:	460b      	mov	r3, r1
 800733e:	4618      	mov	r0, r3
 8007340:	b00b      	add	sp, #44	; 0x2c
 8007342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007344:	1e58      	subs	r0, r3, #1
 8007346:	4684      	mov	ip, r0
 8007348:	fbb5 f7f2 	udiv	r7, r5, r2
 800734c:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8007350:	fb02 5617 	mls	r6, r2, r7, r5
 8007354:	4476      	add	r6, lr
 8007356:	460c      	mov	r4, r1
 8007358:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800735c:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8007360:	462e      	mov	r6, r5
 8007362:	42b2      	cmp	r2, r6
 8007364:	f101 0101 	add.w	r1, r1, #1
 8007368:	463d      	mov	r5, r7
 800736a:	d9ed      	bls.n	8007348 <__utoa+0x40>
 800736c:	2200      	movs	r2, #0
 800736e:	545a      	strb	r2, [r3, r1]
 8007370:	1919      	adds	r1, r3, r4
 8007372:	1aa5      	subs	r5, r4, r2
 8007374:	42aa      	cmp	r2, r5
 8007376:	dae2      	bge.n	800733e <__utoa+0x36>
 8007378:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800737c:	780e      	ldrb	r6, [r1, #0]
 800737e:	7006      	strb	r6, [r0, #0]
 8007380:	3201      	adds	r2, #1
 8007382:	f801 5901 	strb.w	r5, [r1], #-1
 8007386:	e7f4      	b.n	8007372 <__utoa+0x6a>
 8007388:	08007874 	.word	0x08007874

0800738c <utoa>:
 800738c:	f7ff bfbc 	b.w	8007308 <__utoa>

08007390 <_init>:
 8007390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007392:	bf00      	nop
 8007394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007396:	bc08      	pop	{r3}
 8007398:	469e      	mov	lr, r3
 800739a:	4770      	bx	lr

0800739c <_fini>:
 800739c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800739e:	bf00      	nop
 80073a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073a2:	bc08      	pop	{r3}
 80073a4:	469e      	mov	lr, r3
 80073a6:	4770      	bx	lr
