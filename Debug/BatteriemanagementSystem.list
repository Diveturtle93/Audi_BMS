
BatteriemanagementSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038b8  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f4  08003ab0  08003ab0  00013ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003da4  08003da4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003da4  08003da4  00013da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003dac  08003dac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dac  08003dac  00013dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003db0  08003db0  00013db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003db4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  2000000c  08003dc0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  08003dc0  000202ac  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b184  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034fe  00000000  00000000  0003b1be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000ed83  00000000  00000000  0003e6bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001160  00000000  00000000  0004d440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001068  00000000  00000000  0004e5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b016  00000000  00000000  0004f608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bc3f  00000000  00000000  0007a61e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010714f  00000000  00000000  0009625d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0019d3ac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002e68  00000000  00000000  0019d400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08003a98 	.word	0x08003a98

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08003a98 	.word	0x08003a98

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b96e 	b.w	800053c <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468c      	mov	ip, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	f040 8083 	bne.w	800038e <__udivmoddi4+0x116>
 8000288:	428a      	cmp	r2, r1
 800028a:	4617      	mov	r7, r2
 800028c:	d947      	bls.n	800031e <__udivmoddi4+0xa6>
 800028e:	fab2 f282 	clz	r2, r2
 8000292:	b142      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000294:	f1c2 0020 	rsb	r0, r2, #32
 8000298:	fa24 f000 	lsr.w	r0, r4, r0
 800029c:	4091      	lsls	r1, r2
 800029e:	4097      	lsls	r7, r2
 80002a0:	ea40 0c01 	orr.w	ip, r0, r1
 80002a4:	4094      	lsls	r4, r2
 80002a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002aa:	0c23      	lsrs	r3, r4, #16
 80002ac:	fbbc f6f8 	udiv	r6, ip, r8
 80002b0:	fa1f fe87 	uxth.w	lr, r7
 80002b4:	fb08 c116 	mls	r1, r8, r6, ip
 80002b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002bc:	fb06 f10e 	mul.w	r1, r6, lr
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x60>
 80002c4:	18fb      	adds	r3, r7, r3
 80002c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ca:	f080 8119 	bcs.w	8000500 <__udivmoddi4+0x288>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 8116 	bls.w	8000500 <__udivmoddi4+0x288>
 80002d4:	3e02      	subs	r6, #2
 80002d6:	443b      	add	r3, r7
 80002d8:	1a5b      	subs	r3, r3, r1
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e0:	fb08 3310 	mls	r3, r8, r0, r3
 80002e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x8c>
 80002f0:	193c      	adds	r4, r7, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f6:	f080 8105 	bcs.w	8000504 <__udivmoddi4+0x28c>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f240 8102 	bls.w	8000504 <__udivmoddi4+0x28c>
 8000300:	3802      	subs	r0, #2
 8000302:	443c      	add	r4, r7
 8000304:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000308:	eba4 040e 	sub.w	r4, r4, lr
 800030c:	2600      	movs	r6, #0
 800030e:	b11d      	cbz	r5, 8000318 <__udivmoddi4+0xa0>
 8000310:	40d4      	lsrs	r4, r2
 8000312:	2300      	movs	r3, #0
 8000314:	e9c5 4300 	strd	r4, r3, [r5]
 8000318:	4631      	mov	r1, r6
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	b902      	cbnz	r2, 8000322 <__udivmoddi4+0xaa>
 8000320:	deff      	udf	#255	; 0xff
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	2a00      	cmp	r2, #0
 8000328:	d150      	bne.n	80003cc <__udivmoddi4+0x154>
 800032a:	1bcb      	subs	r3, r1, r7
 800032c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000330:	fa1f f887 	uxth.w	r8, r7
 8000334:	2601      	movs	r6, #1
 8000336:	fbb3 fcfe 	udiv	ip, r3, lr
 800033a:	0c21      	lsrs	r1, r4, #16
 800033c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000340:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000344:	fb08 f30c 	mul.w	r3, r8, ip
 8000348:	428b      	cmp	r3, r1
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0xe4>
 800034c:	1879      	adds	r1, r7, r1
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0xe2>
 8000354:	428b      	cmp	r3, r1
 8000356:	f200 80e9 	bhi.w	800052c <__udivmoddi4+0x2b4>
 800035a:	4684      	mov	ip, r0
 800035c:	1ac9      	subs	r1, r1, r3
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1110 	mls	r1, lr, r0, r1
 8000368:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x10c>
 8000374:	193c      	adds	r4, r7, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x10a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80d9 	bhi.w	8000534 <__udivmoddi4+0x2bc>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e7bf      	b.n	800030e <__udivmoddi4+0x96>
 800038e:	428b      	cmp	r3, r1
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0x12e>
 8000392:	2d00      	cmp	r5, #0
 8000394:	f000 80b1 	beq.w	80004fa <__udivmoddi4+0x282>
 8000398:	2600      	movs	r6, #0
 800039a:	e9c5 0100 	strd	r0, r1, [r5]
 800039e:	4630      	mov	r0, r6
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	fab3 f683 	clz	r6, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d14a      	bne.n	8000444 <__udivmoddi4+0x1cc>
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0x140>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 80b8 	bhi.w	8000528 <__udivmoddi4+0x2b0>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb61 0103 	sbc.w	r1, r1, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	468c      	mov	ip, r1
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0a8      	beq.n	8000318 <__udivmoddi4+0xa0>
 80003c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ca:	e7a5      	b.n	8000318 <__udivmoddi4+0xa0>
 80003cc:	f1c2 0320 	rsb	r3, r2, #32
 80003d0:	fa20 f603 	lsr.w	r6, r0, r3
 80003d4:	4097      	lsls	r7, r2
 80003d6:	fa01 f002 	lsl.w	r0, r1, r2
 80003da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003de:	40d9      	lsrs	r1, r3
 80003e0:	4330      	orrs	r0, r6
 80003e2:	0c03      	lsrs	r3, r0, #16
 80003e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003e8:	fa1f f887 	uxth.w	r8, r7
 80003ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f108 	mul.w	r1, r6, r8
 80003f8:	4299      	cmp	r1, r3
 80003fa:	fa04 f402 	lsl.w	r4, r4, r2
 80003fe:	d909      	bls.n	8000414 <__udivmoddi4+0x19c>
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	f106 3cff 	add.w	ip, r6, #4294967295
 8000406:	f080 808d 	bcs.w	8000524 <__udivmoddi4+0x2ac>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 808a 	bls.w	8000524 <__udivmoddi4+0x2ac>
 8000410:	3e02      	subs	r6, #2
 8000412:	443b      	add	r3, r7
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b281      	uxth	r1, r0
 8000418:	fbb3 f0fe 	udiv	r0, r3, lr
 800041c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000420:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000424:	fb00 f308 	mul.w	r3, r0, r8
 8000428:	428b      	cmp	r3, r1
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x1c4>
 800042c:	1879      	adds	r1, r7, r1
 800042e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000432:	d273      	bcs.n	800051c <__udivmoddi4+0x2a4>
 8000434:	428b      	cmp	r3, r1
 8000436:	d971      	bls.n	800051c <__udivmoddi4+0x2a4>
 8000438:	3802      	subs	r0, #2
 800043a:	4439      	add	r1, r7
 800043c:	1acb      	subs	r3, r1, r3
 800043e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000442:	e778      	b.n	8000336 <__udivmoddi4+0xbe>
 8000444:	f1c6 0c20 	rsb	ip, r6, #32
 8000448:	fa03 f406 	lsl.w	r4, r3, r6
 800044c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000450:	431c      	orrs	r4, r3
 8000452:	fa20 f70c 	lsr.w	r7, r0, ip
 8000456:	fa01 f306 	lsl.w	r3, r1, r6
 800045a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800045e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000462:	431f      	orrs	r7, r3
 8000464:	0c3b      	lsrs	r3, r7, #16
 8000466:	fbb1 f9fe 	udiv	r9, r1, lr
 800046a:	fa1f f884 	uxth.w	r8, r4
 800046e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000472:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000476:	fb09 fa08 	mul.w	sl, r9, r8
 800047a:	458a      	cmp	sl, r1
 800047c:	fa02 f206 	lsl.w	r2, r2, r6
 8000480:	fa00 f306 	lsl.w	r3, r0, r6
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x220>
 8000486:	1861      	adds	r1, r4, r1
 8000488:	f109 30ff 	add.w	r0, r9, #4294967295
 800048c:	d248      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 800048e:	458a      	cmp	sl, r1
 8000490:	d946      	bls.n	8000520 <__udivmoddi4+0x2a8>
 8000492:	f1a9 0902 	sub.w	r9, r9, #2
 8000496:	4421      	add	r1, r4
 8000498:	eba1 010a 	sub.w	r1, r1, sl
 800049c:	b2bf      	uxth	r7, r7
 800049e:	fbb1 f0fe 	udiv	r0, r1, lr
 80004a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004aa:	fb00 f808 	mul.w	r8, r0, r8
 80004ae:	45b8      	cmp	r8, r7
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x24a>
 80004b2:	19e7      	adds	r7, r4, r7
 80004b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004b8:	d22e      	bcs.n	8000518 <__udivmoddi4+0x2a0>
 80004ba:	45b8      	cmp	r8, r7
 80004bc:	d92c      	bls.n	8000518 <__udivmoddi4+0x2a0>
 80004be:	3802      	subs	r0, #2
 80004c0:	4427      	add	r7, r4
 80004c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c6:	eba7 0708 	sub.w	r7, r7, r8
 80004ca:	fba0 8902 	umull	r8, r9, r0, r2
 80004ce:	454f      	cmp	r7, r9
 80004d0:	46c6      	mov	lr, r8
 80004d2:	4649      	mov	r1, r9
 80004d4:	d31a      	bcc.n	800050c <__udivmoddi4+0x294>
 80004d6:	d017      	beq.n	8000508 <__udivmoddi4+0x290>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x27a>
 80004da:	ebb3 020e 	subs.w	r2, r3, lr
 80004de:	eb67 0701 	sbc.w	r7, r7, r1
 80004e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004e6:	40f2      	lsrs	r2, r6
 80004e8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ec:	40f7      	lsrs	r7, r6
 80004ee:	e9c5 2700 	strd	r2, r7, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e70b      	b.n	8000318 <__udivmoddi4+0xa0>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0x60>
 8000504:	4618      	mov	r0, r3
 8000506:	e6fd      	b.n	8000304 <__udivmoddi4+0x8c>
 8000508:	4543      	cmp	r3, r8
 800050a:	d2e5      	bcs.n	80004d8 <__udivmoddi4+0x260>
 800050c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000510:	eb69 0104 	sbc.w	r1, r9, r4
 8000514:	3801      	subs	r0, #1
 8000516:	e7df      	b.n	80004d8 <__udivmoddi4+0x260>
 8000518:	4608      	mov	r0, r1
 800051a:	e7d2      	b.n	80004c2 <__udivmoddi4+0x24a>
 800051c:	4660      	mov	r0, ip
 800051e:	e78d      	b.n	800043c <__udivmoddi4+0x1c4>
 8000520:	4681      	mov	r9, r0
 8000522:	e7b9      	b.n	8000498 <__udivmoddi4+0x220>
 8000524:	4666      	mov	r6, ip
 8000526:	e775      	b.n	8000414 <__udivmoddi4+0x19c>
 8000528:	4630      	mov	r0, r6
 800052a:	e74a      	b.n	80003c2 <__udivmoddi4+0x14a>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	4439      	add	r1, r7
 8000532:	e713      	b.n	800035c <__udivmoddi4+0xe4>
 8000534:	3802      	subs	r0, #2
 8000536:	443c      	add	r4, r7
 8000538:	e724      	b.n	8000384 <__udivmoddi4+0x10c>
 800053a:	bf00      	nop

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 8000540:	b508      	push	{r3, lr}
	HAL_UART_Transmit(&huart2, (uint8_t *)str, size, 1000);
 8000542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000546:	b28a      	uxth	r2, r1
 8000548:	4601      	mov	r1, r0
 800054a:	4802      	ldr	r0, [pc, #8]	; (8000554 <uartTransmit+0x14>)
 800054c:	f003 f95a 	bl	8003804 <HAL_UART_Transmit>
}
 8000550:	bd08      	pop	{r3, pc}
 8000552:	bf00      	nop
 8000554:	20000224 	.word	0x20000224

08000558 <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 8000558:	b500      	push	{lr}
 800055a:	b085      	sub	sp, #20
 800055c:	460a      	mov	r2, r1
	char str[11];

	utoa(number, str, base);
 800055e:	a901      	add	r1, sp, #4
 8000560:	f003 fa98 	bl	8003a94 <utoa>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8000564:	a801      	add	r0, sp, #4
 8000566:	f7ff fe67 	bl	8000238 <strlen>
 800056a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056e:	b282      	uxth	r2, r0
 8000570:	a901      	add	r1, sp, #4
 8000572:	4803      	ldr	r0, [pc, #12]	; (8000580 <uartTransmitNumber+0x28>)
 8000574:	f003 f946 	bl	8003804 <HAL_UART_Transmit>
}
 8000578:	b005      	add	sp, #20
 800057a:	f85d fb04 	ldr.w	pc, [sp], #4
 800057e:	bf00      	nop
 8000580:	20000224 	.word	0x20000224

08000584 <collectMiddlewareInfo>:


// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 8000584:	b510      	push	{r4, lr}
	#define STRING_CMSIS_VERSION		"\nCMSIS Version:\t\t"
	#define STRING_HAL_VERSION			"\nHAL Version:\t\t"
	#define STRING_RTOS_CMSIS_VERSION	"\nRTOS CMSIS Version:\t"
	#define STRING_RTOS_VERSION			"\nRTOS Version:\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 8000586:	2112      	movs	r1, #18
 8000588:	481d      	ldr	r0, [pc, #116]	; (8000600 <collectMiddlewareInfo+0x7c>)
 800058a:	f7ff ffd9 	bl	8000540 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);						// CMSIS Version anzeigen
 800058e:	210a      	movs	r1, #10
 8000590:	2005      	movs	r0, #5
 8000592:	f7ff ffe1 	bl	8000558 <uartTransmitNumber>
	uartTransmit(".", 1);
 8000596:	4c1b      	ldr	r4, [pc, #108]	; (8000604 <collectMiddlewareInfo+0x80>)
 8000598:	2101      	movs	r1, #1
 800059a:	4620      	mov	r0, r4
 800059c:	f7ff ffd0 	bl	8000540 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);						// CMSIS Version anzeigen
 80005a0:	210a      	movs	r1, #10
 80005a2:	2001      	movs	r0, #1
 80005a4:	f7ff ffd8 	bl	8000558 <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));			// Hal Version anzeigen
 80005a8:	2110      	movs	r1, #16
 80005aa:	4817      	ldr	r0, [pc, #92]	; (8000608 <collectMiddlewareInfo+0x84>)
 80005ac:	f7ff ffc8 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 80005b0:	f000 ffba 	bl	8001528 <HAL_GetHalVersion>
 80005b4:	210a      	movs	r1, #10
 80005b6:	0e00      	lsrs	r0, r0, #24
 80005b8:	f7ff ffce 	bl	8000558 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 80005bc:	2101      	movs	r1, #1
 80005be:	4620      	mov	r0, r4
 80005c0:	f7ff ffbe 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 80005c4:	f000 ffb0 	bl	8001528 <HAL_GetHalVersion>
 80005c8:	210a      	movs	r1, #10
 80005ca:	f3c0 4007 	ubfx	r0, r0, #16, #8
 80005ce:	f7ff ffc3 	bl	8000558 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 80005d2:	2101      	movs	r1, #1
 80005d4:	4620      	mov	r0, r4
 80005d6:	f7ff ffb3 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 80005da:	f000 ffa5 	bl	8001528 <HAL_GetHalVersion>
 80005de:	210a      	movs	r1, #10
 80005e0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80005e4:	f7ff ffb8 	bl	8000558 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 80005e8:	2101      	movs	r1, #1
 80005ea:	4620      	mov	r0, r4
 80005ec:	f7ff ffa8 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 80005f0:	f000 ff9a 	bl	8001528 <HAL_GetHalVersion>
 80005f4:	210a      	movs	r1, #10
 80005f6:	b2c0      	uxtb	r0, r0
 80005f8:	f7ff ffae 	bl	8000558 <uartTransmitNumber>

	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);						// FreeRTOS Kernel Version anzeigen

	uartTransmit("\n", 1);*/
}
 80005fc:	bd10      	pop	{r4, pc}
 80005fe:	bf00      	nop
 8000600:	08003ab0 	.word	0x08003ab0
 8000604:	08003ac4 	.word	0x08003ac4
 8000608:	08003ac8 	.word	0x08003ac8

0800060c <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 800060c:	b508      	push	{r3, lr}
	#define STRING_GIT_BRANCH			"\nGit Branch:\t\t"
	#define STRING_GIT_HASH				"\nGit Hash:\t\t"
	#define STRING_BUILD_DATE			"\nBuild Date:\t\t"
	#define STRING_BUILD_TIME			"\nBuild Time:\t\t"

	uartTransmit(STRING_GIT_VERSION, sizeof(STRING_GIT_VERSION));
 800060e:	2110      	movs	r1, #16
 8000610:	4815      	ldr	r0, [pc, #84]	; (8000668 <collectSoftwareInfo+0x5c>)
 8000612:	f7ff ff95 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));							// Git Commit anzeigen
 8000616:	2108      	movs	r1, #8
 8000618:	4814      	ldr	r0, [pc, #80]	; (800066c <collectSoftwareInfo+0x60>)
 800061a:	f7ff ff91 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 800061e:	210f      	movs	r1, #15
 8000620:	4813      	ldr	r0, [pc, #76]	; (8000670 <collectSoftwareInfo+0x64>)
 8000622:	f7ff ff8d 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));							// Git Branch anzeigen
 8000626:	210c      	movs	r1, #12
 8000628:	4812      	ldr	r0, [pc, #72]	; (8000674 <collectSoftwareInfo+0x68>)
 800062a:	f7ff ff89 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 800062e:	210d      	movs	r1, #13
 8000630:	4811      	ldr	r0, [pc, #68]	; (8000678 <collectSoftwareInfo+0x6c>)
 8000632:	f7ff ff85 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));								// Git Hash anzeigen
 8000636:	2129      	movs	r1, #41	; 0x29
 8000638:	4810      	ldr	r0, [pc, #64]	; (800067c <collectSoftwareInfo+0x70>)
 800063a:	f7ff ff81 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 800063e:	210f      	movs	r1, #15
 8000640:	480f      	ldr	r0, [pc, #60]	; (8000680 <collectSoftwareInfo+0x74>)
 8000642:	f7ff ff7d 	bl	8000540 <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));							// Kompilierdatum anzeigen
 8000646:	210c      	movs	r1, #12
 8000648:	480e      	ldr	r0, [pc, #56]	; (8000684 <collectSoftwareInfo+0x78>)
 800064a:	f7ff ff79 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 800064e:	210f      	movs	r1, #15
 8000650:	480d      	ldr	r0, [pc, #52]	; (8000688 <collectSoftwareInfo+0x7c>)
 8000652:	f7ff ff75 	bl	8000540 <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));							// Kompilierzeit anzeigen
 8000656:	2109      	movs	r1, #9
 8000658:	480c      	ldr	r0, [pc, #48]	; (800068c <collectSoftwareInfo+0x80>)
 800065a:	f7ff ff71 	bl	8000540 <uartTransmit>

	uartTransmit("\n", 1);
 800065e:	2101      	movs	r1, #1
 8000660:	480b      	ldr	r0, [pc, #44]	; (8000690 <collectSoftwareInfo+0x84>)
 8000662:	f7ff ff6d 	bl	8000540 <uartTransmit>
}
 8000666:	bd08      	pop	{r3, pc}
 8000668:	08003ad8 	.word	0x08003ad8
 800066c:	08003ae8 	.word	0x08003ae8
 8000670:	08003af0 	.word	0x08003af0
 8000674:	08003b00 	.word	0x08003b00
 8000678:	08003b0c 	.word	0x08003b0c
 800067c:	08003b1c 	.word	0x08003b1c
 8000680:	08003b48 	.word	0x08003b48
 8000684:	08003b58 	.word	0x08003b58
 8000688:	08003b64 	.word	0x08003b64
 800068c:	08003b74 	.word	0x08003b74
 8000690:	08003d00 	.word	0x08003d00

08000694 <collectHardwareInfo>:
//----------------------------------------------------------------------

// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 8000694:	b510      	push	{r4, lr}
	#define STRING_STM_DEVICE_ID		"\nSTM32 Device ID:\t"
	#define STRING_STM_REVISION			"\nSTM32 Revision ID:\t"
	#define STRING_STM_FREQ				"\nSTM32 CPU-Freq:\t\t"
	#define STRING_STM_UUID				"\nSTM32 UUID:\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 8000696:	2113      	movs	r1, #19
 8000698:	482f      	ldr	r0, [pc, #188]	; (8000758 <collectHardwareInfo+0xc4>)
 800069a:	f7ff ff51 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);									// Mikrocontroller Typ
 800069e:	f000 ff4d 	bl	800153c <HAL_GetDEVID>
 80006a2:	210a      	movs	r1, #10
 80006a4:	f7ff ff58 	bl	8000558 <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 80006a8:	2115      	movs	r1, #21
 80006aa:	482c      	ldr	r0, [pc, #176]	; (800075c <collectHardwareInfo+0xc8>)
 80006ac:	f7ff ff48 	bl	8000540 <uartTransmit>
	
	switch(HAL_GetREVID())													// Mikrocontroller Revision
 80006b0:	f000 ff3e 	bl	8001530 <HAL_GetREVID>
 80006b4:	f241 0303 	movw	r3, #4099	; 0x1003
 80006b8:	4298      	cmp	r0, r3
 80006ba:	d043      	beq.n	8000744 <collectHardwareInfo+0xb0>
 80006bc:	f242 0301 	movw	r3, #8193	; 0x2001
 80006c0:	4298      	cmp	r0, r3
 80006c2:	d044      	beq.n	800074e <collectHardwareInfo+0xba>
 80006c4:	f241 0301 	movw	r3, #4097	; 0x1001
 80006c8:	4298      	cmp	r0, r3
 80006ca:	d005      	beq.n	80006d8 <collectHardwareInfo+0x44>
			break;
		case 0x2001:
			uartTransmit("X", 1);
			break;
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 80006cc:	f000 ff30 	bl	8001530 <HAL_GetREVID>
 80006d0:	210a      	movs	r1, #10
 80006d2:	f7ff ff41 	bl	8000558 <uartTransmitNumber>
			break;
 80006d6:	e003      	b.n	80006e0 <collectHardwareInfo+0x4c>
			uartTransmit("Z", 1);
 80006d8:	2101      	movs	r1, #1
 80006da:	4821      	ldr	r0, [pc, #132]	; (8000760 <collectHardwareInfo+0xcc>)
 80006dc:	f7ff ff30 	bl	8000540 <uartTransmit>
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 80006e0:	2113      	movs	r1, #19
 80006e2:	4820      	ldr	r0, [pc, #128]	; (8000764 <collectHardwareInfo+0xd0>)
 80006e4:	f7ff ff2c 	bl	8000540 <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();						// Systemfrequenz ausgeben
 80006e8:	f001 fd34 	bl	8002154 <HAL_RCC_GetSysClockFreq>
		frequency = frequency/1000000;
 80006ec:	4b1e      	ldr	r3, [pc, #120]	; (8000768 <collectHardwareInfo+0xd4>)
 80006ee:	fba3 3000 	umull	r3, r0, r3, r0

		uartTransmitNumber(frequency, 10);
 80006f2:	210a      	movs	r1, #10
 80006f4:	0c80      	lsrs	r0, r0, #18
 80006f6:	f7ff ff2f 	bl	8000558 <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 80006fa:	2104      	movs	r1, #4
 80006fc:	481b      	ldr	r0, [pc, #108]	; (800076c <collectHardwareInfo+0xd8>)
 80006fe:	f7ff ff1f 	bl	8000540 <uartTransmit>


	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 8000702:	210f      	movs	r1, #15
 8000704:	481a      	ldr	r0, [pc, #104]	; (8000770 <collectHardwareInfo+0xdc>)
 8000706:	f7ff ff1b 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);									// UID0 ausgeben
 800070a:	f000 ff1f 	bl	800154c <HAL_GetUIDw0>
 800070e:	2110      	movs	r1, #16
 8000710:	f7ff ff22 	bl	8000558 <uartTransmitNumber>

	uartTransmit(" ", 1);
 8000714:	4c17      	ldr	r4, [pc, #92]	; (8000774 <collectHardwareInfo+0xe0>)
 8000716:	2101      	movs	r1, #1
 8000718:	4620      	mov	r0, r4
 800071a:	f7ff ff11 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);									// UID1 ausgeben
 800071e:	f000 ff1b 	bl	8001558 <HAL_GetUIDw1>
 8000722:	2110      	movs	r1, #16
 8000724:	f7ff ff18 	bl	8000558 <uartTransmitNumber>

	uartTransmit(" ", 1);
 8000728:	2101      	movs	r1, #1
 800072a:	4620      	mov	r0, r4
 800072c:	f7ff ff08 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);									// UID2 ausgeben
 8000730:	f000 ff18 	bl	8001564 <HAL_GetUIDw2>
 8000734:	2110      	movs	r1, #16
 8000736:	f7ff ff0f 	bl	8000558 <uartTransmitNumber>

	uartTransmit("\n", 1);
 800073a:	2101      	movs	r1, #1
 800073c:	480e      	ldr	r0, [pc, #56]	; (8000778 <collectHardwareInfo+0xe4>)
 800073e:	f7ff feff 	bl	8000540 <uartTransmit>
}
 8000742:	bd10      	pop	{r4, pc}
			uartTransmit("Y", 1);
 8000744:	2101      	movs	r1, #1
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <collectHardwareInfo+0xe8>)
 8000748:	f7ff fefa 	bl	8000540 <uartTransmit>
			break;
 800074c:	e7c8      	b.n	80006e0 <collectHardwareInfo+0x4c>
			uartTransmit("X", 1);
 800074e:	2101      	movs	r1, #1
 8000750:	480b      	ldr	r0, [pc, #44]	; (8000780 <collectHardwareInfo+0xec>)
 8000752:	f7ff fef5 	bl	8000540 <uartTransmit>
			break;
 8000756:	e7c3      	b.n	80006e0 <collectHardwareInfo+0x4c>
 8000758:	08003b80 	.word	0x08003b80
 800075c:	08003b94 	.word	0x08003b94
 8000760:	08003bac 	.word	0x08003bac
 8000764:	08003bb8 	.word	0x08003bb8
 8000768:	431bde83 	.word	0x431bde83
 800076c:	08003bcc 	.word	0x08003bcc
 8000770:	08003bd4 	.word	0x08003bd4
 8000774:	08003be4 	.word	0x08003be4
 8000778:	08003d00 	.word	0x08003d00
 800077c:	08003bb0 	.word	0x08003bb0
 8000780:	08003bb4 	.word	0x08003bb4

08000784 <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 8000784:	b508      	push	{r3, lr}
	#define STRING_HARDWARE_TITEL "\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL "\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL "\n\t --Software--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 8000786:	2111      	movs	r1, #17
 8000788:	480a      	ldr	r0, [pc, #40]	; (80007b4 <collectSystemInfo+0x30>)
 800078a:	f7ff fed9 	bl	8000540 <uartTransmit>
	collectHardwareInfo();													// Sammelt Hardware Informationen und gibt diese ueber Uart aus
 800078e:	f7ff ff81 	bl	8000694 <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 8000792:	2111      	movs	r1, #17
 8000794:	4808      	ldr	r0, [pc, #32]	; (80007b8 <collectSystemInfo+0x34>)
 8000796:	f7ff fed3 	bl	8000540 <uartTransmit>
	collectSoftwareInfo();													// Sammelt Software Informationen und gibt diese ueber Uart aus
 800079a:	f7ff ff37 	bl	800060c <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 800079e:	2113      	movs	r1, #19
 80007a0:	4806      	ldr	r0, [pc, #24]	; (80007bc <collectSystemInfo+0x38>)
 80007a2:	f7ff fecd 	bl	8000540 <uartTransmit>
	collectMiddlewareInfo();												// Sammelt Middleware Informationen und gibt diese ueber Uart aus
 80007a6:	f7ff feed 	bl	8000584 <collectMiddlewareInfo>

	uartTransmit("\n\n\n", 3);
 80007aa:	2103      	movs	r1, #3
 80007ac:	4804      	ldr	r0, [pc, #16]	; (80007c0 <collectSystemInfo+0x3c>)
 80007ae:	f7ff fec7 	bl	8000540 <uartTransmit>
}
 80007b2:	bd08      	pop	{r3, pc}
 80007b4:	08003be8 	.word	0x08003be8
 80007b8:	08003bfc 	.word	0x08003bfc
 80007bc:	08003c10 	.word	0x08003c10
 80007c0:	08003c24 	.word	0x08003c24

080007c4 <readResetSource>:
reset_reason readResetSource(void)
{
	reset_reason reset_flags = STARTUP;

	// Pruefe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 80007c4:	4b18      	ldr	r3, [pc, #96]	; (8000828 <readResetSource+0x64>)
 80007c6:	6f58      	ldr	r0, [r3, #116]	; 0x74
	reset_reason reset_flags = STARTUP;
 80007c8:	f3c0 7040 	ubfx	r0, r0, #29, #1
	{
		reset_flags += IWDG1;
	}

	// Pruefe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 80007cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80007ce:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
	{
		reset_flags += WWDG1;
 80007d2:	bf18      	it	ne
 80007d4:	3002      	addne	r0, #2
	}

	// Pruefe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 80007d6:	4b14      	ldr	r3, [pc, #80]	; (8000828 <readResetSource+0x64>)
 80007d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80007da:	2b00      	cmp	r3, #0
 80007dc:	db21      	blt.n	8000822 <readResetSource+0x5e>
	{
		reset_flags += CPURST1;
	}

	// Pruefe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 80007de:	4b12      	ldr	r3, [pc, #72]	; (8000828 <readResetSource+0x64>)
 80007e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80007e2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80007e6:	d001      	beq.n	80007ec <readResetSource+0x28>
	{
		reset_flags += BORST1;
 80007e8:	3008      	adds	r0, #8
 80007ea:	b2c0      	uxtb	r0, r0
	}

	// Pruefe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 80007ec:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <readResetSource+0x64>)
 80007ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80007f0:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80007f4:	d001      	beq.n	80007fa <readResetSource+0x36>
	{
		reset_flags += PORST1;
 80007f6:	3010      	adds	r0, #16
 80007f8:	b2c0      	uxtb	r0, r0
	}

	// Pruefe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <readResetSource+0x64>)
 80007fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80007fe:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000802:	d001      	beq.n	8000808 <readResetSource+0x44>
	{
		reset_flags += SFTRST1;
 8000804:	3020      	adds	r0, #32
 8000806:	b2c0      	uxtb	r0, r0
	}

	// Pruefe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 8000808:	4b07      	ldr	r3, [pc, #28]	; (8000828 <readResetSource+0x64>)
 800080a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800080c:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8000810:	d001      	beq.n	8000816 <readResetSource+0x52>
	{
		reset_flags += PINRST1;
 8000812:	3040      	adds	r0, #64	; 0x40
 8000814:	b2c0      	uxtb	r0, r0
	}

	// Loesche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 8000816:	4a04      	ldr	r2, [pc, #16]	; (8000828 <readResetSource+0x64>)
 8000818:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800081a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800081e:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
}
 8000820:	4770      	bx	lr
		reset_flags += CPURST1;
 8000822:	3004      	adds	r0, #4
 8000824:	b2c0      	uxtb	r0, r0
 8000826:	e7da      	b.n	80007de <readResetSource+0x1a>
 8000828:	40023800 	.word	0x40023800

0800082c <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 800082c:	b510      	push	{r4, lr}
 800082e:	4604      	mov	r4, r0
	// Returns für Absatz nach Neustart.
	uartTransmit("\r\r\r\r\r\r", 6);
 8000830:	2106      	movs	r1, #6
 8000832:	4825      	ldr	r0, [pc, #148]	; (80008c8 <printResetSource+0x9c>)
 8000834:	f7ff fe84 	bl	8000540 <uartTransmit>


	if (reset_flags == STARTUP)											// Regulärer Start
 8000838:	b1c4      	cbz	r4, 800086c <printResetSource+0x40>
	{
		uartTransmit("Regular Start\r\n", 15);
	}
	else
	{
		if (reset_flags & IWDG1)											// Interner watchdog Reset
 800083a:	f014 0f01 	tst.w	r4, #1
 800083e:	d11a      	bne.n	8000876 <printResetSource+0x4a>
		{
			uartTransmit("Interner Watchdog Reset\n", 24);
		}

		if (reset_flags & WWDG1)											// Window watchdog Reset
 8000840:	f014 0f02 	tst.w	r4, #2
 8000844:	d11c      	bne.n	8000880 <printResetSource+0x54>
		{
			uartTransmit("Window Watchdog Reset\n", 22);
		}

		if (reset_flags & CPURST1)											// CPU Reset
 8000846:	f014 0f04 	tst.w	r4, #4
 800084a:	d11e      	bne.n	800088a <printResetSource+0x5e>
		{
			uartTransmit("CPU Reset\n", 10);
		}
		if (reset_flags & BORST1)											// Brown out Reset
 800084c:	f014 0f08 	tst.w	r4, #8
 8000850:	d120      	bne.n	8000894 <printResetSource+0x68>
		{
			uartTransmit("Brown Out Reset\n", 16);
		}

		if (reset_flags & PORST1)											//Power on Reset / Power down Reser
 8000852:	f014 0f10 	tst.w	r4, #16
 8000856:	d122      	bne.n	800089e <printResetSource+0x72>
		{
			uartTransmit("Power On Reset\n", 15);
		}

		if (reset_flags & SFTRST1)											// Software Reset
 8000858:	f014 0f20 	tst.w	r4, #32
 800085c:	d124      	bne.n	80008a8 <printResetSource+0x7c>
		{
			uartTransmit("Software Reset\n", 15);
		}

		if (reset_flags & PINRST1)											//NRST pin
 800085e:	f014 0f40 	tst.w	r4, #64	; 0x40
 8000862:	d126      	bne.n	80008b2 <printResetSource+0x86>
		{
			uartTransmit("PIN Reset\n", 10);
		}

		if (reset_flags & RMVF1)											//NRST pin
 8000864:	f014 0f80 	tst.w	r4, #128	; 0x80
 8000868:	d128      	bne.n	80008bc <printResetSource+0x90>
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 800086a:	bd10      	pop	{r4, pc}
		uartTransmit("Regular Start\r\n", 15);
 800086c:	210f      	movs	r1, #15
 800086e:	4817      	ldr	r0, [pc, #92]	; (80008cc <printResetSource+0xa0>)
 8000870:	f7ff fe66 	bl	8000540 <uartTransmit>
 8000874:	e7f9      	b.n	800086a <printResetSource+0x3e>
			uartTransmit("Interner Watchdog Reset\n", 24);
 8000876:	2118      	movs	r1, #24
 8000878:	4815      	ldr	r0, [pc, #84]	; (80008d0 <printResetSource+0xa4>)
 800087a:	f7ff fe61 	bl	8000540 <uartTransmit>
 800087e:	e7df      	b.n	8000840 <printResetSource+0x14>
			uartTransmit("Window Watchdog Reset\n", 22);
 8000880:	2116      	movs	r1, #22
 8000882:	4814      	ldr	r0, [pc, #80]	; (80008d4 <printResetSource+0xa8>)
 8000884:	f7ff fe5c 	bl	8000540 <uartTransmit>
 8000888:	e7dd      	b.n	8000846 <printResetSource+0x1a>
			uartTransmit("CPU Reset\n", 10);
 800088a:	210a      	movs	r1, #10
 800088c:	4812      	ldr	r0, [pc, #72]	; (80008d8 <printResetSource+0xac>)
 800088e:	f7ff fe57 	bl	8000540 <uartTransmit>
 8000892:	e7db      	b.n	800084c <printResetSource+0x20>
			uartTransmit("Brown Out Reset\n", 16);
 8000894:	2110      	movs	r1, #16
 8000896:	4811      	ldr	r0, [pc, #68]	; (80008dc <printResetSource+0xb0>)
 8000898:	f7ff fe52 	bl	8000540 <uartTransmit>
 800089c:	e7d9      	b.n	8000852 <printResetSource+0x26>
			uartTransmit("Power On Reset\n", 15);
 800089e:	210f      	movs	r1, #15
 80008a0:	480f      	ldr	r0, [pc, #60]	; (80008e0 <printResetSource+0xb4>)
 80008a2:	f7ff fe4d 	bl	8000540 <uartTransmit>
 80008a6:	e7d7      	b.n	8000858 <printResetSource+0x2c>
			uartTransmit("Software Reset\n", 15);
 80008a8:	210f      	movs	r1, #15
 80008aa:	480e      	ldr	r0, [pc, #56]	; (80008e4 <printResetSource+0xb8>)
 80008ac:	f7ff fe48 	bl	8000540 <uartTransmit>
 80008b0:	e7d5      	b.n	800085e <printResetSource+0x32>
			uartTransmit("PIN Reset\n", 10);
 80008b2:	210a      	movs	r1, #10
 80008b4:	480c      	ldr	r0, [pc, #48]	; (80008e8 <printResetSource+0xbc>)
 80008b6:	f7ff fe43 	bl	8000540 <uartTransmit>
 80008ba:	e7d3      	b.n	8000864 <printResetSource+0x38>
			uartTransmit("RMVF\n", 5);
 80008bc:	2105      	movs	r1, #5
 80008be:	480b      	ldr	r0, [pc, #44]	; (80008ec <printResetSource+0xc0>)
 80008c0:	f7ff fe3e 	bl	8000540 <uartTransmit>
}
 80008c4:	e7d1      	b.n	800086a <printResetSource+0x3e>
 80008c6:	bf00      	nop
 80008c8:	08003c28 	.word	0x08003c28
 80008cc:	08003c30 	.word	0x08003c30
 80008d0:	08003c40 	.word	0x08003c40
 80008d4:	08003c5c 	.word	0x08003c5c
 80008d8:	08003c74 	.word	0x08003c74
 80008dc:	08003c80 	.word	0x08003c80
 80008e0:	08003c94 	.word	0x08003c94
 80008e4:	08003ca4 	.word	0x08003ca4
 80008e8:	08003cb4 	.word	0x08003cb4
 80008ec:	08003cc0 	.word	0x08003cc0

080008f0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80008f0:	b500      	push	{lr}
 80008f2:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008f4:	2300      	movs	r3, #0
 80008f6:	9300      	str	r3, [sp, #0]
 80008f8:	9301      	str	r3, [sp, #4]
 80008fa:	9302      	str	r3, [sp, #8]
 80008fc:	9303      	str	r3, [sp, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008fe:	4815      	ldr	r0, [pc, #84]	; (8000954 <MX_ADC1_Init+0x64>)
 8000900:	4a15      	ldr	r2, [pc, #84]	; (8000958 <MX_ADC1_Init+0x68>)
 8000902:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000904:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000908:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800090a:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800090c:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800090e:	6183      	str	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000910:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000914:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000916:	4a11      	ldr	r2, [pc, #68]	; (800095c <MX_ADC1_Init+0x6c>)
 8000918:	6282      	str	r2, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800091a:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 800091c:	2201      	movs	r2, #1
 800091e:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000920:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000924:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000926:	f000 fe23 	bl	8001570 <HAL_ADC_Init>
 800092a:	b968      	cbnz	r0, 8000948 <MX_ADC1_Init+0x58>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800092c:	2304      	movs	r3, #4
 800092e:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000930:	2301      	movs	r3, #1
 8000932:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000934:	2300      	movs	r3, #0
 8000936:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000938:	4669      	mov	r1, sp
 800093a:	4806      	ldr	r0, [pc, #24]	; (8000954 <MX_ADC1_Init+0x64>)
 800093c:	f000 feda 	bl	80016f4 <HAL_ADC_ConfigChannel>
 8000940:	b928      	cbnz	r0, 800094e <MX_ADC1_Init+0x5e>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000942:	b005      	add	sp, #20
 8000944:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000948:	f000 faf4 	bl	8000f34 <Error_Handler>
 800094c:	e7ee      	b.n	800092c <MX_ADC1_Init+0x3c>
    Error_Handler();
 800094e:	f000 faf1 	bl	8000f34 <Error_Handler>
}
 8000952:	e7f6      	b.n	8000942 <MX_ADC1_Init+0x52>
 8000954:	2000002c 	.word	0x2000002c
 8000958:	40012000 	.word	0x40012000
 800095c:	0f000001 	.word	0x0f000001

08000960 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000960:	b500      	push	{lr}
 8000962:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000964:	2300      	movs	r3, #0
 8000966:	9303      	str	r3, [sp, #12]
 8000968:	9304      	str	r3, [sp, #16]
 800096a:	9305      	str	r3, [sp, #20]
 800096c:	9306      	str	r3, [sp, #24]
 800096e:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 8000970:	6802      	ldr	r2, [r0, #0]
 8000972:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000976:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 800097a:	429a      	cmp	r2, r3
 800097c:	d002      	beq.n	8000984 <HAL_ADC_MspInit+0x24>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800097e:	b009      	add	sp, #36	; 0x24
 8000980:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000984:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8000988:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800098a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800098e:	645a      	str	r2, [r3, #68]	; 0x44
 8000990:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000992:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000996:	9201      	str	r2, [sp, #4]
 8000998:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800099c:	f042 0201 	orr.w	r2, r2, #1
 80009a0:	631a      	str	r2, [r3, #48]	; 0x30
 80009a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a4:	f003 0301 	and.w	r3, r3, #1
 80009a8:	9302      	str	r3, [sp, #8]
 80009aa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SENSE_TEMP1_Pin|SENSE_TEMP2_Pin|SENSE_TEMP3_Pin|SENSE_TEMP4_Pin
 80009ac:	23f8      	movs	r3, #248	; 0xf8
 80009ae:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009b0:	2303      	movs	r3, #3
 80009b2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b8:	a903      	add	r1, sp, #12
 80009ba:	4802      	ldr	r0, [pc, #8]	; (80009c4 <HAL_ADC_MspInit+0x64>)
 80009bc:	f001 f86a 	bl	8001a94 <HAL_GPIO_Init>
}
 80009c0:	e7dd      	b.n	800097e <HAL_ADC_MspInit+0x1e>
 80009c2:	bf00      	nop
 80009c4:	40020000 	.word	0x40020000

080009c8 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan3;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80009c8:	b508      	push	{r3, lr}
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80009ca:	480c      	ldr	r0, [pc, #48]	; (80009fc <MX_CAN1_Init+0x34>)
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <MX_CAN1_Init+0x38>)
 80009ce:	6003      	str	r3, [r0, #0]
  hcan1.Init.Prescaler = 16;
 80009d0:	2310      	movs	r3, #16
 80009d2:	6043      	str	r3, [r0, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	6083      	str	r3, [r0, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009d8:	60c3      	str	r3, [r0, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80009da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009de:	6102      	str	r2, [r0, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80009e0:	6143      	str	r3, [r0, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80009e2:	7603      	strb	r3, [r0, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80009e4:	7643      	strb	r3, [r0, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80009e6:	7683      	strb	r3, [r0, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80009e8:	76c3      	strb	r3, [r0, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80009ea:	7703      	strb	r3, [r0, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80009ec:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80009ee:	f000 ff69 	bl	80018c4 <HAL_CAN_Init>
 80009f2:	b900      	cbnz	r0, 80009f6 <MX_CAN1_Init+0x2e>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80009f4:	bd08      	pop	{r3, pc}
    Error_Handler();
 80009f6:	f000 fa9d 	bl	8000f34 <Error_Handler>
}
 80009fa:	e7fb      	b.n	80009f4 <MX_CAN1_Init+0x2c>
 80009fc:	2000009c 	.word	0x2000009c
 8000a00:	40006400 	.word	0x40006400

08000a04 <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8000a04:	b508      	push	{r3, lr}
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8000a06:	480d      	ldr	r0, [pc, #52]	; (8000a3c <MX_CAN3_Init+0x38>)
 8000a08:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <MX_CAN3_Init+0x3c>)
 8000a0a:	6003      	str	r3, [r0, #0]
  hcan3.Init.Prescaler = 6;
 8000a0c:	2306      	movs	r3, #6
 8000a0e:	6043      	str	r3, [r0, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	6083      	str	r3, [r0, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a14:	60c3      	str	r3, [r0, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000a16:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000a1a:	6102      	str	r2, [r0, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000a1c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000a20:	6142      	str	r2, [r0, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8000a22:	7603      	strb	r3, [r0, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 8000a24:	7643      	strb	r3, [r0, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8000a26:	7683      	strb	r3, [r0, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8000a28:	76c3      	strb	r3, [r0, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8000a2a:	7703      	strb	r3, [r0, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8000a2c:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8000a2e:	f000 ff49 	bl	80018c4 <HAL_CAN_Init>
 8000a32:	b900      	cbnz	r0, 8000a36 <MX_CAN3_Init+0x32>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 8000a34:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000a36:	f000 fa7d 	bl	8000f34 <Error_Handler>
}
 8000a3a:	e7fb      	b.n	8000a34 <MX_CAN3_Init+0x30>
 8000a3c:	20000074 	.word	0x20000074
 8000a40:	40003400 	.word	0x40003400

08000a44 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000a44:	b500      	push	{lr}
 8000a46:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	2300      	movs	r3, #0
 8000a4a:	9307      	str	r3, [sp, #28]
 8000a4c:	9308      	str	r3, [sp, #32]
 8000a4e:	9309      	str	r3, [sp, #36]	; 0x24
 8000a50:	930a      	str	r3, [sp, #40]	; 0x28
 8000a52:	930b      	str	r3, [sp, #44]	; 0x2c
  if(canHandle->Instance==CAN1)
 8000a54:	6803      	ldr	r3, [r0, #0]
 8000a56:	4a38      	ldr	r2, [pc, #224]	; (8000b38 <HAL_CAN_MspInit+0xf4>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d005      	beq.n	8000a68 <HAL_CAN_MspInit+0x24>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
  else if(canHandle->Instance==CAN3)
 8000a5c:	4a37      	ldr	r2, [pc, #220]	; (8000b3c <HAL_CAN_MspInit+0xf8>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d02b      	beq.n	8000aba <HAL_CAN_MspInit+0x76>

  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 8000a62:	b00d      	add	sp, #52	; 0x34
 8000a64:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000a68:	4a35      	ldr	r2, [pc, #212]	; (8000b40 <HAL_CAN_MspInit+0xfc>)
 8000a6a:	6813      	ldr	r3, [r2, #0]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d017      	beq.n	8000aa4 <HAL_CAN_MspInit+0x60>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a74:	4b33      	ldr	r3, [pc, #204]	; (8000b44 <HAL_CAN_MspInit+0x100>)
 8000a76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a78:	f042 0208 	orr.w	r2, r2, #8
 8000a7c:	631a      	str	r2, [r3, #48]	; 0x30
 8000a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a80:	f003 0308 	and.w	r3, r3, #8
 8000a84:	9302      	str	r3, [sp, #8]
 8000a86:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	2202      	movs	r2, #2
 8000a8e:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2200      	movs	r2, #0
 8000a92:	9209      	str	r2, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a94:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a96:	2309      	movs	r3, #9
 8000a98:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a9a:	a907      	add	r1, sp, #28
 8000a9c:	482a      	ldr	r0, [pc, #168]	; (8000b48 <HAL_CAN_MspInit+0x104>)
 8000a9e:	f000 fff9 	bl	8001a94 <HAL_GPIO_Init>
 8000aa2:	e7de      	b.n	8000a62 <HAL_CAN_MspInit+0x1e>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000aa4:	4b27      	ldr	r3, [pc, #156]	; (8000b44 <HAL_CAN_MspInit+0x100>)
 8000aa6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000aa8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000aac:	641a      	str	r2, [r3, #64]	; 0x40
 8000aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ab4:	9301      	str	r3, [sp, #4]
 8000ab6:	9b01      	ldr	r3, [sp, #4]
 8000ab8:	e7dc      	b.n	8000a74 <HAL_CAN_MspInit+0x30>
    __HAL_RCC_CAN3_CLK_ENABLE();
 8000aba:	4b22      	ldr	r3, [pc, #136]	; (8000b44 <HAL_CAN_MspInit+0x100>)
 8000abc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000abe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000ac2:	641a      	str	r2, [r3, #64]	; 0x40
 8000ac4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ac6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8000aca:	9203      	str	r2, [sp, #12]
 8000acc:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000ace:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ad0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000ad4:	641a      	str	r2, [r3, #64]	; 0x40
 8000ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000adc:	9304      	str	r3, [sp, #16]
 8000ade:	9b04      	ldr	r3, [sp, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000ae0:	4a17      	ldr	r2, [pc, #92]	; (8000b40 <HAL_CAN_MspInit+0xfc>)
 8000ae2:	6813      	ldr	r3, [r2, #0]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d019      	beq.n	8000b20 <HAL_CAN_MspInit+0xdc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aec:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <HAL_CAN_MspInit+0x100>)
 8000aee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000af0:	f042 0201 	orr.w	r2, r2, #1
 8000af4:	631a      	str	r2, [r3, #48]	; 0x30
 8000af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af8:	f003 0301 	and.w	r3, r3, #1
 8000afc:	9306      	str	r3, [sp, #24]
 8000afe:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8000b00:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000b04:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8000b12:	230b      	movs	r3, #11
 8000b14:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	a907      	add	r1, sp, #28
 8000b18:	480c      	ldr	r0, [pc, #48]	; (8000b4c <HAL_CAN_MspInit+0x108>)
 8000b1a:	f000 ffbb 	bl	8001a94 <HAL_GPIO_Init>
}
 8000b1e:	e7a0      	b.n	8000a62 <HAL_CAN_MspInit+0x1e>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <HAL_CAN_MspInit+0x100>)
 8000b22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b24:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000b28:	641a      	str	r2, [r3, #64]	; 0x40
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b30:	9305      	str	r3, [sp, #20]
 8000b32:	9b05      	ldr	r3, [sp, #20]
 8000b34:	e7da      	b.n	8000aec <HAL_CAN_MspInit+0xa8>
 8000b36:	bf00      	nop
 8000b38:	40006400 	.word	0x40006400
 8000b3c:	40003400 	.word	0x40003400
 8000b40:	20000028 	.word	0x20000028
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40020c00 	.word	0x40020c00
 8000b4c:	40020000 	.word	0x40020000

08000b50 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b54:	b08f      	sub	sp, #60	; 0x3c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b56:	2400      	movs	r4, #0
 8000b58:	9409      	str	r4, [sp, #36]	; 0x24
 8000b5a:	940a      	str	r4, [sp, #40]	; 0x28
 8000b5c:	940b      	str	r4, [sp, #44]	; 0x2c
 8000b5e:	940c      	str	r4, [sp, #48]	; 0x30
 8000b60:	940d      	str	r4, [sp, #52]	; 0x34

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b62:	4b87      	ldr	r3, [pc, #540]	; (8000d80 <MX_GPIO_Init+0x230>)
 8000b64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b66:	f042 0210 	orr.w	r2, r2, #16
 8000b6a:	631a      	str	r2, [r3, #48]	; 0x30
 8000b6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b6e:	f002 0210 	and.w	r2, r2, #16
 8000b72:	9201      	str	r2, [sp, #4]
 8000b74:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b78:	f042 0204 	orr.w	r2, r2, #4
 8000b7c:	631a      	str	r2, [r3, #48]	; 0x30
 8000b7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b80:	f002 0204 	and.w	r2, r2, #4
 8000b84:	9202      	str	r2, [sp, #8]
 8000b86:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b8a:	f042 0220 	orr.w	r2, r2, #32
 8000b8e:	631a      	str	r2, [r3, #48]	; 0x30
 8000b90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b92:	f002 0220 	and.w	r2, r2, #32
 8000b96:	9203      	str	r2, [sp, #12]
 8000b98:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b9c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ba0:	631a      	str	r2, [r3, #48]	; 0x30
 8000ba2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ba4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000ba8:	9204      	str	r2, [sp, #16]
 8000baa:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bae:	f042 0201 	orr.w	r2, r2, #1
 8000bb2:	631a      	str	r2, [r3, #48]	; 0x30
 8000bb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bb6:	f002 0201 	and.w	r2, r2, #1
 8000bba:	9205      	str	r2, [sp, #20]
 8000bbc:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bc0:	f042 0202 	orr.w	r2, r2, #2
 8000bc4:	631a      	str	r2, [r3, #48]	; 0x30
 8000bc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bc8:	f002 0202 	and.w	r2, r2, #2
 8000bcc:	9206      	str	r2, [sp, #24]
 8000bce:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000bd6:	631a      	str	r2, [r3, #48]	; 0x30
 8000bd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bda:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000bde:	9207      	str	r2, [sp, #28]
 8000be0:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000be4:	f042 0208 	orr.w	r2, r2, #8
 8000be8:	631a      	str	r2, [r3, #48]	; 0x30
 8000bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bec:	f003 0308 	and.w	r3, r3, #8
 8000bf0:	9308      	str	r3, [sp, #32]
 8000bf2:	9b08      	ldr	r3, [sp, #32]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, INLET_RED_Pin|AMS_OK_Pin|ISOSPI_EN_Pin|FREIGABE_Pin
 8000bf4:	f8df 9198 	ldr.w	r9, [pc, #408]	; 8000d90 <MX_GPIO_Init+0x240>
 8000bf8:	4622      	mov	r2, r4
 8000bfa:	f248 0187 	movw	r1, #32903	; 0x8087
 8000bfe:	4648      	mov	r0, r9
 8000c00:	f001 f840 	bl	8001c84 <HAL_GPIO_WritePin>
                          |INLET_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin, GPIO_PIN_RESET);
 8000c04:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8000d94 <MX_GPIO_Init+0x244>
 8000c08:	4622      	mov	r2, r4
 8000c0a:	f242 0102 	movw	r1, #8194	; 0x2002
 8000c0e:	4640      	mov	r0, r8
 8000c10:	f001 f838 	bl	8001c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin, GPIO_PIN_RESET);
 8000c14:	f8df b180 	ldr.w	fp, [pc, #384]	; 8000d98 <MX_GPIO_Init+0x248>
 8000c18:	4622      	mov	r2, r4
 8000c1a:	f240 6102 	movw	r1, #1538	; 0x602
 8000c1e:	4658      	mov	r0, fp
 8000c20:	f001 f830 	bl	8001c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 8000c24:	f8df a174 	ldr.w	sl, [pc, #372]	; 8000d9c <MX_GPIO_Init+0x24c>
 8000c28:	4622      	mov	r2, r4
 8000c2a:	f244 0184 	movw	r1, #16516	; 0x4084
 8000c2e:	4650      	mov	r0, sl
 8000c30:	f001 f828 	bl	8001c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 8000c34:	4622      	mov	r2, r4
 8000c36:	f24f 01bc 	movw	r1, #61628	; 0xf0bc
 8000c3a:	4852      	ldr	r0, [pc, #328]	; (8000d84 <MX_GPIO_Init+0x234>)
 8000c3c:	f001 f822 	bl	8001c84 <HAL_GPIO_WritePin>
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DIGITAL1_Pin|DIGITAL2_Pin, GPIO_PIN_RESET);
 8000c40:	4f51      	ldr	r7, [pc, #324]	; (8000d88 <MX_GPIO_Init+0x238>)
 8000c42:	4622      	mov	r2, r4
 8000c44:	2118      	movs	r1, #24
 8000c46:	4638      	mov	r0, r7
 8000c48:	f001 f81c 	bl	8001c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = INLET_RED_Pin|AMS_OK_Pin|ISOSPI_EN_Pin|FREIGABE_Pin
 8000c4c:	f248 0387 	movw	r3, #32903	; 0x8087
 8000c50:	9309      	str	r3, [sp, #36]	; 0x24
                          |INLET_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c52:	2501      	movs	r5, #1
 8000c54:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c5a:	a909      	add	r1, sp, #36	; 0x24
 8000c5c:	4648      	mov	r0, r9
 8000c5e:	f000 ff19 	bl	8001a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SENSE_SDC_HVIL_Pin|SENSE_SDC_BTB_Pin|SENSE_SDC_MOTOR_Pin|IMD_OK_IN_Pin;
 8000c62:	f44f 739c 	mov.w	r3, #312	; 0x138
 8000c66:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c68:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c6c:	a909      	add	r1, sp, #36	; 0x24
 8000c6e:	4648      	mov	r0, r9
 8000c70:	f000 ff10 	bl	8001a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 8000c74:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8000c78:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c7a:	2603      	movs	r6, #3
 8000c7c:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c80:	a909      	add	r1, sp, #36	; 0x24
 8000c82:	4648      	mov	r0, r9
 8000c84:	f000 ff06 	bl	8001a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PCPin PC7 PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8000c88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c8c:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|SD_SW_Pin|GPIO_PIN_7|SD_D0_Pin
                          |SD_D1_Pin|SD_D2_Pin|SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c8e:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c92:	a909      	add	r1, sp, #36	; 0x24
 8000c94:	483d      	ldr	r0, [pc, #244]	; (8000d8c <MX_GPIO_Init+0x23c>)
 8000c96:	f000 fefd 	bl	8001a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF3 PF4 PF5
                           PFPin PFPin PFPin PFPin
                           PF10 PF11 PF12 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000c9a:	f645 73f9 	movw	r3, #24569	; 0x5ff9
 8000c9e:	9309      	str	r3, [sp, #36]	; 0x24
                          |SPI_CS_Pin|SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ca0:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ca4:	a909      	add	r1, sp, #36	; 0x24
 8000ca6:	4640      	mov	r0, r8
 8000ca8:	f000 fef4 	bl	8001a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin;
 8000cac:	f242 0302 	movw	r3, #8194	; 0x2002
 8000cb0:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb2:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cb8:	a909      	add	r1, sp, #36	; 0x24
 8000cba:	4640      	mov	r0, r8
 8000cbc:	f000 feea 	bl	8001a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OVC_SENSE_Pin|PRECHARGE_IN_Pin;
 8000cc0:	f248 0304 	movw	r3, #32772	; 0x8004
 8000cc4:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc6:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cca:	a909      	add	r1, sp, #36	; 0x24
 8000ccc:	4640      	mov	r0, r8
 8000cce:	f000 fee1 	bl	8001a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|HW_WAKE_Pin|BUTTON2_Pin|BUTTON1_Pin;
 8000cd2:	f641 0305 	movw	r3, #6149	; 0x1805
 8000cd6:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd8:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cdc:	a909      	add	r1, sp, #36	; 0x24
 8000cde:	4658      	mov	r0, fp
 8000ce0:	f000 fed8 	bl	8001a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin;
 8000ce4:	f240 6302 	movw	r3, #1538	; 0x602
 8000ce8:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cea:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf0:	a909      	add	r1, sp, #36	; 0x24
 8000cf2:	4658      	mov	r0, fp
 8000cf4:	f000 fece 	bl	8001a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB15 PB4
                           PB5 PB6 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8000cf8:	f64b 7373 	movw	r3, #49011	; 0xbf73
 8000cfc:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|I2C_SCL_Pin|I2C_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cfe:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d02:	a909      	add	r1, sp, #36	; 0x24
 8000d04:	4650      	mov	r0, sl
 8000d06:	f000 fec5 	bl	8001a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin;
 8000d0a:	f244 0384 	movw	r3, #16516	; 0x4084
 8000d0e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d10:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d14:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d16:	a909      	add	r1, sp, #36	; 0x24
 8000d18:	4650      	mov	r0, sl
 8000d1a:	f000 febb 	bl	8001a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG6 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_8;
 8000d1e:	f240 1343 	movw	r3, #323	; 0x143
 8000d22:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d24:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d28:	a909      	add	r1, sp, #36	; 0x24
 8000d2a:	4816      	ldr	r0, [pc, #88]	; (8000d84 <MX_GPIO_Init+0x234>)
 8000d2c:	f000 feb2 	bl	8001a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|SD_CMD_Pin;
 8000d30:	f240 7304 	movw	r3, #1796	; 0x704
 8000d34:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d36:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d3a:	a909      	add	r1, sp, #36	; 0x24
 8000d3c:	4638      	mov	r0, r7
 8000d3e:	f000 fea9 	bl	8001a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KL15_Pin;
 8000d42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d46:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d48:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(KL15_GPIO_Port, &GPIO_InitStruct);
 8000d4c:	a909      	add	r1, sp, #36	; 0x24
 8000d4e:	4638      	mov	r0, r7
 8000d50:	f000 fea0 	bl	8001a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 8000d54:	f24f 03bc 	movw	r3, #61628	; 0xf0bc
 8000d58:	9309      	str	r3, [sp, #36]	; 0x24
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5a:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d60:	a909      	add	r1, sp, #36	; 0x24
 8000d62:	4808      	ldr	r0, [pc, #32]	; (8000d84 <MX_GPIO_Init+0x234>)
 8000d64:	f000 fe96 	bl	8001a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|DIGITAL2_Pin;
 8000d68:	2318      	movs	r3, #24
 8000d6a:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6c:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d72:	a909      	add	r1, sp, #36	; 0x24
 8000d74:	4638      	mov	r0, r7
 8000d76:	f000 fe8d 	bl	8001a94 <HAL_GPIO_Init>

}
 8000d7a:	b00f      	add	sp, #60	; 0x3c
 8000d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40021800 	.word	0x40021800
 8000d88:	40020c00 	.word	0x40020c00
 8000d8c:	40020800 	.word	0x40020800
 8000d90:	40021000 	.word	0x40021000
 8000d94:	40021400 	.word	0x40021400
 8000d98:	40020000 	.word	0x40020000
 8000d9c:	40020400 	.word	0x40020400

08000da0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da0:	b530      	push	{r4, r5, lr}
 8000da2:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000da4:	2234      	movs	r2, #52	; 0x34
 8000da6:	2100      	movs	r1, #0
 8000da8:	a82b      	add	r0, sp, #172	; 0xac
 8000daa:	f002 fe29 	bl	8003a00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dae:	2400      	movs	r4, #0
 8000db0:	9426      	str	r4, [sp, #152]	; 0x98
 8000db2:	9427      	str	r4, [sp, #156]	; 0x9c
 8000db4:	9428      	str	r4, [sp, #160]	; 0xa0
 8000db6:	9429      	str	r4, [sp, #164]	; 0xa4
 8000db8:	942a      	str	r4, [sp, #168]	; 0xa8
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dba:	2290      	movs	r2, #144	; 0x90
 8000dbc:	4621      	mov	r1, r4
 8000dbe:	a802      	add	r0, sp, #8
 8000dc0:	f002 fe1e 	bl	8003a00 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc4:	4b20      	ldr	r3, [pc, #128]	; (8000e48 <SystemClock_Config+0xa8>)
 8000dc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dc8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000dcc:	641a      	str	r2, [r3, #64]	; 0x40
 8000dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd4:	9300      	str	r3, [sp, #0]
 8000dd6:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dd8:	4b1c      	ldr	r3, [pc, #112]	; (8000e4c <SystemClock_Config+0xac>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000de8:	9301      	str	r3, [sp, #4]
 8000dea:	9b01      	ldr	r3, [sp, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dec:	2301      	movs	r3, #1
 8000dee:	932b      	str	r3, [sp, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000df0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000df4:	932c      	str	r3, [sp, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df6:	2502      	movs	r5, #2
 8000df8:	9531      	str	r5, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dfa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dfe:	9332      	str	r3, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000e00:	2319      	movs	r3, #25
 8000e02:	9333      	str	r3, [sp, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000e04:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000e08:	9334      	str	r3, [sp, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e0a:	9535      	str	r5, [sp, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000e0c:	2308      	movs	r3, #8
 8000e0e:	9336      	str	r3, [sp, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e10:	9537      	str	r5, [sp, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e12:	a82b      	add	r0, sp, #172	; 0xac
 8000e14:	f000 ff7a 	bl	8001d0c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e18:	f000 ff3a 	bl	8001c90 <HAL_PWREx_EnableOverDrive>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e1c:	230f      	movs	r3, #15
 8000e1e:	9326      	str	r3, [sp, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e20:	9527      	str	r5, [sp, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e22:	9428      	str	r4, [sp, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e24:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e28:	9329      	str	r3, [sp, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e2e:	932a      	str	r3, [sp, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e30:	2107      	movs	r1, #7
 8000e32:	a826      	add	r0, sp, #152	; 0x98
 8000e34:	f001 f9de 	bl	80021f4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e38:	2380      	movs	r3, #128	; 0x80
 8000e3a:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e3c:	9414      	str	r4, [sp, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e3e:	a802      	add	r0, sp, #8
 8000e40:	f001 fab0 	bl	80023a4 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8000e44:	b039      	add	sp, #228	; 0xe4
 8000e46:	bd30      	pop	{r4, r5, pc}
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40007000 	.word	0x40007000

08000e50 <main>:
{
 8000e50:	b508      	push	{r3, lr}
  HAL_Init();
 8000e52:	f000 fb37 	bl	80014c4 <HAL_Init>
  SystemClock_Config();
 8000e56:	f7ff ffa3 	bl	8000da0 <SystemClock_Config>
  MX_GPIO_Init();
 8000e5a:	f7ff fe79 	bl	8000b50 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000e5e:	f7ff fdb3 	bl	80009c8 <MX_CAN1_Init>
  MX_SPI4_Init();
 8000e62:	f000 f88f 	bl	8000f84 <MX_SPI4_Init>
  MX_USART2_UART_Init();
 8000e66:	f000 fa8d 	bl	8001384 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000e6a:	f7ff fd41 	bl	80008f0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000e6e:	f000 f957 	bl	8001120 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000e72:	f000 fa2b 	bl	80012cc <MX_TIM4_Init>
  MX_SPI1_Init();
 8000e76:	f000 f85f 	bl	8000f38 <MX_SPI1_Init>
  MX_CAN3_Init();
 8000e7a:	f7ff fdc3 	bl	8000a04 <MX_CAN3_Init>
	printResetSource(readResetSource());
 8000e7e:	f7ff fca1 	bl	80007c4 <readResetSource>
 8000e82:	f7ff fcd3 	bl	800082c <printResetSource>
	uartTransmit(TEST_STRING_UART, sizeof(TEST_STRING_UART));
 8000e86:	213a      	movs	r1, #58	; 0x3a
 8000e88:	4825      	ldr	r0, [pc, #148]	; (8000f20 <main+0xd0>)
 8000e8a:	f7ff fb59 	bl	8000540 <uartTransmit>
	collectSystemInfo();
 8000e8e:	f7ff fc79 	bl	8000784 <collectSystemInfo>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 8000e92:	4c24      	ldr	r4, [pc, #144]	; (8000f24 <main+0xd4>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	2180      	movs	r1, #128	; 0x80
 8000e98:	4620      	mov	r0, r4
 8000e9a:	f000 fef3 	bl	8001c84 <HAL_GPIO_WritePin>
uartTransmit(TEST_BLUE_LED, sizeof(TEST_BLUE_LED));
 8000e9e:	211e      	movs	r1, #30
 8000ea0:	4821      	ldr	r0, [pc, #132]	; (8000f28 <main+0xd8>)
 8000ea2:	f7ff fb4d 	bl	8000540 <uartTransmit>
    HAL_Delay(1000);
 8000ea6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eaa:	f000 fb29 	bl	8001500 <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2180      	movs	r1, #128	; 0x80
 8000eb2:	4620      	mov	r0, r4
 8000eb4:	f000 fee6 	bl	8001c84 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000eb8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ebc:	f000 fb20 	bl	8001500 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	2104      	movs	r1, #4
 8000ec4:	4620      	mov	r0, r4
 8000ec6:	f000 fedd 	bl	8001c84 <HAL_GPIO_WritePin>
uartTransmit(TEST_GREEN_LED, sizeof(TEST_GREEN_LED));
 8000eca:	211f      	movs	r1, #31
 8000ecc:	4817      	ldr	r0, [pc, #92]	; (8000f2c <main+0xdc>)
 8000ece:	f7ff fb37 	bl	8000540 <uartTransmit>
    HAL_Delay(1000);
 8000ed2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ed6:	f000 fb13 	bl	8001500 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2104      	movs	r1, #4
 8000ede:	4620      	mov	r0, r4
 8000ee0:	f000 fed0 	bl	8001c84 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000ee4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ee8:	f000 fb0a 	bl	8001500 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8000eec:	2201      	movs	r2, #1
 8000eee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ef2:	4620      	mov	r0, r4
 8000ef4:	f000 fec6 	bl	8001c84 <HAL_GPIO_WritePin>
uartTransmit(TEST_RED_LED, sizeof(TEST_RED_LED));
 8000ef8:	211d      	movs	r1, #29
 8000efa:	480d      	ldr	r0, [pc, #52]	; (8000f30 <main+0xe0>)
 8000efc:	f7ff fb20 	bl	8000540 <uartTransmit>
    HAL_Delay(1000);
 8000f00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f04:	f000 fafc 	bl	8001500 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f0e:	4620      	mov	r0, r4
 8000f10:	f000 feb8 	bl	8001c84 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000f14:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f18:	f000 faf2 	bl	8001500 <HAL_Delay>
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <main+0xcc>
 8000f1e:	bf00      	nop
 8000f20:	08003cc8 	.word	0x08003cc8
 8000f24:	40020400 	.word	0x40020400
 8000f28:	08003d04 	.word	0x08003d04
 8000f2c:	08003d24 	.word	0x08003d24
 8000f30:	08003d44 	.word	0x08003d44

08000f34 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f34:	4770      	bx	lr
	...

08000f38 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f38:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000f3a:	4810      	ldr	r0, [pc, #64]	; (8000f7c <MX_SPI1_Init+0x44>)
 8000f3c:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <MX_SPI1_Init+0x48>)
 8000f3e:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f40:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000f44:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f46:	2300      	movs	r3, #0
 8000f48:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f4a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000f4e:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f50:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f52:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000f54:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000f58:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f5a:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f5c:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f5e:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f60:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f62:	2207      	movs	r2, #7
 8000f64:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f66:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f68:	2308      	movs	r3, #8
 8000f6a:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f6c:	f001 fd14 	bl	8002998 <HAL_SPI_Init>
 8000f70:	b900      	cbnz	r0, 8000f74 <MX_SPI1_Init+0x3c>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f72:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000f74:	f7ff ffde 	bl	8000f34 <Error_Handler>
}
 8000f78:	e7fb      	b.n	8000f72 <MX_SPI1_Init+0x3a>
 8000f7a:	bf00      	nop
 8000f7c:	20000128 	.word	0x20000128
 8000f80:	40013000 	.word	0x40013000

08000f84 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8000f84:	b508      	push	{r3, lr}
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8000f86:	4810      	ldr	r0, [pc, #64]	; (8000fc8 <MX_SPI4_Init+0x44>)
 8000f88:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <MX_SPI4_Init+0x48>)
 8000f8a:	6003      	str	r3, [r0, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000f8c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000f90:	6043      	str	r3, [r0, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000f92:	2300      	movs	r3, #0
 8000f94:	6083      	str	r3, [r0, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f96:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000f9a:	60c2      	str	r2, [r0, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f9c:	6103      	str	r3, [r0, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f9e:	6143      	str	r3, [r0, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000fa0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000fa4:	6182      	str	r2, [r0, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fa6:	61c3      	str	r3, [r0, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fa8:	6203      	str	r3, [r0, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000faa:	6243      	str	r3, [r0, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fac:	6283      	str	r3, [r0, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8000fae:	2207      	movs	r2, #7
 8000fb0:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fb2:	6303      	str	r3, [r0, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fb4:	2308      	movs	r3, #8
 8000fb6:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000fb8:	f001 fcee 	bl	8002998 <HAL_SPI_Init>
 8000fbc:	b900      	cbnz	r0, 8000fc0 <MX_SPI4_Init+0x3c>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000fbe:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000fc0:	f7ff ffb8 	bl	8000f34 <Error_Handler>
}
 8000fc4:	e7fb      	b.n	8000fbe <MX_SPI4_Init+0x3a>
 8000fc6:	bf00      	nop
 8000fc8:	200000c4 	.word	0x200000c4
 8000fcc:	40013400 	.word	0x40013400

08000fd0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fd2:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	9305      	str	r3, [sp, #20]
 8000fd8:	9306      	str	r3, [sp, #24]
 8000fda:	9307      	str	r3, [sp, #28]
 8000fdc:	9308      	str	r3, [sp, #32]
 8000fde:	9309      	str	r3, [sp, #36]	; 0x24
  if(spiHandle->Instance==SPI1)
 8000fe0:	6803      	ldr	r3, [r0, #0]
 8000fe2:	4a30      	ldr	r2, [pc, #192]	; (80010a4 <HAL_SPI_MspInit+0xd4>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d004      	beq.n	8000ff2 <HAL_SPI_MspInit+0x22>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI4)
 8000fe8:	4a2f      	ldr	r2, [pc, #188]	; (80010a8 <HAL_SPI_MspInit+0xd8>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d037      	beq.n	800105e <HAL_SPI_MspInit+0x8e>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8000fee:	b00b      	add	sp, #44	; 0x2c
 8000ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ff2:	4b2e      	ldr	r3, [pc, #184]	; (80010ac <HAL_SPI_MspInit+0xdc>)
 8000ff4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ff6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000ffa:	645a      	str	r2, [r3, #68]	; 0x44
 8000ffc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ffe:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001002:	9200      	str	r2, [sp, #0]
 8001004:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001006:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001008:	f042 0208 	orr.w	r2, r2, #8
 800100c:	631a      	str	r2, [r3, #48]	; 0x30
 800100e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001010:	f002 0208 	and.w	r2, r2, #8
 8001014:	9201      	str	r2, [sp, #4]
 8001016:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001018:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800101a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800101e:	631a      	str	r2, [r3, #48]	; 0x30
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001026:	9302      	str	r3, [sp, #8]
 8001028:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = POTI_MOSI_Pin;
 800102a:	2380      	movs	r3, #128	; 0x80
 800102c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102e:	2702      	movs	r7, #2
 8001030:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2600      	movs	r6, #0
 8001034:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001036:	2503      	movs	r5, #3
 8001038:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800103a:	2405      	movs	r4, #5
 800103c:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(POTI_MOSI_GPIO_Port, &GPIO_InitStruct);
 800103e:	a905      	add	r1, sp, #20
 8001040:	481b      	ldr	r0, [pc, #108]	; (80010b0 <HAL_SPI_MspInit+0xe0>)
 8001042:	f000 fd27 	bl	8001a94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = POTI_MISO_Pin|POTI_CS_Pin|POTI_SCK_Pin;
 8001046:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800104a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104c:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001050:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001052:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001054:	a905      	add	r1, sp, #20
 8001056:	4817      	ldr	r0, [pc, #92]	; (80010b4 <HAL_SPI_MspInit+0xe4>)
 8001058:	f000 fd1c 	bl	8001a94 <HAL_GPIO_Init>
 800105c:	e7c7      	b.n	8000fee <HAL_SPI_MspInit+0x1e>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800105e:	4b13      	ldr	r3, [pc, #76]	; (80010ac <HAL_SPI_MspInit+0xdc>)
 8001060:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001062:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001066:	645a      	str	r2, [r3, #68]	; 0x44
 8001068:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800106a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800106e:	9203      	str	r2, [sp, #12]
 8001070:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001072:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001074:	f042 0210 	orr.w	r2, r2, #16
 8001078:	631a      	str	r2, [r3, #48]	; 0x30
 800107a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107c:	f003 0310 	and.w	r3, r3, #16
 8001080:	9304      	str	r3, [sp, #16]
 8001082:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = ISOSPI_CS_Pin|ISOSPI_SCK_Pin|ISOSPI_MISO_Pin|ISOSPI_MOSI_Pin;
 8001084:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8001088:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108a:	2302      	movs	r3, #2
 800108c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001092:	2303      	movs	r3, #3
 8001094:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001096:	2305      	movs	r3, #5
 8001098:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800109a:	a905      	add	r1, sp, #20
 800109c:	4806      	ldr	r0, [pc, #24]	; (80010b8 <HAL_SPI_MspInit+0xe8>)
 800109e:	f000 fcf9 	bl	8001a94 <HAL_GPIO_Init>
}
 80010a2:	e7a4      	b.n	8000fee <HAL_SPI_MspInit+0x1e>
 80010a4:	40013000 	.word	0x40013000
 80010a8:	40013400 	.word	0x40013400
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40020c00 	.word	0x40020c00
 80010b4:	40021800 	.word	0x40021800
 80010b8:	40021000 	.word	0x40021000

080010bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010bc:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80010be:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <HAL_MspInit+0x2c>)
 80010c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010c2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010c6:	641a      	str	r2, [r3, #64]	; 0x40
 80010c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010ca:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80010ce:	9200      	str	r2, [sp, #0]
 80010d0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80010d8:	645a      	str	r2, [r3, #68]	; 0x44
 80010da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010e4:	b002      	add	sp, #8
 80010e6:	4770      	bx	lr
 80010e8:	40023800 	.word	0x40023800

080010ec <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010ec:	4770      	bx	lr

080010ee <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ee:	e7fe      	b.n	80010ee <HardFault_Handler>

080010f0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f0:	e7fe      	b.n	80010f0 <MemManage_Handler>

080010f2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010f2:	e7fe      	b.n	80010f2 <BusFault_Handler>

080010f4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <UsageFault_Handler>

080010f6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010f6:	4770      	bx	lr

080010f8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010f8:	4770      	bx	lr

080010fa <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010fa:	4770      	bx	lr

080010fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80010fe:	f000 f9ed 	bl	80014dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001102:	bd08      	pop	{r3, pc}

08001104 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001104:	4b05      	ldr	r3, [pc, #20]	; (800111c <SystemInit+0x18>)
 8001106:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800110a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800110e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001112:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001116:	609a      	str	r2, [r3, #8]
#endif
}
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001120:	b500      	push	{lr}
 8001122:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001124:	2300      	movs	r3, #0
 8001126:	9307      	str	r3, [sp, #28]
 8001128:	9308      	str	r3, [sp, #32]
 800112a:	9309      	str	r3, [sp, #36]	; 0x24
 800112c:	930a      	str	r3, [sp, #40]	; 0x28
 800112e:	930b      	str	r3, [sp, #44]	; 0x2c
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001130:	9303      	str	r3, [sp, #12]
 8001132:	9304      	str	r3, [sp, #16]
 8001134:	9305      	str	r3, [sp, #20]
 8001136:	9306      	str	r3, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	9301      	str	r3, [sp, #4]
 800113c:	9302      	str	r3, [sp, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800113e:	4825      	ldr	r0, [pc, #148]	; (80011d4 <MX_TIM1_Init+0xb4>)
 8001140:	4a25      	ldr	r2, [pc, #148]	; (80011d8 <MX_TIM1_Init+0xb8>)
 8001142:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 0;
 8001144:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001146:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 65535;
 8001148:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800114c:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800114e:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8001150:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001152:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001154:	f001 fe12 	bl	8002d7c <HAL_TIM_IC_Init>
 8001158:	2800      	cmp	r0, #0
 800115a:	d12c      	bne.n	80011b6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800115c:	2304      	movs	r3, #4
 800115e:	9307      	str	r3, [sp, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001160:	2350      	movs	r3, #80	; 0x50
 8001162:	9308      	str	r3, [sp, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001164:	2300      	movs	r3, #0
 8001166:	9309      	str	r3, [sp, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001168:	930a      	str	r3, [sp, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 800116a:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800116c:	a907      	add	r1, sp, #28
 800116e:	4819      	ldr	r0, [pc, #100]	; (80011d4 <MX_TIM1_Init+0xb4>)
 8001170:	f002 f840 	bl	80031f4 <HAL_TIM_SlaveConfigSynchro>
 8001174:	bb10      	cbnz	r0, 80011bc <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001176:	2200      	movs	r2, #0
 8001178:	9203      	str	r2, [sp, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800117a:	2301      	movs	r3, #1
 800117c:	9304      	str	r3, [sp, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800117e:	9205      	str	r2, [sp, #20]
  sConfigIC.ICFilter = 0;
 8001180:	9206      	str	r2, [sp, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001182:	a903      	add	r1, sp, #12
 8001184:	4813      	ldr	r0, [pc, #76]	; (80011d4 <MX_TIM1_Init+0xb4>)
 8001186:	f001 ff2b 	bl	8002fe0 <HAL_TIM_IC_ConfigChannel>
 800118a:	b9d0      	cbnz	r0, 80011c2 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800118c:	2302      	movs	r3, #2
 800118e:	9303      	str	r3, [sp, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001190:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001192:	2204      	movs	r2, #4
 8001194:	a903      	add	r1, sp, #12
 8001196:	480f      	ldr	r0, [pc, #60]	; (80011d4 <MX_TIM1_Init+0xb4>)
 8001198:	f001 ff22 	bl	8002fe0 <HAL_TIM_IC_ConfigChannel>
 800119c:	b9a0      	cbnz	r0, 80011c8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800119e:	2300      	movs	r3, #0
 80011a0:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011a2:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a4:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011a6:	4669      	mov	r1, sp
 80011a8:	480a      	ldr	r0, [pc, #40]	; (80011d4 <MX_TIM1_Init+0xb4>)
 80011aa:	f002 f84d 	bl	8003248 <HAL_TIMEx_MasterConfigSynchronization>
 80011ae:	b970      	cbnz	r0, 80011ce <MX_TIM1_Init+0xae>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80011b0:	b00d      	add	sp, #52	; 0x34
 80011b2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80011b6:	f7ff febd 	bl	8000f34 <Error_Handler>
 80011ba:	e7cf      	b.n	800115c <MX_TIM1_Init+0x3c>
    Error_Handler();
 80011bc:	f7ff feba 	bl	8000f34 <Error_Handler>
 80011c0:	e7d9      	b.n	8001176 <MX_TIM1_Init+0x56>
    Error_Handler();
 80011c2:	f7ff feb7 	bl	8000f34 <Error_Handler>
 80011c6:	e7e1      	b.n	800118c <MX_TIM1_Init+0x6c>
    Error_Handler();
 80011c8:	f7ff feb4 	bl	8000f34 <Error_Handler>
 80011cc:	e7e7      	b.n	800119e <MX_TIM1_Init+0x7e>
    Error_Handler();
 80011ce:	f7ff feb1 	bl	8000f34 <Error_Handler>
}
 80011d2:	e7ed      	b.n	80011b0 <MX_TIM1_Init+0x90>
 80011d4:	200001d8 	.word	0x200001d8
 80011d8:	40010000 	.word	0x40010000

080011dc <HAL_TIM_IC_MspInit>:
  HAL_TIM_MspPostInit(&htim4);

}

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80011dc:	b500      	push	{lr}
 80011de:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e0:	2300      	movs	r3, #0
 80011e2:	9303      	str	r3, [sp, #12]
 80011e4:	9304      	str	r3, [sp, #16]
 80011e6:	9305      	str	r3, [sp, #20]
 80011e8:	9306      	str	r3, [sp, #24]
 80011ea:	9307      	str	r3, [sp, #28]
  if(tim_icHandle->Instance==TIM1)
 80011ec:	6802      	ldr	r2, [r0, #0]
 80011ee:	4b14      	ldr	r3, [pc, #80]	; (8001240 <HAL_TIM_IC_MspInit+0x64>)
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d002      	beq.n	80011fa <HAL_TIM_IC_MspInit+0x1e>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80011f4:	b009      	add	sp, #36	; 0x24
 80011f6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011fa:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 80011fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001200:	f042 0201 	orr.w	r2, r2, #1
 8001204:	645a      	str	r2, [r3, #68]	; 0x44
 8001206:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001208:	f002 0201 	and.w	r2, r2, #1
 800120c:	9201      	str	r2, [sp, #4]
 800120e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001210:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001212:	f042 0210 	orr.w	r2, r2, #16
 8001216:	631a      	str	r2, [r3, #48]	; 0x30
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0310 	and.w	r3, r3, #16
 800121e:	9302      	str	r3, [sp, #8]
 8001220:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = IMD_PWM_Pin;
 8001222:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001226:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001228:	2302      	movs	r3, #2
 800122a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001230:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001232:	2301      	movs	r3, #1
 8001234:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(IMD_PWM_GPIO_Port, &GPIO_InitStruct);
 8001236:	a903      	add	r1, sp, #12
 8001238:	4802      	ldr	r0, [pc, #8]	; (8001244 <HAL_TIM_IC_MspInit+0x68>)
 800123a:	f000 fc2b 	bl	8001a94 <HAL_GPIO_Init>
}
 800123e:	e7d9      	b.n	80011f4 <HAL_TIM_IC_MspInit+0x18>
 8001240:	40010000 	.word	0x40010000
 8001244:	40021000 	.word	0x40021000

08001248 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM4)
 8001248:	6802      	ldr	r2, [r0, #0]
 800124a:	4b09      	ldr	r3, [pc, #36]	; (8001270 <HAL_TIM_PWM_MspInit+0x28>)
 800124c:	429a      	cmp	r2, r3
 800124e:	d000      	beq.n	8001252 <HAL_TIM_PWM_MspInit+0xa>
 8001250:	4770      	bx	lr
{
 8001252:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001254:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8001258:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800125a:	f042 0204 	orr.w	r2, r2, #4
 800125e:	641a      	str	r2, [r3, #64]	; 0x40
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	f003 0304 	and.w	r3, r3, #4
 8001266:	9301      	str	r3, [sp, #4]
 8001268:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800126a:	b002      	add	sp, #8
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	40000800 	.word	0x40000800

08001274 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001274:	b500      	push	{lr}
 8001276:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001278:	2300      	movs	r3, #0
 800127a:	9301      	str	r3, [sp, #4]
 800127c:	9302      	str	r3, [sp, #8]
 800127e:	9303      	str	r3, [sp, #12]
 8001280:	9304      	str	r3, [sp, #16]
 8001282:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM4)
 8001284:	6802      	ldr	r2, [r0, #0]
 8001286:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <HAL_TIM_MspPostInit+0x50>)
 8001288:	429a      	cmp	r2, r3
 800128a:	d002      	beq.n	8001292 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800128c:	b007      	add	sp, #28
 800128e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001292:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8001296:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001298:	f042 0208 	orr.w	r2, r2, #8
 800129c:	631a      	str	r2, [r3, #48]	; 0x30
 800129e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a0:	f003 0308 	and.w	r3, r3, #8
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = PWM_HV_N_Pin|PWM_HV_P_Pin|PWM_HV_M_Pin|PWM_HV_Charger_Pin;
 80012a8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80012ac:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2200      	movs	r2, #0
 80012b4:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80012b8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ba:	a901      	add	r1, sp, #4
 80012bc:	4802      	ldr	r0, [pc, #8]	; (80012c8 <HAL_TIM_MspPostInit+0x54>)
 80012be:	f000 fbe9 	bl	8001a94 <HAL_GPIO_Init>
}
 80012c2:	e7e3      	b.n	800128c <HAL_TIM_MspPostInit+0x18>
 80012c4:	40000800 	.word	0x40000800
 80012c8:	40020c00 	.word	0x40020c00

080012cc <MX_TIM4_Init>:
{
 80012cc:	b500      	push	{lr}
 80012ce:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d0:	2300      	movs	r3, #0
 80012d2:	9307      	str	r3, [sp, #28]
 80012d4:	9308      	str	r3, [sp, #32]
 80012d6:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	9301      	str	r3, [sp, #4]
 80012dc:	9302      	str	r3, [sp, #8]
 80012de:	9303      	str	r3, [sp, #12]
 80012e0:	9304      	str	r3, [sp, #16]
 80012e2:	9305      	str	r3, [sp, #20]
 80012e4:	9306      	str	r3, [sp, #24]
  htim4.Instance = TIM4;
 80012e6:	4825      	ldr	r0, [pc, #148]	; (800137c <MX_TIM4_Init+0xb0>)
 80012e8:	4a25      	ldr	r2, [pc, #148]	; (8001380 <MX_TIM4_Init+0xb4>)
 80012ea:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 0;
 80012ec:	6043      	str	r3, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ee:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 65535;
 80012f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012f4:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f6:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f8:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80012fa:	f001 fd0f 	bl	8002d1c <HAL_TIM_PWM_Init>
 80012fe:	bb50      	cbnz	r0, 8001356 <MX_TIM4_Init+0x8a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001300:	2300      	movs	r3, #0
 8001302:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001304:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001306:	a907      	add	r1, sp, #28
 8001308:	481c      	ldr	r0, [pc, #112]	; (800137c <MX_TIM4_Init+0xb0>)
 800130a:	f001 ff9d 	bl	8003248 <HAL_TIMEx_MasterConfigSynchronization>
 800130e:	bb28      	cbnz	r0, 800135c <MX_TIM4_Init+0x90>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001310:	2360      	movs	r3, #96	; 0x60
 8001312:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 0;
 8001314:	2200      	movs	r2, #0
 8001316:	9201      	str	r2, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001318:	9202      	str	r2, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800131a:	9204      	str	r2, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800131c:	4669      	mov	r1, sp
 800131e:	4817      	ldr	r0, [pc, #92]	; (800137c <MX_TIM4_Init+0xb0>)
 8001320:	f001 fd8e 	bl	8002e40 <HAL_TIM_PWM_ConfigChannel>
 8001324:	b9e8      	cbnz	r0, 8001362 <MX_TIM4_Init+0x96>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001326:	2204      	movs	r2, #4
 8001328:	4669      	mov	r1, sp
 800132a:	4814      	ldr	r0, [pc, #80]	; (800137c <MX_TIM4_Init+0xb0>)
 800132c:	f001 fd88 	bl	8002e40 <HAL_TIM_PWM_ConfigChannel>
 8001330:	b9d0      	cbnz	r0, 8001368 <MX_TIM4_Init+0x9c>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001332:	2208      	movs	r2, #8
 8001334:	4669      	mov	r1, sp
 8001336:	4811      	ldr	r0, [pc, #68]	; (800137c <MX_TIM4_Init+0xb0>)
 8001338:	f001 fd82 	bl	8002e40 <HAL_TIM_PWM_ConfigChannel>
 800133c:	b9b8      	cbnz	r0, 800136e <MX_TIM4_Init+0xa2>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800133e:	220c      	movs	r2, #12
 8001340:	4669      	mov	r1, sp
 8001342:	480e      	ldr	r0, [pc, #56]	; (800137c <MX_TIM4_Init+0xb0>)
 8001344:	f001 fd7c 	bl	8002e40 <HAL_TIM_PWM_ConfigChannel>
 8001348:	b9a0      	cbnz	r0, 8001374 <MX_TIM4_Init+0xa8>
  HAL_TIM_MspPostInit(&htim4);
 800134a:	480c      	ldr	r0, [pc, #48]	; (800137c <MX_TIM4_Init+0xb0>)
 800134c:	f7ff ff92 	bl	8001274 <HAL_TIM_MspPostInit>
}
 8001350:	b00b      	add	sp, #44	; 0x2c
 8001352:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001356:	f7ff fded 	bl	8000f34 <Error_Handler>
 800135a:	e7d1      	b.n	8001300 <MX_TIM4_Init+0x34>
    Error_Handler();
 800135c:	f7ff fdea 	bl	8000f34 <Error_Handler>
 8001360:	e7d6      	b.n	8001310 <MX_TIM4_Init+0x44>
    Error_Handler();
 8001362:	f7ff fde7 	bl	8000f34 <Error_Handler>
 8001366:	e7de      	b.n	8001326 <MX_TIM4_Init+0x5a>
    Error_Handler();
 8001368:	f7ff fde4 	bl	8000f34 <Error_Handler>
 800136c:	e7e1      	b.n	8001332 <MX_TIM4_Init+0x66>
    Error_Handler();
 800136e:	f7ff fde1 	bl	8000f34 <Error_Handler>
 8001372:	e7e4      	b.n	800133e <MX_TIM4_Init+0x72>
    Error_Handler();
 8001374:	f7ff fdde 	bl	8000f34 <Error_Handler>
 8001378:	e7e7      	b.n	800134a <MX_TIM4_Init+0x7e>
 800137a:	bf00      	nop
 800137c:	2000018c 	.word	0x2000018c
 8001380:	40000800 	.word	0x40000800

08001384 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001384:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001386:	480b      	ldr	r0, [pc, #44]	; (80013b4 <MX_USART2_UART_Init+0x30>)
 8001388:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <MX_USART2_UART_Init+0x34>)
 800138a:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 9600;
 800138c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001390:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001392:	2300      	movs	r3, #0
 8001394:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001396:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001398:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800139a:	220c      	movs	r2, #12
 800139c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800139e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a0:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013a2:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013a4:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013a6:	f002 fad6 	bl	8003956 <HAL_UART_Init>
 80013aa:	b900      	cbnz	r0, 80013ae <MX_USART2_UART_Init+0x2a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013ac:	bd08      	pop	{r3, pc}
    Error_Handler();
 80013ae:	f7ff fdc1 	bl	8000f34 <Error_Handler>
}
 80013b2:	e7fb      	b.n	80013ac <MX_USART2_UART_Init+0x28>
 80013b4:	20000224 	.word	0x20000224
 80013b8:	40004400 	.word	0x40004400

080013bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013bc:	b500      	push	{lr}
 80013be:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	2300      	movs	r3, #0
 80013c2:	9303      	str	r3, [sp, #12]
 80013c4:	9304      	str	r3, [sp, #16]
 80013c6:	9305      	str	r3, [sp, #20]
 80013c8:	9306      	str	r3, [sp, #24]
 80013ca:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART2)
 80013cc:	6802      	ldr	r2, [r0, #0]
 80013ce:	4b14      	ldr	r3, [pc, #80]	; (8001420 <HAL_UART_MspInit+0x64>)
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d002      	beq.n	80013da <HAL_UART_MspInit+0x1e>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80013d4:	b009      	add	sp, #36	; 0x24
 80013d6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 80013da:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80013de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013e0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80013e4:	641a      	str	r2, [r3, #64]	; 0x40
 80013e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013e8:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80013ec:	9201      	str	r2, [sp, #4]
 80013ee:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013f2:	f042 0208 	orr.w	r2, r2, #8
 80013f6:	631a      	str	r2, [r3, #48]	; 0x30
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0308 	and.w	r3, r3, #8
 80013fe:	9302      	str	r3, [sp, #8]
 8001400:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001402:	2360      	movs	r3, #96	; 0x60
 8001404:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001406:	2302      	movs	r3, #2
 8001408:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140e:	2303      	movs	r3, #3
 8001410:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001412:	2307      	movs	r3, #7
 8001414:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001416:	a903      	add	r1, sp, #12
 8001418:	4802      	ldr	r0, [pc, #8]	; (8001424 <HAL_UART_MspInit+0x68>)
 800141a:	f000 fb3b 	bl	8001a94 <HAL_GPIO_Init>
}
 800141e:	e7d9      	b.n	80013d4 <HAL_UART_MspInit+0x18>
 8001420:	40004400 	.word	0x40004400
 8001424:	40020c00 	.word	0x40020c00

08001428 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001428:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001460 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800142c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800142e:	e003      	b.n	8001438 <LoopCopyDataInit>

08001430 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001432:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001434:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001436:	3104      	adds	r1, #4

08001438 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001438:	480b      	ldr	r0, [pc, #44]	; (8001468 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800143a:	4b0c      	ldr	r3, [pc, #48]	; (800146c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800143c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800143e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001440:	d3f6      	bcc.n	8001430 <CopyDataInit>
  ldr  r2, =_sbss
 8001442:	4a0b      	ldr	r2, [pc, #44]	; (8001470 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001444:	e002      	b.n	800144c <LoopFillZerobss>

08001446 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001446:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001448:	f842 3b04 	str.w	r3, [r2], #4

0800144c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800144c:	4b09      	ldr	r3, [pc, #36]	; (8001474 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800144e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001450:	d3f9      	bcc.n	8001446 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001452:	f7ff fe57 	bl	8001104 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001456:	f002 faaf 	bl	80039b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800145a:	f7ff fcf9 	bl	8000e50 <main>
  bx  lr    
 800145e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001460:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001464:	08003db4 	.word	0x08003db4
  ldr  r0, =_sdata
 8001468:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800146c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001470:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001474:	200002ac 	.word	0x200002ac

08001478 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001478:	e7fe      	b.n	8001478 <ADC_IRQHandler>
	...

0800147c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800147c:	b510      	push	{r4, lr}
 800147e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001480:	4b0d      	ldr	r3, [pc, #52]	; (80014b8 <HAL_InitTick+0x3c>)
 8001482:	7818      	ldrb	r0, [r3, #0]
 8001484:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001488:	fbb3 f3f0 	udiv	r3, r3, r0
 800148c:	4a0b      	ldr	r2, [pc, #44]	; (80014bc <HAL_InitTick+0x40>)
 800148e:	6810      	ldr	r0, [r2, #0]
 8001490:	fbb0 f0f3 	udiv	r0, r0, r3
 8001494:	f000 fae8 	bl	8001a68 <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001498:	2c0f      	cmp	r4, #15
 800149a:	d800      	bhi.n	800149e <HAL_InitTick+0x22>
 800149c:	b108      	cbz	r0, 80014a2 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800149e:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 80014a0:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a2:	2200      	movs	r2, #0
 80014a4:	4621      	mov	r1, r4
 80014a6:	f04f 30ff 	mov.w	r0, #4294967295
 80014aa:	f000 faad 	bl	8001a08 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014ae:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <HAL_InitTick+0x44>)
 80014b0:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 80014b2:	2000      	movs	r0, #0
 80014b4:	e7f4      	b.n	80014a0 <HAL_InitTick+0x24>
 80014b6:	bf00      	nop
 80014b8:	20000004 	.word	0x20000004
 80014bc:	20000000 	.word	0x20000000
 80014c0:	20000008 	.word	0x20000008

080014c4 <HAL_Init>:
{
 80014c4:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c6:	2003      	movs	r0, #3
 80014c8:	f000 fa8c 	bl	80019e4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80014cc:	2000      	movs	r0, #0
 80014ce:	f7ff ffd5 	bl	800147c <HAL_InitTick>
  HAL_MspInit();
 80014d2:	f7ff fdf3 	bl	80010bc <HAL_MspInit>
}
 80014d6:	2000      	movs	r0, #0
 80014d8:	bd08      	pop	{r3, pc}
	...

080014dc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80014dc:	4a03      	ldr	r2, [pc, #12]	; (80014ec <HAL_IncTick+0x10>)
 80014de:	6811      	ldr	r1, [r2, #0]
 80014e0:	4b03      	ldr	r3, [pc, #12]	; (80014f0 <HAL_IncTick+0x14>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	440b      	add	r3, r1
 80014e6:	6013      	str	r3, [r2, #0]
}
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	200002a8 	.word	0x200002a8
 80014f0:	20000004 	.word	0x20000004

080014f4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80014f4:	4b01      	ldr	r3, [pc, #4]	; (80014fc <HAL_GetTick+0x8>)
 80014f6:	6818      	ldr	r0, [r3, #0]
}
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	200002a8 	.word	0x200002a8

08001500 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001500:	b538      	push	{r3, r4, r5, lr}
 8001502:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001504:	f7ff fff6 	bl	80014f4 <HAL_GetTick>
 8001508:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800150a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800150e:	d002      	beq.n	8001516 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001510:	4b04      	ldr	r3, [pc, #16]	; (8001524 <HAL_Delay+0x24>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001516:	f7ff ffed 	bl	80014f4 <HAL_GetTick>
 800151a:	1b40      	subs	r0, r0, r5
 800151c:	42a0      	cmp	r0, r4
 800151e:	d3fa      	bcc.n	8001516 <HAL_Delay+0x16>
  {
  }
}
 8001520:	bd38      	pop	{r3, r4, r5, pc}
 8001522:	bf00      	nop
 8001524:	20000004 	.word	0x20000004

08001528 <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 return __STM32F7xx_HAL_VERSION;
}
 8001528:	4800      	ldr	r0, [pc, #0]	; (800152c <HAL_GetHalVersion+0x4>)
 800152a:	4770      	bx	lr
 800152c:	01020900 	.word	0x01020900

08001530 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16U);
 8001530:	4b01      	ldr	r3, [pc, #4]	; (8001538 <HAL_GetREVID+0x8>)
 8001532:	6818      	ldr	r0, [r3, #0]
}
 8001534:	0c00      	lsrs	r0, r0, #16
 8001536:	4770      	bx	lr
 8001538:	e0042000 	.word	0xe0042000

0800153c <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800153c:	4b02      	ldr	r3, [pc, #8]	; (8001548 <HAL_GetDEVID+0xc>)
 800153e:	6818      	ldr	r0, [r3, #0]
}
 8001540:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	e0042000 	.word	0xe0042000

0800154c <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
   return(READ_REG(*((uint32_t *)UID_BASE)));
}
 800154c:	4b01      	ldr	r3, [pc, #4]	; (8001554 <HAL_GetUIDw0+0x8>)
 800154e:	6818      	ldr	r0, [r3, #0]
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	1ff0f420 	.word	0x1ff0f420

08001558 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 8001558:	4b01      	ldr	r3, [pc, #4]	; (8001560 <HAL_GetUIDw1+0x8>)
 800155a:	6818      	ldr	r0, [r3, #0]
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	1ff0f424 	.word	0x1ff0f424

08001564 <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 8001564:	4b01      	ldr	r3, [pc, #4]	; (800156c <HAL_GetUIDw2+0x8>)
 8001566:	6818      	ldr	r0, [r3, #0]
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	1ff0f428 	.word	0x1ff0f428

08001570 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001570:	2800      	cmp	r0, #0
 8001572:	f000 80b7 	beq.w	80016e4 <HAL_ADC_Init+0x174>
{
 8001576:	b510      	push	{r4, lr}
 8001578:	4604      	mov	r4, r0
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800157a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800157c:	b143      	cbz	r3, 8001590 <HAL_ADC_Init+0x20>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800157e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001580:	f013 0f10 	tst.w	r3, #16
 8001584:	d00b      	beq.n	800159e <HAL_ADC_Init+0x2e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001586:	2001      	movs	r0, #1
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001588:	2300      	movs	r3, #0
 800158a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 800158e:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8001590:	f7ff f9e6 	bl	8000960 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001594:	2300      	movs	r3, #0
 8001596:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8001598:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800159c:	e7ef      	b.n	800157e <HAL_ADC_Init+0xe>
    ADC_STATE_CLR_SET(hadc->State,
 800159e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80015a0:	4b51      	ldr	r3, [pc, #324]	; (80016e8 <HAL_ADC_Init+0x178>)
 80015a2:	4013      	ands	r3, r2
 80015a4:	f043 0302 	orr.w	r3, r3, #2
 80015a8:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80015aa:	4b50      	ldr	r3, [pc, #320]	; (80016ec <HAL_ADC_Init+0x17c>)
 80015ac:	685a      	ldr	r2, [r3, #4]
 80015ae:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80015b2:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	6861      	ldr	r1, [r4, #4]
 80015b8:	430a      	orrs	r2, r1
 80015ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015bc:	6822      	ldr	r2, [r4, #0]
 80015be:	6853      	ldr	r3, [r2, #4]
 80015c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015c4:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015c6:	6822      	ldr	r2, [r4, #0]
 80015c8:	6853      	ldr	r3, [r2, #4]
 80015ca:	6921      	ldr	r1, [r4, #16]
 80015cc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80015d0:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015d2:	6822      	ldr	r2, [r4, #0]
 80015d4:	6853      	ldr	r3, [r2, #4]
 80015d6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80015da:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015dc:	6822      	ldr	r2, [r4, #0]
 80015de:	6853      	ldr	r3, [r2, #4]
 80015e0:	68a1      	ldr	r1, [r4, #8]
 80015e2:	430b      	orrs	r3, r1
 80015e4:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015e6:	6822      	ldr	r2, [r4, #0]
 80015e8:	6893      	ldr	r3, [r2, #8]
 80015ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80015ee:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015f0:	6822      	ldr	r2, [r4, #0]
 80015f2:	6893      	ldr	r3, [r2, #8]
 80015f4:	68e1      	ldr	r1, [r4, #12]
 80015f6:	430b      	orrs	r3, r1
 80015f8:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015fa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80015fc:	4b3c      	ldr	r3, [pc, #240]	; (80016f0 <HAL_ADC_Init+0x180>)
 80015fe:	429a      	cmp	r2, r3
 8001600:	d05f      	beq.n	80016c2 <HAL_ADC_Init+0x152>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001602:	6822      	ldr	r2, [r4, #0]
 8001604:	6893      	ldr	r3, [r2, #8]
 8001606:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800160a:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800160c:	6822      	ldr	r2, [r4, #0]
 800160e:	6893      	ldr	r3, [r2, #8]
 8001610:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001612:	430b      	orrs	r3, r1
 8001614:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001616:	6822      	ldr	r2, [r4, #0]
 8001618:	6893      	ldr	r3, [r2, #8]
 800161a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800161e:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001620:	6822      	ldr	r2, [r4, #0]
 8001622:	6893      	ldr	r3, [r2, #8]
 8001624:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001626:	430b      	orrs	r3, r1
 8001628:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800162a:	6822      	ldr	r2, [r4, #0]
 800162c:	6893      	ldr	r3, [r2, #8]
 800162e:	f023 0302 	bic.w	r3, r3, #2
 8001632:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001634:	6822      	ldr	r2, [r4, #0]
 8001636:	6893      	ldr	r3, [r2, #8]
 8001638:	69a1      	ldr	r1, [r4, #24]
 800163a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800163e:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001640:	f894 3020 	ldrb.w	r3, [r4, #32]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d047      	beq.n	80016d8 <HAL_ADC_Init+0x168>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001648:	6822      	ldr	r2, [r4, #0]
 800164a:	6853      	ldr	r3, [r2, #4]
 800164c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001650:	6053      	str	r3, [r2, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001652:	6822      	ldr	r2, [r4, #0]
 8001654:	6853      	ldr	r3, [r2, #4]
 8001656:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800165a:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800165c:	6821      	ldr	r1, [r4, #0]
 800165e:	684b      	ldr	r3, [r1, #4]
 8001660:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001662:	3a01      	subs	r2, #1
 8001664:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8001668:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800166a:	6822      	ldr	r2, [r4, #0]
 800166c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800166e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001672:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001674:	6821      	ldr	r1, [r4, #0]
 8001676:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001678:	69e2      	ldr	r2, [r4, #28]
 800167a:	3a01      	subs	r2, #1
 800167c:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8001680:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001682:	6822      	ldr	r2, [r4, #0]
 8001684:	6893      	ldr	r3, [r2, #8]
 8001686:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800168a:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800168c:	6822      	ldr	r2, [r4, #0]
 800168e:	6893      	ldr	r3, [r2, #8]
 8001690:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8001694:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8001698:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800169a:	6822      	ldr	r2, [r4, #0]
 800169c:	6893      	ldr	r3, [r2, #8]
 800169e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80016a2:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016a4:	6822      	ldr	r2, [r4, #0]
 80016a6:	6893      	ldr	r3, [r2, #8]
 80016a8:	6961      	ldr	r1, [r4, #20]
 80016aa:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 80016ae:	6093      	str	r3, [r2, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80016b0:	2000      	movs	r0, #0
 80016b2:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80016b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016b6:	f023 0303 	bic.w	r3, r3, #3
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	6423      	str	r3, [r4, #64]	; 0x40
 80016c0:	e762      	b.n	8001588 <HAL_ADC_Init+0x18>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016c2:	6822      	ldr	r2, [r4, #0]
 80016c4:	6893      	ldr	r3, [r2, #8]
 80016c6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80016ca:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016cc:	6822      	ldr	r2, [r4, #0]
 80016ce:	6893      	ldr	r3, [r2, #8]
 80016d0:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80016d4:	6093      	str	r3, [r2, #8]
 80016d6:	e7a8      	b.n	800162a <HAL_ADC_Init+0xba>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016d8:	6822      	ldr	r2, [r4, #0]
 80016da:	6853      	ldr	r3, [r2, #4]
 80016dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80016e0:	6053      	str	r3, [r2, #4]
 80016e2:	e7c2      	b.n	800166a <HAL_ADC_Init+0xfa>
    return HAL_ERROR;
 80016e4:	2001      	movs	r0, #1
}
 80016e6:	4770      	bx	lr
 80016e8:	ffffeefd 	.word	0xffffeefd
 80016ec:	40012300 	.word	0x40012300
 80016f0:	0f000001 	.word	0x0f000001

080016f4 <HAL_ADC_ConfigChannel>:
{
 80016f4:	b430      	push	{r4, r5}
 80016f6:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80016fc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001700:	2b01      	cmp	r3, #1
 8001702:	f000 80d2 	beq.w	80018aa <HAL_ADC_ConfigChannel+0x1b6>
 8001706:	2301      	movs	r3, #1
 8001708:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800170c:	680b      	ldr	r3, [r1, #0]
 800170e:	2b09      	cmp	r3, #9
 8001710:	d925      	bls.n	800175e <HAL_ADC_ConfigChannel+0x6a>
 8001712:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001716:	d022      	beq.n	800175e <HAL_ADC_ConfigChannel+0x6a>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001718:	6805      	ldr	r5, [r0, #0]
 800171a:	68ea      	ldr	r2, [r5, #12]
 800171c:	b29b      	uxth	r3, r3
 800171e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001722:	3b1e      	subs	r3, #30
 8001724:	2407      	movs	r4, #7
 8001726:	fa04 f303 	lsl.w	r3, r4, r3
 800172a:	ea22 0303 	bic.w	r3, r2, r3
 800172e:	60eb      	str	r3, [r5, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001730:	680b      	ldr	r3, [r1, #0]
 8001732:	4a5f      	ldr	r2, [pc, #380]	; (80018b0 <HAL_ADC_ConfigChannel+0x1bc>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d00b      	beq.n	8001750 <HAL_ADC_ConfigChannel+0x5c>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001738:	6804      	ldr	r4, [r0, #0]
 800173a:	68e5      	ldr	r5, [r4, #12]
 800173c:	b29b      	uxth	r3, r3
 800173e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001742:	3b1e      	subs	r3, #30
 8001744:	688a      	ldr	r2, [r1, #8]
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	432b      	orrs	r3, r5
 800174c:	60e3      	str	r3, [r4, #12]
 800174e:	e01a      	b.n	8001786 <HAL_ADC_ConfigChannel+0x92>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001750:	6802      	ldr	r2, [r0, #0]
 8001752:	68d3      	ldr	r3, [r2, #12]
 8001754:	688c      	ldr	r4, [r1, #8]
 8001756:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 800175a:	60d3      	str	r3, [r2, #12]
 800175c:	e013      	b.n	8001786 <HAL_ADC_ConfigChannel+0x92>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800175e:	6805      	ldr	r5, [r0, #0]
 8001760:	692a      	ldr	r2, [r5, #16]
 8001762:	b29b      	uxth	r3, r3
 8001764:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001768:	2407      	movs	r4, #7
 800176a:	fa04 f303 	lsl.w	r3, r4, r3
 800176e:	ea22 0303 	bic.w	r3, r2, r3
 8001772:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001774:	6804      	ldr	r4, [r0, #0]
 8001776:	6925      	ldr	r5, [r4, #16]
 8001778:	880b      	ldrh	r3, [r1, #0]
 800177a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800177e:	688b      	ldr	r3, [r1, #8]
 8001780:	4093      	lsls	r3, r2
 8001782:	432b      	orrs	r3, r5
 8001784:	6123      	str	r3, [r4, #16]
  if (sConfig->Rank < 7)
 8001786:	684b      	ldr	r3, [r1, #4]
 8001788:	2b06      	cmp	r3, #6
 800178a:	d820      	bhi.n	80017ce <HAL_ADC_ConfigChannel+0xda>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800178c:	6805      	ldr	r5, [r0, #0]
 800178e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001790:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001794:	3b05      	subs	r3, #5
 8001796:	241f      	movs	r4, #31
 8001798:	fa04 f303 	lsl.w	r3, r4, r3
 800179c:	ea22 0303 	bic.w	r3, r2, r3
 80017a0:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80017a2:	6804      	ldr	r4, [r0, #0]
 80017a4:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80017a6:	880a      	ldrh	r2, [r1, #0]
 80017a8:	684b      	ldr	r3, [r1, #4]
 80017aa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80017ae:	3b05      	subs	r3, #5
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	432b      	orrs	r3, r5
 80017b6:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80017b8:	6802      	ldr	r2, [r0, #0]
 80017ba:	4b3e      	ldr	r3, [pc, #248]	; (80018b4 <HAL_ADC_ConfigChannel+0x1c0>)
 80017bc:	429a      	cmp	r2, r3
 80017be:	d036      	beq.n	800182e <HAL_ADC_ConfigChannel+0x13a>
  __HAL_UNLOCK(hadc);
 80017c0:	2300      	movs	r3, #0
 80017c2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80017c6:	4618      	mov	r0, r3
}
 80017c8:	b002      	add	sp, #8
 80017ca:	bc30      	pop	{r4, r5}
 80017cc:	4770      	bx	lr
  else if (sConfig->Rank < 13)
 80017ce:	2b0c      	cmp	r3, #12
 80017d0:	d816      	bhi.n	8001800 <HAL_ADC_ConfigChannel+0x10c>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80017d2:	6805      	ldr	r5, [r0, #0]
 80017d4:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80017d6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80017da:	3b23      	subs	r3, #35	; 0x23
 80017dc:	241f      	movs	r4, #31
 80017de:	fa04 f303 	lsl.w	r3, r4, r3
 80017e2:	ea22 0303 	bic.w	r3, r2, r3
 80017e6:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80017e8:	6804      	ldr	r4, [r0, #0]
 80017ea:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80017ec:	880a      	ldrh	r2, [r1, #0]
 80017ee:	684b      	ldr	r3, [r1, #4]
 80017f0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80017f4:	3b23      	subs	r3, #35	; 0x23
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	432b      	orrs	r3, r5
 80017fc:	6323      	str	r3, [r4, #48]	; 0x30
 80017fe:	e7db      	b.n	80017b8 <HAL_ADC_ConfigChannel+0xc4>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001800:	6805      	ldr	r5, [r0, #0]
 8001802:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001804:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001808:	3b41      	subs	r3, #65	; 0x41
 800180a:	241f      	movs	r4, #31
 800180c:	fa04 f303 	lsl.w	r3, r4, r3
 8001810:	ea22 0303 	bic.w	r3, r2, r3
 8001814:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001816:	6804      	ldr	r4, [r0, #0]
 8001818:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800181a:	880a      	ldrh	r2, [r1, #0]
 800181c:	684b      	ldr	r3, [r1, #4]
 800181e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001822:	3b41      	subs	r3, #65	; 0x41
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	432b      	orrs	r3, r5
 800182a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800182c:	e7c4      	b.n	80017b8 <HAL_ADC_ConfigChannel+0xc4>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800182e:	680b      	ldr	r3, [r1, #0]
 8001830:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001834:	d025      	beq.n	8001882 <HAL_ADC_ConfigChannel+0x18e>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001836:	680b      	ldr	r3, [r1, #0]
 8001838:	2b12      	cmp	r3, #18
 800183a:	d02c      	beq.n	8001896 <HAL_ADC_ConfigChannel+0x1a2>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800183c:	680b      	ldr	r3, [r1, #0]
 800183e:	4a1c      	ldr	r2, [pc, #112]	; (80018b0 <HAL_ADC_ConfigChannel+0x1bc>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d001      	beq.n	8001848 <HAL_ADC_ConfigChannel+0x154>
 8001844:	2b11      	cmp	r3, #17
 8001846:	d1bb      	bne.n	80017c0 <HAL_ADC_ConfigChannel+0xcc>
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001848:	4a1b      	ldr	r2, [pc, #108]	; (80018b8 <HAL_ADC_ConfigChannel+0x1c4>)
 800184a:	6853      	ldr	r3, [r2, #4]
 800184c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001850:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001852:	680a      	ldr	r2, [r1, #0]
 8001854:	4b16      	ldr	r3, [pc, #88]	; (80018b0 <HAL_ADC_ConfigChannel+0x1bc>)
 8001856:	429a      	cmp	r2, r3
 8001858:	d1b2      	bne.n	80017c0 <HAL_ADC_ConfigChannel+0xcc>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800185a:	4b18      	ldr	r3, [pc, #96]	; (80018bc <HAL_ADC_ConfigChannel+0x1c8>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a18      	ldr	r2, [pc, #96]	; (80018c0 <HAL_ADC_ConfigChannel+0x1cc>)
 8001860:	fba2 2303 	umull	r2, r3, r2, r3
 8001864:	0c9b      	lsrs	r3, r3, #18
 8001866:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 800186e:	9b01      	ldr	r3, [sp, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d0a5      	beq.n	80017c0 <HAL_ADC_ConfigChannel+0xcc>
        counter--;
 8001874:	9b01      	ldr	r3, [sp, #4]
 8001876:	3b01      	subs	r3, #1
 8001878:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 800187a:	9b01      	ldr	r3, [sp, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1f9      	bne.n	8001874 <HAL_ADC_ConfigChannel+0x180>
 8001880:	e79e      	b.n	80017c0 <HAL_ADC_ConfigChannel+0xcc>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001882:	4a0d      	ldr	r2, [pc, #52]	; (80018b8 <HAL_ADC_ConfigChannel+0x1c4>)
 8001884:	6853      	ldr	r3, [r2, #4]
 8001886:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800188a:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800188c:	6802      	ldr	r2, [r0, #0]
 800188e:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <HAL_ADC_ConfigChannel+0x1c0>)
 8001890:	429a      	cmp	r2, r3
 8001892:	d0d0      	beq.n	8001836 <HAL_ADC_ConfigChannel+0x142>
 8001894:	e794      	b.n	80017c0 <HAL_ADC_ConfigChannel+0xcc>
    ADC->CCR |= ADC_CCR_VBATE;
 8001896:	4a08      	ldr	r2, [pc, #32]	; (80018b8 <HAL_ADC_ConfigChannel+0x1c4>)
 8001898:	6853      	ldr	r3, [r2, #4]
 800189a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800189e:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80018a0:	6802      	ldr	r2, [r0, #0]
 80018a2:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <HAL_ADC_ConfigChannel+0x1c0>)
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d0c9      	beq.n	800183c <HAL_ADC_ConfigChannel+0x148>
 80018a8:	e78a      	b.n	80017c0 <HAL_ADC_ConfigChannel+0xcc>
  __HAL_LOCK(hadc);
 80018aa:	2002      	movs	r0, #2
 80018ac:	e78c      	b.n	80017c8 <HAL_ADC_ConfigChannel+0xd4>
 80018ae:	bf00      	nop
 80018b0:	10000012 	.word	0x10000012
 80018b4:	40012000 	.word	0x40012000
 80018b8:	40012300 	.word	0x40012300
 80018bc:	20000000 	.word	0x20000000
 80018c0:	431bde83 	.word	0x431bde83

080018c4 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80018c4:	2800      	cmp	r0, #0
 80018c6:	f000 808a 	beq.w	80019de <HAL_CAN_Init+0x11a>
{
 80018ca:	b538      	push	{r3, r4, r5, lr}
 80018cc:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80018ce:	f890 3020 	ldrb.w	r3, [r0, #32]
 80018d2:	b1d3      	cbz	r3, 800190a <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80018d4:	6822      	ldr	r2, [r4, #0]
 80018d6:	6813      	ldr	r3, [r2, #0]
 80018d8:	f023 0302 	bic.w	r3, r3, #2
 80018dc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018de:	f7ff fe09 	bl	80014f4 <HAL_GetTick>
 80018e2:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018e4:	6823      	ldr	r3, [r4, #0]
 80018e6:	685a      	ldr	r2, [r3, #4]
 80018e8:	f012 0f02 	tst.w	r2, #2
 80018ec:	d010      	beq.n	8001910 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018ee:	f7ff fe01 	bl	80014f4 <HAL_GetTick>
 80018f2:	1b40      	subs	r0, r0, r5
 80018f4:	280a      	cmp	r0, #10
 80018f6:	d9f5      	bls.n	80018e4 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80018fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018fe:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001900:	2305      	movs	r3, #5
 8001902:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 8001906:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8001908:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 800190a:	f7ff f89b 	bl	8000a44 <HAL_CAN_MspInit>
 800190e:	e7e1      	b.n	80018d4 <HAL_CAN_Init+0x10>
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	f042 0201 	orr.w	r2, r2, #1
 8001916:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001918:	f7ff fdec 	bl	80014f4 <HAL_GetTick>
 800191c:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800191e:	6823      	ldr	r3, [r4, #0]
 8001920:	685a      	ldr	r2, [r3, #4]
 8001922:	f012 0f01 	tst.w	r2, #1
 8001926:	d10d      	bne.n	8001944 <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001928:	f7ff fde4 	bl	80014f4 <HAL_GetTick>
 800192c:	1b40      	subs	r0, r0, r5
 800192e:	280a      	cmp	r0, #10
 8001930:	d9f5      	bls.n	800191e <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001932:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001938:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800193a:	2305      	movs	r3, #5
 800193c:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 8001940:	2001      	movs	r0, #1
 8001942:	e7e1      	b.n	8001908 <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001944:	7e22      	ldrb	r2, [r4, #24]
 8001946:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	bf0c      	ite	eq
 800194c:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001950:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8001954:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8001956:	7e63      	ldrb	r3, [r4, #25]
 8001958:	2b01      	cmp	r3, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800195a:	6822      	ldr	r2, [r4, #0]
 800195c:	6813      	ldr	r3, [r2, #0]
 800195e:	bf0c      	ite	eq
 8001960:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001964:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 8001968:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 800196a:	7ea3      	ldrb	r3, [r4, #26]
 800196c:	2b01      	cmp	r3, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800196e:	6822      	ldr	r2, [r4, #0]
 8001970:	6813      	ldr	r3, [r2, #0]
 8001972:	bf0c      	ite	eq
 8001974:	f043 0320 	orreq.w	r3, r3, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001978:	f023 0320 	bicne.w	r3, r3, #32
 800197c:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 800197e:	7ee3      	ldrb	r3, [r4, #27]
 8001980:	2b01      	cmp	r3, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001982:	6822      	ldr	r2, [r4, #0]
 8001984:	6813      	ldr	r3, [r2, #0]
 8001986:	bf0c      	ite	eq
 8001988:	f023 0310 	biceq.w	r3, r3, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800198c:	f043 0310 	orrne.w	r3, r3, #16
 8001990:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001992:	7f23      	ldrb	r3, [r4, #28]
 8001994:	2b01      	cmp	r3, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001996:	6822      	ldr	r2, [r4, #0]
 8001998:	6813      	ldr	r3, [r2, #0]
 800199a:	bf0c      	ite	eq
 800199c:	f043 0308 	orreq.w	r3, r3, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019a0:	f023 0308 	bicne.w	r3, r3, #8
 80019a4:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80019a6:	7f63      	ldrb	r3, [r4, #29]
 80019a8:	2b01      	cmp	r3, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019aa:	6822      	ldr	r2, [r4, #0]
 80019ac:	6813      	ldr	r3, [r2, #0]
 80019ae:	bf0c      	ite	eq
 80019b0:	f043 0304 	orreq.w	r3, r3, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019b4:	f023 0304 	bicne.w	r3, r3, #4
 80019b8:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80019ba:	6821      	ldr	r1, [r4, #0]
 80019bc:	68a3      	ldr	r3, [r4, #8]
 80019be:	68e2      	ldr	r2, [r4, #12]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	6922      	ldr	r2, [r4, #16]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	6962      	ldr	r2, [r4, #20]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	6862      	ldr	r2, [r4, #4]
 80019cc:	3a01      	subs	r2, #1
 80019ce:	4313      	orrs	r3, r2
 80019d0:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80019d2:	2000      	movs	r0, #0
 80019d4:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 80019d6:	2301      	movs	r3, #1
 80019d8:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 80019dc:	e794      	b.n	8001908 <HAL_CAN_Init+0x44>
    return HAL_ERROR;
 80019de:	2001      	movs	r0, #1
}
 80019e0:	4770      	bx	lr
	...

080019e4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019e4:	4a06      	ldr	r2, [pc, #24]	; (8001a00 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80019e6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e8:	0200      	lsls	r0, r0, #8
 80019ea:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ee:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80019f2:	041b      	lsls	r3, r3, #16
 80019f4:	0c1b      	lsrs	r3, r3, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f6:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80019f8:	4b02      	ldr	r3, [pc, #8]	; (8001a04 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80019fa:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80019fc:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80019fe:	4770      	bx	lr
 8001a00:	e000ed00 	.word	0xe000ed00
 8001a04:	05fa0000 	.word	0x05fa0000

08001a08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a08:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a0a:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <HAL_NVIC_SetPriority+0x54>)
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a12:	f1c3 0407 	rsb	r4, r3, #7
 8001a16:	2c04      	cmp	r4, #4
 8001a18:	bf28      	it	cs
 8001a1a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a1c:	1d1d      	adds	r5, r3, #4
 8001a1e:	2d06      	cmp	r5, #6
 8001a20:	bf8c      	ite	hi
 8001a22:	3b03      	subhi	r3, #3
 8001a24:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a26:	f04f 35ff 	mov.w	r5, #4294967295
 8001a2a:	fa05 f404 	lsl.w	r4, r5, r4
 8001a2e:	ea21 0104 	bic.w	r1, r1, r4
 8001a32:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a34:	fa05 f303 	lsl.w	r3, r5, r3
 8001a38:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a3c:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001a3e:	2800      	cmp	r0, #0
 8001a40:	db05      	blt.n	8001a4e <HAL_NVIC_SetPriority+0x46>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a42:	0109      	lsls	r1, r1, #4
 8001a44:	b2c9      	uxtb	r1, r1
 8001a46:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_NVIC_SetPriority+0x58>)
 8001a48:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001a4a:	bc30      	pop	{r4, r5}
 8001a4c:	4770      	bx	lr
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4e:	f000 000f 	and.w	r0, r0, #15
 8001a52:	0109      	lsls	r1, r1, #4
 8001a54:	b2c9      	uxtb	r1, r1
 8001a56:	4b03      	ldr	r3, [pc, #12]	; (8001a64 <HAL_NVIC_SetPriority+0x5c>)
 8001a58:	5419      	strb	r1, [r3, r0]
 8001a5a:	e7f6      	b.n	8001a4a <HAL_NVIC_SetPriority+0x42>
 8001a5c:	e000ed00 	.word	0xe000ed00
 8001a60:	e000e400 	.word	0xe000e400
 8001a64:	e000ed14 	.word	0xe000ed14

08001a68 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a68:	3801      	subs	r0, #1
 8001a6a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001a6e:	d20a      	bcs.n	8001a86 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_SYSTICK_Config+0x24>)
 8001a72:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a74:	4a06      	ldr	r2, [pc, #24]	; (8001a90 <HAL_SYSTICK_Config+0x28>)
 8001a76:	21f0      	movs	r1, #240	; 0xf0
 8001a78:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a80:	2207      	movs	r2, #7
 8001a82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a84:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001a86:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	e000e010 	.word	0xe000e010
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a98:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a9a:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9c:	4f74      	ldr	r7, [pc, #464]	; (8001c70 <HAL_GPIO_Init+0x1dc>)
 8001a9e:	f8df c1dc 	ldr.w	ip, [pc, #476]	; 8001c7c <HAL_GPIO_Init+0x1e8>

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001aa2:	f8df e1dc 	ldr.w	lr, [pc, #476]	; 8001c80 <HAL_GPIO_Init+0x1ec>
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aa6:	4e73      	ldr	r6, [pc, #460]	; (8001c74 <HAL_GPIO_Init+0x1e0>)
 8001aa8:	e030      	b.n	8001b0c <HAL_GPIO_Init+0x78>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001aaa:	2200      	movs	r2, #0
 8001aac:	fa02 f209 	lsl.w	r2, r2, r9
 8001ab0:	ea42 020a 	orr.w	r2, r2, sl
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ab4:	f8c8 2008 	str.w	r2, [r8, #8]
        temp = EXTI->IMR;
 8001ab8:	6832      	ldr	r2, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 8001aba:	ea6f 0805 	mvn.w	r8, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001abe:	684c      	ldr	r4, [r1, #4]
 8001ac0:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001ac4:	bf0c      	ite	eq
 8001ac6:	ea08 0202 	andeq.w	r2, r8, r2
        {
          temp |= iocurrent;
 8001aca:	432a      	orrne	r2, r5
        }
        EXTI->IMR = temp;
 8001acc:	6032      	str	r2, [r6, #0]

        temp = EXTI->EMR;
 8001ace:	6872      	ldr	r2, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ad0:	684c      	ldr	r4, [r1, #4]
 8001ad2:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001ad6:	bf0c      	ite	eq
 8001ad8:	ea08 0202 	andeq.w	r2, r8, r2
        {
          temp |= iocurrent;
 8001adc:	432a      	orrne	r2, r5
        }
        EXTI->EMR = temp;
 8001ade:	6072      	str	r2, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ae0:	68b2      	ldr	r2, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ae2:	684c      	ldr	r4, [r1, #4]
 8001ae4:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001ae8:	bf0c      	ite	eq
 8001aea:	ea08 0202 	andeq.w	r2, r8, r2
        {
          temp |= iocurrent;
 8001aee:	432a      	orrne	r2, r5
        }
        EXTI->RTSR = temp;
 8001af0:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 8001af2:	68f2      	ldr	r2, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001af4:	684c      	ldr	r4, [r1, #4]
 8001af6:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8001afa:	bf0c      	ite	eq
 8001afc:	ea08 0202 	andeq.w	r2, r8, r2
        {
          temp |= iocurrent;
 8001b00:	432a      	orrne	r2, r5
        }
        EXTI->FTSR = temp;
 8001b02:	60f2      	str	r2, [r6, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b04:	3301      	adds	r3, #1
 8001b06:	2b10      	cmp	r3, #16
 8001b08:	f000 80af 	beq.w	8001c6a <HAL_GPIO_Init+0x1d6>
    ioposition = ((uint32_t)0x01) << position;
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b10:	680c      	ldr	r4, [r1, #0]
 8001b12:	ea02 0504 	and.w	r5, r2, r4
    if(iocurrent == ioposition)
 8001b16:	ea32 0404 	bics.w	r4, r2, r4
 8001b1a:	d1f3      	bne.n	8001b04 <HAL_GPIO_Init+0x70>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b1c:	684c      	ldr	r4, [r1, #4]
 8001b1e:	f024 0410 	bic.w	r4, r4, #16
 8001b22:	3c01      	subs	r4, #1
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b24:	2c01      	cmp	r4, #1
 8001b26:	d818      	bhi.n	8001b5a <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR; 
 8001b28:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b2a:	ea4f 0943 	mov.w	r9, r3, lsl #1
 8001b2e:	f04f 0803 	mov.w	r8, #3
 8001b32:	fa08 f809 	lsl.w	r8, r8, r9
 8001b36:	ea24 0808 	bic.w	r8, r4, r8
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b3a:	68cc      	ldr	r4, [r1, #12]
 8001b3c:	fa04 f409 	lsl.w	r4, r4, r9
 8001b40:	ea44 0408 	orr.w	r4, r4, r8
        GPIOx->OSPEEDR = temp;
 8001b44:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8001b46:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b48:	ea24 0802 	bic.w	r8, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001b4c:	684c      	ldr	r4, [r1, #4]
 8001b4e:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8001b52:	409a      	lsls	r2, r3
 8001b54:	ea42 0208 	orr.w	r2, r2, r8
        GPIOx->OTYPER = temp;
 8001b58:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8001b5a:	f8d0 900c 	ldr.w	r9, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b5e:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8001b62:	2403      	movs	r4, #3
 8001b64:	fa04 f408 	lsl.w	r4, r4, r8
 8001b68:	43e2      	mvns	r2, r4
 8001b6a:	ea29 0904 	bic.w	r9, r9, r4
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b6e:	688c      	ldr	r4, [r1, #8]
 8001b70:	fa04 f408 	lsl.w	r4, r4, r8
 8001b74:	ea44 0409 	orr.w	r4, r4, r9
      GPIOx->PUPDR = temp;
 8001b78:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b7a:	684c      	ldr	r4, [r1, #4]
 8001b7c:	f024 0410 	bic.w	r4, r4, #16
 8001b80:	2c02      	cmp	r4, #2
 8001b82:	d115      	bne.n	8001bb0 <HAL_GPIO_Init+0x11c>
        temp = GPIOx->AFR[position >> 3];
 8001b84:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8001b88:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8001b8c:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b90:	f003 0407 	and.w	r4, r3, #7
 8001b94:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8001b98:	240f      	movs	r4, #15
 8001b9a:	fa04 f40b 	lsl.w	r4, r4, fp
 8001b9e:	ea2a 0a04 	bic.w	sl, sl, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ba2:	690c      	ldr	r4, [r1, #16]
 8001ba4:	fa04 f40b 	lsl.w	r4, r4, fp
 8001ba8:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->AFR[position >> 3] = temp;
 8001bac:	f8c9 4020 	str.w	r4, [r9, #32]
      temp = GPIOx->MODER;
 8001bb0:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001bb2:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001bb4:	684a      	ldr	r2, [r1, #4]
 8001bb6:	f002 0203 	and.w	r2, r2, #3
 8001bba:	fa02 f208 	lsl.w	r2, r2, r8
 8001bbe:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001bc0:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bc2:	684a      	ldr	r2, [r1, #4]
 8001bc4:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001bc8:	d09c      	beq.n	8001b04 <HAL_GPIO_Init+0x70>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001bcc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bd0:	647a      	str	r2, [r7, #68]	; 0x44
 8001bd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001bd4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001bd8:	9201      	str	r2, [sp, #4]
 8001bda:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001bdc:	f023 0803 	bic.w	r8, r3, #3
 8001be0:	44e0      	add	r8, ip
 8001be2:	f8d8 4008 	ldr.w	r4, [r8, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001be6:	f003 0203 	and.w	r2, r3, #3
 8001bea:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8001bee:	220f      	movs	r2, #15
 8001bf0:	fa02 f209 	lsl.w	r2, r2, r9
 8001bf4:	ea24 0a02 	bic.w	sl, r4, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001bf8:	4570      	cmp	r0, lr
 8001bfa:	f43f af56 	beq.w	8001aaa <HAL_GPIO_Init+0x16>
 8001bfe:	4a1e      	ldr	r2, [pc, #120]	; (8001c78 <HAL_GPIO_Init+0x1e4>)
 8001c00:	4290      	cmp	r0, r2
 8001c02:	d022      	beq.n	8001c4a <HAL_GPIO_Init+0x1b6>
 8001c04:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c08:	4290      	cmp	r0, r2
 8001c0a:	d020      	beq.n	8001c4e <HAL_GPIO_Init+0x1ba>
 8001c0c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c10:	4290      	cmp	r0, r2
 8001c12:	d01e      	beq.n	8001c52 <HAL_GPIO_Init+0x1be>
 8001c14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c18:	4290      	cmp	r0, r2
 8001c1a:	d01c      	beq.n	8001c56 <HAL_GPIO_Init+0x1c2>
 8001c1c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c20:	4290      	cmp	r0, r2
 8001c22:	d01a      	beq.n	8001c5a <HAL_GPIO_Init+0x1c6>
 8001c24:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c28:	4290      	cmp	r0, r2
 8001c2a:	d018      	beq.n	8001c5e <HAL_GPIO_Init+0x1ca>
 8001c2c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c30:	4290      	cmp	r0, r2
 8001c32:	d016      	beq.n	8001c62 <HAL_GPIO_Init+0x1ce>
 8001c34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c38:	4290      	cmp	r0, r2
 8001c3a:	d014      	beq.n	8001c66 <HAL_GPIO_Init+0x1d2>
 8001c3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c40:	4290      	cmp	r0, r2
 8001c42:	bf0c      	ite	eq
 8001c44:	2209      	moveq	r2, #9
 8001c46:	220a      	movne	r2, #10
 8001c48:	e730      	b.n	8001aac <HAL_GPIO_Init+0x18>
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	e72e      	b.n	8001aac <HAL_GPIO_Init+0x18>
 8001c4e:	2202      	movs	r2, #2
 8001c50:	e72c      	b.n	8001aac <HAL_GPIO_Init+0x18>
 8001c52:	2203      	movs	r2, #3
 8001c54:	e72a      	b.n	8001aac <HAL_GPIO_Init+0x18>
 8001c56:	2204      	movs	r2, #4
 8001c58:	e728      	b.n	8001aac <HAL_GPIO_Init+0x18>
 8001c5a:	2205      	movs	r2, #5
 8001c5c:	e726      	b.n	8001aac <HAL_GPIO_Init+0x18>
 8001c5e:	2206      	movs	r2, #6
 8001c60:	e724      	b.n	8001aac <HAL_GPIO_Init+0x18>
 8001c62:	2207      	movs	r2, #7
 8001c64:	e722      	b.n	8001aac <HAL_GPIO_Init+0x18>
 8001c66:	2208      	movs	r2, #8
 8001c68:	e720      	b.n	8001aac <HAL_GPIO_Init+0x18>
      }
    }
  }
}
 8001c6a:	b003      	add	sp, #12
 8001c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40013c00 	.word	0x40013c00
 8001c78:	40020400 	.word	0x40020400
 8001c7c:	40013800 	.word	0x40013800
 8001c80:	40020000 	.word	0x40020000

08001c84 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c84:	b10a      	cbz	r2, 8001c8a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c86:	6181      	str	r1, [r0, #24]
 8001c88:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001c8a:	0409      	lsls	r1, r1, #16
 8001c8c:	6181      	str	r1, [r0, #24]
  }
}
 8001c8e:	4770      	bx	lr

08001c90 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001c90:	b530      	push	{r4, r5, lr}
 8001c92:	b083      	sub	sp, #12
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c94:	4b1b      	ldr	r3, [pc, #108]	; (8001d04 <HAL_PWREx_EnableOverDrive+0x74>)
 8001c96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c98:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c9c:	641a      	str	r2, [r3, #64]	; 0x40
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca4:	9301      	str	r3, [sp, #4]
 8001ca6:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001ca8:	4a17      	ldr	r2, [pc, #92]	; (8001d08 <HAL_PWREx_EnableOverDrive+0x78>)
 8001caa:	6813      	ldr	r3, [r2, #0]
 8001cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cb2:	f7ff fc1f 	bl	80014f4 <HAL_GetTick>
 8001cb6:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001cb8:	4d13      	ldr	r5, [pc, #76]	; (8001d08 <HAL_PWREx_EnableOverDrive+0x78>)
 8001cba:	686b      	ldr	r3, [r5, #4]
 8001cbc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001cc0:	d108      	bne.n	8001cd4 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001cc2:	f7ff fc17 	bl	80014f4 <HAL_GetTick>
 8001cc6:	1b00      	subs	r0, r0, r4
 8001cc8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001ccc:	d9f5      	bls.n	8001cba <HAL_PWREx_EnableOverDrive+0x2a>
    {
      return HAL_TIMEOUT;
 8001cce:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8001cd0:	b003      	add	sp, #12
 8001cd2:	bd30      	pop	{r4, r5, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001cd4:	4a0c      	ldr	r2, [pc, #48]	; (8001d08 <HAL_PWREx_EnableOverDrive+0x78>)
 8001cd6:	6813      	ldr	r3, [r2, #0]
 8001cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cdc:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8001cde:	f7ff fc09 	bl	80014f4 <HAL_GetTick>
 8001ce2:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ce4:	4d08      	ldr	r5, [pc, #32]	; (8001d08 <HAL_PWREx_EnableOverDrive+0x78>)
 8001ce6:	686b      	ldr	r3, [r5, #4]
 8001ce8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001cec:	d107      	bne.n	8001cfe <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001cee:	f7ff fc01 	bl	80014f4 <HAL_GetTick>
 8001cf2:	1b00      	subs	r0, r0, r4
 8001cf4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001cf8:	d9f5      	bls.n	8001ce6 <HAL_PWREx_EnableOverDrive+0x56>
      return HAL_TIMEOUT;
 8001cfa:	2003      	movs	r0, #3
 8001cfc:	e7e8      	b.n	8001cd0 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8001cfe:	2000      	movs	r0, #0
 8001d00:	e7e6      	b.n	8001cd0 <HAL_PWREx_EnableOverDrive+0x40>
 8001d02:	bf00      	nop
 8001d04:	40023800 	.word	0x40023800
 8001d08:	40007000 	.word	0x40007000

08001d0c <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d0c:	2800      	cmp	r0, #0
 8001d0e:	f000 8209 	beq.w	8002124 <HAL_RCC_OscConfig+0x418>
{
 8001d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d1a:	6803      	ldr	r3, [r0, #0]
 8001d1c:	f013 0f01 	tst.w	r3, #1
 8001d20:	d029      	beq.n	8001d76 <HAL_RCC_OscConfig+0x6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d22:	4ba8      	ldr	r3, [pc, #672]	; (8001fc4 <HAL_RCC_OscConfig+0x2b8>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 030c 	and.w	r3, r3, #12
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	d01a      	beq.n	8001d64 <HAL_RCC_OscConfig+0x58>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d2e:	4ba5      	ldr	r3, [pc, #660]	; (8001fc4 <HAL_RCC_OscConfig+0x2b8>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 030c 	and.w	r3, r3, #12
 8001d36:	2b08      	cmp	r3, #8
 8001d38:	d00f      	beq.n	8001d5a <HAL_RCC_OscConfig+0x4e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d3a:	6863      	ldr	r3, [r4, #4]
 8001d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d40:	d040      	beq.n	8001dc4 <HAL_RCC_OscConfig+0xb8>
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d154      	bne.n	8001df0 <HAL_RCC_OscConfig+0xe4>
 8001d46:	4b9f      	ldr	r3, [pc, #636]	; (8001fc4 <HAL_RCC_OscConfig+0x2b8>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	e039      	b.n	8001dce <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d5a:	4b9a      	ldr	r3, [pc, #616]	; (8001fc4 <HAL_RCC_OscConfig+0x2b8>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001d62:	d0ea      	beq.n	8001d3a <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d64:	4b97      	ldr	r3, [pc, #604]	; (8001fc4 <HAL_RCC_OscConfig+0x2b8>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001d6c:	d003      	beq.n	8001d76 <HAL_RCC_OscConfig+0x6a>
 8001d6e:	6863      	ldr	r3, [r4, #4]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 81d9 	beq.w	8002128 <HAL_RCC_OscConfig+0x41c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d76:	6823      	ldr	r3, [r4, #0]
 8001d78:	f013 0f02 	tst.w	r3, #2
 8001d7c:	d074      	beq.n	8001e68 <HAL_RCC_OscConfig+0x15c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d7e:	4b91      	ldr	r3, [pc, #580]	; (8001fc4 <HAL_RCC_OscConfig+0x2b8>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f013 0f0c 	tst.w	r3, #12
 8001d86:	d05e      	beq.n	8001e46 <HAL_RCC_OscConfig+0x13a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d88:	4b8e      	ldr	r3, [pc, #568]	; (8001fc4 <HAL_RCC_OscConfig+0x2b8>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 030c 	and.w	r3, r3, #12
 8001d90:	2b08      	cmp	r3, #8
 8001d92:	d053      	beq.n	8001e3c <HAL_RCC_OscConfig+0x130>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d94:	68e3      	ldr	r3, [r4, #12]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f000 8089 	beq.w	8001eae <HAL_RCC_OscConfig+0x1a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d9c:	4a89      	ldr	r2, [pc, #548]	; (8001fc4 <HAL_RCC_OscConfig+0x2b8>)
 8001d9e:	6813      	ldr	r3, [r2, #0]
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da6:	f7ff fba5 	bl	80014f4 <HAL_GetTick>
 8001daa:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dac:	4e85      	ldr	r6, [pc, #532]	; (8001fc4 <HAL_RCC_OscConfig+0x2b8>)
 8001dae:	6833      	ldr	r3, [r6, #0]
 8001db0:	f013 0f02 	tst.w	r3, #2
 8001db4:	d172      	bne.n	8001e9c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001db6:	f7ff fb9d 	bl	80014f4 <HAL_GetTick>
 8001dba:	1b40      	subs	r0, r0, r5
 8001dbc:	2802      	cmp	r0, #2
 8001dbe:	d9f6      	bls.n	8001dae <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_TIMEOUT;
 8001dc0:	2003      	movs	r0, #3
 8001dc2:	e1b6      	b.n	8002132 <HAL_RCC_OscConfig+0x426>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dc4:	4a7f      	ldr	r2, [pc, #508]	; (8001fc4 <HAL_RCC_OscConfig+0x2b8>)
 8001dc6:	6813      	ldr	r3, [r2, #0]
 8001dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dcc:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dce:	6863      	ldr	r3, [r4, #4]
 8001dd0:	b32b      	cbz	r3, 8001e1e <HAL_RCC_OscConfig+0x112>
        tickstart = HAL_GetTick();
 8001dd2:	f7ff fb8f 	bl	80014f4 <HAL_GetTick>
 8001dd6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd8:	4e7a      	ldr	r6, [pc, #488]	; (8001fc4 <HAL_RCC_OscConfig+0x2b8>)
 8001dda:	6833      	ldr	r3, [r6, #0]
 8001ddc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001de0:	d1c9      	bne.n	8001d76 <HAL_RCC_OscConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001de2:	f7ff fb87 	bl	80014f4 <HAL_GetTick>
 8001de6:	1b40      	subs	r0, r0, r5
 8001de8:	2864      	cmp	r0, #100	; 0x64
 8001dea:	d9f6      	bls.n	8001dda <HAL_RCC_OscConfig+0xce>
            return HAL_TIMEOUT;
 8001dec:	2003      	movs	r0, #3
 8001dee:	e1a0      	b.n	8002132 <HAL_RCC_OscConfig+0x426>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001df0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001df4:	d009      	beq.n	8001e0a <HAL_RCC_OscConfig+0xfe>
 8001df6:	4b73      	ldr	r3, [pc, #460]	; (8001fc4 <HAL_RCC_OscConfig+0x2b8>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	e7e1      	b.n	8001dce <HAL_RCC_OscConfig+0xc2>
 8001e0a:	4b6e      	ldr	r3, [pc, #440]	; (8001fc4 <HAL_RCC_OscConfig+0x2b8>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	e7d7      	b.n	8001dce <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8001e1e:	f7ff fb69 	bl	80014f4 <HAL_GetTick>
 8001e22:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e24:	4e67      	ldr	r6, [pc, #412]	; (8001fc4 <HAL_RCC_OscConfig+0x2b8>)
 8001e26:	6833      	ldr	r3, [r6, #0]
 8001e28:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001e2c:	d0a3      	beq.n	8001d76 <HAL_RCC_OscConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e2e:	f7ff fb61 	bl	80014f4 <HAL_GetTick>
 8001e32:	1b40      	subs	r0, r0, r5
 8001e34:	2864      	cmp	r0, #100	; 0x64
 8001e36:	d9f6      	bls.n	8001e26 <HAL_RCC_OscConfig+0x11a>
            return HAL_TIMEOUT;
 8001e38:	2003      	movs	r0, #3
 8001e3a:	e17a      	b.n	8002132 <HAL_RCC_OscConfig+0x426>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e3c:	4b61      	ldr	r3, [pc, #388]	; (8001fc4 <HAL_RCC_OscConfig+0x2b8>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001e44:	d1a6      	bne.n	8001d94 <HAL_RCC_OscConfig+0x88>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e46:	4b5f      	ldr	r3, [pc, #380]	; (8001fc4 <HAL_RCC_OscConfig+0x2b8>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f013 0f02 	tst.w	r3, #2
 8001e4e:	d003      	beq.n	8001e58 <HAL_RCC_OscConfig+0x14c>
 8001e50:	68e3      	ldr	r3, [r4, #12]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	f040 816a 	bne.w	800212c <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e58:	4a5a      	ldr	r2, [pc, #360]	; (8001fc4 <HAL_RCC_OscConfig+0x2b8>)
 8001e5a:	6813      	ldr	r3, [r2, #0]
 8001e5c:	6921      	ldr	r1, [r4, #16]
 8001e5e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001e62:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001e66:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e68:	6823      	ldr	r3, [r4, #0]
 8001e6a:	f013 0f08 	tst.w	r3, #8
 8001e6e:	d046      	beq.n	8001efe <HAL_RCC_OscConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e70:	6963      	ldr	r3, [r4, #20]
 8001e72:	b383      	cbz	r3, 8001ed6 <HAL_RCC_OscConfig+0x1ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e74:	4a53      	ldr	r2, [pc, #332]	; (8001fc4 <HAL_RCC_OscConfig+0x2b8>)
 8001e76:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e7e:	f7ff fb39 	bl	80014f4 <HAL_GetTick>
 8001e82:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e84:	4e4f      	ldr	r6, [pc, #316]	; (8001fc4 <HAL_RCC_OscConfig+0x2b8>)
 8001e86:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001e88:	f013 0f02 	tst.w	r3, #2
 8001e8c:	d137      	bne.n	8001efe <HAL_RCC_OscConfig+0x1f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e8e:	f7ff fb31 	bl	80014f4 <HAL_GetTick>
 8001e92:	1b40      	subs	r0, r0, r5
 8001e94:	2802      	cmp	r0, #2
 8001e96:	d9f6      	bls.n	8001e86 <HAL_RCC_OscConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8001e98:	2003      	movs	r0, #3
 8001e9a:	e14a      	b.n	8002132 <HAL_RCC_OscConfig+0x426>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e9c:	4a49      	ldr	r2, [pc, #292]	; (8001fc4 <HAL_RCC_OscConfig+0x2b8>)
 8001e9e:	6813      	ldr	r3, [r2, #0]
 8001ea0:	6921      	ldr	r1, [r4, #16]
 8001ea2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ea6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001eaa:	6013      	str	r3, [r2, #0]
 8001eac:	e7dc      	b.n	8001e68 <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 8001eae:	4a45      	ldr	r2, [pc, #276]	; (8001fc4 <HAL_RCC_OscConfig+0x2b8>)
 8001eb0:	6813      	ldr	r3, [r2, #0]
 8001eb2:	f023 0301 	bic.w	r3, r3, #1
 8001eb6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001eb8:	f7ff fb1c 	bl	80014f4 <HAL_GetTick>
 8001ebc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ebe:	4e41      	ldr	r6, [pc, #260]	; (8001fc4 <HAL_RCC_OscConfig+0x2b8>)
 8001ec0:	6833      	ldr	r3, [r6, #0]
 8001ec2:	f013 0f02 	tst.w	r3, #2
 8001ec6:	d0cf      	beq.n	8001e68 <HAL_RCC_OscConfig+0x15c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec8:	f7ff fb14 	bl	80014f4 <HAL_GetTick>
 8001ecc:	1b40      	subs	r0, r0, r5
 8001ece:	2802      	cmp	r0, #2
 8001ed0:	d9f6      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8001ed2:	2003      	movs	r0, #3
 8001ed4:	e12d      	b.n	8002132 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ed6:	4a3b      	ldr	r2, [pc, #236]	; (8001fc4 <HAL_RCC_OscConfig+0x2b8>)
 8001ed8:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8001eda:	f023 0301 	bic.w	r3, r3, #1
 8001ede:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee0:	f7ff fb08 	bl	80014f4 <HAL_GetTick>
 8001ee4:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ee6:	4e37      	ldr	r6, [pc, #220]	; (8001fc4 <HAL_RCC_OscConfig+0x2b8>)
 8001ee8:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001eea:	f013 0f02 	tst.w	r3, #2
 8001eee:	d006      	beq.n	8001efe <HAL_RCC_OscConfig+0x1f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ef0:	f7ff fb00 	bl	80014f4 <HAL_GetTick>
 8001ef4:	1b40      	subs	r0, r0, r5
 8001ef6:	2802      	cmp	r0, #2
 8001ef8:	d9f6      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x1dc>
        {
          return HAL_TIMEOUT;
 8001efa:	2003      	movs	r0, #3
 8001efc:	e119      	b.n	8002132 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001efe:	6823      	ldr	r3, [r4, #0]
 8001f00:	f013 0f04 	tst.w	r3, #4
 8001f04:	d07e      	beq.n	8002004 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f06:	4b2f      	ldr	r3, [pc, #188]	; (8001fc4 <HAL_RCC_OscConfig+0x2b8>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001f0e:	d10b      	bne.n	8001f28 <HAL_RCC_OscConfig+0x21c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f10:	4b2c      	ldr	r3, [pc, #176]	; (8001fc4 <HAL_RCC_OscConfig+0x2b8>)
 8001f12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f14:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f18:	641a      	str	r2, [r3, #64]	; 0x40
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f20:	9301      	str	r3, [sp, #4]
 8001f22:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001f24:	2501      	movs	r5, #1
 8001f26:	e000      	b.n	8001f2a <HAL_RCC_OscConfig+0x21e>
  FlagStatus pwrclkchanged = RESET;
 8001f28:	2500      	movs	r5, #0
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f2a:	4b27      	ldr	r3, [pc, #156]	; (8001fc8 <HAL_RCC_OscConfig+0x2bc>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001f32:	d00e      	beq.n	8001f52 <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f34:	68a3      	ldr	r3, [r4, #8]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d01f      	beq.n	8001f7a <HAL_RCC_OscConfig+0x26e>
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d135      	bne.n	8001faa <HAL_RCC_OscConfig+0x29e>
 8001f3e:	4b21      	ldr	r3, [pc, #132]	; (8001fc4 <HAL_RCC_OscConfig+0x2b8>)
 8001f40:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f42:	f022 0201 	bic.w	r2, r2, #1
 8001f46:	671a      	str	r2, [r3, #112]	; 0x70
 8001f48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f4a:	f022 0204 	bic.w	r2, r2, #4
 8001f4e:	671a      	str	r2, [r3, #112]	; 0x70
 8001f50:	e018      	b.n	8001f84 <HAL_RCC_OscConfig+0x278>
      PWR->CR1 |= PWR_CR1_DBP;
 8001f52:	4a1d      	ldr	r2, [pc, #116]	; (8001fc8 <HAL_RCC_OscConfig+0x2bc>)
 8001f54:	6813      	ldr	r3, [r2, #0]
 8001f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001f5c:	f7ff faca 	bl	80014f4 <HAL_GetTick>
 8001f60:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f62:	4f19      	ldr	r7, [pc, #100]	; (8001fc8 <HAL_RCC_OscConfig+0x2bc>)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001f6a:	d1e3      	bne.n	8001f34 <HAL_RCC_OscConfig+0x228>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f6c:	f7ff fac2 	bl	80014f4 <HAL_GetTick>
 8001f70:	1b80      	subs	r0, r0, r6
 8001f72:	2864      	cmp	r0, #100	; 0x64
 8001f74:	d9f6      	bls.n	8001f64 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8001f76:	2003      	movs	r0, #3
 8001f78:	e0db      	b.n	8002132 <HAL_RCC_OscConfig+0x426>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f7a:	4a12      	ldr	r2, [pc, #72]	; (8001fc4 <HAL_RCC_OscConfig+0x2b8>)
 8001f7c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001f7e:	f043 0301 	orr.w	r3, r3, #1
 8001f82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f84:	68a3      	ldr	r3, [r4, #8]
 8001f86:	b35b      	cbz	r3, 8001fe0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f88:	f7ff fab4 	bl	80014f4 <HAL_GetTick>
 8001f8c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f8e:	4f0d      	ldr	r7, [pc, #52]	; (8001fc4 <HAL_RCC_OscConfig+0x2b8>)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f90:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f96:	f013 0f02 	tst.w	r3, #2
 8001f9a:	d132      	bne.n	8002002 <HAL_RCC_OscConfig+0x2f6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f9c:	f7ff faaa 	bl	80014f4 <HAL_GetTick>
 8001fa0:	1b80      	subs	r0, r0, r6
 8001fa2:	4540      	cmp	r0, r8
 8001fa4:	d9f6      	bls.n	8001f94 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001fa6:	2003      	movs	r0, #3
 8001fa8:	e0c3      	b.n	8002132 <HAL_RCC_OscConfig+0x426>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001faa:	2b05      	cmp	r3, #5
 8001fac:	d00e      	beq.n	8001fcc <HAL_RCC_OscConfig+0x2c0>
 8001fae:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <HAL_RCC_OscConfig+0x2b8>)
 8001fb0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001fb2:	f022 0201 	bic.w	r2, r2, #1
 8001fb6:	671a      	str	r2, [r3, #112]	; 0x70
 8001fb8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001fba:	f022 0204 	bic.w	r2, r2, #4
 8001fbe:	671a      	str	r2, [r3, #112]	; 0x70
 8001fc0:	e7e0      	b.n	8001f84 <HAL_RCC_OscConfig+0x278>
 8001fc2:	bf00      	nop
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	40007000 	.word	0x40007000
 8001fcc:	4b60      	ldr	r3, [pc, #384]	; (8002150 <HAL_RCC_OscConfig+0x444>)
 8001fce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001fd0:	f042 0204 	orr.w	r2, r2, #4
 8001fd4:	671a      	str	r2, [r3, #112]	; 0x70
 8001fd6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001fd8:	f042 0201 	orr.w	r2, r2, #1
 8001fdc:	671a      	str	r2, [r3, #112]	; 0x70
 8001fde:	e7d1      	b.n	8001f84 <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe0:	f7ff fa88 	bl	80014f4 <HAL_GetTick>
 8001fe4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe6:	4f5a      	ldr	r7, [pc, #360]	; (8002150 <HAL_RCC_OscConfig+0x444>)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe8:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fee:	f013 0f02 	tst.w	r3, #2
 8001ff2:	d006      	beq.n	8002002 <HAL_RCC_OscConfig+0x2f6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff4:	f7ff fa7e 	bl	80014f4 <HAL_GetTick>
 8001ff8:	1b80      	subs	r0, r0, r6
 8001ffa:	4540      	cmp	r0, r8
 8001ffc:	d9f6      	bls.n	8001fec <HAL_RCC_OscConfig+0x2e0>
        {
          return HAL_TIMEOUT;
 8001ffe:	2003      	movs	r0, #3
 8002000:	e097      	b.n	8002132 <HAL_RCC_OscConfig+0x426>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002002:	b9fd      	cbnz	r5, 8002044 <HAL_RCC_OscConfig+0x338>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002004:	69a3      	ldr	r3, [r4, #24]
 8002006:	2b00      	cmp	r3, #0
 8002008:	f000 8092 	beq.w	8002130 <HAL_RCC_OscConfig+0x424>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800200c:	4a50      	ldr	r2, [pc, #320]	; (8002150 <HAL_RCC_OscConfig+0x444>)
 800200e:	6892      	ldr	r2, [r2, #8]
 8002010:	f002 020c 	and.w	r2, r2, #12
 8002014:	2a08      	cmp	r2, #8
 8002016:	d059      	beq.n	80020cc <HAL_RCC_OscConfig+0x3c0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002018:	2b02      	cmp	r3, #2
 800201a:	d019      	beq.n	8002050 <HAL_RCC_OscConfig+0x344>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800201c:	4a4c      	ldr	r2, [pc, #304]	; (8002150 <HAL_RCC_OscConfig+0x444>)
 800201e:	6813      	ldr	r3, [r2, #0]
 8002020:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002024:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002026:	f7ff fa65 	bl	80014f4 <HAL_GetTick>
 800202a:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800202c:	4d48      	ldr	r5, [pc, #288]	; (8002150 <HAL_RCC_OscConfig+0x444>)
 800202e:	682b      	ldr	r3, [r5, #0]
 8002030:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002034:	d048      	beq.n	80020c8 <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002036:	f7ff fa5d 	bl	80014f4 <HAL_GetTick>
 800203a:	1b00      	subs	r0, r0, r4
 800203c:	2802      	cmp	r0, #2
 800203e:	d9f6      	bls.n	800202e <HAL_RCC_OscConfig+0x322>
          {
            return HAL_TIMEOUT;
 8002040:	2003      	movs	r0, #3
 8002042:	e076      	b.n	8002132 <HAL_RCC_OscConfig+0x426>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002044:	4a42      	ldr	r2, [pc, #264]	; (8002150 <HAL_RCC_OscConfig+0x444>)
 8002046:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002048:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800204c:	6413      	str	r3, [r2, #64]	; 0x40
 800204e:	e7d9      	b.n	8002004 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 8002050:	4a3f      	ldr	r2, [pc, #252]	; (8002150 <HAL_RCC_OscConfig+0x444>)
 8002052:	6813      	ldr	r3, [r2, #0]
 8002054:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002058:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800205a:	f7ff fa4b 	bl	80014f4 <HAL_GetTick>
 800205e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002060:	4e3b      	ldr	r6, [pc, #236]	; (8002150 <HAL_RCC_OscConfig+0x444>)
 8002062:	6833      	ldr	r3, [r6, #0]
 8002064:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002068:	d006      	beq.n	8002078 <HAL_RCC_OscConfig+0x36c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800206a:	f7ff fa43 	bl	80014f4 <HAL_GetTick>
 800206e:	1b40      	subs	r0, r0, r5
 8002070:	2802      	cmp	r0, #2
 8002072:	d9f6      	bls.n	8002062 <HAL_RCC_OscConfig+0x356>
            return HAL_TIMEOUT;
 8002074:	2003      	movs	r0, #3
 8002076:	e05c      	b.n	8002132 <HAL_RCC_OscConfig+0x426>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002078:	69e3      	ldr	r3, [r4, #28]
 800207a:	6a22      	ldr	r2, [r4, #32]
 800207c:	4313      	orrs	r3, r2
 800207e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002080:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002084:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002086:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800208a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800208c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002090:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002092:	0852      	lsrs	r2, r2, #1
 8002094:	3a01      	subs	r2, #1
 8002096:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800209a:	4a2d      	ldr	r2, [pc, #180]	; (8002150 <HAL_RCC_OscConfig+0x444>)
 800209c:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800209e:	6813      	ldr	r3, [r2, #0]
 80020a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020a4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80020a6:	f7ff fa25 	bl	80014f4 <HAL_GetTick>
 80020aa:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ac:	4d28      	ldr	r5, [pc, #160]	; (8002150 <HAL_RCC_OscConfig+0x444>)
 80020ae:	682b      	ldr	r3, [r5, #0]
 80020b0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80020b4:	d106      	bne.n	80020c4 <HAL_RCC_OscConfig+0x3b8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b6:	f7ff fa1d 	bl	80014f4 <HAL_GetTick>
 80020ba:	1b00      	subs	r0, r0, r4
 80020bc:	2802      	cmp	r0, #2
 80020be:	d9f6      	bls.n	80020ae <HAL_RCC_OscConfig+0x3a2>
            return HAL_TIMEOUT;
 80020c0:	2003      	movs	r0, #3
 80020c2:	e036      	b.n	8002132 <HAL_RCC_OscConfig+0x426>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80020c4:	2000      	movs	r0, #0
 80020c6:	e034      	b.n	8002132 <HAL_RCC_OscConfig+0x426>
 80020c8:	2000      	movs	r0, #0
 80020ca:	e032      	b.n	8002132 <HAL_RCC_OscConfig+0x426>
      pll_config = RCC->PLLCFGR;
 80020cc:	4a20      	ldr	r2, [pc, #128]	; (8002150 <HAL_RCC_OscConfig+0x444>)
 80020ce:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d031      	beq.n	8002138 <HAL_RCC_OscConfig+0x42c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020d8:	69e1      	ldr	r1, [r4, #28]
 80020da:	428b      	cmp	r3, r1
 80020dc:	d12e      	bne.n	800213c <HAL_RCC_OscConfig+0x430>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020de:	f002 033f 	and.w	r3, r2, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020e2:	6a21      	ldr	r1, [r4, #32]
 80020e4:	428b      	cmp	r3, r1
 80020e6:	d12b      	bne.n	8002140 <HAL_RCC_OscConfig+0x434>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020ea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020ee:	4013      	ands	r3, r2
 80020f0:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 80020f4:	d126      	bne.n	8002144 <HAL_RCC_OscConfig+0x438>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80020f6:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 80020fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80020fc:	085b      	lsrs	r3, r3, #1
 80020fe:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002100:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8002104:	d120      	bne.n	8002148 <HAL_RCC_OscConfig+0x43c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002106:	f002 6370 	and.w	r3, r2, #251658240	; 0xf000000
 800210a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800210c:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 8002110:	d11c      	bne.n	800214c <HAL_RCC_OscConfig+0x440>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002112:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002114:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002118:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
  return HAL_OK;
 800211c:	bf14      	ite	ne
 800211e:	2001      	movne	r0, #1
 8002120:	2000      	moveq	r0, #0
 8002122:	e006      	b.n	8002132 <HAL_RCC_OscConfig+0x426>
    return HAL_ERROR;
 8002124:	2001      	movs	r0, #1
}
 8002126:	4770      	bx	lr
        return HAL_ERROR;
 8002128:	2001      	movs	r0, #1
 800212a:	e002      	b.n	8002132 <HAL_RCC_OscConfig+0x426>
        return HAL_ERROR;
 800212c:	2001      	movs	r0, #1
 800212e:	e000      	b.n	8002132 <HAL_RCC_OscConfig+0x426>
  return HAL_OK;
 8002130:	2000      	movs	r0, #0
}
 8002132:	b002      	add	sp, #8
 8002134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8002138:	2001      	movs	r0, #1
 800213a:	e7fa      	b.n	8002132 <HAL_RCC_OscConfig+0x426>
 800213c:	2001      	movs	r0, #1
 800213e:	e7f8      	b.n	8002132 <HAL_RCC_OscConfig+0x426>
 8002140:	2001      	movs	r0, #1
 8002142:	e7f6      	b.n	8002132 <HAL_RCC_OscConfig+0x426>
 8002144:	2001      	movs	r0, #1
 8002146:	e7f4      	b.n	8002132 <HAL_RCC_OscConfig+0x426>
 8002148:	2001      	movs	r0, #1
 800214a:	e7f2      	b.n	8002132 <HAL_RCC_OscConfig+0x426>
 800214c:	2001      	movs	r0, #1
 800214e:	e7f0      	b.n	8002132 <HAL_RCC_OscConfig+0x426>
 8002150:	40023800 	.word	0x40023800

08002154 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002156:	4b24      	ldr	r3, [pc, #144]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 030c 	and.w	r3, r3, #12
 800215e:	2b04      	cmp	r3, #4
 8002160:	d03d      	beq.n	80021de <HAL_RCC_GetSysClockFreq+0x8a>
 8002162:	2b08      	cmp	r3, #8
 8002164:	d13d      	bne.n	80021e2 <HAL_RCC_GetSysClockFreq+0x8e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002166:	4b20      	ldr	r3, [pc, #128]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002174:	d012      	beq.n	800219c <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002176:	4b1c      	ldr	r3, [pc, #112]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002178:	6859      	ldr	r1, [r3, #4]
 800217a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800217e:	2300      	movs	r3, #0
 8002180:	481a      	ldr	r0, [pc, #104]	; (80021ec <HAL_RCC_GetSysClockFreq+0x98>)
 8002182:	fba1 0100 	umull	r0, r1, r1, r0
 8002186:	f7fe f85f 	bl	8000248 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800218a:	4b17      	ldr	r3, [pc, #92]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x94>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002192:	3301      	adds	r3, #1
 8002194:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8002196:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800219a:	e023      	b.n	80021e4 <HAL_RCC_GetSysClockFreq+0x90>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800219c:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x94>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80021a4:	015c      	lsls	r4, r3, #5
 80021a6:	2500      	movs	r5, #0
 80021a8:	1ae4      	subs	r4, r4, r3
 80021aa:	f165 0500 	sbc.w	r5, r5, #0
 80021ae:	01ae      	lsls	r6, r5, #6
 80021b0:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 80021b4:	01a7      	lsls	r7, r4, #6
 80021b6:	1b38      	subs	r0, r7, r4
 80021b8:	eb66 0105 	sbc.w	r1, r6, r5
 80021bc:	00cc      	lsls	r4, r1, #3
 80021be:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 80021c2:	00c5      	lsls	r5, r0, #3
 80021c4:	18e8      	adds	r0, r5, r3
 80021c6:	f144 0100 	adc.w	r1, r4, #0
 80021ca:	028b      	lsls	r3, r1, #10
 80021cc:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80021d0:	0284      	lsls	r4, r0, #10
 80021d2:	4620      	mov	r0, r4
 80021d4:	4619      	mov	r1, r3
 80021d6:	2300      	movs	r3, #0
 80021d8:	f7fe f836 	bl	8000248 <__aeabi_uldivmod>
 80021dc:	e7d5      	b.n	800218a <HAL_RCC_GetSysClockFreq+0x36>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021de:	4803      	ldr	r0, [pc, #12]	; (80021ec <HAL_RCC_GetSysClockFreq+0x98>)
 80021e0:	e000      	b.n	80021e4 <HAL_RCC_GetSysClockFreq+0x90>
      sysclockfreq = HSI_VALUE;
 80021e2:	4803      	ldr	r0, [pc, #12]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x9c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80021e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40023800 	.word	0x40023800
 80021ec:	017d7840 	.word	0x017d7840
 80021f0:	00f42400 	.word	0x00f42400

080021f4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80021f4:	2800      	cmp	r0, #0
 80021f6:	f000 80a2 	beq.w	800233e <HAL_RCC_ClockConfig+0x14a>
{
 80021fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021fe:	460d      	mov	r5, r1
 8002200:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002202:	4b53      	ldr	r3, [pc, #332]	; (8002350 <HAL_RCC_ClockConfig+0x15c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 030f 	and.w	r3, r3, #15
 800220a:	428b      	cmp	r3, r1
 800220c:	d20b      	bcs.n	8002226 <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220e:	4a50      	ldr	r2, [pc, #320]	; (8002350 <HAL_RCC_ClockConfig+0x15c>)
 8002210:	6813      	ldr	r3, [r2, #0]
 8002212:	f023 030f 	bic.w	r3, r3, #15
 8002216:	430b      	orrs	r3, r1
 8002218:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800221a:	6813      	ldr	r3, [r2, #0]
 800221c:	f003 030f 	and.w	r3, r3, #15
 8002220:	428b      	cmp	r3, r1
 8002222:	f040 808e 	bne.w	8002342 <HAL_RCC_ClockConfig+0x14e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002226:	6823      	ldr	r3, [r4, #0]
 8002228:	f013 0f02 	tst.w	r3, #2
 800222c:	d017      	beq.n	800225e <HAL_RCC_ClockConfig+0x6a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800222e:	f013 0f04 	tst.w	r3, #4
 8002232:	d004      	beq.n	800223e <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002234:	4a47      	ldr	r2, [pc, #284]	; (8002354 <HAL_RCC_ClockConfig+0x160>)
 8002236:	6893      	ldr	r3, [r2, #8]
 8002238:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800223c:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800223e:	6823      	ldr	r3, [r4, #0]
 8002240:	f013 0f08 	tst.w	r3, #8
 8002244:	d004      	beq.n	8002250 <HAL_RCC_ClockConfig+0x5c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002246:	4a43      	ldr	r2, [pc, #268]	; (8002354 <HAL_RCC_ClockConfig+0x160>)
 8002248:	6893      	ldr	r3, [r2, #8]
 800224a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800224e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002250:	4a40      	ldr	r2, [pc, #256]	; (8002354 <HAL_RCC_ClockConfig+0x160>)
 8002252:	6893      	ldr	r3, [r2, #8]
 8002254:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002258:	68a1      	ldr	r1, [r4, #8]
 800225a:	430b      	orrs	r3, r1
 800225c:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800225e:	6823      	ldr	r3, [r4, #0]
 8002260:	f013 0f01 	tst.w	r3, #1
 8002264:	d031      	beq.n	80022ca <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002266:	6862      	ldr	r2, [r4, #4]
 8002268:	2a01      	cmp	r2, #1
 800226a:	d020      	beq.n	80022ae <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800226c:	2a02      	cmp	r2, #2
 800226e:	d025      	beq.n	80022bc <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002270:	4b38      	ldr	r3, [pc, #224]	; (8002354 <HAL_RCC_ClockConfig+0x160>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f013 0f02 	tst.w	r3, #2
 8002278:	d065      	beq.n	8002346 <HAL_RCC_ClockConfig+0x152>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800227a:	4936      	ldr	r1, [pc, #216]	; (8002354 <HAL_RCC_ClockConfig+0x160>)
 800227c:	688b      	ldr	r3, [r1, #8]
 800227e:	f023 0303 	bic.w	r3, r3, #3
 8002282:	4313      	orrs	r3, r2
 8002284:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002286:	f7ff f935 	bl	80014f4 <HAL_GetTick>
 800228a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800228c:	4f31      	ldr	r7, [pc, #196]	; (8002354 <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800228e:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	f003 030c 	and.w	r3, r3, #12
 8002298:	6862      	ldr	r2, [r4, #4]
 800229a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800229e:	d014      	beq.n	80022ca <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022a0:	f7ff f928 	bl	80014f4 <HAL_GetTick>
 80022a4:	1b80      	subs	r0, r0, r6
 80022a6:	4540      	cmp	r0, r8
 80022a8:	d9f3      	bls.n	8002292 <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 80022aa:	2003      	movs	r0, #3
 80022ac:	e045      	b.n	800233a <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ae:	4b29      	ldr	r3, [pc, #164]	; (8002354 <HAL_RCC_ClockConfig+0x160>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80022b6:	d1e0      	bne.n	800227a <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80022b8:	2001      	movs	r0, #1
 80022ba:	e03e      	b.n	800233a <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022bc:	4b25      	ldr	r3, [pc, #148]	; (8002354 <HAL_RCC_ClockConfig+0x160>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80022c4:	d1d9      	bne.n	800227a <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80022c6:	2001      	movs	r0, #1
 80022c8:	e037      	b.n	800233a <HAL_RCC_ClockConfig+0x146>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022ca:	4b21      	ldr	r3, [pc, #132]	; (8002350 <HAL_RCC_ClockConfig+0x15c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	42ab      	cmp	r3, r5
 80022d4:	d90a      	bls.n	80022ec <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d6:	4a1e      	ldr	r2, [pc, #120]	; (8002350 <HAL_RCC_ClockConfig+0x15c>)
 80022d8:	6813      	ldr	r3, [r2, #0]
 80022da:	f023 030f 	bic.w	r3, r3, #15
 80022de:	432b      	orrs	r3, r5
 80022e0:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e2:	6813      	ldr	r3, [r2, #0]
 80022e4:	f003 030f 	and.w	r3, r3, #15
 80022e8:	42ab      	cmp	r3, r5
 80022ea:	d12e      	bne.n	800234a <HAL_RCC_ClockConfig+0x156>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ec:	6823      	ldr	r3, [r4, #0]
 80022ee:	f013 0f04 	tst.w	r3, #4
 80022f2:	d006      	beq.n	8002302 <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022f4:	4a17      	ldr	r2, [pc, #92]	; (8002354 <HAL_RCC_ClockConfig+0x160>)
 80022f6:	6893      	ldr	r3, [r2, #8]
 80022f8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80022fc:	68e1      	ldr	r1, [r4, #12]
 80022fe:	430b      	orrs	r3, r1
 8002300:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002302:	6823      	ldr	r3, [r4, #0]
 8002304:	f013 0f08 	tst.w	r3, #8
 8002308:	d007      	beq.n	800231a <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800230a:	4a12      	ldr	r2, [pc, #72]	; (8002354 <HAL_RCC_ClockConfig+0x160>)
 800230c:	6893      	ldr	r3, [r2, #8]
 800230e:	6921      	ldr	r1, [r4, #16]
 8002310:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002314:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002318:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800231a:	f7ff ff1b 	bl	8002154 <HAL_RCC_GetSysClockFreq>
 800231e:	4b0d      	ldr	r3, [pc, #52]	; (8002354 <HAL_RCC_ClockConfig+0x160>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002326:	4a0c      	ldr	r2, [pc, #48]	; (8002358 <HAL_RCC_ClockConfig+0x164>)
 8002328:	5cd3      	ldrb	r3, [r2, r3]
 800232a:	40d8      	lsrs	r0, r3
 800232c:	4b0b      	ldr	r3, [pc, #44]	; (800235c <HAL_RCC_ClockConfig+0x168>)
 800232e:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002330:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <HAL_RCC_ClockConfig+0x16c>)
 8002332:	6818      	ldr	r0, [r3, #0]
 8002334:	f7ff f8a2 	bl	800147c <HAL_InitTick>
  return HAL_OK;
 8002338:	2000      	movs	r0, #0
}
 800233a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 800233e:	2001      	movs	r0, #1
}
 8002340:	4770      	bx	lr
      return HAL_ERROR;
 8002342:	2001      	movs	r0, #1
 8002344:	e7f9      	b.n	800233a <HAL_RCC_ClockConfig+0x146>
        return HAL_ERROR;
 8002346:	2001      	movs	r0, #1
 8002348:	e7f7      	b.n	800233a <HAL_RCC_ClockConfig+0x146>
      return HAL_ERROR;
 800234a:	2001      	movs	r0, #1
 800234c:	e7f5      	b.n	800233a <HAL_RCC_ClockConfig+0x146>
 800234e:	bf00      	nop
 8002350:	40023c00 	.word	0x40023c00
 8002354:	40023800 	.word	0x40023800
 8002358:	08003d64 	.word	0x08003d64
 800235c:	20000000 	.word	0x20000000
 8002360:	20000008 	.word	0x20000008

08002364 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002364:	4b04      	ldr	r3, [pc, #16]	; (8002378 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800236c:	4a03      	ldr	r2, [pc, #12]	; (800237c <HAL_RCC_GetPCLK1Freq+0x18>)
 800236e:	5cd3      	ldrb	r3, [r2, r3]
 8002370:	4a03      	ldr	r2, [pc, #12]	; (8002380 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002372:	6810      	ldr	r0, [r2, #0]
}
 8002374:	40d8      	lsrs	r0, r3
 8002376:	4770      	bx	lr
 8002378:	40023800 	.word	0x40023800
 800237c:	08003d74 	.word	0x08003d74
 8002380:	20000000 	.word	0x20000000

08002384 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002384:	4b04      	ldr	r3, [pc, #16]	; (8002398 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800238c:	4a03      	ldr	r2, [pc, #12]	; (800239c <HAL_RCC_GetPCLK2Freq+0x18>)
 800238e:	5cd3      	ldrb	r3, [r2, r3]
 8002390:	4a03      	ldr	r2, [pc, #12]	; (80023a0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002392:	6810      	ldr	r0, [r2, #0]
}
 8002394:	40d8      	lsrs	r0, r3
 8002396:	4770      	bx	lr
 8002398:	40023800 	.word	0x40023800
 800239c:	08003d74 	.word	0x08003d74
 80023a0:	20000000 	.word	0x20000000

080023a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80023a8:	b083      	sub	sp, #12
 80023aa:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80023ac:	6806      	ldr	r6, [r0, #0]
 80023ae:	f016 0601 	ands.w	r6, r6, #1
 80023b2:	d00c      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80023b4:	4bb8      	ldr	r3, [pc, #736]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80023bc:	609a      	str	r2, [r3, #8]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80023c2:	430a      	orrs	r2, r1
 80023c4:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80023c6:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80023c8:	fab6 f686 	clz	r6, r6
 80023cc:	0976      	lsrs	r6, r6, #5
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80023ce:	6825      	ldr	r5, [r4, #0]
 80023d0:	f415 2500 	ands.w	r5, r5, #524288	; 0x80000
 80023d4:	d010      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x54>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023d6:	4ab0      	ldr	r2, [pc, #704]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80023d8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80023dc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80023e0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80023e2:	430b      	orrs	r3, r1
 80023e4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80023e8:	6be5      	ldr	r5, [r4, #60]	; 0x3c
    {
      plli2sused = 1;
 80023ea:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 80023ee:	bf08      	it	eq
 80023f0:	2601      	moveq	r6, #1
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80023f2:	fab5 f585 	clz	r5, r5
 80023f6:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80023f8:	6823      	ldr	r3, [r4, #0]
 80023fa:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80023fe:	d010      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002400:	4aa5      	ldr	r2, [pc, #660]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002402:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002406:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800240a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800240c:	430b      	orrs	r3, r1
 800240e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002412:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002414:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002418:	f000 813c 	beq.w	8002694 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800241c:	2b00      	cmp	r3, #0
 800241e:	bf08      	it	eq
 8002420:	2501      	moveq	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002422:	6823      	ldr	r3, [r4, #0]
  {
      plli2sused = 1;
 8002424:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002428:	bf18      	it	ne
 800242a:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800242c:	f013 0f20 	tst.w	r3, #32
 8002430:	f040 8134 	bne.w	800269c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002434:	6823      	ldr	r3, [r4, #0]
 8002436:	f013 0f10 	tst.w	r3, #16
 800243a:	d00c      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800243c:	4b96      	ldr	r3, [pc, #600]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800243e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002442:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002446:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800244a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800244e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002450:	430a      	orrs	r2, r1
 8002452:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002456:	6823      	ldr	r3, [r4, #0]
 8002458:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800245c:	d008      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800245e:	4a8e      	ldr	r2, [pc, #568]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002460:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002464:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002468:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800246a:	430b      	orrs	r3, r1
 800246c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002470:	6823      	ldr	r3, [r4, #0]
 8002472:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002476:	d008      	beq.n	800248a <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002478:	4a87      	ldr	r2, [pc, #540]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800247a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800247e:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8002482:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002484:	430b      	orrs	r3, r1
 8002486:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800248a:	6823      	ldr	r3, [r4, #0]
 800248c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002490:	d008      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002492:	4a81      	ldr	r2, [pc, #516]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002494:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002498:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800249c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800249e:	430b      	orrs	r3, r1
 80024a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80024a4:	6823      	ldr	r3, [r4, #0]
 80024a6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80024aa:	d008      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80024ac:	4a7a      	ldr	r2, [pc, #488]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024ae:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80024b2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80024b6:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80024b8:	430b      	orrs	r3, r1
 80024ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024be:	6823      	ldr	r3, [r4, #0]
 80024c0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80024c4:	d008      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024c6:	4a74      	ldr	r2, [pc, #464]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024c8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80024cc:	f023 0303 	bic.w	r3, r3, #3
 80024d0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80024d2:	430b      	orrs	r3, r1
 80024d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024d8:	6823      	ldr	r3, [r4, #0]
 80024da:	f013 0f80 	tst.w	r3, #128	; 0x80
 80024de:	d008      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024e0:	4a6d      	ldr	r2, [pc, #436]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024e2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80024e6:	f023 030c 	bic.w	r3, r3, #12
 80024ea:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80024ec:	430b      	orrs	r3, r1
 80024ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024f2:	6823      	ldr	r3, [r4, #0]
 80024f4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80024f8:	d008      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024fa:	4a67      	ldr	r2, [pc, #412]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024fc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002500:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002504:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002506:	430b      	orrs	r3, r1
 8002508:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800250c:	6823      	ldr	r3, [r4, #0]
 800250e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002512:	d008      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002514:	4a60      	ldr	r2, [pc, #384]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002516:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800251a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800251e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002520:	430b      	orrs	r3, r1
 8002522:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002526:	6823      	ldr	r3, [r4, #0]
 8002528:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800252c:	d008      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800252e:	4a5a      	ldr	r2, [pc, #360]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002530:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002534:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002538:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800253a:	430b      	orrs	r3, r1
 800253c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002540:	6823      	ldr	r3, [r4, #0]
 8002542:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002546:	d008      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002548:	4a53      	ldr	r2, [pc, #332]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800254a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800254e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002552:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002554:	430b      	orrs	r3, r1
 8002556:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800255a:	6823      	ldr	r3, [r4, #0]
 800255c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002560:	d008      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002562:	4a4d      	ldr	r2, [pc, #308]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002564:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002568:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800256c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800256e:	430b      	orrs	r3, r1
 8002570:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002574:	6823      	ldr	r3, [r4, #0]
 8002576:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800257a:	d008      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800257c:	4a46      	ldr	r2, [pc, #280]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800257e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002582:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002586:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8002588:	430b      	orrs	r3, r1
 800258a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800258e:	6823      	ldr	r3, [r4, #0]
 8002590:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002594:	d008      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002596:	4a40      	ldr	r2, [pc, #256]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002598:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800259c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80025a0:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80025a2:	430b      	orrs	r3, r1
 80025a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80025a8:	6823      	ldr	r3, [r4, #0]
 80025aa:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80025ae:	d00d      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80025b0:	4a39      	ldr	r2, [pc, #228]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025b2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80025b6:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80025ba:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80025bc:	430b      	orrs	r3, r1
 80025be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80025c2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    {
      pllsaiused = 1;
 80025c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025c8:	bf08      	it	eq
 80025ca:	2501      	moveq	r5, #1
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80025cc:	6823      	ldr	r3, [r4, #0]
  {
    pllsaiused = 1;
 80025ce:	f013 0f08 	tst.w	r3, #8
 80025d2:	bf18      	it	ne
 80025d4:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80025d6:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80025da:	d008      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025dc:	4a2e      	ldr	r2, [pc, #184]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025de:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80025e2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80025e6:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80025e8:	430b      	orrs	r3, r1
 80025ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80025ee:	6823      	ldr	r3, [r4, #0]
 80025f0:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80025f4:	d009      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80025f6:	4a28      	ldr	r2, [pc, #160]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025f8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80025fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002600:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002604:	430b      	orrs	r3, r1
 8002606:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800260a:	6823      	ldr	r3, [r4, #0]
 800260c:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8002610:	d009      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x282>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002612:	4a21      	ldr	r2, [pc, #132]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002614:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002618:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800261c:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8002620:	430b      	orrs	r3, r1
 8002622:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002626:	6823      	ldr	r3, [r4, #0]
 8002628:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800262c:	d009      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800262e:	4a1a      	ldr	r2, [pc, #104]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002630:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002634:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002638:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800263c:	430b      	orrs	r3, r1
 800263e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002642:	6823      	ldr	r3, [r4, #0]
 8002644:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002648:	d009      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800264a:	4a13      	ldr	r2, [pc, #76]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800264c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002650:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002654:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8002658:	430b      	orrs	r3, r1
 800265a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800265e:	2e01      	cmp	r6, #1
 8002660:	d004      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8002662:	6823      	ldr	r3, [r4, #0]
 8002664:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002668:	f000 8100 	beq.w	800286c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800266c:	4a0a      	ldr	r2, [pc, #40]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800266e:	6813      	ldr	r3, [r2, #0]
 8002670:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002674:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002676:	f7fe ff3d 	bl	80014f4 <HAL_GetTick>
 800267a:	4606      	mov	r6, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800267c:	4f06      	ldr	r7, [pc, #24]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002684:	d074      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002686:	f7fe ff35 	bl	80014f4 <HAL_GetTick>
 800268a:	1b80      	subs	r0, r0, r6
 800268c:	2864      	cmp	r0, #100	; 0x64
 800268e:	d9f6      	bls.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002690:	2003      	movs	r0, #3
 8002692:	e0ee      	b.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
      plli2sused = 1;
 8002694:	2601      	movs	r6, #1
 8002696:	e6c4      	b.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8002698:	40023800 	.word	0x40023800
    __HAL_RCC_PWR_CLK_ENABLE();
 800269c:	4bbb      	ldr	r3, [pc, #748]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x5e8>)
 800269e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80026a4:	641a      	str	r2, [r3, #64]	; 0x40
 80026a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ac:	9301      	str	r3, [sp, #4]
 80026ae:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80026b0:	4ab7      	ldr	r2, [pc, #732]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80026b2:	6813      	ldr	r3, [r2, #0]
 80026b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80026ba:	f7fe ff1b 	bl	80014f4 <HAL_GetTick>
 80026be:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80026c0:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 8002990 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
 80026c4:	f8d8 3000 	ldr.w	r3, [r8]
 80026c8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80026cc:	d106      	bne.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x338>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ce:	f7fe ff11 	bl	80014f4 <HAL_GetTick>
 80026d2:	1bc0      	subs	r0, r0, r7
 80026d4:	2864      	cmp	r0, #100	; 0x64
 80026d6:	d9f5      	bls.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x320>
        return HAL_TIMEOUT;
 80026d8:	2003      	movs	r0, #3
 80026da:	e0ca      	b.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026dc:	4bab      	ldr	r3, [pc, #684]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x5e8>)
 80026de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026e0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80026e4:	d015      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80026e6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80026e8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d010      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026f0:	4ba6      	ldr	r3, [pc, #664]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x5e8>)
 80026f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80026f4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80026f8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80026fa:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80026fe:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002700:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002702:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8002706:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8002708:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800270a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800270c:	f013 0f01 	tst.w	r3, #1
 8002710:	d112      	bne.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x394>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002712:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002714:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002718:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800271c:	d01f      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800271e:	4a9b      	ldr	r2, [pc, #620]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x5e8>)
 8002720:	6893      	ldr	r3, [r2, #8]
 8002722:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002726:	6093      	str	r3, [r2, #8]
 8002728:	4a98      	ldr	r2, [pc, #608]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x5e8>)
 800272a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800272c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800272e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002732:	430b      	orrs	r3, r1
 8002734:	6713      	str	r3, [r2, #112]	; 0x70
 8002736:	e67d      	b.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x90>
        tickstart = HAL_GetTick();
 8002738:	f7fe fedc 	bl	80014f4 <HAL_GetTick>
 800273c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800273e:	f8df 824c 	ldr.w	r8, [pc, #588]	; 800298c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002742:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002746:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800274a:	f013 0f02 	tst.w	r3, #2
 800274e:	d1e0      	bne.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x36e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002750:	f7fe fed0 	bl	80014f4 <HAL_GetTick>
 8002754:	1bc0      	subs	r0, r0, r7
 8002756:	4548      	cmp	r0, r9
 8002758:	d9f5      	bls.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
            return HAL_TIMEOUT;
 800275a:	2003      	movs	r0, #3
 800275c:	e089      	b.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800275e:	488b      	ldr	r0, [pc, #556]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x5e8>)
 8002760:	6882      	ldr	r2, [r0, #8]
 8002762:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8002766:	498b      	ldr	r1, [pc, #556]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002768:	4019      	ands	r1, r3
 800276a:	430a      	orrs	r2, r1
 800276c:	6082      	str	r2, [r0, #8]
 800276e:	e7db      	b.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x384>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002770:	6823      	ldr	r3, [r4, #0]
 8002772:	f013 0f01 	tst.w	r3, #1
 8002776:	d013      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8002778:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800277a:	b98b      	cbnz	r3, 80027a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800277c:	4a83      	ldr	r2, [pc, #524]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x5e8>)
 800277e:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002782:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002786:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800278a:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800278e:	430b      	orrs	r3, r1
 8002790:	6861      	ldr	r1, [r4, #4]
 8002792:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002796:	68a1      	ldr	r1, [r4, #8]
 8002798:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800279c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80027a0:	6823      	ldr	r3, [r4, #0]
 80027a2:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80027a6:	d003      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80027a8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80027aa:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80027ae:	d006      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80027b0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80027b4:	d01e      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x450>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80027b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80027b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027bc:	d11a      	bne.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x450>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80027be:	4a73      	ldr	r2, [pc, #460]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x5e8>)
 80027c0:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80027c4:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80027c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027cc:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80027d0:	430b      	orrs	r3, r1
 80027d2:	6861      	ldr	r1, [r4, #4]
 80027d4:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80027d8:	68e1      	ldr	r1, [r4, #12]
 80027da:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80027de:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80027e2:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80027e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027e8:	3b01      	subs	r3, #1
 80027ea:	f021 011f 	bic.w	r1, r1, #31
 80027ee:	430b      	orrs	r3, r1
 80027f0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80027f4:	6823      	ldr	r3, [r4, #0]
 80027f6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80027fa:	d011      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80027fc:	4a63      	ldr	r2, [pc, #396]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x5e8>)
 80027fe:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002802:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002806:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800280a:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 800280e:	430b      	orrs	r3, r1
 8002810:	6861      	ldr	r1, [r4, #4]
 8002812:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002816:	6921      	ldr	r1, [r4, #16]
 8002818:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800281c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002820:	6823      	ldr	r3, [r4, #0]
 8002822:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002826:	d00d      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002828:	6862      	ldr	r2, [r4, #4]
 800282a:	6923      	ldr	r3, [r4, #16]
 800282c:	041b      	lsls	r3, r3, #16
 800282e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002832:	68e2      	ldr	r2, [r4, #12]
 8002834:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002838:	68a2      	ldr	r2, [r4, #8]
 800283a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800283e:	4a53      	ldr	r2, [pc, #332]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x5e8>)
 8002840:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002844:	4a51      	ldr	r2, [pc, #324]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x5e8>)
 8002846:	6813      	ldr	r3, [r2, #0]
 8002848:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800284c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800284e:	f7fe fe51 	bl	80014f4 <HAL_GetTick>
 8002852:	4606      	mov	r6, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002854:	4f4d      	ldr	r7, [pc, #308]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x5e8>)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800285c:	d106      	bne.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800285e:	f7fe fe49 	bl	80014f4 <HAL_GetTick>
 8002862:	1b80      	subs	r0, r0, r6
 8002864:	2864      	cmp	r0, #100	; 0x64
 8002866:	d9f6      	bls.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002868:	2003      	movs	r0, #3
 800286a:	e002      	b.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800286c:	2d01      	cmp	r5, #1
 800286e:	d003      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002870:	2000      	movs	r0, #0
}
 8002872:	b003      	add	sp, #12
 8002874:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 8002878:	4a44      	ldr	r2, [pc, #272]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x5e8>)
 800287a:	6813      	ldr	r3, [r2, #0]
 800287c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002880:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002882:	f7fe fe37 	bl	80014f4 <HAL_GetTick>
 8002886:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002888:	4e40      	ldr	r6, [pc, #256]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x5e8>)
 800288a:	6833      	ldr	r3, [r6, #0]
 800288c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8002890:	d006      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002892:	f7fe fe2f 	bl	80014f4 <HAL_GetTick>
 8002896:	1b40      	subs	r0, r0, r5
 8002898:	2864      	cmp	r0, #100	; 0x64
 800289a:	d9f6      	bls.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        return HAL_TIMEOUT;
 800289c:	2003      	movs	r0, #3
 800289e:	e7e8      	b.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80028a0:	6823      	ldr	r3, [r4, #0]
 80028a2:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80028a6:	d001      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x508>
 80028a8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80028aa:	b122      	cbz	r2, 80028b6 <HAL_RCCEx_PeriphCLKConfig+0x512>
 80028ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80028b0:	d01d      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x54a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80028b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80028b4:	b9db      	cbnz	r3, 80028ee <HAL_RCCEx_PeriphCLKConfig+0x54a>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80028b6:	4a35      	ldr	r2, [pc, #212]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x5e8>)
 80028b8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80028bc:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80028c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028c4:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80028c8:	430b      	orrs	r3, r1
 80028ca:	6961      	ldr	r1, [r4, #20]
 80028cc:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80028d0:	69a1      	ldr	r1, [r4, #24]
 80028d2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80028d6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80028da:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80028de:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80028e0:	3901      	subs	r1, #1
 80028e2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80028e6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80028ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80028ee:	6823      	ldr	r3, [r4, #0]
 80028f0:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80028f4:	d003      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x55a>
 80028f6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80028f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028fc:	d031      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80028fe:	6823      	ldr	r3, [r4, #0]
 8002900:	f013 0f08 	tst.w	r3, #8
 8002904:	d019      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x596>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002906:	4a21      	ldr	r2, [pc, #132]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x5e8>)
 8002908:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800290c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002910:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002914:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8002918:	430b      	orrs	r3, r1
 800291a:	6961      	ldr	r1, [r4, #20]
 800291c:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002920:	69e1      	ldr	r1, [r4, #28]
 8002922:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002926:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800292a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800292e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002932:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002934:	430b      	orrs	r3, r1
 8002936:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 800293a:	4a14      	ldr	r2, [pc, #80]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x5e8>)
 800293c:	6813      	ldr	r3, [r2, #0]
 800293e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002942:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002944:	f7fe fdd6 	bl	80014f4 <HAL_GetTick>
 8002948:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800294a:	4d10      	ldr	r5, [pc, #64]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x5e8>)
 800294c:	682b      	ldr	r3, [r5, #0]
 800294e:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8002952:	d119      	bne.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002954:	f7fe fdce 	bl	80014f4 <HAL_GetTick>
 8002958:	1b00      	subs	r0, r0, r4
 800295a:	2864      	cmp	r0, #100	; 0x64
 800295c:	d9f6      	bls.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        return HAL_TIMEOUT;
 800295e:	2003      	movs	r0, #3
 8002960:	e787      	b.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002962:	4a0a      	ldr	r2, [pc, #40]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x5e8>)
 8002964:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002968:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800296c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002970:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002974:	430b      	orrs	r3, r1
 8002976:	6961      	ldr	r1, [r4, #20]
 8002978:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800297c:	6a21      	ldr	r1, [r4, #32]
 800297e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002982:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002986:	e7ba      	b.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x55a>
  return HAL_OK;
 8002988:	2000      	movs	r0, #0
 800298a:	e772      	b.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800298c:	40023800 	.word	0x40023800
 8002990:	40007000 	.word	0x40007000
 8002994:	0ffffcff 	.word	0x0ffffcff

08002998 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002998:	2800      	cmp	r0, #0
 800299a:	d06d      	beq.n	8002a78 <HAL_SPI_Init+0xe0>
{
 800299c:	b510      	push	{r4, lr}
 800299e:	4604      	mov	r4, r0
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80029a2:	b933      	cbnz	r3, 80029b2 <HAL_SPI_Init+0x1a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029a4:	6843      	ldr	r3, [r0, #4]
 80029a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029aa:	d005      	beq.n	80029b8 <HAL_SPI_Init+0x20>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029ac:	2300      	movs	r3, #0
 80029ae:	61c3      	str	r3, [r0, #28]
 80029b0:	e002      	b.n	80029b8 <HAL_SPI_Init+0x20>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029b2:	2300      	movs	r3, #0
 80029b4:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029b6:	6143      	str	r3, [r0, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029b8:	2300      	movs	r3, #0
 80029ba:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029bc:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d053      	beq.n	8002a6c <HAL_SPI_Init+0xd4>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029c4:	2302      	movs	r3, #2
 80029c6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029ca:	6822      	ldr	r2, [r4, #0]
 80029cc:	6813      	ldr	r3, [r2, #0]
 80029ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029d2:	6013      	str	r3, [r2, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029d4:	68e3      	ldr	r3, [r4, #12]
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80029d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029da:	bf8c      	ite	hi
 80029dc:	2100      	movhi	r1, #0
 80029de:	f44f 5180 	movls.w	r1, #4096	; 0x1000
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80029e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029ea:	d001      	beq.n	80029f0 <HAL_SPI_Init+0x58>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029ec:	2300      	movs	r3, #0
 80029ee:	62a3      	str	r3, [r4, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029f0:	6822      	ldr	r2, [r4, #0]
 80029f2:	6863      	ldr	r3, [r4, #4]
 80029f4:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80029f8:	68a0      	ldr	r0, [r4, #8]
 80029fa:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 80029fe:	4303      	orrs	r3, r0
 8002a00:	6920      	ldr	r0, [r4, #16]
 8002a02:	f000 0002 	and.w	r0, r0, #2
 8002a06:	4303      	orrs	r3, r0
 8002a08:	6960      	ldr	r0, [r4, #20]
 8002a0a:	f000 0001 	and.w	r0, r0, #1
 8002a0e:	4303      	orrs	r3, r0
 8002a10:	69a0      	ldr	r0, [r4, #24]
 8002a12:	f400 7000 	and.w	r0, r0, #512	; 0x200
 8002a16:	4303      	orrs	r3, r0
 8002a18:	69e0      	ldr	r0, [r4, #28]
 8002a1a:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8002a1e:	4303      	orrs	r3, r0
 8002a20:	6a20      	ldr	r0, [r4, #32]
 8002a22:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8002a26:	4303      	orrs	r3, r0
 8002a28:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002a2a:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8002a2e:	4303      	orrs	r3, r0
 8002a30:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002a32:	6822      	ldr	r2, [r4, #0]
 8002a34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a36:	f003 0310 	and.w	r3, r3, #16
 8002a3a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002a3c:	f000 0008 	and.w	r0, r0, #8
 8002a40:	4303      	orrs	r3, r0
 8002a42:	68e0      	ldr	r0, [r4, #12]
 8002a44:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
 8002a48:	4303      	orrs	r3, r0
 8002a4a:	8b60      	ldrh	r0, [r4, #26]
 8002a4c:	f000 0004 	and.w	r0, r0, #4
 8002a50:	4303      	orrs	r3, r0
 8002a52:	430b      	orrs	r3, r1
 8002a54:	6053      	str	r3, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a56:	6822      	ldr	r2, [r4, #0]
 8002a58:	69d3      	ldr	r3, [r2, #28]
 8002a5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a5e:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a60:	2000      	movs	r0, #0
 8002a62:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002a64:	2301      	movs	r3, #1
 8002a66:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
}
 8002a6a:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8002a6c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8002a70:	4620      	mov	r0, r4
 8002a72:	f7fe faad 	bl	8000fd0 <HAL_SPI_MspInit>
 8002a76:	e7a5      	b.n	80029c4 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8002a78:	2001      	movs	r0, #1
}
 8002a7a:	4770      	bx	lr

08002a7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a7c:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a7e:	6a03      	ldr	r3, [r0, #32]
 8002a80:	f023 0301 	bic.w	r3, r3, #1
 8002a84:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a86:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a88:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a8a:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a8c:	4a10      	ldr	r2, [pc, #64]	; (8002ad0 <TIM_OC1_SetConfig+0x54>)
 8002a8e:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a90:	680d      	ldr	r5, [r1, #0]
 8002a92:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a94:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a98:	688d      	ldr	r5, [r1, #8]
 8002a9a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a9c:	4d0d      	ldr	r5, [pc, #52]	; (8002ad4 <TIM_OC1_SetConfig+0x58>)
 8002a9e:	42a8      	cmp	r0, r5
 8002aa0:	d003      	beq.n	8002aaa <TIM_OC1_SetConfig+0x2e>
 8002aa2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002aa6:	42a8      	cmp	r0, r5
 8002aa8:	d10b      	bne.n	8002ac2 <TIM_OC1_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002aaa:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002aae:	68cd      	ldr	r5, [r1, #12]
 8002ab0:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ab2:	f023 0304 	bic.w	r3, r3, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ab6:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002aba:	694d      	ldr	r5, [r1, #20]
 8002abc:	698e      	ldr	r6, [r1, #24]
 8002abe:	4335      	orrs	r5, r6
 8002ac0:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ac2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ac4:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ac6:	684a      	ldr	r2, [r1, #4]
 8002ac8:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002aca:	6203      	str	r3, [r0, #32]
}
 8002acc:	bc70      	pop	{r4, r5, r6}
 8002ace:	4770      	bx	lr
 8002ad0:	fffeff8c 	.word	0xfffeff8c
 8002ad4:	40010000 	.word	0x40010000

08002ad8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ad8:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ada:	6a03      	ldr	r3, [r0, #32]
 8002adc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ae0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ae2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ae4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ae6:	69c5      	ldr	r5, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ae8:	4a12      	ldr	r2, [pc, #72]	; (8002b34 <TIM_OC3_SetConfig+0x5c>)
 8002aea:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002aec:	680d      	ldr	r5, [r1, #0]
 8002aee:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002af0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002af4:	688d      	ldr	r5, [r1, #8]
 8002af6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002afa:	4d0f      	ldr	r5, [pc, #60]	; (8002b38 <TIM_OC3_SetConfig+0x60>)
 8002afc:	42a8      	cmp	r0, r5
 8002afe:	d003      	beq.n	8002b08 <TIM_OC3_SetConfig+0x30>
 8002b00:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002b04:	42a8      	cmp	r0, r5
 8002b06:	d10d      	bne.n	8002b24 <TIM_OC3_SetConfig+0x4c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b0c:	68cd      	ldr	r5, [r1, #12]
 8002b0e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b16:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b1a:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b1c:	698e      	ldr	r6, [r1, #24]
 8002b1e:	4335      	orrs	r5, r6
 8002b20:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b24:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b26:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b28:	684a      	ldr	r2, [r1, #4]
 8002b2a:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b2c:	6203      	str	r3, [r0, #32]
}
 8002b2e:	bc70      	pop	{r4, r5, r6}
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	fffeff8c 	.word	0xfffeff8c
 8002b38:	40010000 	.word	0x40010000

08002b3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b3c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b3e:	6a03      	ldr	r3, [r0, #32]
 8002b40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b44:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b46:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b48:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b4a:	69c5      	ldr	r5, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b4c:	4a0e      	ldr	r2, [pc, #56]	; (8002b88 <TIM_OC4_SetConfig+0x4c>)
 8002b4e:	402a      	ands	r2, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b50:	680d      	ldr	r5, [r1, #0]
 8002b52:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b5a:	688d      	ldr	r5, [r1, #8]
 8002b5c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b60:	4d0a      	ldr	r5, [pc, #40]	; (8002b8c <TIM_OC4_SetConfig+0x50>)
 8002b62:	42a8      	cmp	r0, r5
 8002b64:	d003      	beq.n	8002b6e <TIM_OC4_SetConfig+0x32>
 8002b66:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002b6a:	42a8      	cmp	r0, r5
 8002b6c:	d104      	bne.n	8002b78 <TIM_OC4_SetConfig+0x3c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b6e:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b72:	694d      	ldr	r5, [r1, #20]
 8002b74:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b78:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b7a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b7c:	684a      	ldr	r2, [r1, #4]
 8002b7e:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b80:	6203      	str	r3, [r0, #32]
}
 8002b82:	bc30      	pop	{r4, r5}
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	feff8cff 	.word	0xfeff8cff
 8002b8c:	40010000 	.word	0x40010000

08002b90 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002b90:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002b92:	6a03      	ldr	r3, [r0, #32]
 8002b94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b98:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b9a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b9c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002b9e:	6d45      	ldr	r5, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002ba0:	4a0d      	ldr	r2, [pc, #52]	; (8002bd8 <TIM_OC5_SetConfig+0x48>)
 8002ba2:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ba4:	680d      	ldr	r5, [r1, #0]
 8002ba6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002ba8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002bac:	688d      	ldr	r5, [r1, #8]
 8002bae:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bb2:	4d0a      	ldr	r5, [pc, #40]	; (8002bdc <TIM_OC5_SetConfig+0x4c>)
 8002bb4:	42a8      	cmp	r0, r5
 8002bb6:	d003      	beq.n	8002bc0 <TIM_OC5_SetConfig+0x30>
 8002bb8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002bbc:	42a8      	cmp	r0, r5
 8002bbe:	d104      	bne.n	8002bca <TIM_OC5_SetConfig+0x3a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002bc0:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002bc4:	694d      	ldr	r5, [r1, #20]
 8002bc6:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bca:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002bcc:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002bce:	684a      	ldr	r2, [r1, #4]
 8002bd0:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bd2:	6203      	str	r3, [r0, #32]
}
 8002bd4:	bc30      	pop	{r4, r5}
 8002bd6:	4770      	bx	lr
 8002bd8:	fffeff8f 	.word	0xfffeff8f
 8002bdc:	40010000 	.word	0x40010000

08002be0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002be0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002be2:	6a03      	ldr	r3, [r0, #32]
 8002be4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002be8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bea:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bec:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002bee:	6d45      	ldr	r5, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002bf0:	4a0e      	ldr	r2, [pc, #56]	; (8002c2c <TIM_OC6_SetConfig+0x4c>)
 8002bf2:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bf4:	680d      	ldr	r5, [r1, #0]
 8002bf6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002bfa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002bfe:	688d      	ldr	r5, [r1, #8]
 8002c00:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c04:	4d0a      	ldr	r5, [pc, #40]	; (8002c30 <TIM_OC6_SetConfig+0x50>)
 8002c06:	42a8      	cmp	r0, r5
 8002c08:	d003      	beq.n	8002c12 <TIM_OC6_SetConfig+0x32>
 8002c0a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002c0e:	42a8      	cmp	r0, r5
 8002c10:	d104      	bne.n	8002c1c <TIM_OC6_SetConfig+0x3c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002c12:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002c16:	694d      	ldr	r5, [r1, #20]
 8002c18:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c1c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002c1e:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002c20:	684a      	ldr	r2, [r1, #4]
 8002c22:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c24:	6203      	str	r3, [r0, #32]
}
 8002c26:	bc30      	pop	{r4, r5}
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	feff8fff 	.word	0xfeff8fff
 8002c30:	40010000 	.word	0x40010000

08002c34 <TIM_Base_SetConfig>:
{
 8002c34:	b410      	push	{r4}
  tmpcr1 = TIMx->CR1;
 8002c36:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c38:	4a34      	ldr	r2, [pc, #208]	; (8002d0c <TIM_Base_SetConfig+0xd8>)
 8002c3a:	4290      	cmp	r0, r2
 8002c3c:	bf14      	ite	ne
 8002c3e:	2200      	movne	r2, #0
 8002c40:	2201      	moveq	r2, #1
 8002c42:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002c46:	d044      	beq.n	8002cd2 <TIM_Base_SetConfig+0x9e>
 8002c48:	2a00      	cmp	r2, #0
 8002c4a:	d142      	bne.n	8002cd2 <TIM_Base_SetConfig+0x9e>
 8002c4c:	4c30      	ldr	r4, [pc, #192]	; (8002d10 <TIM_Base_SetConfig+0xdc>)
 8002c4e:	42a0      	cmp	r0, r4
 8002c50:	d00b      	beq.n	8002c6a <TIM_Base_SetConfig+0x36>
 8002c52:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002c56:	42a0      	cmp	r0, r4
 8002c58:	d007      	beq.n	8002c6a <TIM_Base_SetConfig+0x36>
 8002c5a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002c5e:	42a0      	cmp	r0, r4
 8002c60:	d003      	beq.n	8002c6a <TIM_Base_SetConfig+0x36>
 8002c62:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8002c66:	42a0      	cmp	r0, r4
 8002c68:	d10a      	bne.n	8002c80 <TIM_Base_SetConfig+0x4c>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002c6e:	684c      	ldr	r4, [r1, #4]
 8002c70:	4323      	orrs	r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c72:	4c27      	ldr	r4, [pc, #156]	; (8002d10 <TIM_Base_SetConfig+0xdc>)
 8002c74:	42a0      	cmp	r0, r4
 8002c76:	d030      	beq.n	8002cda <TIM_Base_SetConfig+0xa6>
 8002c78:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002c7c:	42a0      	cmp	r0, r4
 8002c7e:	d02c      	beq.n	8002cda <TIM_Base_SetConfig+0xa6>
 8002c80:	4c24      	ldr	r4, [pc, #144]	; (8002d14 <TIM_Base_SetConfig+0xe0>)
 8002c82:	42a0      	cmp	r0, r4
 8002c84:	d029      	beq.n	8002cda <TIM_Base_SetConfig+0xa6>
 8002c86:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8002c8a:	42a0      	cmp	r0, r4
 8002c8c:	d025      	beq.n	8002cda <TIM_Base_SetConfig+0xa6>
 8002c8e:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 8002c92:	42a0      	cmp	r0, r4
 8002c94:	d021      	beq.n	8002cda <TIM_Base_SetConfig+0xa6>
 8002c96:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002c9a:	42a0      	cmp	r0, r4
 8002c9c:	d01d      	beq.n	8002cda <TIM_Base_SetConfig+0xa6>
 8002c9e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002ca2:	42a0      	cmp	r0, r4
 8002ca4:	d019      	beq.n	8002cda <TIM_Base_SetConfig+0xa6>
 8002ca6:	f5a4 3498 	sub.w	r4, r4, #77824	; 0x13000
 8002caa:	42a0      	cmp	r0, r4
 8002cac:	d015      	beq.n	8002cda <TIM_Base_SetConfig+0xa6>
 8002cae:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002cb2:	42a0      	cmp	r0, r4
 8002cb4:	d011      	beq.n	8002cda <TIM_Base_SetConfig+0xa6>
 8002cb6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002cba:	42a0      	cmp	r0, r4
 8002cbc:	d00d      	beq.n	8002cda <TIM_Base_SetConfig+0xa6>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cc2:	694a      	ldr	r2, [r1, #20]
 8002cc4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002cc6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cc8:	688b      	ldr	r3, [r1, #8]
 8002cca:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002ccc:	680b      	ldr	r3, [r1, #0]
 8002cce:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cd0:	e016      	b.n	8002d00 <TIM_Base_SetConfig+0xcc>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002cd6:	684c      	ldr	r4, [r1, #4]
 8002cd8:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cde:	68cc      	ldr	r4, [r1, #12]
 8002ce0:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ce2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ce6:	694c      	ldr	r4, [r1, #20]
 8002ce8:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 8002cea:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cec:	688b      	ldr	r3, [r1, #8]
 8002cee:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002cf0:	680b      	ldr	r3, [r1, #0]
 8002cf2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cf4:	4b08      	ldr	r3, [pc, #32]	; (8002d18 <TIM_Base_SetConfig+0xe4>)
 8002cf6:	4298      	cmp	r0, r3
 8002cf8:	d000      	beq.n	8002cfc <TIM_Base_SetConfig+0xc8>
 8002cfa:	b10a      	cbz	r2, 8002d00 <TIM_Base_SetConfig+0xcc>
    TIMx->RCR = Structure->RepetitionCounter;
 8002cfc:	690b      	ldr	r3, [r1, #16]
 8002cfe:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002d00:	2301      	movs	r3, #1
 8002d02:	6143      	str	r3, [r0, #20]
}
 8002d04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	40010000 	.word	0x40010000
 8002d10:	40000400 	.word	0x40000400
 8002d14:	40000c00 	.word	0x40000c00
 8002d18:	40010400 	.word	0x40010400

08002d1c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8002d1c:	b360      	cbz	r0, 8002d78 <HAL_TIM_PWM_Init+0x5c>
{
 8002d1e:	b510      	push	{r4, lr}
 8002d20:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002d22:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002d26:	b313      	cbz	r3, 8002d6e <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8002d28:	2302      	movs	r3, #2
 8002d2a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d2e:	4621      	mov	r1, r4
 8002d30:	f851 0b04 	ldr.w	r0, [r1], #4
 8002d34:	f7ff ff7e 	bl	8002c34 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d3e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002d42:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002d46:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002d4a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8002d4e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d56:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002d5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002d5e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8002d62:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8002d66:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002d6a:	2000      	movs	r0, #0
}
 8002d6c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002d6e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002d72:	f7fe fa69 	bl	8001248 <HAL_TIM_PWM_MspInit>
 8002d76:	e7d7      	b.n	8002d28 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8002d78:	2001      	movs	r0, #1
}
 8002d7a:	4770      	bx	lr

08002d7c <HAL_TIM_IC_Init>:
  if (htim == NULL)
 8002d7c:	b360      	cbz	r0, 8002dd8 <HAL_TIM_IC_Init+0x5c>
{
 8002d7e:	b510      	push	{r4, lr}
 8002d80:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002d82:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002d86:	b313      	cbz	r3, 8002dce <HAL_TIM_IC_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8002d88:	2302      	movs	r3, #2
 8002d8a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d8e:	4621      	mov	r1, r4
 8002d90:	f851 0b04 	ldr.w	r0, [r1], #4
 8002d94:	f7ff ff4e 	bl	8002c34 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d9e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002da2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002da6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002daa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8002dae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002db2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002db6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002dba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002dbe:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8002dc2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8002dc6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002dca:	2000      	movs	r0, #0
}
 8002dcc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002dce:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8002dd2:	f7fe fa03 	bl	80011dc <HAL_TIM_IC_MspInit>
 8002dd6:	e7d7      	b.n	8002d88 <HAL_TIM_IC_Init+0xc>
    return HAL_ERROR;
 8002dd8:	2001      	movs	r0, #1
}
 8002dda:	4770      	bx	lr

08002ddc <TIM_OC2_SetConfig>:
{
 8002ddc:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dde:	6a03      	ldr	r3, [r0, #32]
 8002de0:	f023 0310 	bic.w	r3, r3, #16
 8002de4:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002de6:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002de8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002dea:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002dec:	4a12      	ldr	r2, [pc, #72]	; (8002e38 <TIM_OC2_SetConfig+0x5c>)
 8002dee:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002df0:	680d      	ldr	r5, [r1, #0]
 8002df2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8002df6:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002dfa:	688d      	ldr	r5, [r1, #8]
 8002dfc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e00:	4d0e      	ldr	r5, [pc, #56]	; (8002e3c <TIM_OC2_SetConfig+0x60>)
 8002e02:	42a8      	cmp	r0, r5
 8002e04:	d003      	beq.n	8002e0e <TIM_OC2_SetConfig+0x32>
 8002e06:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002e0a:	42a8      	cmp	r0, r5
 8002e0c:	d10d      	bne.n	8002e2a <TIM_OC2_SetConfig+0x4e>
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e12:	68cd      	ldr	r5, [r1, #12]
 8002e14:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e1c:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e20:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e22:	698e      	ldr	r6, [r1, #24]
 8002e24:	4335      	orrs	r5, r6
 8002e26:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8002e2a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002e2c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002e2e:	684a      	ldr	r2, [r1, #4]
 8002e30:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002e32:	6203      	str	r3, [r0, #32]
}
 8002e34:	bc70      	pop	{r4, r5, r6}
 8002e36:	4770      	bx	lr
 8002e38:	feff8cff 	.word	0xfeff8cff
 8002e3c:	40010000 	.word	0x40010000

08002e40 <HAL_TIM_PWM_ConfigChannel>:
{
 8002e40:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002e42:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	f000 808c 	beq.w	8002f64 <HAL_TIM_PWM_ConfigChannel+0x124>
 8002e4c:	4604      	mov	r4, r0
 8002e4e:	460d      	mov	r5, r1
 8002e50:	2301      	movs	r3, #1
 8002e52:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8002e56:	2a14      	cmp	r2, #20
 8002e58:	d81e      	bhi.n	8002e98 <HAL_TIM_PWM_ConfigChannel+0x58>
 8002e5a:	e8df f002 	tbb	[pc, r2]
 8002e5e:	1d0b      	.short	0x1d0b
 8002e60:	1d211d1d 	.word	0x1d211d1d
 8002e64:	1d351d1d 	.word	0x1d351d1d
 8002e68:	1d481d1d 	.word	0x1d481d1d
 8002e6c:	1d5c1d1d 	.word	0x1d5c1d1d
 8002e70:	1d1d      	.short	0x1d1d
 8002e72:	6f          	.byte	0x6f
 8002e73:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e74:	6800      	ldr	r0, [r0, #0]
 8002e76:	f7ff fe01 	bl	8002a7c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e7a:	6822      	ldr	r2, [r4, #0]
 8002e7c:	6993      	ldr	r3, [r2, #24]
 8002e7e:	f043 0308 	orr.w	r3, r3, #8
 8002e82:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e84:	6822      	ldr	r2, [r4, #0]
 8002e86:	6993      	ldr	r3, [r2, #24]
 8002e88:	f023 0304 	bic.w	r3, r3, #4
 8002e8c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e8e:	6822      	ldr	r2, [r4, #0]
 8002e90:	6993      	ldr	r3, [r2, #24]
 8002e92:	6929      	ldr	r1, [r5, #16]
 8002e94:	430b      	orrs	r3, r1
 8002e96:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 8002e98:	2000      	movs	r0, #0
 8002e9a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002e9e:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ea0:	6800      	ldr	r0, [r0, #0]
 8002ea2:	f7ff ff9b 	bl	8002ddc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ea6:	6822      	ldr	r2, [r4, #0]
 8002ea8:	6993      	ldr	r3, [r2, #24]
 8002eaa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002eae:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002eb0:	6822      	ldr	r2, [r4, #0]
 8002eb2:	6993      	ldr	r3, [r2, #24]
 8002eb4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002eb8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002eba:	6822      	ldr	r2, [r4, #0]
 8002ebc:	6993      	ldr	r3, [r2, #24]
 8002ebe:	6929      	ldr	r1, [r5, #16]
 8002ec0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002ec4:	6193      	str	r3, [r2, #24]
      break;
 8002ec6:	e7e7      	b.n	8002e98 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ec8:	6800      	ldr	r0, [r0, #0]
 8002eca:	f7ff fe05 	bl	8002ad8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ece:	6822      	ldr	r2, [r4, #0]
 8002ed0:	69d3      	ldr	r3, [r2, #28]
 8002ed2:	f043 0308 	orr.w	r3, r3, #8
 8002ed6:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ed8:	6822      	ldr	r2, [r4, #0]
 8002eda:	69d3      	ldr	r3, [r2, #28]
 8002edc:	f023 0304 	bic.w	r3, r3, #4
 8002ee0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ee2:	6822      	ldr	r2, [r4, #0]
 8002ee4:	69d3      	ldr	r3, [r2, #28]
 8002ee6:	6929      	ldr	r1, [r5, #16]
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	61d3      	str	r3, [r2, #28]
      break;
 8002eec:	e7d4      	b.n	8002e98 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002eee:	6800      	ldr	r0, [r0, #0]
 8002ef0:	f7ff fe24 	bl	8002b3c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ef4:	6822      	ldr	r2, [r4, #0]
 8002ef6:	69d3      	ldr	r3, [r2, #28]
 8002ef8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002efc:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002efe:	6822      	ldr	r2, [r4, #0]
 8002f00:	69d3      	ldr	r3, [r2, #28]
 8002f02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f06:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f08:	6822      	ldr	r2, [r4, #0]
 8002f0a:	69d3      	ldr	r3, [r2, #28]
 8002f0c:	6929      	ldr	r1, [r5, #16]
 8002f0e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002f12:	61d3      	str	r3, [r2, #28]
      break;
 8002f14:	e7c0      	b.n	8002e98 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002f16:	6800      	ldr	r0, [r0, #0]
 8002f18:	f7ff fe3a 	bl	8002b90 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002f1c:	6822      	ldr	r2, [r4, #0]
 8002f1e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002f20:	f043 0308 	orr.w	r3, r3, #8
 8002f24:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002f26:	6822      	ldr	r2, [r4, #0]
 8002f28:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002f2a:	f023 0304 	bic.w	r3, r3, #4
 8002f2e:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002f30:	6822      	ldr	r2, [r4, #0]
 8002f32:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002f34:	6929      	ldr	r1, [r5, #16]
 8002f36:	430b      	orrs	r3, r1
 8002f38:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 8002f3a:	e7ad      	b.n	8002e98 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002f3c:	6800      	ldr	r0, [r0, #0]
 8002f3e:	f7ff fe4f 	bl	8002be0 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002f42:	6822      	ldr	r2, [r4, #0]
 8002f44:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002f46:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f4a:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002f4c:	6822      	ldr	r2, [r4, #0]
 8002f4e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002f50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f54:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002f56:	6822      	ldr	r2, [r4, #0]
 8002f58:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002f5a:	6929      	ldr	r1, [r5, #16]
 8002f5c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002f60:	6553      	str	r3, [r2, #84]	; 0x54
      break;
 8002f62:	e799      	b.n	8002e98 <HAL_TIM_PWM_ConfigChannel+0x58>
  __HAL_LOCK(htim);
 8002f64:	2002      	movs	r0, #2
 8002f66:	e79a      	b.n	8002e9e <HAL_TIM_PWM_ConfigChannel+0x5e>

08002f68 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002f68:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f6a:	6a04      	ldr	r4, [r0, #32]
 8002f6c:	f024 0401 	bic.w	r4, r4, #1
 8002f70:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f72:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002f74:	6a06      	ldr	r6, [r0, #32]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002f76:	4d19      	ldr	r5, [pc, #100]	; (8002fdc <TIM_TI1_SetConfig+0x74>)
 8002f78:	42a8      	cmp	r0, r5
 8002f7a:	d01d      	beq.n	8002fb8 <TIM_TI1_SetConfig+0x50>
 8002f7c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002f80:	d01a      	beq.n	8002fb8 <TIM_TI1_SetConfig+0x50>
 8002f82:	f5a5 457c 	sub.w	r5, r5, #64512	; 0xfc00
 8002f86:	42a8      	cmp	r0, r5
 8002f88:	d016      	beq.n	8002fb8 <TIM_TI1_SetConfig+0x50>
 8002f8a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002f8e:	42a8      	cmp	r0, r5
 8002f90:	d012      	beq.n	8002fb8 <TIM_TI1_SetConfig+0x50>
 8002f92:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002f96:	42a8      	cmp	r0, r5
 8002f98:	d00e      	beq.n	8002fb8 <TIM_TI1_SetConfig+0x50>
 8002f9a:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 8002f9e:	42a8      	cmp	r0, r5
 8002fa0:	d00a      	beq.n	8002fb8 <TIM_TI1_SetConfig+0x50>
 8002fa2:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 8002fa6:	42a8      	cmp	r0, r5
 8002fa8:	d006      	beq.n	8002fb8 <TIM_TI1_SetConfig+0x50>
 8002faa:	f5a5 3594 	sub.w	r5, r5, #75776	; 0x12800
 8002fae:	42a8      	cmp	r0, r5
 8002fb0:	d002      	beq.n	8002fb8 <TIM_TI1_SetConfig+0x50>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
    tmpccmr1 |= TIM_ICSelection;
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002fb2:	f044 0201 	orr.w	r2, r4, #1
 8002fb6:	e002      	b.n	8002fbe <TIM_TI1_SetConfig+0x56>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002fb8:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8002fbc:	4322      	orrs	r2, r4
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fbe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002fc2:	011b      	lsls	r3, r3, #4
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	4313      	orrs	r3, r2

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fc8:	f026 020a 	bic.w	r2, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002fcc:	f001 010a 	and.w	r1, r1, #10
 8002fd0:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fd2:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002fd4:	6201      	str	r1, [r0, #32]
}
 8002fd6:	bc70      	pop	{r4, r5, r6}
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	40010000 	.word	0x40010000

08002fe0 <HAL_TIM_IC_ConfigChannel>:
{
 8002fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8002fe2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	f000 8092 	beq.w	8003110 <HAL_TIM_IC_ConfigChannel+0x130>
 8002fec:	4604      	mov	r4, r0
 8002fee:	460d      	mov	r5, r1
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 8002ff6:	2a00      	cmp	r2, #0
 8002ff8:	d02d      	beq.n	8003056 <HAL_TIM_IC_ConfigChannel+0x76>
  else if (Channel == TIM_CHANNEL_2)
 8002ffa:	2a04      	cmp	r2, #4
 8002ffc:	d03c      	beq.n	8003078 <HAL_TIM_IC_ConfigChannel+0x98>
  else if (Channel == TIM_CHANNEL_3)
 8002ffe:	2a08      	cmp	r2, #8
 8003000:	d061      	beq.n	80030c6 <HAL_TIM_IC_ConfigChannel+0xe6>
    TIM_TI4_SetConfig(htim->Instance,
 8003002:	6800      	ldr	r0, [r0, #0]
 8003004:	680b      	ldr	r3, [r1, #0]
 8003006:	684f      	ldr	r7, [r1, #4]
 8003008:	68ca      	ldr	r2, [r1, #12]
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800300a:	6a06      	ldr	r6, [r0, #32]
 800300c:	f426 5680 	bic.w	r6, r6, #4096	; 0x1000
 8003010:	6206      	str	r6, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003012:	69c1      	ldr	r1, [r0, #28]
  tmpccer = TIMx->CCER;
 8003014:	6a06      	ldr	r6, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003016:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800301a:	ea41 2107 	orr.w	r1, r1, r7, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800301e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003022:	0312      	lsls	r2, r2, #12
 8003024:	b292      	uxth	r2, r2
 8003026:	430a      	orrs	r2, r1

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003028:	f426 4120 	bic.w	r1, r6, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800302c:	031b      	lsls	r3, r3, #12
 800302e:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003032:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003034:	61c2      	str	r2, [r0, #28]
  TIMx->CCER = tmpccer ;
 8003036:	6203      	str	r3, [r0, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003038:	6822      	ldr	r2, [r4, #0]
 800303a:	69d3      	ldr	r3, [r2, #28]
 800303c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003040:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003042:	6822      	ldr	r2, [r4, #0]
 8003044:	69d3      	ldr	r3, [r2, #28]
 8003046:	68a9      	ldr	r1, [r5, #8]
 8003048:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800304c:	61d3      	str	r3, [r2, #28]
  __HAL_UNLOCK(htim);
 800304e:	2000      	movs	r0, #0
 8003050:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIM_TI1_SetConfig(htim->Instance,
 8003056:	68cb      	ldr	r3, [r1, #12]
 8003058:	684a      	ldr	r2, [r1, #4]
 800305a:	6809      	ldr	r1, [r1, #0]
 800305c:	6800      	ldr	r0, [r0, #0]
 800305e:	f7ff ff83 	bl	8002f68 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003062:	6822      	ldr	r2, [r4, #0]
 8003064:	6993      	ldr	r3, [r2, #24]
 8003066:	f023 030c 	bic.w	r3, r3, #12
 800306a:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800306c:	6822      	ldr	r2, [r4, #0]
 800306e:	6993      	ldr	r3, [r2, #24]
 8003070:	68a9      	ldr	r1, [r5, #8]
 8003072:	430b      	orrs	r3, r1
 8003074:	6193      	str	r3, [r2, #24]
 8003076:	e7ea      	b.n	800304e <HAL_TIM_IC_ConfigChannel+0x6e>
    TIM_TI2_SetConfig(htim->Instance,
 8003078:	6800      	ldr	r0, [r0, #0]
 800307a:	680b      	ldr	r3, [r1, #0]
 800307c:	684f      	ldr	r7, [r1, #4]
 800307e:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003080:	6a06      	ldr	r6, [r0, #32]
 8003082:	f026 0610 	bic.w	r6, r6, #16
 8003086:	6206      	str	r6, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003088:	6981      	ldr	r1, [r0, #24]
  tmpccer = TIMx->CCER;
 800308a:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800308c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003090:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003094:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003098:	0312      	lsls	r2, r2, #12
 800309a:	b292      	uxth	r2, r2
 800309c:	430a      	orrs	r2, r1
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800309e:	f026 01a0 	bic.w	r1, r6, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80030a2:	011b      	lsls	r3, r3, #4
 80030a4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80030a8:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
 80030aa:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80030ac:	6203      	str	r3, [r0, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80030ae:	6822      	ldr	r2, [r4, #0]
 80030b0:	6993      	ldr	r3, [r2, #24]
 80030b2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80030b6:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80030b8:	6822      	ldr	r2, [r4, #0]
 80030ba:	6993      	ldr	r3, [r2, #24]
 80030bc:	68a9      	ldr	r1, [r5, #8]
 80030be:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80030c2:	6193      	str	r3, [r2, #24]
 80030c4:	e7c3      	b.n	800304e <HAL_TIM_IC_ConfigChannel+0x6e>
    TIM_TI3_SetConfig(htim->Instance,
 80030c6:	6801      	ldr	r1, [r0, #0]
 80030c8:	682b      	ldr	r3, [r5, #0]
 80030ca:	6868      	ldr	r0, [r5, #4]
 80030cc:	68ea      	ldr	r2, [r5, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030ce:	6a0e      	ldr	r6, [r1, #32]
 80030d0:	f426 7680 	bic.w	r6, r6, #256	; 0x100
 80030d4:	620e      	str	r6, [r1, #32]
  tmpccmr2 = TIMx->CCMR2;
 80030d6:	69cf      	ldr	r7, [r1, #28]
  tmpccer = TIMx->CCER;
 80030d8:	6a0e      	ldr	r6, [r1, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80030da:	f027 0703 	bic.w	r7, r7, #3
  tmpccmr2 |= TIM_ICSelection;
 80030de:	4338      	orrs	r0, r7
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80030e0:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80030e4:	0112      	lsls	r2, r2, #4
 80030e6:	b2d2      	uxtb	r2, r2
 80030e8:	4302      	orrs	r2, r0
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80030ea:	f426 6020 	bic.w	r0, r6, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80030ee:	021b      	lsls	r3, r3, #8
 80030f0:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80030f4:	4303      	orrs	r3, r0
  TIMx->CCMR2 = tmpccmr2;
 80030f6:	61ca      	str	r2, [r1, #28]
  TIMx->CCER = tmpccer;
 80030f8:	620b      	str	r3, [r1, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80030fa:	6822      	ldr	r2, [r4, #0]
 80030fc:	69d3      	ldr	r3, [r2, #28]
 80030fe:	f023 030c 	bic.w	r3, r3, #12
 8003102:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003104:	6822      	ldr	r2, [r4, #0]
 8003106:	69d3      	ldr	r3, [r2, #28]
 8003108:	68a9      	ldr	r1, [r5, #8]
 800310a:	430b      	orrs	r3, r1
 800310c:	61d3      	str	r3, [r2, #28]
 800310e:	e79e      	b.n	800304e <HAL_TIM_IC_ConfigChannel+0x6e>
  __HAL_LOCK(htim);
 8003110:	2002      	movs	r0, #2
 8003112:	e79f      	b.n	8003054 <HAL_TIM_IC_ConfigChannel+0x74>

08003114 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003114:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003116:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003118:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800311c:	430a      	orrs	r2, r1
 800311e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003122:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003124:	6082      	str	r2, [r0, #8]
}
 8003126:	f85d 4b04 	ldr.w	r4, [sp], #4
 800312a:	4770      	bx	lr

0800312c <TIM_SlaveTimer_SetConfig>:
{
 800312c:	b538      	push	{r3, r4, r5, lr}
  tmpsmcr = htim->Instance->SMCR;
 800312e:	6804      	ldr	r4, [r0, #0]
 8003130:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003132:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003136:	684b      	ldr	r3, [r1, #4]
 8003138:	431a      	orrs	r2, r3
  tmpsmcr &= ~TIM_SMCR_SMS;
 800313a:	4b2d      	ldr	r3, [pc, #180]	; (80031f0 <TIM_SlaveTimer_SetConfig+0xc4>)
 800313c:	4013      	ands	r3, r2
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800313e:	680a      	ldr	r2, [r1, #0]
 8003140:	4313      	orrs	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8003142:	60a3      	str	r3, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 8003144:	684b      	ldr	r3, [r1, #4]
 8003146:	2b60      	cmp	r3, #96	; 0x60
 8003148:	d039      	beq.n	80031be <TIM_SlaveTimer_SetConfig+0x92>
 800314a:	d819      	bhi.n	8003180 <TIM_SlaveTimer_SetConfig+0x54>
 800314c:	2b40      	cmp	r3, #64	; 0x40
 800314e:	d021      	beq.n	8003194 <TIM_SlaveTimer_SetConfig+0x68>
 8003150:	2b50      	cmp	r3, #80	; 0x50
 8003152:	d113      	bne.n	800317c <TIM_SlaveTimer_SetConfig+0x50>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003154:	6803      	ldr	r3, [r0, #0]
 8003156:	6888      	ldr	r0, [r1, #8]
 8003158:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 800315a:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800315c:	6a1c      	ldr	r4, [r3, #32]
 800315e:	f024 0401 	bic.w	r4, r4, #1
 8003162:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003164:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003166:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800316a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800316e:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8003172:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8003174:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003176:	6219      	str	r1, [r3, #32]
  return HAL_OK;
 8003178:	2000      	movs	r0, #0
}
 800317a:	e036      	b.n	80031ea <TIM_SlaveTimer_SetConfig+0xbe>
  switch (sSlaveConfig->InputTrigger)
 800317c:	2000      	movs	r0, #0
 800317e:	e034      	b.n	80031ea <TIM_SlaveTimer_SetConfig+0xbe>
 8003180:	2b70      	cmp	r3, #112	; 0x70
 8003182:	d131      	bne.n	80031e8 <TIM_SlaveTimer_SetConfig+0xbc>
      TIM_ETR_SetConfig(htim->Instance,
 8003184:	690b      	ldr	r3, [r1, #16]
 8003186:	688a      	ldr	r2, [r1, #8]
 8003188:	68c9      	ldr	r1, [r1, #12]
 800318a:	6800      	ldr	r0, [r0, #0]
 800318c:	f7ff ffc2 	bl	8003114 <TIM_ETR_SetConfig>
  return HAL_OK;
 8003190:	2000      	movs	r0, #0
      break;
 8003192:	e02a      	b.n	80031ea <TIM_SlaveTimer_SetConfig+0xbe>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003194:	680b      	ldr	r3, [r1, #0]
 8003196:	2b05      	cmp	r3, #5
 8003198:	d028      	beq.n	80031ec <TIM_SlaveTimer_SetConfig+0xc0>
      tmpccer = htim->Instance->CCER;
 800319a:	6803      	ldr	r3, [r0, #0]
 800319c:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800319e:	6a1a      	ldr	r2, [r3, #32]
 80031a0:	f022 0201 	bic.w	r2, r2, #1
 80031a4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80031a6:	6802      	ldr	r2, [r0, #0]
 80031a8:	6993      	ldr	r3, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80031ae:	6909      	ldr	r1, [r1, #16]
 80031b0:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 80031b4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCER = tmpccer;
 80031b6:	6803      	ldr	r3, [r0, #0]
 80031b8:	621c      	str	r4, [r3, #32]
  return HAL_OK;
 80031ba:	2000      	movs	r0, #0
      break;
 80031bc:	e015      	b.n	80031ea <TIM_SlaveTimer_SetConfig+0xbe>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031be:	6803      	ldr	r3, [r0, #0]
 80031c0:	688c      	ldr	r4, [r1, #8]
 80031c2:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031c4:	6a18      	ldr	r0, [r3, #32]
 80031c6:	f020 0010 	bic.w	r0, r0, #16
 80031ca:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031cc:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80031ce:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031d0:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031d4:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80031dc:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 80031e0:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80031e2:	621a      	str	r2, [r3, #32]
  return HAL_OK;
 80031e4:	2000      	movs	r0, #0
}
 80031e6:	e000      	b.n	80031ea <TIM_SlaveTimer_SetConfig+0xbe>
  switch (sSlaveConfig->InputTrigger)
 80031e8:	2000      	movs	r0, #0
}
 80031ea:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 80031ec:	2001      	movs	r0, #1
 80031ee:	e7fc      	b.n	80031ea <TIM_SlaveTimer_SetConfig+0xbe>
 80031f0:	fffefff8 	.word	0xfffefff8

080031f4 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 80031f4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d022      	beq.n	8003242 <HAL_TIM_SlaveConfigSynchro+0x4e>
{
 80031fc:	b510      	push	{r4, lr}
 80031fe:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003200:	2301      	movs	r3, #1
 8003202:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003206:	2302      	movs	r3, #2
 8003208:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800320c:	f7ff ff8e 	bl	800312c <TIM_SlaveTimer_SetConfig>
 8003210:	b980      	cbnz	r0, 8003234 <HAL_TIM_SlaveConfigSynchro+0x40>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003212:	6822      	ldr	r2, [r4, #0]
 8003214:	68d3      	ldr	r3, [r2, #12]
 8003216:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800321a:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800321c:	6822      	ldr	r2, [r4, #0]
 800321e:	68d3      	ldr	r3, [r2, #12]
 8003220:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003224:	60d3      	str	r3, [r2, #12]
  htim->State = HAL_TIM_STATE_READY;
 8003226:	2301      	movs	r3, #1
 8003228:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800322c:	2300      	movs	r3, #0
 800322e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003232:	bd10      	pop	{r4, pc}
    htim->State = HAL_TIM_STATE_READY;
 8003234:	2001      	movs	r0, #1
 8003236:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800323a:	2300      	movs	r3, #0
 800323c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8003240:	e7f7      	b.n	8003232 <HAL_TIM_SlaveConfigSynchro+0x3e>
  __HAL_LOCK(htim);
 8003242:	2002      	movs	r0, #2
}
 8003244:	4770      	bx	lr
	...

08003248 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003248:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800324c:	2b01      	cmp	r3, #1
 800324e:	d051      	beq.n	80032f4 <HAL_TIMEx_MasterConfigSynchronization+0xac>
{
 8003250:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8003252:	2301      	movs	r3, #1
 8003254:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003258:	2302      	movs	r3, #2
 800325a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800325e:	6802      	ldr	r2, [r0, #0]
 8003260:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003262:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003264:	4d24      	ldr	r5, [pc, #144]	; (80032f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003266:	42aa      	cmp	r2, r5
 8003268:	d003      	beq.n	8003272 <HAL_TIMEx_MasterConfigSynchronization+0x2a>
 800326a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800326e:	42aa      	cmp	r2, r5
 8003270:	d103      	bne.n	800327a <HAL_TIMEx_MasterConfigSynchronization+0x32>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003272:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003276:	684d      	ldr	r5, [r1, #4]
 8003278:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800327a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800327e:	680d      	ldr	r5, [r1, #0]
 8003280:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003282:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003284:	6802      	ldr	r2, [r0, #0]
 8003286:	4b1c      	ldr	r3, [pc, #112]	; (80032f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003288:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800328c:	bf18      	it	ne
 800328e:	429a      	cmpne	r2, r3
 8003290:	bf0c      	ite	eq
 8003292:	2301      	moveq	r3, #1
 8003294:	2300      	movne	r3, #0
 8003296:	4d19      	ldr	r5, [pc, #100]	; (80032fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003298:	42aa      	cmp	r2, r5
 800329a:	bf08      	it	eq
 800329c:	f043 0301 	orreq.w	r3, r3, #1
 80032a0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80032a4:	42aa      	cmp	r2, r5
 80032a6:	bf08      	it	eq
 80032a8:	f043 0301 	orreq.w	r3, r3, #1
 80032ac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80032b0:	42aa      	cmp	r2, r5
 80032b2:	bf08      	it	eq
 80032b4:	f043 0301 	orreq.w	r3, r3, #1
 80032b8:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 80032bc:	42aa      	cmp	r2, r5
 80032be:	bf08      	it	eq
 80032c0:	f043 0301 	orreq.w	r3, r3, #1
 80032c4:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 80032c8:	42aa      	cmp	r2, r5
 80032ca:	bf08      	it	eq
 80032cc:	f043 0301 	orreq.w	r3, r3, #1
 80032d0:	b913      	cbnz	r3, 80032d8 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80032d2:	4b0b      	ldr	r3, [pc, #44]	; (8003300 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d104      	bne.n	80032e2 <HAL_TIMEx_MasterConfigSynchronization+0x9a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032d8:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032dc:	688b      	ldr	r3, [r1, #8]
 80032de:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032e0:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032e2:	2301      	movs	r3, #1
 80032e4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032e8:	2300      	movs	r3, #0
 80032ea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80032ee:	4618      	mov	r0, r3
}
 80032f0:	bc30      	pop	{r4, r5}
 80032f2:	4770      	bx	lr
  __HAL_LOCK(htim);
 80032f4:	2002      	movs	r0, #2
}
 80032f6:	4770      	bx	lr
 80032f8:	40010000 	.word	0x40010000
 80032fc:	40000400 	.word	0x40000400
 8003300:	40001800 	.word	0x40001800

08003304 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003304:	b510      	push	{r4, lr}
 8003306:	4604      	mov	r4, r0
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003308:	6801      	ldr	r1, [r0, #0]
 800330a:	6808      	ldr	r0, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800330c:	68a3      	ldr	r3, [r4, #8]
 800330e:	6922      	ldr	r2, [r4, #16]
 8003310:	4313      	orrs	r3, r2
 8003312:	6962      	ldr	r2, [r4, #20]
 8003314:	4313      	orrs	r3, r2
 8003316:	69e2      	ldr	r2, [r4, #28]
 8003318:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800331a:	4ab3      	ldr	r2, [pc, #716]	; (80035e8 <UART_SetConfig+0x2e4>)
 800331c:	4002      	ands	r2, r0
 800331e:	4313      	orrs	r3, r2
 8003320:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003322:	6822      	ldr	r2, [r4, #0]
 8003324:	6853      	ldr	r3, [r2, #4]
 8003326:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800332a:	68e1      	ldr	r1, [r4, #12]
 800332c:	430b      	orrs	r3, r1
 800332e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003330:	69a3      	ldr	r3, [r4, #24]

  tmpreg |= huart->Init.OneBitSampling;
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003332:	6821      	ldr	r1, [r4, #0]
 8003334:	688a      	ldr	r2, [r1, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8003336:	6a20      	ldr	r0, [r4, #32]
 8003338:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800333a:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 800333e:	4313      	orrs	r3, r2
 8003340:	608b      	str	r3, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003342:	6823      	ldr	r3, [r4, #0]
 8003344:	4aa9      	ldr	r2, [pc, #676]	; (80035ec <UART_SetConfig+0x2e8>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d019      	beq.n	800337e <UART_SetConfig+0x7a>
 800334a:	4aa9      	ldr	r2, [pc, #676]	; (80035f0 <UART_SetConfig+0x2ec>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d024      	beq.n	800339a <UART_SetConfig+0x96>
 8003350:	4aa8      	ldr	r2, [pc, #672]	; (80035f4 <UART_SetConfig+0x2f0>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d038      	beq.n	80033c8 <UART_SetConfig+0xc4>
 8003356:	4aa8      	ldr	r2, [pc, #672]	; (80035f8 <UART_SetConfig+0x2f4>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d058      	beq.n	800340e <UART_SetConfig+0x10a>
 800335c:	4aa7      	ldr	r2, [pc, #668]	; (80035fc <UART_SetConfig+0x2f8>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d069      	beq.n	8003436 <UART_SetConfig+0x132>
 8003362:	4aa7      	ldr	r2, [pc, #668]	; (8003600 <UART_SetConfig+0x2fc>)
 8003364:	4293      	cmp	r3, r2
 8003366:	f000 808b 	beq.w	8003480 <UART_SetConfig+0x17c>
 800336a:	4aa6      	ldr	r2, [pc, #664]	; (8003604 <UART_SetConfig+0x300>)
 800336c:	4293      	cmp	r3, r2
 800336e:	f000 809e 	beq.w	80034ae <UART_SetConfig+0x1aa>
 8003372:	4aa5      	ldr	r2, [pc, #660]	; (8003608 <UART_SetConfig+0x304>)
 8003374:	4293      	cmp	r3, r2
 8003376:	f000 80b1 	beq.w	80034dc <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
        break;
      default:
        pclk = 0U;
        ret = HAL_ERROR;
 800337a:	2001      	movs	r0, #1
 800337c:	e14f      	b.n	800361e <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800337e:	4ba3      	ldr	r3, [pc, #652]	; (800360c <UART_SetConfig+0x308>)
 8003380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003384:	f003 0303 	and.w	r3, r3, #3
 8003388:	2b03      	cmp	r3, #3
 800338a:	f200 8123 	bhi.w	80035d4 <UART_SetConfig+0x2d0>
 800338e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003392:	00bc      	.short	0x00bc
 8003394:	014a0029 	.word	0x014a0029
 8003398:	0034      	.short	0x0034
 800339a:	4b9c      	ldr	r3, [pc, #624]	; (800360c <UART_SetConfig+0x308>)
 800339c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a0:	f003 030c 	and.w	r3, r3, #12
 80033a4:	2b0c      	cmp	r3, #12
 80033a6:	f200 8117 	bhi.w	80035d8 <UART_SetConfig+0x2d4>
 80033aa:	e8df f013 	tbh	[pc, r3, lsl #1]
 80033ae:	00cb      	.short	0x00cb
 80033b0:	01150115 	.word	0x01150115
 80033b4:	001b0115 	.word	0x001b0115
 80033b8:	01150115 	.word	0x01150115
 80033bc:	013c0115 	.word	0x013c0115
 80033c0:	01150115 	.word	0x01150115
 80033c4:	00260115 	.word	0x00260115
 80033c8:	4b90      	ldr	r3, [pc, #576]	; (800360c <UART_SetConfig+0x308>)
 80033ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80033d2:	2b20      	cmp	r3, #32
 80033d4:	f000 8127 	beq.w	8003626 <UART_SetConfig+0x322>
 80033d8:	d80d      	bhi.n	80033f6 <UART_SetConfig+0xf2>
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 812f 	beq.w	800363e <UART_SetConfig+0x33a>
 80033e0:	2b10      	cmp	r3, #16
 80033e2:	d106      	bne.n	80033f2 <UART_SetConfig+0xee>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033e4:	69e3      	ldr	r3, [r4, #28]
 80033e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033ea:	d038      	beq.n	800345e <UART_SetConfig+0x15a>
        break;
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033ec:	f7fe feb2 	bl	8002154 <HAL_RCC_GetSysClockFreq>
        break;
 80033f0:	e0d6      	b.n	80035a0 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
        break;
      default:
        pclk = 0U;
        ret = HAL_ERROR;
 80033f2:	2001      	movs	r0, #1
 80033f4:	e113      	b.n	800361e <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033f6:	2b30      	cmp	r3, #48	; 0x30
 80033f8:	d107      	bne.n	800340a <UART_SetConfig+0x106>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033fa:	69e3      	ldr	r3, [r4, #28]
 80033fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003400:	f000 80c9 	beq.w	8003596 <UART_SetConfig+0x292>
        pclk = (uint32_t) LSE_VALUE;
 8003404:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003408:	e0cc      	b.n	80035a4 <UART_SetConfig+0x2a0>
        ret = HAL_ERROR;
 800340a:	2001      	movs	r0, #1
 800340c:	e107      	b.n	800361e <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800340e:	4b7f      	ldr	r3, [pc, #508]	; (800360c <UART_SetConfig+0x308>)
 8003410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003414:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003418:	2b80      	cmp	r3, #128	; 0x80
 800341a:	f000 8104 	beq.w	8003626 <UART_SetConfig+0x322>
 800341e:	d806      	bhi.n	800342e <UART_SetConfig+0x12a>
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 810c 	beq.w	800363e <UART_SetConfig+0x33a>
 8003426:	2b40      	cmp	r3, #64	; 0x40
 8003428:	d0dc      	beq.n	80033e4 <UART_SetConfig+0xe0>
        ret = HAL_ERROR;
 800342a:	2001      	movs	r0, #1
 800342c:	e0f7      	b.n	800361e <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800342e:	2bc0      	cmp	r3, #192	; 0xc0
 8003430:	d0e3      	beq.n	80033fa <UART_SetConfig+0xf6>
        ret = HAL_ERROR;
 8003432:	2001      	movs	r0, #1
 8003434:	e0f3      	b.n	800361e <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003436:	4b75      	ldr	r3, [pc, #468]	; (800360c <UART_SetConfig+0x308>)
 8003438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003444:	f000 80f5 	beq.w	8003632 <UART_SetConfig+0x32e>
 8003448:	d80e      	bhi.n	8003468 <UART_SetConfig+0x164>
 800344a:	2b00      	cmp	r3, #0
 800344c:	f000 80f7 	beq.w	800363e <UART_SetConfig+0x33a>
 8003450:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003454:	d106      	bne.n	8003464 <UART_SetConfig+0x160>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003456:	69e3      	ldr	r3, [r4, #28]
 8003458:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800345c:	d1c6      	bne.n	80033ec <UART_SetConfig+0xe8>
        pclk = HAL_RCC_GetSysClockFreq();
 800345e:	f7fe fe79 	bl	8002154 <HAL_RCC_GetSysClockFreq>
        break;
 8003462:	e076      	b.n	8003552 <UART_SetConfig+0x24e>
        ret = HAL_ERROR;
 8003464:	2001      	movs	r0, #1
 8003466:	e0da      	b.n	800361e <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003468:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800346c:	d106      	bne.n	800347c <UART_SetConfig+0x178>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800346e:	69e0      	ldr	r0, [r4, #28]
 8003470:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003474:	d06f      	beq.n	8003556 <UART_SetConfig+0x252>
        pclk = (uint32_t) LSE_VALUE;
 8003476:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800347a:	e093      	b.n	80035a4 <UART_SetConfig+0x2a0>
        ret = HAL_ERROR;
 800347c:	2001      	movs	r0, #1
 800347e:	e0ce      	b.n	800361e <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003480:	4b62      	ldr	r3, [pc, #392]	; (800360c <UART_SetConfig+0x308>)
 8003482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003486:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800348a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800348e:	f000 80d0 	beq.w	8003632 <UART_SetConfig+0x32e>
 8003492:	d807      	bhi.n	80034a4 <UART_SetConfig+0x1a0>
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 80ef 	beq.w	8003678 <UART_SetConfig+0x374>
 800349a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800349e:	d0da      	beq.n	8003456 <UART_SetConfig+0x152>
        ret = HAL_ERROR;
 80034a0:	2001      	movs	r0, #1
 80034a2:	e0bc      	b.n	800361e <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034a8:	d0e1      	beq.n	800346e <UART_SetConfig+0x16a>
        ret = HAL_ERROR;
 80034aa:	2001      	movs	r0, #1
 80034ac:	e0b7      	b.n	800361e <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034ae:	4b57      	ldr	r3, [pc, #348]	; (800360c <UART_SetConfig+0x308>)
 80034b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80034b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034bc:	f000 80b9 	beq.w	8003632 <UART_SetConfig+0x32e>
 80034c0:	d807      	bhi.n	80034d2 <UART_SetConfig+0x1ce>
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f000 80bb 	beq.w	800363e <UART_SetConfig+0x33a>
 80034c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034cc:	d0c3      	beq.n	8003456 <UART_SetConfig+0x152>
        ret = HAL_ERROR;
 80034ce:	2001      	movs	r0, #1
 80034d0:	e0a5      	b.n	800361e <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034d6:	d0ca      	beq.n	800346e <UART_SetConfig+0x16a>
        ret = HAL_ERROR;
 80034d8:	2001      	movs	r0, #1
 80034da:	e0a0      	b.n	800361e <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034dc:	4b4b      	ldr	r3, [pc, #300]	; (800360c <UART_SetConfig+0x308>)
 80034de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80034e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034ea:	f000 80a2 	beq.w	8003632 <UART_SetConfig+0x32e>
 80034ee:	d807      	bhi.n	8003500 <UART_SetConfig+0x1fc>
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 80a4 	beq.w	800363e <UART_SetConfig+0x33a>
 80034f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034fa:	d0ac      	beq.n	8003456 <UART_SetConfig+0x152>
        ret = HAL_ERROR;
 80034fc:	2001      	movs	r0, #1
 80034fe:	e08e      	b.n	800361e <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003500:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003504:	d0b3      	beq.n	800346e <UART_SetConfig+0x16a>
        ret = HAL_ERROR;
 8003506:	2001      	movs	r0, #1
 8003508:	e089      	b.n	800361e <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800350a:	2301      	movs	r3, #1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800350c:	69e2      	ldr	r2, [r4, #28]
 800350e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003512:	f040 8099 	bne.w	8003648 <UART_SetConfig+0x344>
    switch (clocksource)
 8003516:	2b08      	cmp	r3, #8
 8003518:	d860      	bhi.n	80035dc <UART_SetConfig+0x2d8>
 800351a:	a201      	add	r2, pc, #4	; (adr r2, 8003520 <UART_SetConfig+0x21c>)
 800351c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003520:	0800354f 	.word	0x0800354f
 8003524:	08003585 	.word	0x08003585
 8003528:	0800358b 	.word	0x0800358b
 800352c:	080035dd 	.word	0x080035dd
 8003530:	0800345f 	.word	0x0800345f
 8003534:	080035dd 	.word	0x080035dd
 8003538:	080035dd 	.word	0x080035dd
 800353c:	080035dd 	.word	0x080035dd
 8003540:	08003549 	.word	0x08003549
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003544:	2300      	movs	r3, #0
 8003546:	e7e1      	b.n	800350c <UART_SetConfig+0x208>
        pclk = (uint32_t) LSE_VALUE;
 8003548:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800354c:	e003      	b.n	8003556 <UART_SetConfig+0x252>
        pclk = HAL_RCC_GetPCLK1Freq();
 800354e:	f7fe ff09 	bl	8002364 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003552:	2800      	cmp	r0, #0
 8003554:	d044      	beq.n	80035e0 <UART_SetConfig+0x2dc>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003556:	6862      	ldr	r2, [r4, #4]
 8003558:	0853      	lsrs	r3, r2, #1
 800355a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800355e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003562:	b29a      	uxth	r2, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003564:	f1a2 0010 	sub.w	r0, r2, #16
 8003568:	f64f 71ef 	movw	r1, #65519	; 0xffef
 800356c:	4288      	cmp	r0, r1
 800356e:	d839      	bhi.n	80035e4 <UART_SetConfig+0x2e0>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003570:	f023 030f 	bic.w	r3, r3, #15
 8003574:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 8003576:	6821      	ldr	r1, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003578:	f3c2 0242 	ubfx	r2, r2, #1, #3
        huart->Instance->BRR = brrtemp;
 800357c:	4313      	orrs	r3, r2
 800357e:	60cb      	str	r3, [r1, #12]
 8003580:	2000      	movs	r0, #0
 8003582:	e04c      	b.n	800361e <UART_SetConfig+0x31a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003584:	f7fe fefe 	bl	8002384 <HAL_RCC_GetPCLK2Freq>
        break;
 8003588:	e7e3      	b.n	8003552 <UART_SetConfig+0x24e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800358a:	4821      	ldr	r0, [pc, #132]	; (8003610 <UART_SetConfig+0x30c>)
 800358c:	e7e3      	b.n	8003556 <UART_SetConfig+0x252>
 800358e:	4820      	ldr	r0, [pc, #128]	; (8003610 <UART_SetConfig+0x30c>)
 8003590:	e7e1      	b.n	8003556 <UART_SetConfig+0x252>
        pclk = (uint32_t) HSI_VALUE;
 8003592:	481f      	ldr	r0, [pc, #124]	; (8003610 <UART_SetConfig+0x30c>)
 8003594:	e7df      	b.n	8003556 <UART_SetConfig+0x252>
        pclk = (uint32_t) LSE_VALUE;
 8003596:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800359a:	e7dc      	b.n	8003556 <UART_SetConfig+0x252>
        pclk = HAL_RCC_GetPCLK1Freq();
 800359c:	f7fe fee2 	bl	8002364 <HAL_RCC_GetPCLK1Freq>
        break;
    }

    if (pclk != 0U)
 80035a0:	2800      	cmp	r0, #0
 80035a2:	d039      	beq.n	8003618 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035a4:	6863      	ldr	r3, [r4, #4]
 80035a6:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80035aa:	fbb0 f0f3 	udiv	r0, r0, r3
 80035ae:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035b0:	f1a0 0210 	sub.w	r2, r0, #16
 80035b4:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d82f      	bhi.n	800361c <UART_SetConfig+0x318>
      {
        huart->Instance->BRR = usartdiv;
 80035bc:	6823      	ldr	r3, [r4, #0]
 80035be:	60d8      	str	r0, [r3, #12]
 80035c0:	2000      	movs	r0, #0
 80035c2:	e02c      	b.n	800361e <UART_SetConfig+0x31a>
        pclk = HAL_RCC_GetPCLK2Freq();
 80035c4:	f7fe fede 	bl	8002384 <HAL_RCC_GetPCLK2Freq>
        break;
 80035c8:	e7ea      	b.n	80035a0 <UART_SetConfig+0x29c>
        pclk = (uint32_t) LSE_VALUE;
 80035ca:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80035ce:	e7e9      	b.n	80035a4 <UART_SetConfig+0x2a0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035d0:	480f      	ldr	r0, [pc, #60]	; (8003610 <UART_SetConfig+0x30c>)
 80035d2:	e7e7      	b.n	80035a4 <UART_SetConfig+0x2a0>
        ret = HAL_ERROR;
 80035d4:	2001      	movs	r0, #1
 80035d6:	e022      	b.n	800361e <UART_SetConfig+0x31a>
 80035d8:	2001      	movs	r0, #1
 80035da:	e020      	b.n	800361e <UART_SetConfig+0x31a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035dc:	2001      	movs	r0, #1
 80035de:	e01e      	b.n	800361e <UART_SetConfig+0x31a>
 80035e0:	2000      	movs	r0, #0
 80035e2:	e01c      	b.n	800361e <UART_SetConfig+0x31a>
        ret = HAL_ERROR;
 80035e4:	2001      	movs	r0, #1
 80035e6:	e01a      	b.n	800361e <UART_SetConfig+0x31a>
 80035e8:	efff69f3 	.word	0xefff69f3
 80035ec:	40011000 	.word	0x40011000
 80035f0:	40004400 	.word	0x40004400
 80035f4:	40004800 	.word	0x40004800
 80035f8:	40004c00 	.word	0x40004c00
 80035fc:	40005000 	.word	0x40005000
 8003600:	40011400 	.word	0x40011400
 8003604:	40007800 	.word	0x40007800
 8003608:	40007c00 	.word	0x40007c00
 800360c:	40023800 	.word	0x40023800
 8003610:	00f42400 	.word	0x00f42400
 8003614:	2001      	movs	r0, #1
 8003616:	e002      	b.n	800361e <UART_SetConfig+0x31a>
 8003618:	2000      	movs	r0, #0
 800361a:	e000      	b.n	800361e <UART_SetConfig+0x31a>
      }
      else
      {
        ret = HAL_ERROR;
 800361c:	2001      	movs	r0, #1
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800361e:	2300      	movs	r3, #0
 8003620:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8003622:	66a3      	str	r3, [r4, #104]	; 0x68

  return ret;
}
 8003624:	bd10      	pop	{r4, pc}
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003626:	69e3      	ldr	r3, [r4, #28]
 8003628:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800362c:	d0af      	beq.n	800358e <UART_SetConfig+0x28a>
        pclk = (uint32_t) HSI_VALUE;
 800362e:	4815      	ldr	r0, [pc, #84]	; (8003684 <UART_SetConfig+0x380>)
 8003630:	e7b8      	b.n	80035a4 <UART_SetConfig+0x2a0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003632:	69e3      	ldr	r3, [r4, #28]
 8003634:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003638:	d0ab      	beq.n	8003592 <UART_SetConfig+0x28e>
 800363a:	4812      	ldr	r0, [pc, #72]	; (8003684 <UART_SetConfig+0x380>)
 800363c:	e7b2      	b.n	80035a4 <UART_SetConfig+0x2a0>
 800363e:	69e3      	ldr	r3, [r4, #28]
 8003640:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003644:	d083      	beq.n	800354e <UART_SetConfig+0x24a>
 8003646:	2300      	movs	r3, #0
    switch (clocksource)
 8003648:	2b08      	cmp	r3, #8
 800364a:	d8e3      	bhi.n	8003614 <UART_SetConfig+0x310>
 800364c:	a201      	add	r2, pc, #4	; (adr r2, 8003654 <UART_SetConfig+0x350>)
 800364e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003652:	bf00      	nop
 8003654:	0800359d 	.word	0x0800359d
 8003658:	080035c5 	.word	0x080035c5
 800365c:	080035d1 	.word	0x080035d1
 8003660:	08003615 	.word	0x08003615
 8003664:	080033ed 	.word	0x080033ed
 8003668:	08003615 	.word	0x08003615
 800366c:	08003615 	.word	0x08003615
 8003670:	08003615 	.word	0x08003615
 8003674:	080035cb 	.word	0x080035cb
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003678:	69e3      	ldr	r3, [r4, #28]
 800367a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800367e:	d081      	beq.n	8003584 <UART_SetConfig+0x280>
 8003680:	2301      	movs	r3, #1
 8003682:	e7e1      	b.n	8003648 <UART_SetConfig+0x344>
 8003684:	00f42400 	.word	0x00f42400

08003688 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003688:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800368a:	f013 0f01 	tst.w	r3, #1
 800368e:	d006      	beq.n	800369e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003690:	6802      	ldr	r2, [r0, #0]
 8003692:	6853      	ldr	r3, [r2, #4]
 8003694:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003698:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800369a:	430b      	orrs	r3, r1
 800369c:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800369e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80036a0:	f013 0f02 	tst.w	r3, #2
 80036a4:	d006      	beq.n	80036b4 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036a6:	6802      	ldr	r2, [r0, #0]
 80036a8:	6853      	ldr	r3, [r2, #4]
 80036aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ae:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80036b0:	430b      	orrs	r3, r1
 80036b2:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80036b6:	f013 0f04 	tst.w	r3, #4
 80036ba:	d006      	beq.n	80036ca <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036bc:	6802      	ldr	r2, [r0, #0]
 80036be:	6853      	ldr	r3, [r2, #4]
 80036c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036c4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80036c6:	430b      	orrs	r3, r1
 80036c8:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036ca:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80036cc:	f013 0f08 	tst.w	r3, #8
 80036d0:	d006      	beq.n	80036e0 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036d2:	6802      	ldr	r2, [r0, #0]
 80036d4:	6853      	ldr	r3, [r2, #4]
 80036d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80036da:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80036dc:	430b      	orrs	r3, r1
 80036de:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80036e2:	f013 0f10 	tst.w	r3, #16
 80036e6:	d006      	beq.n	80036f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036e8:	6802      	ldr	r2, [r0, #0]
 80036ea:	6893      	ldr	r3, [r2, #8]
 80036ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036f0:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80036f2:	430b      	orrs	r3, r1
 80036f4:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036f6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80036f8:	f013 0f20 	tst.w	r3, #32
 80036fc:	d006      	beq.n	800370c <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036fe:	6802      	ldr	r2, [r0, #0]
 8003700:	6893      	ldr	r3, [r2, #8]
 8003702:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003706:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8003708:	430b      	orrs	r3, r1
 800370a:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800370c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800370e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003712:	d00a      	beq.n	800372a <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003714:	6802      	ldr	r2, [r0, #0]
 8003716:	6853      	ldr	r3, [r2, #4]
 8003718:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800371c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800371e:	430b      	orrs	r3, r1
 8003720:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003722:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003724:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003728:	d00b      	beq.n	8003742 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800372a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800372c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003730:	d006      	beq.n	8003740 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003732:	6802      	ldr	r2, [r0, #0]
 8003734:	6853      	ldr	r3, [r2, #4]
 8003736:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800373a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800373c:	430b      	orrs	r3, r1
 800373e:	6053      	str	r3, [r2, #4]
  }
}
 8003740:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003742:	6802      	ldr	r2, [r0, #0]
 8003744:	6853      	ldr	r3, [r2, #4]
 8003746:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800374a:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800374c:	430b      	orrs	r3, r1
 800374e:	6053      	str	r3, [r2, #4]
 8003750:	e7eb      	b.n	800372a <UART_AdvFeatureConfig+0xa2>

08003752 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003752:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003756:	4680      	mov	r8, r0
 8003758:	460e      	mov	r6, r1
 800375a:	4615      	mov	r5, r2
 800375c:	4699      	mov	r9, r3
 800375e:	9f08      	ldr	r7, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003760:	f8d8 2000 	ldr.w	r2, [r8]
 8003764:	69d4      	ldr	r4, [r2, #28]
 8003766:	ea36 0304 	bics.w	r3, r6, r4
 800376a:	bf0c      	ite	eq
 800376c:	2401      	moveq	r4, #1
 800376e:	2400      	movne	r4, #0
 8003770:	42ac      	cmp	r4, r5
 8003772:	d144      	bne.n	80037fe <UART_WaitOnFlagUntilTimeout+0xac>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003774:	f1b7 3fff 	cmp.w	r7, #4294967295
 8003778:	d0f4      	beq.n	8003764 <UART_WaitOnFlagUntilTimeout+0x12>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800377a:	f7fd febb 	bl	80014f4 <HAL_GetTick>
 800377e:	eba0 0009 	sub.w	r0, r0, r9
 8003782:	42b8      	cmp	r0, r7
 8003784:	d825      	bhi.n	80037d2 <UART_WaitOnFlagUntilTimeout+0x80>
 8003786:	b327      	cbz	r7, 80037d2 <UART_WaitOnFlagUntilTimeout+0x80>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003788:	f8d8 3000 	ldr.w	r3, [r8]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	f012 0f04 	tst.w	r2, #4
 8003792:	d0e5      	beq.n	8003760 <UART_WaitOnFlagUntilTimeout+0xe>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003794:	69da      	ldr	r2, [r3, #28]
 8003796:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800379a:	d0e1      	beq.n	8003760 <UART_WaitOnFlagUntilTimeout+0xe>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800379c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037a0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037a2:	f8d8 2000 	ldr.w	r2, [r8]
 80037a6:	6813      	ldr	r3, [r2, #0]
 80037a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037ac:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ae:	f8d8 2000 	ldr.w	r2, [r8]
 80037b2:	6893      	ldr	r3, [r2, #8]
 80037b4:	f023 0301 	bic.w	r3, r3, #1
 80037b8:	6093      	str	r3, [r2, #8]

          huart->gState = HAL_UART_STATE_READY;
 80037ba:	2320      	movs	r3, #32
 80037bc:	f8c8 3078 	str.w	r3, [r8, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80037c0:	f8c8 307c 	str.w	r3, [r8, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037c4:	f8c8 3080 	str.w	r3, [r8, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037c8:	2300      	movs	r3, #0
 80037ca:	f888 3074 	strb.w	r3, [r8, #116]	; 0x74

          return HAL_TIMEOUT;
 80037ce:	2003      	movs	r0, #3
 80037d0:	e016      	b.n	8003800 <UART_WaitOnFlagUntilTimeout+0xae>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037d2:	f8d8 2000 	ldr.w	r2, [r8]
 80037d6:	6813      	ldr	r3, [r2, #0]
 80037d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037dc:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037de:	f8d8 2000 	ldr.w	r2, [r8]
 80037e2:	6893      	ldr	r3, [r2, #8]
 80037e4:	f023 0301 	bic.w	r3, r3, #1
 80037e8:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 80037ea:	2320      	movs	r3, #32
 80037ec:	f8c8 3078 	str.w	r3, [r8, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80037f0:	f8c8 307c 	str.w	r3, [r8, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 80037f4:	2300      	movs	r3, #0
 80037f6:	f888 3074 	strb.w	r3, [r8, #116]	; 0x74
        return HAL_TIMEOUT;
 80037fa:	2003      	movs	r0, #3
 80037fc:	e000      	b.n	8003800 <UART_WaitOnFlagUntilTimeout+0xae>
        }
      }
    }
  }
  return HAL_OK;
 80037fe:	2000      	movs	r0, #0
}
 8003800:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003804 <HAL_UART_Transmit>:
{
 8003804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003808:	b082      	sub	sp, #8
 800380a:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800380c:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800380e:	2b20      	cmp	r3, #32
 8003810:	d15d      	bne.n	80038ce <HAL_UART_Transmit+0xca>
 8003812:	4604      	mov	r4, r0
 8003814:	460d      	mov	r5, r1
 8003816:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8003818:	2900      	cmp	r1, #0
 800381a:	d05c      	beq.n	80038d6 <HAL_UART_Transmit+0xd2>
 800381c:	2a00      	cmp	r2, #0
 800381e:	d05a      	beq.n	80038d6 <HAL_UART_Transmit+0xd2>
    __HAL_LOCK(huart);
 8003820:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8003824:	2b01      	cmp	r3, #1
 8003826:	d058      	beq.n	80038da <HAL_UART_Transmit+0xd6>
 8003828:	2301      	movs	r3, #1
 800382a:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800382e:	2300      	movs	r3, #0
 8003830:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003834:	2321      	movs	r3, #33	; 0x21
 8003836:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8003838:	f7fd fe5c 	bl	80014f4 <HAL_GetTick>
 800383c:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 800383e:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8003842:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003846:	68a3      	ldr	r3, [r4, #8]
 8003848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800384c:	d00d      	beq.n	800386a <HAL_UART_Transmit+0x66>
      pdata16bits = NULL;
 800384e:	f04f 0a00 	mov.w	sl, #0
    __HAL_UNLOCK(huart);
 8003852:	2300      	movs	r3, #0
 8003854:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 8003858:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800385c:	b29b      	uxth	r3, r3
 800385e:	b35b      	cbz	r3, 80038b8 <HAL_UART_Transmit+0xb4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003860:	f04f 0900 	mov.w	r9, #0
 8003864:	f04f 0880 	mov.w	r8, #128	; 0x80
 8003868:	e017      	b.n	800389a <HAL_UART_Transmit+0x96>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800386a:	6923      	ldr	r3, [r4, #16]
 800386c:	b913      	cbnz	r3, 8003874 <HAL_UART_Transmit+0x70>
      pdata16bits = (uint16_t *) pData;
 800386e:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 8003870:	2500      	movs	r5, #0
 8003872:	e7ee      	b.n	8003852 <HAL_UART_Transmit+0x4e>
      pdata16bits = NULL;
 8003874:	f04f 0a00 	mov.w	sl, #0
 8003878:	e7eb      	b.n	8003852 <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800387a:	6822      	ldr	r2, [r4, #0]
 800387c:	f83a 3b02 	ldrh.w	r3, [sl], #2
 8003880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003884:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8003886:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800388a:	3a01      	subs	r2, #1
 800388c:	b292      	uxth	r2, r2
 800388e:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003892:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8003896:	b29b      	uxth	r3, r3
 8003898:	b173      	cbz	r3, 80038b8 <HAL_UART_Transmit+0xb4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800389a:	9600      	str	r6, [sp, #0]
 800389c:	463b      	mov	r3, r7
 800389e:	464a      	mov	r2, r9
 80038a0:	4641      	mov	r1, r8
 80038a2:	4620      	mov	r0, r4
 80038a4:	f7ff ff55 	bl	8003752 <UART_WaitOnFlagUntilTimeout>
 80038a8:	b9c8      	cbnz	r0, 80038de <HAL_UART_Transmit+0xda>
      if (pdata8bits == NULL)
 80038aa:	2d00      	cmp	r5, #0
 80038ac:	d0e5      	beq.n	800387a <HAL_UART_Transmit+0x76>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038ae:	6823      	ldr	r3, [r4, #0]
 80038b0:	f815 2b01 	ldrb.w	r2, [r5], #1
 80038b4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80038b6:	e7e6      	b.n	8003886 <HAL_UART_Transmit+0x82>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038b8:	9600      	str	r6, [sp, #0]
 80038ba:	463b      	mov	r3, r7
 80038bc:	2200      	movs	r2, #0
 80038be:	2140      	movs	r1, #64	; 0x40
 80038c0:	4620      	mov	r0, r4
 80038c2:	f7ff ff46 	bl	8003752 <UART_WaitOnFlagUntilTimeout>
 80038c6:	b960      	cbnz	r0, 80038e2 <HAL_UART_Transmit+0xde>
    huart->gState = HAL_UART_STATE_READY;
 80038c8:	2320      	movs	r3, #32
 80038ca:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 80038cc:	e000      	b.n	80038d0 <HAL_UART_Transmit+0xcc>
    return HAL_BUSY;
 80038ce:	2002      	movs	r0, #2
}
 80038d0:	b002      	add	sp, #8
 80038d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 80038d6:	2001      	movs	r0, #1
 80038d8:	e7fa      	b.n	80038d0 <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 80038da:	2002      	movs	r0, #2
 80038dc:	e7f8      	b.n	80038d0 <HAL_UART_Transmit+0xcc>
        return HAL_TIMEOUT;
 80038de:	2003      	movs	r0, #3
 80038e0:	e7f6      	b.n	80038d0 <HAL_UART_Transmit+0xcc>
      return HAL_TIMEOUT;
 80038e2:	2003      	movs	r0, #3
 80038e4:	e7f4      	b.n	80038d0 <HAL_UART_Transmit+0xcc>

080038e6 <UART_CheckIdleState>:
{
 80038e6:	b530      	push	{r4, r5, lr}
 80038e8:	b083      	sub	sp, #12
 80038ea:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ec:	2300      	movs	r3, #0
 80038ee:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 80038f2:	f7fd fdff 	bl	80014f4 <HAL_GetTick>
 80038f6:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038f8:	6823      	ldr	r3, [r4, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f013 0f08 	tst.w	r3, #8
 8003900:	d10d      	bne.n	800391e <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003902:	6823      	ldr	r3, [r4, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f013 0f04 	tst.w	r3, #4
 800390a:	d116      	bne.n	800393a <UART_CheckIdleState+0x54>
  huart->gState = HAL_UART_STATE_READY;
 800390c:	2320      	movs	r3, #32
 800390e:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003910:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003912:	2000      	movs	r0, #0
 8003914:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8003916:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
}
 800391a:	b003      	add	sp, #12
 800391c:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800391e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	4603      	mov	r3, r0
 8003926:	2200      	movs	r2, #0
 8003928:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800392c:	4620      	mov	r0, r4
 800392e:	f7ff ff10 	bl	8003752 <UART_WaitOnFlagUntilTimeout>
 8003932:	2800      	cmp	r0, #0
 8003934:	d0e5      	beq.n	8003902 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8003936:	2003      	movs	r0, #3
 8003938:	e7ef      	b.n	800391a <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800393a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800393e:	9300      	str	r3, [sp, #0]
 8003940:	462b      	mov	r3, r5
 8003942:	2200      	movs	r2, #0
 8003944:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003948:	4620      	mov	r0, r4
 800394a:	f7ff ff02 	bl	8003752 <UART_WaitOnFlagUntilTimeout>
 800394e:	2800      	cmp	r0, #0
 8003950:	d0dc      	beq.n	800390c <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8003952:	2003      	movs	r0, #3
 8003954:	e7e1      	b.n	800391a <UART_CheckIdleState+0x34>

08003956 <HAL_UART_Init>:
  if (huart == NULL)
 8003956:	b368      	cbz	r0, 80039b4 <HAL_UART_Init+0x5e>
{
 8003958:	b510      	push	{r4, lr}
 800395a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800395c:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800395e:	b303      	cbz	r3, 80039a2 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8003960:	2324      	movs	r3, #36	; 0x24
 8003962:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8003964:	6822      	ldr	r2, [r4, #0]
 8003966:	6813      	ldr	r3, [r2, #0]
 8003968:	f023 0301 	bic.w	r3, r3, #1
 800396c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800396e:	4620      	mov	r0, r4
 8003970:	f7ff fcc8 	bl	8003304 <UART_SetConfig>
 8003974:	2801      	cmp	r0, #1
 8003976:	d013      	beq.n	80039a0 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003978:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800397a:	b9bb      	cbnz	r3, 80039ac <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800397c:	6822      	ldr	r2, [r4, #0]
 800397e:	6853      	ldr	r3, [r2, #4]
 8003980:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003984:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003986:	6822      	ldr	r2, [r4, #0]
 8003988:	6893      	ldr	r3, [r2, #8]
 800398a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800398e:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8003990:	6822      	ldr	r2, [r4, #0]
 8003992:	6813      	ldr	r3, [r2, #0]
 8003994:	f043 0301 	orr.w	r3, r3, #1
 8003998:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800399a:	4620      	mov	r0, r4
 800399c:	f7ff ffa3 	bl	80038e6 <UART_CheckIdleState>
}
 80039a0:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80039a2:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 80039a6:	f7fd fd09 	bl	80013bc <HAL_UART_MspInit>
 80039aa:	e7d9      	b.n	8003960 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 80039ac:	4620      	mov	r0, r4
 80039ae:	f7ff fe6b 	bl	8003688 <UART_AdvFeatureConfig>
 80039b2:	e7e3      	b.n	800397c <HAL_UART_Init+0x26>
    return HAL_ERROR;
 80039b4:	2001      	movs	r0, #1
}
 80039b6:	4770      	bx	lr

080039b8 <__libc_init_array>:
 80039b8:	b570      	push	{r4, r5, r6, lr}
 80039ba:	4d0d      	ldr	r5, [pc, #52]	; (80039f0 <__libc_init_array+0x38>)
 80039bc:	4c0d      	ldr	r4, [pc, #52]	; (80039f4 <__libc_init_array+0x3c>)
 80039be:	1b64      	subs	r4, r4, r5
 80039c0:	10a4      	asrs	r4, r4, #2
 80039c2:	2600      	movs	r6, #0
 80039c4:	42a6      	cmp	r6, r4
 80039c6:	d109      	bne.n	80039dc <__libc_init_array+0x24>
 80039c8:	4d0b      	ldr	r5, [pc, #44]	; (80039f8 <__libc_init_array+0x40>)
 80039ca:	4c0c      	ldr	r4, [pc, #48]	; (80039fc <__libc_init_array+0x44>)
 80039cc:	f000 f864 	bl	8003a98 <_init>
 80039d0:	1b64      	subs	r4, r4, r5
 80039d2:	10a4      	asrs	r4, r4, #2
 80039d4:	2600      	movs	r6, #0
 80039d6:	42a6      	cmp	r6, r4
 80039d8:	d105      	bne.n	80039e6 <__libc_init_array+0x2e>
 80039da:	bd70      	pop	{r4, r5, r6, pc}
 80039dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80039e0:	4798      	blx	r3
 80039e2:	3601      	adds	r6, #1
 80039e4:	e7ee      	b.n	80039c4 <__libc_init_array+0xc>
 80039e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ea:	4798      	blx	r3
 80039ec:	3601      	adds	r6, #1
 80039ee:	e7f2      	b.n	80039d6 <__libc_init_array+0x1e>
 80039f0:	08003dac 	.word	0x08003dac
 80039f4:	08003dac 	.word	0x08003dac
 80039f8:	08003dac 	.word	0x08003dac
 80039fc:	08003db0 	.word	0x08003db0

08003a00 <memset>:
 8003a00:	4402      	add	r2, r0
 8003a02:	4603      	mov	r3, r0
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d100      	bne.n	8003a0a <memset+0xa>
 8003a08:	4770      	bx	lr
 8003a0a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a0e:	e7f9      	b.n	8003a04 <memset+0x4>

08003a10 <__utoa>:
 8003a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a12:	4c1f      	ldr	r4, [pc, #124]	; (8003a90 <__utoa+0x80>)
 8003a14:	b08b      	sub	sp, #44	; 0x2c
 8003a16:	4605      	mov	r5, r0
 8003a18:	460b      	mov	r3, r1
 8003a1a:	466e      	mov	r6, sp
 8003a1c:	f104 0c20 	add.w	ip, r4, #32
 8003a20:	6820      	ldr	r0, [r4, #0]
 8003a22:	6861      	ldr	r1, [r4, #4]
 8003a24:	4637      	mov	r7, r6
 8003a26:	c703      	stmia	r7!, {r0, r1}
 8003a28:	3408      	adds	r4, #8
 8003a2a:	4564      	cmp	r4, ip
 8003a2c:	463e      	mov	r6, r7
 8003a2e:	d1f7      	bne.n	8003a20 <__utoa+0x10>
 8003a30:	7921      	ldrb	r1, [r4, #4]
 8003a32:	7139      	strb	r1, [r7, #4]
 8003a34:	1e91      	subs	r1, r2, #2
 8003a36:	6820      	ldr	r0, [r4, #0]
 8003a38:	6038      	str	r0, [r7, #0]
 8003a3a:	2922      	cmp	r1, #34	; 0x22
 8003a3c:	f04f 0100 	mov.w	r1, #0
 8003a40:	d904      	bls.n	8003a4c <__utoa+0x3c>
 8003a42:	7019      	strb	r1, [r3, #0]
 8003a44:	460b      	mov	r3, r1
 8003a46:	4618      	mov	r0, r3
 8003a48:	b00b      	add	sp, #44	; 0x2c
 8003a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a4c:	1e58      	subs	r0, r3, #1
 8003a4e:	4684      	mov	ip, r0
 8003a50:	fbb5 f7f2 	udiv	r7, r5, r2
 8003a54:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8003a58:	fb02 5617 	mls	r6, r2, r7, r5
 8003a5c:	4476      	add	r6, lr
 8003a5e:	460c      	mov	r4, r1
 8003a60:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8003a64:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8003a68:	462e      	mov	r6, r5
 8003a6a:	42b2      	cmp	r2, r6
 8003a6c:	f101 0101 	add.w	r1, r1, #1
 8003a70:	463d      	mov	r5, r7
 8003a72:	d9ed      	bls.n	8003a50 <__utoa+0x40>
 8003a74:	2200      	movs	r2, #0
 8003a76:	545a      	strb	r2, [r3, r1]
 8003a78:	1919      	adds	r1, r3, r4
 8003a7a:	1aa5      	subs	r5, r4, r2
 8003a7c:	42aa      	cmp	r2, r5
 8003a7e:	dae2      	bge.n	8003a46 <__utoa+0x36>
 8003a80:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003a84:	780e      	ldrb	r6, [r1, #0]
 8003a86:	7006      	strb	r6, [r0, #0]
 8003a88:	3201      	adds	r2, #1
 8003a8a:	f801 5901 	strb.w	r5, [r1], #-1
 8003a8e:	e7f4      	b.n	8003a7a <__utoa+0x6a>
 8003a90:	08003d7c 	.word	0x08003d7c

08003a94 <utoa>:
 8003a94:	f7ff bfbc 	b.w	8003a10 <__utoa>

08003a98 <_init>:
 8003a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a9a:	bf00      	nop
 8003a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a9e:	bc08      	pop	{r3}
 8003aa0:	469e      	mov	lr, r3
 8003aa2:	4770      	bx	lr

08003aa4 <_fini>:
 8003aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aa6:	bf00      	nop
 8003aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aaa:	bc08      	pop	{r3}
 8003aac:	469e      	mov	lr, r3
 8003aae:	4770      	bx	lr
