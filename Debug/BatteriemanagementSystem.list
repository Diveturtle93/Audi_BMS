
BatteriemanagementSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c68  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000624  08006e60  08006e60  00016e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007484  08007484  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007484  08007484  00017484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800748c  0800748c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800748c  0800748c  0001748c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007490  08007490  00017490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007494  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  2000000c  080074a0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  080074a0  000202f4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018b02  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000389e  00000000  00000000  00038b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  0003c3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001180  00000000  00000000  0003d6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c4ed  00000000  00000000  0003e878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000197c8  00000000  00000000  0006ad65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001080f0  00000000  00000000  0008452d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018c61d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e10  00000000  00000000  0018c670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08006e48 	.word	0x08006e48

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08006e48 	.word	0x08006e48

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b96e 	b.w	800053c <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468c      	mov	ip, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	f040 8083 	bne.w	800038e <__udivmoddi4+0x116>
 8000288:	428a      	cmp	r2, r1
 800028a:	4617      	mov	r7, r2
 800028c:	d947      	bls.n	800031e <__udivmoddi4+0xa6>
 800028e:	fab2 f282 	clz	r2, r2
 8000292:	b142      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000294:	f1c2 0020 	rsb	r0, r2, #32
 8000298:	fa24 f000 	lsr.w	r0, r4, r0
 800029c:	4091      	lsls	r1, r2
 800029e:	4097      	lsls	r7, r2
 80002a0:	ea40 0c01 	orr.w	ip, r0, r1
 80002a4:	4094      	lsls	r4, r2
 80002a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002aa:	0c23      	lsrs	r3, r4, #16
 80002ac:	fbbc f6f8 	udiv	r6, ip, r8
 80002b0:	fa1f fe87 	uxth.w	lr, r7
 80002b4:	fb08 c116 	mls	r1, r8, r6, ip
 80002b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002bc:	fb06 f10e 	mul.w	r1, r6, lr
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x60>
 80002c4:	18fb      	adds	r3, r7, r3
 80002c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ca:	f080 8119 	bcs.w	8000500 <__udivmoddi4+0x288>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 8116 	bls.w	8000500 <__udivmoddi4+0x288>
 80002d4:	3e02      	subs	r6, #2
 80002d6:	443b      	add	r3, r7
 80002d8:	1a5b      	subs	r3, r3, r1
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e0:	fb08 3310 	mls	r3, r8, r0, r3
 80002e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x8c>
 80002f0:	193c      	adds	r4, r7, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f6:	f080 8105 	bcs.w	8000504 <__udivmoddi4+0x28c>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f240 8102 	bls.w	8000504 <__udivmoddi4+0x28c>
 8000300:	3802      	subs	r0, #2
 8000302:	443c      	add	r4, r7
 8000304:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000308:	eba4 040e 	sub.w	r4, r4, lr
 800030c:	2600      	movs	r6, #0
 800030e:	b11d      	cbz	r5, 8000318 <__udivmoddi4+0xa0>
 8000310:	40d4      	lsrs	r4, r2
 8000312:	2300      	movs	r3, #0
 8000314:	e9c5 4300 	strd	r4, r3, [r5]
 8000318:	4631      	mov	r1, r6
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	b902      	cbnz	r2, 8000322 <__udivmoddi4+0xaa>
 8000320:	deff      	udf	#255	; 0xff
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	2a00      	cmp	r2, #0
 8000328:	d150      	bne.n	80003cc <__udivmoddi4+0x154>
 800032a:	1bcb      	subs	r3, r1, r7
 800032c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000330:	fa1f f887 	uxth.w	r8, r7
 8000334:	2601      	movs	r6, #1
 8000336:	fbb3 fcfe 	udiv	ip, r3, lr
 800033a:	0c21      	lsrs	r1, r4, #16
 800033c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000340:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000344:	fb08 f30c 	mul.w	r3, r8, ip
 8000348:	428b      	cmp	r3, r1
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0xe4>
 800034c:	1879      	adds	r1, r7, r1
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0xe2>
 8000354:	428b      	cmp	r3, r1
 8000356:	f200 80e9 	bhi.w	800052c <__udivmoddi4+0x2b4>
 800035a:	4684      	mov	ip, r0
 800035c:	1ac9      	subs	r1, r1, r3
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1110 	mls	r1, lr, r0, r1
 8000368:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x10c>
 8000374:	193c      	adds	r4, r7, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x10a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80d9 	bhi.w	8000534 <__udivmoddi4+0x2bc>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e7bf      	b.n	800030e <__udivmoddi4+0x96>
 800038e:	428b      	cmp	r3, r1
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0x12e>
 8000392:	2d00      	cmp	r5, #0
 8000394:	f000 80b1 	beq.w	80004fa <__udivmoddi4+0x282>
 8000398:	2600      	movs	r6, #0
 800039a:	e9c5 0100 	strd	r0, r1, [r5]
 800039e:	4630      	mov	r0, r6
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	fab3 f683 	clz	r6, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d14a      	bne.n	8000444 <__udivmoddi4+0x1cc>
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0x140>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 80b8 	bhi.w	8000528 <__udivmoddi4+0x2b0>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb61 0103 	sbc.w	r1, r1, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	468c      	mov	ip, r1
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0a8      	beq.n	8000318 <__udivmoddi4+0xa0>
 80003c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ca:	e7a5      	b.n	8000318 <__udivmoddi4+0xa0>
 80003cc:	f1c2 0320 	rsb	r3, r2, #32
 80003d0:	fa20 f603 	lsr.w	r6, r0, r3
 80003d4:	4097      	lsls	r7, r2
 80003d6:	fa01 f002 	lsl.w	r0, r1, r2
 80003da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003de:	40d9      	lsrs	r1, r3
 80003e0:	4330      	orrs	r0, r6
 80003e2:	0c03      	lsrs	r3, r0, #16
 80003e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003e8:	fa1f f887 	uxth.w	r8, r7
 80003ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f108 	mul.w	r1, r6, r8
 80003f8:	4299      	cmp	r1, r3
 80003fa:	fa04 f402 	lsl.w	r4, r4, r2
 80003fe:	d909      	bls.n	8000414 <__udivmoddi4+0x19c>
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	f106 3cff 	add.w	ip, r6, #4294967295
 8000406:	f080 808d 	bcs.w	8000524 <__udivmoddi4+0x2ac>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 808a 	bls.w	8000524 <__udivmoddi4+0x2ac>
 8000410:	3e02      	subs	r6, #2
 8000412:	443b      	add	r3, r7
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b281      	uxth	r1, r0
 8000418:	fbb3 f0fe 	udiv	r0, r3, lr
 800041c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000420:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000424:	fb00 f308 	mul.w	r3, r0, r8
 8000428:	428b      	cmp	r3, r1
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x1c4>
 800042c:	1879      	adds	r1, r7, r1
 800042e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000432:	d273      	bcs.n	800051c <__udivmoddi4+0x2a4>
 8000434:	428b      	cmp	r3, r1
 8000436:	d971      	bls.n	800051c <__udivmoddi4+0x2a4>
 8000438:	3802      	subs	r0, #2
 800043a:	4439      	add	r1, r7
 800043c:	1acb      	subs	r3, r1, r3
 800043e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000442:	e778      	b.n	8000336 <__udivmoddi4+0xbe>
 8000444:	f1c6 0c20 	rsb	ip, r6, #32
 8000448:	fa03 f406 	lsl.w	r4, r3, r6
 800044c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000450:	431c      	orrs	r4, r3
 8000452:	fa20 f70c 	lsr.w	r7, r0, ip
 8000456:	fa01 f306 	lsl.w	r3, r1, r6
 800045a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800045e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000462:	431f      	orrs	r7, r3
 8000464:	0c3b      	lsrs	r3, r7, #16
 8000466:	fbb1 f9fe 	udiv	r9, r1, lr
 800046a:	fa1f f884 	uxth.w	r8, r4
 800046e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000472:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000476:	fb09 fa08 	mul.w	sl, r9, r8
 800047a:	458a      	cmp	sl, r1
 800047c:	fa02 f206 	lsl.w	r2, r2, r6
 8000480:	fa00 f306 	lsl.w	r3, r0, r6
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x220>
 8000486:	1861      	adds	r1, r4, r1
 8000488:	f109 30ff 	add.w	r0, r9, #4294967295
 800048c:	d248      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 800048e:	458a      	cmp	sl, r1
 8000490:	d946      	bls.n	8000520 <__udivmoddi4+0x2a8>
 8000492:	f1a9 0902 	sub.w	r9, r9, #2
 8000496:	4421      	add	r1, r4
 8000498:	eba1 010a 	sub.w	r1, r1, sl
 800049c:	b2bf      	uxth	r7, r7
 800049e:	fbb1 f0fe 	udiv	r0, r1, lr
 80004a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004aa:	fb00 f808 	mul.w	r8, r0, r8
 80004ae:	45b8      	cmp	r8, r7
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x24a>
 80004b2:	19e7      	adds	r7, r4, r7
 80004b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004b8:	d22e      	bcs.n	8000518 <__udivmoddi4+0x2a0>
 80004ba:	45b8      	cmp	r8, r7
 80004bc:	d92c      	bls.n	8000518 <__udivmoddi4+0x2a0>
 80004be:	3802      	subs	r0, #2
 80004c0:	4427      	add	r7, r4
 80004c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c6:	eba7 0708 	sub.w	r7, r7, r8
 80004ca:	fba0 8902 	umull	r8, r9, r0, r2
 80004ce:	454f      	cmp	r7, r9
 80004d0:	46c6      	mov	lr, r8
 80004d2:	4649      	mov	r1, r9
 80004d4:	d31a      	bcc.n	800050c <__udivmoddi4+0x294>
 80004d6:	d017      	beq.n	8000508 <__udivmoddi4+0x290>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x27a>
 80004da:	ebb3 020e 	subs.w	r2, r3, lr
 80004de:	eb67 0701 	sbc.w	r7, r7, r1
 80004e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004e6:	40f2      	lsrs	r2, r6
 80004e8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ec:	40f7      	lsrs	r7, r6
 80004ee:	e9c5 2700 	strd	r2, r7, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e70b      	b.n	8000318 <__udivmoddi4+0xa0>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0x60>
 8000504:	4618      	mov	r0, r3
 8000506:	e6fd      	b.n	8000304 <__udivmoddi4+0x8c>
 8000508:	4543      	cmp	r3, r8
 800050a:	d2e5      	bcs.n	80004d8 <__udivmoddi4+0x260>
 800050c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000510:	eb69 0104 	sbc.w	r1, r9, r4
 8000514:	3801      	subs	r0, #1
 8000516:	e7df      	b.n	80004d8 <__udivmoddi4+0x260>
 8000518:	4608      	mov	r0, r1
 800051a:	e7d2      	b.n	80004c2 <__udivmoddi4+0x24a>
 800051c:	4660      	mov	r0, ip
 800051e:	e78d      	b.n	800043c <__udivmoddi4+0x1c4>
 8000520:	4681      	mov	r9, r0
 8000522:	e7b9      	b.n	8000498 <__udivmoddi4+0x220>
 8000524:	4666      	mov	r6, ip
 8000526:	e775      	b.n	8000414 <__udivmoddi4+0x19c>
 8000528:	4630      	mov	r0, r6
 800052a:	e74a      	b.n	80003c2 <__udivmoddi4+0x14a>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	4439      	add	r1, r7
 8000532:	e713      	b.n	800035c <__udivmoddi4+0xe4>
 8000534:	3802      	subs	r0, #2
 8000536:	443c      	add	r4, r7
 8000538:	e724      	b.n	8000384 <__udivmoddi4+0x10c>
 800053a:	bf00      	nop

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, size, 1000);
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	b29a      	uxth	r2, r3
 800054e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000552:	6879      	ldr	r1, [r7, #4]
 8000554:	4803      	ldr	r0, [pc, #12]	; (8000564 <uartTransmit+0x24>)
 8000556:	f005 ffa9 	bl	80064ac <HAL_UART_Transmit>
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	2000026c 	.word	0x2000026c

08000568 <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	6039      	str	r1, [r7, #0]
	char str[11];

	utoa(number, str, base);
 8000572:	683a      	ldr	r2, [r7, #0]
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	4619      	mov	r1, r3
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f006 fc62 	bl	8006e44 <utoa>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff fe57 	bl	8000238 <strlen>
 800058a:	4603      	mov	r3, r0
 800058c:	b29a      	uxth	r2, r3
 800058e:	f107 010c 	add.w	r1, r7, #12
 8000592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000596:	4803      	ldr	r0, [pc, #12]	; (80005a4 <uartTransmitNumber+0x3c>)
 8000598:	f005 ff88 	bl	80064ac <HAL_UART_Transmit>
}
 800059c:	bf00      	nop
 800059e:	3718      	adds	r7, #24
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	2000026c 	.word	0x2000026c

080005a8 <wakeup_ltc6811>:
//----------------------------------------------------------------------

// Wakeup LTC6811 idle
//----------------------------------------------------------------------
void wakeup_ltc6811(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
	for(uint8_t i=0; i<LTC6811_DEVICES; i++)								// Wiederholen fuer Anzahl Slaves
 80005ae:	2300      	movs	r3, #0
 80005b0:	71fb      	strb	r3, [r7, #7]
 80005b2:	e011      	b.n	80005d8 <wakeup_ltc6811+0x30>
	{
		// ISOCS einschalten
		ISOCS_ENABLE();														// Chip-Select einschalten
 80005b4:	2200      	movs	r2, #0
 80005b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005ba:	480b      	ldr	r0, [pc, #44]	; (80005e8 <wakeup_ltc6811+0x40>)
 80005bc:	f002 fea4 	bl	8003308 <HAL_GPIO_WritePin>

		HAL_Delay(2);														// isoSPI braucht Zeit bis ready
 80005c0:	2002      	movs	r0, #2
 80005c2:	f002 f807 	bl	80025d4 <HAL_Delay>

		// ISOCS ausschalten
		ISOCS_DISABLE();													// Chip-Select ausschalten
 80005c6:	2201      	movs	r2, #1
 80005c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005cc:	4806      	ldr	r0, [pc, #24]	; (80005e8 <wakeup_ltc6811+0x40>)
 80005ce:	f002 fe9b 	bl	8003308 <HAL_GPIO_WritePin>
	for(uint8_t i=0; i<LTC6811_DEVICES; i++)								// Wiederholen fuer Anzahl Slaves
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	3301      	adds	r3, #1
 80005d6:	71fb      	strb	r3, [r7, #7]
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d0ea      	beq.n	80005b4 <wakeup_ltc6811+0xc>
	}
}
 80005de:	bf00      	nop
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40021000 	.word	0x40021000

080005ec <ltc6811>:
//----------------------------------------------------------------------

// Broadcast Command
//----------------------------------------------------------------------
void ltc6811(uint16_t command)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	80fb      	strh	r3, [r7, #6]
	// PEC berechnen, Anhand Command
	uint16_t pec;															// pec = Zwischenspeicher 16-Bit Command
	uint8_t cmd[4];															// Zwischenspeicher Command + Pec CRC
	pec = peccommand(command);
 80005f6:	88fb      	ldrh	r3, [r7, #6]
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 f89d 	bl	8000738 <peccommand>
 80005fe:	4603      	mov	r3, r0
 8000600:	81bb      	strh	r3, [r7, #12]
	
	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8000602:	f7ff ffd1 	bl	80005a8 <wakeup_ltc6811>

	// Command in cmd abspeichern
	cmd[0] = ((command >> 8) & 0x07);
 8000606:	88fb      	ldrh	r3, [r7, #6]
 8000608:	0a1b      	lsrs	r3, r3, #8
 800060a:	b29b      	uxth	r3, r3
 800060c:	b2db      	uxtb	r3, r3
 800060e:	f003 0307 	and.w	r3, r3, #7
 8000612:	b2db      	uxtb	r3, r3
 8000614:	723b      	strb	r3, [r7, #8]
	cmd[1] = (command & 0xFF);
 8000616:	88fb      	ldrh	r3, [r7, #6]
 8000618:	b2db      	uxtb	r3, r3
 800061a:	727b      	strb	r3, [r7, #9]
	cmd[2] = ((pec >> 8) & 0xFF);
 800061c:	89bb      	ldrh	r3, [r7, #12]
 800061e:	0a1b      	lsrs	r3, r3, #8
 8000620:	b29b      	uxth	r3, r3
 8000622:	b2db      	uxtb	r3, r3
 8000624:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (pec & 0xFE);
 8000626:	89bb      	ldrh	r3, [r7, #12]
 8000628:	b2db      	uxtb	r3, r3
 800062a:	f023 0301 	bic.w	r3, r3, #1
 800062e:	b2db      	uxtb	r3, r3
 8000630:	72fb      	strb	r3, [r7, #11]

	// ISOCS einschalten
	ISOCS_ENABLE();
 8000632:	2200      	movs	r2, #0
 8000634:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000638:	4813      	ldr	r0, [pc, #76]	; (8000688 <ltc6811+0x9c>)
 800063a:	f002 fe65 	bl	8003308 <HAL_GPIO_WritePin>

	// Command uebertragen
	HAL_SPI_Transmit(&hspi4, cmd, 4, 100);
 800063e:	f107 0108 	add.w	r1, r7, #8
 8000642:	2364      	movs	r3, #100	; 0x64
 8000644:	2204      	movs	r2, #4
 8000646:	4811      	ldr	r0, [pc, #68]	; (800068c <ltc6811+0xa0>)
 8000648:	f004 f81f 	bl	800468a <HAL_SPI_Transmit>

	// Wenn Command = STCOMM ist dann muessen noch 72 Takte uebertragen werden
	if (command == STCOMM)
 800064c:	88fb      	ldrh	r3, [r7, #6]
 800064e:	f240 7223 	movw	r2, #1827	; 0x723
 8000652:	4293      	cmp	r3, r2
 8000654:	d10e      	bne.n	8000674 <ltc6811+0x88>
	{
		// 72 = 9 * 8 Bit Daten
		for (uint8_t i = 0; i < 9; i++)
 8000656:	2300      	movs	r3, #0
 8000658:	73fb      	strb	r3, [r7, #15]
 800065a:	e008      	b.n	800066e <ltc6811+0x82>
		{
			// Dummy-Byte uebertragen
			HAL_SPI_Transmit(&hspi4, (uint8_t*) 0xFF, 1, 100);
 800065c:	2364      	movs	r3, #100	; 0x64
 800065e:	2201      	movs	r2, #1
 8000660:	21ff      	movs	r1, #255	; 0xff
 8000662:	480a      	ldr	r0, [pc, #40]	; (800068c <ltc6811+0xa0>)
 8000664:	f004 f811 	bl	800468a <HAL_SPI_Transmit>
		for (uint8_t i = 0; i < 9; i++)
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	3301      	adds	r3, #1
 800066c:	73fb      	strb	r3, [r7, #15]
 800066e:	7bfb      	ldrb	r3, [r7, #15]
 8000670:	2b08      	cmp	r3, #8
 8000672:	d9f3      	bls.n	800065c <ltc6811+0x70>
		}
	}
	
	// ISOCS ausschalten
	ISOCS_DISABLE();
 8000674:	2201      	movs	r2, #1
 8000676:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800067a:	4803      	ldr	r0, [pc, #12]	; (8000688 <ltc6811+0x9c>)
 800067c:	f002 fe44 	bl	8003308 <HAL_GPIO_WritePin>
	// Ende der Uebertragung
}
 8000680:	bf00      	nop
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40021000 	.word	0x40021000
 800068c:	2000010c 	.word	0x2000010c

08000690 <ltc6811_read>:
//----------------------------------------------------------------------

// Broadcast Read Command
//----------------------------------------------------------------------
uint8_t ltc6811_read(uint16_t command, uint8_t* data)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	6039      	str	r1, [r7, #0]
 800069a:	80fb      	strh	r3, [r7, #6]
	// PEC berechnen, Anhand Command
	uint16_t pec;															// pec = Zwischenspeicher 16-Bit Command
	uint8_t cmd[4];															// Zwischenspeicher Command + Pec CRC
	pec = peccommand(command);
 800069c:	88fb      	ldrh	r3, [r7, #6]
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 f84a 	bl	8000738 <peccommand>
 80006a4:	4603      	mov	r3, r0
 80006a6:	81bb      	strh	r3, [r7, #12]
	
	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 80006a8:	f7ff ff7e 	bl	80005a8 <wakeup_ltc6811>

	// Command in cmd abspeichern
	cmd[0] = ((command >> 8) & 0x07);
 80006ac:	88fb      	ldrh	r3, [r7, #6]
 80006ae:	0a1b      	lsrs	r3, r3, #8
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	f003 0307 	and.w	r3, r3, #7
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	723b      	strb	r3, [r7, #8]
	cmd[1] = (command & 0xFF);
 80006bc:	88fb      	ldrh	r3, [r7, #6]
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	727b      	strb	r3, [r7, #9]
	cmd[2] = ((pec >> 8) & 0xFF);
 80006c2:	89bb      	ldrh	r3, [r7, #12]
 80006c4:	0a1b      	lsrs	r3, r3, #8
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (pec & 0xFE);
 80006cc:	89bb      	ldrh	r3, [r7, #12]
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	f023 0301 	bic.w	r3, r3, #1
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	72fb      	strb	r3, [r7, #11]

	// ISOCS einschalten
	ISOCS_ENABLE();
 80006d8:	2200      	movs	r2, #0
 80006da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006de:	4814      	ldr	r0, [pc, #80]	; (8000730 <ltc6811_read+0xa0>)
 80006e0:	f002 fe12 	bl	8003308 <HAL_GPIO_WritePin>

	// Command uebertragen
	HAL_SPI_Transmit(&hspi4, cmd, 4, 100);
 80006e4:	f107 0108 	add.w	r1, r7, #8
 80006e8:	2364      	movs	r3, #100	; 0x64
 80006ea:	2204      	movs	r2, #4
 80006ec:	4811      	ldr	r0, [pc, #68]	; (8000734 <ltc6811_read+0xa4>)
 80006ee:	f003 ffcc 	bl	800468a <HAL_SPI_Transmit>
	
	// Data empfangen
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 80006f2:	2300      	movs	r3, #0
 80006f4:	73fb      	strb	r3, [r7, #15]
 80006f6:	e00c      	b.n	8000712 <ltc6811_read+0x82>
	{
		// Dummy Byte senden
		HAL_SPI_Receive(&hspi4, &data[i*8], 8, 100);
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	00db      	lsls	r3, r3, #3
 80006fc:	461a      	mov	r2, r3
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	1899      	adds	r1, r3, r2
 8000702:	2364      	movs	r3, #100	; 0x64
 8000704:	2208      	movs	r2, #8
 8000706:	480b      	ldr	r0, [pc, #44]	; (8000734 <ltc6811_read+0xa4>)
 8000708:	f004 f92d 	bl	8004966 <HAL_SPI_Receive>
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	3301      	adds	r3, #1
 8000710:	73fb      	strb	r3, [r7, #15]
 8000712:	7bfb      	ldrb	r3, [r7, #15]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d0ef      	beq.n	80006f8 <ltc6811_read+0x68>
	}
	
	// ISOCS ausschalten
	ISOCS_DISABLE();
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800071e:	4804      	ldr	r0, [pc, #16]	; (8000730 <ltc6811_read+0xa0>)
 8000720:	f002 fdf2 	bl	8003308 <HAL_GPIO_WritePin>
	// Ende der Uebertragung

	return 0;
 8000724:	2300      	movs	r3, #0
}
 8000726:	4618      	mov	r0, r3
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40021000 	.word	0x40021000
 8000734:	2000010c 	.word	0x2000010c

08000738 <peccommand>:
//----------------------------------------------------------------------

// Pec Command bauen
//----------------------------------------------------------------------
uint16_t peccommand(uint16_t command)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	80fb      	strh	r3, [r7, #6]
	// Variable definieren
	uint8_t pec[2];															// pec = Zwischenspeicher 16-Bit Command in 2x 8-Bit Bytes
	
	// 16 Bit Command in 8 Bit Array uebertragen
	pec[1] = (command & 0xFF);												// pec[1] = lower Command Byte
 8000742:	88fb      	ldrh	r3, [r7, #6]
 8000744:	b2db      	uxtb	r3, r3
 8000746:	737b      	strb	r3, [r7, #13]
	pec[0] = ((command >> 8) & 0x07);										// pec[0] = upper Command Byte
 8000748:	88fb      	ldrh	r3, [r7, #6]
 800074a:	0a1b      	lsrs	r3, r3, #8
 800074c:	b29b      	uxth	r3, r3
 800074e:	b2db      	uxtb	r3, r3
 8000750:	f003 0307 	and.w	r3, r3, #7
 8000754:	b2db      	uxtb	r3, r3
 8000756:	733b      	strb	r3, [r7, #12]
	
	// Pec zurueckgeben
	return peclookup(2, pec);
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	4619      	mov	r1, r3
 800075e:	2002      	movs	r0, #2
 8000760:	f000 f806 	bl	8000770 <peclookup>
 8000764:	4603      	mov	r3, r0
}
 8000766:	4618      	mov	r0, r3
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
	...

08000770 <peclookup>:
//----------------------------------------------------------------------

// Pec kalculieren (Datasheet ltc6811 Page 76, Datasheet ltc6811 Page 72)
//----------------------------------------------------------------------
uint16_t peclookup(uint8_t len,	uint8_t *data)								// len = Anzahl Byte, data = Daten fuer die Pec ausgewaehlt wird
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	6039      	str	r1, [r7, #0]
 800077a:	71fb      	strb	r3, [r7, #7]
	// Variable definieren
	uint16_t remainder, addr;												// remainder = Zwischenspeicher Pec, addr = Zwischenspeicher Addresse
	remainder = 16;															// Initialisiere reminder mit 16 (0b0000000000010000)
 800077c:	2310      	movs	r3, #16
 800077e:	81fb      	strh	r3, [r7, #14]
	
	// Schleife fuer die Pec-Calculation
	for(uint8_t i = 0; i < len; i++)
 8000780:	2300      	movs	r3, #0
 8000782:	737b      	strb	r3, [r7, #13]
 8000784:	e019      	b.n	80007ba <peclookup+0x4a>
	{
		// Kalkuliere Pec Anhand der Lookuptabelle
		addr = ((remainder >> 7) ^ data[i]) & 0xFF;							// Tabellenaddresse berechnen
 8000786:	89fb      	ldrh	r3, [r7, #14]
 8000788:	09db      	lsrs	r3, r3, #7
 800078a:	b29a      	uxth	r2, r3
 800078c:	7b7b      	ldrb	r3, [r7, #13]
 800078e:	6839      	ldr	r1, [r7, #0]
 8000790:	440b      	add	r3, r1
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	b29b      	uxth	r3, r3
 8000796:	4053      	eors	r3, r2
 8000798:	b29b      	uxth	r3, r3
 800079a:	b2db      	uxtb	r3, r3
 800079c:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ pec15Table[addr];					// Pec berechnen
 800079e:	89fb      	ldrh	r3, [r7, #14]
 80007a0:	021b      	lsls	r3, r3, #8
 80007a2:	b21a      	sxth	r2, r3
 80007a4:	897b      	ldrh	r3, [r7, #10]
 80007a6:	490b      	ldr	r1, [pc, #44]	; (80007d4 <peclookup+0x64>)
 80007a8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80007ac:	b21b      	sxth	r3, r3
 80007ae:	4053      	eors	r3, r2
 80007b0:	b21b      	sxth	r3, r3
 80007b2:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i = 0; i < len; i++)
 80007b4:	7b7b      	ldrb	r3, [r7, #13]
 80007b6:	3301      	adds	r3, #1
 80007b8:	737b      	strb	r3, [r7, #13]
 80007ba:	7b7a      	ldrb	r2, [r7, #13]
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	429a      	cmp	r2, r3
 80007c0:	d3e1      	bcc.n	8000786 <peclookup+0x16>
	}
	
	// Pec zurueckgeben
	return (remainder << 1);												// Der Pec hat eine 0 als LSB, remainder muss um 1 nach links geshiftet werden
 80007c2:	89fb      	ldrh	r3, [r7, #14]
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	b29b      	uxth	r3, r3
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3714      	adds	r7, #20
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr
 80007d4:	08007244 	.word	0x08007244

080007d8 <ltc6811_check>:
//----------------------------------------------------------------------*/

// LTC6811 Status auslesen und auswerten
//----------------------------------------------------------------------
uint8_t ltc6811_check(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b092      	sub	sp, #72	; 0x48
 80007dc:	af00      	add	r7, sp, #0
	// Variablen definieren
	uint8_t tmp_data[64] = {0}, error = 0;									// Speicher Registerwerte, Fehlerspeicher
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	f107 0308 	add.w	r3, r7, #8
 80007e6:	223c      	movs	r2, #60	; 0x3c
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f006 fae0 	bl	8006db0 <memset>
 80007f0:	2300      	movs	r3, #0
 80007f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 80007f6:	f7ff fed7 	bl	80005a8 <wakeup_ltc6811>

	// Alle Register zuruecksetzen
	ltc6811(CLRCELL);														// Register Zellspannung auf default setzen
 80007fa:	f240 7011 	movw	r0, #1809	; 0x711
 80007fe:	f7ff fef5 	bl	80005ec <ltc6811>
	ltc6811(CLRAUX);														// Register GPIO-Spannung auf default setzen
 8000802:	f240 7012 	movw	r0, #1810	; 0x712
 8000806:	f7ff fef1 	bl	80005ec <ltc6811>
	ltc6811(CLRSTAT);														// Register Interne Messungen auf default setzen
 800080a:	f240 7013 	movw	r0, #1811	; 0x713
 800080e:	f7ff feed 	bl	80005ec <ltc6811>

	// Lese Register Status B aus
	ltc6811_read(RDSTATB, &tmp_data[0]);
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	4619      	mov	r1, r3
 8000816:	2012      	movs	r0, #18
 8000818:	f7ff ff3a 	bl	8000690 <ltc6811_read>
	{
		error |= (1<<0);													// Thermal Shutdown nicht Ok
	}

	// Selbsttest 1 Digitale Filter
	if (ltc6811_test(ST1 | MD73) == 1)
 800081c:	f44f 7090 	mov.w	r0, #288	; 0x120
 8000820:	f000 f828 	bl	8000874 <ltc6811_test>
 8000824:	4603      	mov	r3, r0
 8000826:	2b01      	cmp	r3, #1
 8000828:	d105      	bne.n	8000836 <ltc6811_check+0x5e>
	{
		error |= (1<<1);													// Selbsttest 1 nicht bestanden
 800082a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800082e:	f043 0302 	orr.w	r3, r3, #2
 8000832:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	// Selbsttest 2 Digitale Filter
	if (ltc6811_test(ST2 | MD73) == 1)
 8000836:	f44f 70a0 	mov.w	r0, #320	; 0x140
 800083a:	f000 f81b 	bl	8000874 <ltc6811_test>
 800083e:	4603      	mov	r3, r0
 8000840:	2b01      	cmp	r3, #1
 8000842:	d105      	bne.n	8000850 <ltc6811_check+0x78>
	{
		error |= (1<<2);													// Selbsttest 2 nicht bestanden
 8000844:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000848:	f043 0304 	orr.w	r3, r3, #4
 800084c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	// Selbsttest Multiplexer
	if (ltc6811_diagn() == 1)
 8000850:	f000 f9f6 	bl	8000c40 <ltc6811_diagn>
 8000854:	4603      	mov	r3, r0
 8000856:	2b01      	cmp	r3, #1
 8000858:	d105      	bne.n	8000866 <ltc6811_check+0x8e>
	{
		error |= (1<<3);													// Multiplexertest nicht bestanden
 800085a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800085e:	f043 0308 	orr.w	r3, r3, #8
 8000862:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	// Fehlercode zurueckgeben
	return error;															// Fehler 0 = alles Ok, Fehler > 0 = Selbsttest fehlerhaft
 8000866:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800086a:	4618      	mov	r0, r3
 800086c:	3748      	adds	r7, #72	; 0x48
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
	...

08000874 <ltc6811_test>:
//----------------------------------------------------------------------

// Selbsttest Digitale Filter (Datasheet ltc6811 Page 28)
//----------------------------------------------------------------------
uint8_t ltc6811_test(uint16_t command)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b094      	sub	sp, #80	; 0x50
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	80fb      	strh	r3, [r7, #6]
	// Variablen definieren
	uint8_t tmp_data[64] = {0};												// Speicher Registerwerte
 800087e:	2300      	movs	r3, #0
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	223c      	movs	r2, #60	; 0x3c
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f006 fa90 	bl	8006db0 <memset>
	uint16_t tmp = 0, test_pattern = 0;										// Zwischenspeicher, Kontrollvariable Selbsttest
 8000890:	2300      	movs	r3, #0
 8000892:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000896:	2300      	movs	r3, #0
 8000898:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	// Commands fuer Status senden  Test 1
	ltc6811(CVST | command);												// Digitalfilter Check Zellspannungen
 800089c:	88fb      	ldrh	r3, [r7, #6]
 800089e:	f443 7301 	orr.w	r3, r3, #516	; 0x204
 80008a2:	f043 0303 	orr.w	r3, r3, #3
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff fe9f 	bl	80005ec <ltc6811>
	HAL_Delay(300);															// 300ms zwischen den Selbsttests warten
 80008ae:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80008b2:	f001 fe8f 	bl	80025d4 <HAL_Delay>
	ltc6811(AUXST | command);												// Digitalfilter Check GPIO-Spannungen
 80008b6:	88fb      	ldrh	r3, [r7, #6]
 80008b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008bc:	f043 0307 	orr.w	r3, r3, #7
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff fe92 	bl	80005ec <ltc6811>
	HAL_Delay(300);															// 300ms zwischen den Selbsttests warten
 80008c8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80008cc:	f001 fe82 	bl	80025d4 <HAL_Delay>
	ltc6811(STATST | command);												// Digitalfilter Check Interne Messungen
 80008d0:	88fb      	ldrh	r3, [r7, #6]
 80008d2:	f443 6381 	orr.w	r3, r3, #1032	; 0x408
 80008d6:	f043 0307 	orr.w	r3, r3, #7
 80008da:	b29b      	uxth	r3, r3
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff fe85 	bl	80005ec <ltc6811>
	HAL_Delay(300);															// 300ms zwischen den Selbsttests warten
 80008e2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80008e6:	f001 fe75 	bl	80025d4 <HAL_Delay>

	// Register auslesen Test 1
	// Spannungsregister
	ltc6811_read(RDCVA, &tmp_data[0]);										// Lese Register CVA zurueck
 80008ea:	f107 0308 	add.w	r3, r7, #8
 80008ee:	4619      	mov	r1, r3
 80008f0:	2004      	movs	r0, #4
 80008f2:	f7ff fecd 	bl	8000690 <ltc6811_read>
	ltc6811_read(RDCVB, &tmp_data[8]);										// Lese Register CVB zurueck
 80008f6:	f107 0308 	add.w	r3, r7, #8
 80008fa:	3308      	adds	r3, #8
 80008fc:	4619      	mov	r1, r3
 80008fe:	2006      	movs	r0, #6
 8000900:	f7ff fec6 	bl	8000690 <ltc6811_read>
	ltc6811_read(RDCVC, &tmp_data[16]);										// Lese Register CVC zurueck
 8000904:	f107 0308 	add.w	r3, r7, #8
 8000908:	3310      	adds	r3, #16
 800090a:	4619      	mov	r1, r3
 800090c:	2008      	movs	r0, #8
 800090e:	f7ff febf 	bl	8000690 <ltc6811_read>
	ltc6811_read(RDCVD, &tmp_data[24]);										// Lese Register CVD zurueck
 8000912:	f107 0308 	add.w	r3, r7, #8
 8000916:	3318      	adds	r3, #24
 8000918:	4619      	mov	r1, r3
 800091a:	200a      	movs	r0, #10
 800091c:	f7ff feb8 	bl	8000690 <ltc6811_read>

	// GPIO-Register
	ltc6811_read(RDAUXA, &tmp_data[32]);									// Lese Register AUXA zurueck
 8000920:	f107 0308 	add.w	r3, r7, #8
 8000924:	3320      	adds	r3, #32
 8000926:	4619      	mov	r1, r3
 8000928:	200c      	movs	r0, #12
 800092a:	f7ff feb1 	bl	8000690 <ltc6811_read>
	ltc6811_read(RDAUXB, &tmp_data[40]);									// Lese Register AUXB zurueck
 800092e:	f107 0308 	add.w	r3, r7, #8
 8000932:	3328      	adds	r3, #40	; 0x28
 8000934:	4619      	mov	r1, r3
 8000936:	200e      	movs	r0, #14
 8000938:	f7ff feaa 	bl	8000690 <ltc6811_read>

	// Statusregister
	ltc6811_read(RDSTATA, &tmp_data[48]);									// Lese Register STATA zurueck
 800093c:	f107 0308 	add.w	r3, r7, #8
 8000940:	3330      	adds	r3, #48	; 0x30
 8000942:	4619      	mov	r1, r3
 8000944:	2010      	movs	r0, #16
 8000946:	f7ff fea3 	bl	8000690 <ltc6811_read>
	ltc6811_read(RDSTATB, &tmp_data[56]);									// Lese Register STATB zurueck
 800094a:	f107 0308 	add.w	r3, r7, #8
 800094e:	3338      	adds	r3, #56	; 0x38
 8000950:	4619      	mov	r1, r3
 8000952:	2012      	movs	r0, #18
 8000954:	f7ff fe9c 	bl	8000690 <ltc6811_read>

	// Lookup fuer Selbstest digitaler Filter
	// Kontrollvariable heraussuchen
	if (command && MD2714)													// Wenn Sampling Frequenz = MD2714
 8000958:	88fb      	ldrh	r3, [r7, #6]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d026      	beq.n	80009ac <ltc6811_test+0x138>
	{
		// Wenn ADCOPT gesetzt
//		if (ADCOPT == 1)
//		{
			// Wenn Selbsttest 1 gewaehlt
			if (command == ST1)
 800095e:	88fb      	ldrh	r3, [r7, #6]
 8000960:	2b20      	cmp	r3, #32
 8000962:	d104      	bne.n	800096e <ltc6811_test+0xfa>
			{
				test_pattern = 0x9553;										// Registerwert bei 14kHz
 8000964:	f249 5353 	movw	r3, #38227	; 0x9553
 8000968:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800096c:	e00a      	b.n	8000984 <ltc6811_test+0x110>
			}
			// Wenn Selbsttest 2 gewaehlt
			else if (command == ST2)
 800096e:	88fb      	ldrh	r3, [r7, #6]
 8000970:	2b40      	cmp	r3, #64	; 0x40
 8000972:	d104      	bne.n	800097e <ltc6811_test+0x10a>
			{
				test_pattern = 0x6AAC;										// Registerwert bei 14kHz
 8000974:	f646 23ac 	movw	r3, #27308	; 0x6aac
 8000978:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800097c:	e002      	b.n	8000984 <ltc6811_test+0x110>
			}
			// Bei fehlerhaften Einstellungen
			else
			{
				test_pattern = 0;											// Registerwert = 0 damit Fehler ausloest
 800097e:	2300      	movs	r3, #0
 8000980:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}
//		}
//		else																// Wenn ADCOPT nicht gesetzt
//		{
			// Wenn Selbsttest 1 gewaehlt
			if (command == ST1)
 8000984:	88fb      	ldrh	r3, [r7, #6]
 8000986:	2b20      	cmp	r3, #32
 8000988:	d104      	bne.n	8000994 <ltc6811_test+0x120>
			{
				test_pattern = 0x9565;										// Registerwert bei 27kHz
 800098a:	f249 5365 	movw	r3, #38245	; 0x9565
 800098e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000992:	e01e      	b.n	80009d2 <ltc6811_test+0x15e>
			}
			// Wenn Selbsttest 2 gewaehlt
			else if (command == ST2)
 8000994:	88fb      	ldrh	r3, [r7, #6]
 8000996:	2b40      	cmp	r3, #64	; 0x40
 8000998:	d104      	bne.n	80009a4 <ltc6811_test+0x130>
			{
				test_pattern = 0x6A9A;										// Registerwert bei 27kHz
 800099a:	f646 239a 	movw	r3, #27290	; 0x6a9a
 800099e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80009a2:	e016      	b.n	80009d2 <ltc6811_test+0x15e>
			}
			// Bei fehlerhaften Einstellungen
			else
			{
				test_pattern = 0;											// Registerwert = 0 damit Fehler ausloest
 80009a4:	2300      	movs	r3, #0
 80009a6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80009aa:	e012      	b.n	80009d2 <ltc6811_test+0x15e>
//		}
	}
	else
	{
		// Wenn Selbsttest 1 gewaehlt
		if (command == ST1)
 80009ac:	88fb      	ldrh	r3, [r7, #6]
 80009ae:	2b20      	cmp	r3, #32
 80009b0:	d104      	bne.n	80009bc <ltc6811_test+0x148>
		{
			test_pattern = 0x9555;											// Registerwert bei allen anderen Sampling Frequenzen
 80009b2:	f249 5355 	movw	r3, #38229	; 0x9555
 80009b6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80009ba:	e00a      	b.n	80009d2 <ltc6811_test+0x15e>
		}
		// Wenn Selbsttest 2 gewaehlt
		else if (command == ST2)
 80009bc:	88fb      	ldrh	r3, [r7, #6]
 80009be:	2b40      	cmp	r3, #64	; 0x40
 80009c0:	d104      	bne.n	80009cc <ltc6811_test+0x158>
		{
			test_pattern = 0x6AAA;											// Registerwert bei allen anderen Sampling Frequenzen
 80009c2:	f646 23aa 	movw	r3, #27306	; 0x6aaa
 80009c6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80009ca:	e002      	b.n	80009d2 <ltc6811_test+0x15e>
		}
		// Bei fehlerhaften Einstellungen
		else
		{
			test_pattern = 0;												// Registerwert = 0 damit Fehler ausloest
 80009cc:	2300      	movs	r3, #0
 80009ce:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		}
	}

	// Daten pruefen Test 1
	for (uint8_t i=0; i<22; i++)
 80009d2:	2300      	movs	r3, #0
 80009d4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80009d8:	e128      	b.n	8000c2c <ltc6811_test+0x3b8>
	{
		// Auswaehlen welches Register im Array steht
		switch (i)
 80009da:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80009de:	2b1d      	cmp	r3, #29
 80009e0:	f200 8116 	bhi.w	8000c10 <ltc6811_test+0x39c>
 80009e4:	a201      	add	r2, pc, #4	; (adr r2, 80009ec <ltc6811_test+0x178>)
 80009e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ea:	bf00      	nop
 80009ec:	08000a65 	.word	0x08000a65
 80009f0:	08000a65 	.word	0x08000a65
 80009f4:	08000a65 	.word	0x08000a65
 80009f8:	08000a97 	.word	0x08000a97
 80009fc:	08000a97 	.word	0x08000a97
 8000a00:	08000a97 	.word	0x08000a97
 8000a04:	08000acb 	.word	0x08000acb
 8000a08:	08000acb 	.word	0x08000acb
 8000a0c:	08000acb 	.word	0x08000acb
 8000a10:	08000b01 	.word	0x08000b01
 8000a14:	08000b01 	.word	0x08000b01
 8000a18:	08000b01 	.word	0x08000b01
 8000a1c:	08000b37 	.word	0x08000b37
 8000a20:	08000b37 	.word	0x08000b37
 8000a24:	08000b37 	.word	0x08000b37
 8000a28:	08000b6f 	.word	0x08000b6f
 8000a2c:	08000b6f 	.word	0x08000b6f
 8000a30:	08000b6f 	.word	0x08000b6f
 8000a34:	08000ba5 	.word	0x08000ba5
 8000a38:	08000c11 	.word	0x08000c11
 8000a3c:	08000ba5 	.word	0x08000ba5
 8000a40:	08000bdb 	.word	0x08000bdb
 8000a44:	08000c11 	.word	0x08000c11
 8000a48:	08000c11 	.word	0x08000c11
 8000a4c:	08000c11 	.word	0x08000c11
 8000a50:	08000c11 	.word	0x08000c11
 8000a54:	08000c11 	.word	0x08000c11
 8000a58:	08000c11 	.word	0x08000c11
 8000a5c:	08000c11 	.word	0x08000c11
 8000a60:	08000ba5 	.word	0x08000ba5
		{
			// Register CVA
			case 0:
			case 1:
			case 2:
				tmp = ((tmp_data[i*2+1]<<8)|tmp_data[i*2]);					// Register CVA umwandeln
 8000a64:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000a70:	4413      	add	r3, r2
 8000a72:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000a76:	021b      	lsls	r3, r3, #8
 8000a78:	b21a      	sxth	r2, r3
 8000a7a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000a84:	440b      	add	r3, r1
 8000a86:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000a8a:	b21b      	sxth	r3, r3
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	b21b      	sxth	r3, r3
 8000a90:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000a94:	e0bd      	b.n	8000c12 <ltc6811_test+0x39e>
			// Register CVB
			case 3:
			case 4:
			case 5:
				tmp = ((tmp_data[i*2+3]<<8)|tmp_data[i*2+2]);				// Register CVB umwandeln
 8000a96:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	3303      	adds	r3, #3
 8000a9e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000aa2:	4413      	add	r3, r2
 8000aa4:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000aa8:	021b      	lsls	r3, r3, #8
 8000aaa:	b21a      	sxth	r2, r3
 8000aac:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000ab8:	440b      	add	r3, r1
 8000aba:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000abe:	b21b      	sxth	r3, r3
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	b21b      	sxth	r3, r3
 8000ac4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000ac8:	e0a3      	b.n	8000c12 <ltc6811_test+0x39e>
			// Register CVC
			case 6:
			case 7:
			case 8:
				tmp = ((tmp_data[(i+2)*2+1]<<8)|tmp_data[(i+2)*2]);			// Register CVC umwandeln
 8000aca:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000ace:	3302      	adds	r3, #2
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000ad8:	4413      	add	r3, r2
 8000ada:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000ade:	021b      	lsls	r3, r3, #8
 8000ae0:	b21a      	sxth	r2, r3
 8000ae2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000ae6:	3302      	adds	r3, #2
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000aee:	440b      	add	r3, r1
 8000af0:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000af4:	b21b      	sxth	r3, r3
 8000af6:	4313      	orrs	r3, r2
 8000af8:	b21b      	sxth	r3, r3
 8000afa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000afe:	e088      	b.n	8000c12 <ltc6811_test+0x39e>
			// Register CVD
			case 9:
			case 10:
			case 11:
				tmp = ((tmp_data[(i+2)*2+3]<<8)|tmp_data[(i+2)*2+2]);		// Register CVD umwandeln
 8000b00:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000b04:	3302      	adds	r3, #2
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	3303      	adds	r3, #3
 8000b0a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000b0e:	4413      	add	r3, r2
 8000b10:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000b14:	021b      	lsls	r3, r3, #8
 8000b16:	b21a      	sxth	r2, r3
 8000b18:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000b1c:	3303      	adds	r3, #3
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000b24:	440b      	add	r3, r1
 8000b26:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000b2a:	b21b      	sxth	r3, r3
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	b21b      	sxth	r3, r3
 8000b30:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000b34:	e06d      	b.n	8000c12 <ltc6811_test+0x39e>
			// Register AUXA
			case 12:
			case 13:
			case 14:
				tmp = ((tmp_data[(i+4)*2+1]<<8)|tmp_data[(i+4)*2+1]);		// Register AUXA umwandeln
 8000b36:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000b3a:	3304      	adds	r3, #4
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	3301      	adds	r3, #1
 8000b40:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000b44:	4413      	add	r3, r2
 8000b46:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000b4a:	021b      	lsls	r3, r3, #8
 8000b4c:	b21a      	sxth	r2, r3
 8000b4e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000b52:	3304      	adds	r3, #4
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	3301      	adds	r3, #1
 8000b58:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000b5c:	440b      	add	r3, r1
 8000b5e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000b62:	b21b      	sxth	r3, r3
 8000b64:	4313      	orrs	r3, r2
 8000b66:	b21b      	sxth	r3, r3
 8000b68:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000b6c:	e051      	b.n	8000c12 <ltc6811_test+0x39e>
			// Register AUXB
			case 15:
			case 16:
			case 17:
				tmp = ((tmp_data[(i+4)*2+3]<<8)|tmp_data[(i+4)*2+2]);		// Register AUXB umwandeln
 8000b6e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000b72:	3304      	adds	r3, #4
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	3303      	adds	r3, #3
 8000b78:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000b7c:	4413      	add	r3, r2
 8000b7e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000b82:	021b      	lsls	r3, r3, #8
 8000b84:	b21a      	sxth	r2, r3
 8000b86:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000b8a:	3305      	adds	r3, #5
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000b92:	440b      	add	r3, r1
 8000b94:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000b98:	b21b      	sxth	r3, r3
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	b21b      	sxth	r3, r3
 8000b9e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000ba2:	e036      	b.n	8000c12 <ltc6811_test+0x39e>
			// Register STATA
			case 18:
			case 29:
			case 20:
				tmp = ((tmp_data[(i+6)*2+3]<<8)|tmp_data[(i+6)*2+2]);		// Register STATA umwandeln
 8000ba4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000ba8:	3306      	adds	r3, #6
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	3303      	adds	r3, #3
 8000bae:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000bb2:	4413      	add	r3, r2
 8000bb4:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000bb8:	021b      	lsls	r3, r3, #8
 8000bba:	b21a      	sxth	r2, r3
 8000bbc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000bc0:	3307      	adds	r3, #7
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000bc8:	440b      	add	r3, r1
 8000bca:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000bce:	b21b      	sxth	r3, r3
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	b21b      	sxth	r3, r3
 8000bd4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000bd8:	e01b      	b.n	8000c12 <ltc6811_test+0x39e>
			// Register STATB
			case 21:
				tmp = ((tmp_data[(i+6)*2+3]<<8)|tmp_data[(i+6)*2+2]);		// Register STATB umwandeln
 8000bda:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000bde:	3306      	adds	r3, #6
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	3303      	adds	r3, #3
 8000be4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000be8:	4413      	add	r3, r2
 8000bea:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000bee:	021b      	lsls	r3, r3, #8
 8000bf0:	b21a      	sxth	r2, r3
 8000bf2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000bf6:	3307      	adds	r3, #7
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000bfe:	440b      	add	r3, r1
 8000c00:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000c04:	b21b      	sxth	r3, r3
 8000c06:	4313      	orrs	r3, r2
 8000c08:	b21b      	sxth	r3, r3
 8000c0a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000c0e:	e000      	b.n	8000c12 <ltc6811_test+0x39e>
			// Kein Register
			default:
				break;
 8000c10:	bf00      	nop
		}

		// Vergleiche Registerwert mit Vorgabewert aus Datenblatt
		if (tmp != test_pattern)
 8000c12:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8000c16:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	d001      	beq.n	8000c22 <ltc6811_test+0x3ae>
		{
			return 1;														// Selbsttest 1 nicht OK
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e00a      	b.n	8000c38 <ltc6811_test+0x3c4>
	for (uint8_t i=0; i<22; i++)
 8000c22:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000c26:	3301      	adds	r3, #1
 8000c28:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8000c2c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000c30:	2b15      	cmp	r3, #21
 8000c32:	f67f aed2 	bls.w	80009da <ltc6811_test+0x166>
		}
	}

	return 0;																// Selbsttest 1 OK
 8000c36:	2300      	movs	r3, #0
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3750      	adds	r7, #80	; 0x50
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <ltc6811_diagn>:
//----------------------------------------------------------------------

// Selbstdiagnose Multiplexer (Datasheet ltc6811 Page 27)
//----------------------------------------------------------------------
uint8_t ltc6811_diagn(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
	// Variablen definieren
	uint8_t tmp_data[8] = {0};												// Speicher Registerwerte
 8000c46:	2300      	movs	r3, #0
 8000c48:	603b      	str	r3, [r7, #0]
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	607b      	str	r3, [r7, #4]

	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8000c4e:	f7ff fcab 	bl	80005a8 <wakeup_ltc6811>

	// Command senden
	ltc6811(DIAGN);															// Multiplexer Check
 8000c52:	f240 7015 	movw	r0, #1813	; 0x715
 8000c56:	f7ff fcc9 	bl	80005ec <ltc6811>

	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8000c5a:	f7ff fca5 	bl	80005a8 <wakeup_ltc6811>

	// Lese Register
	ltc6811_read(RDSTATB, &tmp_data[0]);									// Lese Status B Register fuer Multiplexer Check
 8000c5e:	463b      	mov	r3, r7
 8000c60:	4619      	mov	r1, r3
 8000c62:	2012      	movs	r0, #18
 8000c64:	f7ff fd14 	bl	8000690 <ltc6811_read>

	// Multiplexer pruefen
	if (tmp_data[5] & (1<<1))
 8000c68:	797b      	ldrb	r3, [r7, #5]
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <ltc6811_diagn+0x36>
		return 1;															// Multiplexertest nicht OK
 8000c72:	2301      	movs	r3, #1
 8000c74:	e000      	b.n	8000c78 <ltc6811_diagn+0x38>
	else
		return 0;															// Multiplexertest OK
 8000c76:	2300      	movs	r3, #0
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <collectHardwareInfo>:


// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
	#define STRING_STM_DEVICE_ID			"\nSTM32 Device ID:\t\t\t"
	#define STRING_STM_REVISION				"\nSTM32 Revision ID:\t\t\t"
	#define STRING_STM_FREQ					"\nSTM32 CPU-Freq:\t\t\t\t"
	#define STRING_STM_UUID					"\nSTM32 UUID:\t\t\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 8000c86:	2115      	movs	r1, #21
 8000c88:	483b      	ldr	r0, [pc, #236]	; (8000d78 <collectHardwareInfo+0xf8>)
 8000c8a:	f7ff fc59 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);									// Mikrocontroller Typ
 8000c8e:	f001 fcdb 	bl	8002648 <HAL_GetDEVID>
 8000c92:	4603      	mov	r3, r0
 8000c94:	210a      	movs	r1, #10
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fc66 	bl	8000568 <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 8000c9c:	2117      	movs	r1, #23
 8000c9e:	4837      	ldr	r0, [pc, #220]	; (8000d7c <collectHardwareInfo+0xfc>)
 8000ca0:	f7ff fc4e 	bl	8000540 <uartTransmit>

	switch(HAL_GetREVID())													// Mikrocontroller Revision
 8000ca4:	f001 fcc4 	bl	8002630 <HAL_GetREVID>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	f242 0201 	movw	r2, #8193	; 0x2001
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d016      	beq.n	8000ce0 <collectHardwareInfo+0x60>
 8000cb2:	f242 0201 	movw	r2, #8193	; 0x2001
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d817      	bhi.n	8000cea <collectHardwareInfo+0x6a>
 8000cba:	f241 0201 	movw	r2, #4097	; 0x1001
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d004      	beq.n	8000ccc <collectHardwareInfo+0x4c>
 8000cc2:	f241 0203 	movw	r2, #4099	; 0x1003
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d005      	beq.n	8000cd6 <collectHardwareInfo+0x56>
 8000cca:	e00e      	b.n	8000cea <collectHardwareInfo+0x6a>
	{
		case 0x1001:
			uartTransmit("Z", 1);
 8000ccc:	2101      	movs	r1, #1
 8000cce:	482c      	ldr	r0, [pc, #176]	; (8000d80 <collectHardwareInfo+0x100>)
 8000cd0:	f7ff fc36 	bl	8000540 <uartTransmit>
			break;
 8000cd4:	e011      	b.n	8000cfa <collectHardwareInfo+0x7a>
		case 0x1003:
			uartTransmit("Y", 1);
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	482a      	ldr	r0, [pc, #168]	; (8000d84 <collectHardwareInfo+0x104>)
 8000cda:	f7ff fc31 	bl	8000540 <uartTransmit>
			break;
 8000cde:	e00c      	b.n	8000cfa <collectHardwareInfo+0x7a>
		case 0x2001:
			uartTransmit("X", 1);
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	4829      	ldr	r0, [pc, #164]	; (8000d88 <collectHardwareInfo+0x108>)
 8000ce4:	f7ff fc2c 	bl	8000540 <uartTransmit>
			break;
 8000ce8:	e007      	b.n	8000cfa <collectHardwareInfo+0x7a>
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 8000cea:	f001 fca1 	bl	8002630 <HAL_GetREVID>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	210a      	movs	r1, #10
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fc38 	bl	8000568 <uartTransmitNumber>
			break;
 8000cf8:	bf00      	nop
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 8000cfa:	2115      	movs	r1, #21
 8000cfc:	4823      	ldr	r0, [pc, #140]	; (8000d8c <collectHardwareInfo+0x10c>)
 8000cfe:	f7ff fc1f 	bl	8000540 <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();						// Systemfrequenz ausgeben
 8000d02:	f002 ff05 	bl	8003b10 <HAL_RCC_GetSysClockFreq>
 8000d06:	6078      	str	r0, [r7, #4]
		frequency = frequency/1000000;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4a21      	ldr	r2, [pc, #132]	; (8000d90 <collectHardwareInfo+0x110>)
 8000d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d10:	0c9b      	lsrs	r3, r3, #18
 8000d12:	607b      	str	r3, [r7, #4]

		uartTransmitNumber(frequency, 10);
 8000d14:	210a      	movs	r1, #10
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff fc26 	bl	8000568 <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 8000d1c:	2104      	movs	r1, #4
 8000d1e:	481d      	ldr	r0, [pc, #116]	; (8000d94 <collectHardwareInfo+0x114>)
 8000d20:	f7ff fc0e 	bl	8000540 <uartTransmit>


	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 8000d24:	2111      	movs	r1, #17
 8000d26:	481c      	ldr	r0, [pc, #112]	; (8000d98 <collectHardwareInfo+0x118>)
 8000d28:	f7ff fc0a 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);									// UID0 ausgeben
 8000d2c:	f001 fc9a 	bl	8002664 <HAL_GetUIDw0>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2110      	movs	r1, #16
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff fc17 	bl	8000568 <uartTransmitNumber>

	uartTransmit(" ", 1);
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	4817      	ldr	r0, [pc, #92]	; (8000d9c <collectHardwareInfo+0x11c>)
 8000d3e:	f7ff fbff 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);									// UID1 ausgeben
 8000d42:	f001 fc9b 	bl	800267c <HAL_GetUIDw1>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2110      	movs	r1, #16
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff fc0c 	bl	8000568 <uartTransmitNumber>

	uartTransmit(" ", 1);
 8000d50:	2101      	movs	r1, #1
 8000d52:	4812      	ldr	r0, [pc, #72]	; (8000d9c <collectHardwareInfo+0x11c>)
 8000d54:	f7ff fbf4 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);									// UID2 ausgeben
 8000d58:	f001 fc9c 	bl	8002694 <HAL_GetUIDw2>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2110      	movs	r1, #16
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff fc01 	bl	8000568 <uartTransmitNumber>

	uartTransmit("\n", 1);
 8000d66:	2101      	movs	r1, #1
 8000d68:	480d      	ldr	r0, [pc, #52]	; (8000da0 <collectHardwareInfo+0x120>)
 8000d6a:	f7ff fbe9 	bl	8000540 <uartTransmit>
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	08006e60 	.word	0x08006e60
 8000d7c:	08006e78 	.word	0x08006e78
 8000d80:	08006e90 	.word	0x08006e90
 8000d84:	08006e94 	.word	0x08006e94
 8000d88:	08006e98 	.word	0x08006e98
 8000d8c:	08006e9c 	.word	0x08006e9c
 8000d90:	431bde83 	.word	0x431bde83
 8000d94:	08006eb4 	.word	0x08006eb4
 8000d98:	08006ebc 	.word	0x08006ebc
 8000d9c:	08006ed0 	.word	0x08006ed0
 8000da0:	08006ed4 	.word	0x08006ed4

08000da4 <collectMiddlewareInfo>:
//----------------------------------------------------------------------

// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
	#define STRING_CMSIS_VERSION			"\nCMSIS Version:\t\t\t\t"
	#define STRING_HAL_VERSION				"\nHAL Version:\t\t\t\t"
	#define STRING_RTOS_CMSIS_VERSION		"\nRTOS CMSIS Version:\t\t\t"
	#define STRING_RTOS_VERSION				"\nRTOS Version:\t\t\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 8000da8:	2114      	movs	r1, #20
 8000daa:	4824      	ldr	r0, [pc, #144]	; (8000e3c <collectMiddlewareInfo+0x98>)
 8000dac:	f7ff fbc8 	bl	8000540 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);						// CMSIS Version anzeigen
 8000db0:	210a      	movs	r1, #10
 8000db2:	2005      	movs	r0, #5
 8000db4:	f7ff fbd8 	bl	8000568 <uartTransmitNumber>
	uartTransmit(".", 1);
 8000db8:	2101      	movs	r1, #1
 8000dba:	4821      	ldr	r0, [pc, #132]	; (8000e40 <collectMiddlewareInfo+0x9c>)
 8000dbc:	f7ff fbc0 	bl	8000540 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);						// CMSIS Version anzeigen
 8000dc0:	210a      	movs	r1, #10
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	f7ff fbd0 	bl	8000568 <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));			// Hal Version anzeigen
 8000dc8:	2112      	movs	r1, #18
 8000dca:	481e      	ldr	r0, [pc, #120]	; (8000e44 <collectMiddlewareInfo+0xa0>)
 8000dcc:	f7ff fbb8 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 8000dd0:	f001 fc24 	bl	800261c <HAL_GetHalVersion>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	0e1b      	lsrs	r3, r3, #24
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	210a      	movs	r1, #10
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff fbc3 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000de2:	2101      	movs	r1, #1
 8000de4:	4816      	ldr	r0, [pc, #88]	; (8000e40 <collectMiddlewareInfo+0x9c>)
 8000de6:	f7ff fbab 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 8000dea:	f001 fc17 	bl	800261c <HAL_GetHalVersion>
 8000dee:	4603      	mov	r3, r0
 8000df0:	0c1b      	lsrs	r3, r3, #16
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	210a      	movs	r1, #10
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fbb6 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	4810      	ldr	r0, [pc, #64]	; (8000e40 <collectMiddlewareInfo+0x9c>)
 8000e00:	f7ff fb9e 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 8000e04:	f001 fc0a 	bl	800261c <HAL_GetHalVersion>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	0a1b      	lsrs	r3, r3, #8
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	210a      	movs	r1, #10
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff fba9 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000e16:	2101      	movs	r1, #1
 8000e18:	4809      	ldr	r0, [pc, #36]	; (8000e40 <collectMiddlewareInfo+0x9c>)
 8000e1a:	f7ff fb91 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 8000e1e:	f001 fbfd 	bl	800261c <HAL_GetHalVersion>
 8000e22:	4603      	mov	r3, r0
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	210a      	movs	r1, #10
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff fb9d 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);						// FreeRTOS Kernel Version anzeigen
#endif

	uartTransmit("\n", 1);
 8000e2e:	2101      	movs	r1, #1
 8000e30:	4805      	ldr	r0, [pc, #20]	; (8000e48 <collectMiddlewareInfo+0xa4>)
 8000e32:	f7ff fb85 	bl	8000540 <uartTransmit>
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	08006ed8 	.word	0x08006ed8
 8000e40:	08006eec 	.word	0x08006eec
 8000e44:	08006ef0 	.word	0x08006ef0
 8000e48:	08006ed4 	.word	0x08006ed4

08000e4c <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
	#define STRING_GIT_TAG_COMMIT			"\nGit Tags commit:\t\t\t"
	#define STRING_GIT_TAG_DIRTY			"\nGit Dirty commit:\t\t\t"
	#define STRING_BUILD_DATE				"\nBuild Date:\t\t\t\t"
	#define STRING_BUILD_TIME				"\nBuild Time:\t\t\t\t"

	uartTransmit(STRING_GIT_COMMIT, sizeof(STRING_GIT_COMMIT));
 8000e50:	2111      	movs	r1, #17
 8000e52:	4826      	ldr	r0, [pc, #152]	; (8000eec <collectSoftwareInfo+0xa0>)
 8000e54:	f7ff fb74 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));							// Git Commit anzeigen
 8000e58:	2108      	movs	r1, #8
 8000e5a:	4825      	ldr	r0, [pc, #148]	; (8000ef0 <collectSoftwareInfo+0xa4>)
 8000e5c:	f7ff fb70 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 8000e60:	2111      	movs	r1, #17
 8000e62:	4824      	ldr	r0, [pc, #144]	; (8000ef4 <collectSoftwareInfo+0xa8>)
 8000e64:	f7ff fb6c 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));							// Git Branch anzeigen
 8000e68:	2108      	movs	r1, #8
 8000e6a:	4823      	ldr	r0, [pc, #140]	; (8000ef8 <collectSoftwareInfo+0xac>)
 8000e6c:	f7ff fb68 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 8000e70:	210f      	movs	r1, #15
 8000e72:	4822      	ldr	r0, [pc, #136]	; (8000efc <collectSoftwareInfo+0xb0>)
 8000e74:	f7ff fb64 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));								// Git Hash anzeigen
 8000e78:	2129      	movs	r1, #41	; 0x29
 8000e7a:	4821      	ldr	r0, [pc, #132]	; (8000f00 <collectSoftwareInfo+0xb4>)
 8000e7c:	f7ff fb60 	bl	8000540 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8000e80:	2101      	movs	r1, #1
 8000e82:	4820      	ldr	r0, [pc, #128]	; (8000f04 <collectSoftwareInfo+0xb8>)
 8000e84:	f7ff fb5c 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 8000e88:	2116      	movs	r1, #22
 8000e8a:	481f      	ldr	r0, [pc, #124]	; (8000f08 <collectSoftwareInfo+0xbc>)
 8000e8c:	f7ff fb58 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_LAST_TAG, sizeof(GIT_LAST_TAG));						// Git letzten Tags anzeigen
 8000e90:	2105      	movs	r1, #5
 8000e92:	481e      	ldr	r0, [pc, #120]	; (8000f0c <collectSoftwareInfo+0xc0>)
 8000e94:	f7ff fb54 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 8000e98:	2115      	movs	r1, #21
 8000e9a:	481d      	ldr	r0, [pc, #116]	; (8000f10 <collectSoftwareInfo+0xc4>)
 8000e9c:	f7ff fb50 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_TAG_COMMIT, sizeof(GIT_TAG_COMMIT));					// Git Tags Commit anzeigen
 8000ea0:	2108      	movs	r1, #8
 8000ea2:	481c      	ldr	r0, [pc, #112]	; (8000f14 <collectSoftwareInfo+0xc8>)
 8000ea4:	f7ff fb4c 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_DIRTY, sizeof(STRING_GIT_TAG_DIRTY));
 8000ea8:	2116      	movs	r1, #22
 8000eaa:	481b      	ldr	r0, [pc, #108]	; (8000f18 <collectSoftwareInfo+0xcc>)
 8000eac:	f7ff fb48 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY, sizeof(GIT_TAG_DIRTY));						// Git Dirty Commit anzeigen
 8000eb0:	2111      	movs	r1, #17
 8000eb2:	481a      	ldr	r0, [pc, #104]	; (8000f1c <collectSoftwareInfo+0xd0>)
 8000eb4:	f7ff fb44 	bl	8000540 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8000eb8:	2101      	movs	r1, #1
 8000eba:	4812      	ldr	r0, [pc, #72]	; (8000f04 <collectSoftwareInfo+0xb8>)
 8000ebc:	f7ff fb40 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 8000ec0:	2111      	movs	r1, #17
 8000ec2:	4817      	ldr	r0, [pc, #92]	; (8000f20 <collectSoftwareInfo+0xd4>)
 8000ec4:	f7ff fb3c 	bl	8000540 <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));							// Kompilierdatum anzeigen
 8000ec8:	210b      	movs	r1, #11
 8000eca:	4816      	ldr	r0, [pc, #88]	; (8000f24 <collectSoftwareInfo+0xd8>)
 8000ecc:	f7ff fb38 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 8000ed0:	2111      	movs	r1, #17
 8000ed2:	4815      	ldr	r0, [pc, #84]	; (8000f28 <collectSoftwareInfo+0xdc>)
 8000ed4:	f7ff fb34 	bl	8000540 <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));							// Kompilierzeit anzeigen
 8000ed8:	2109      	movs	r1, #9
 8000eda:	4814      	ldr	r0, [pc, #80]	; (8000f2c <collectSoftwareInfo+0xe0>)
 8000edc:	f7ff fb30 	bl	8000540 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	4808      	ldr	r0, [pc, #32]	; (8000f04 <collectSoftwareInfo+0xb8>)
 8000ee4:	f7ff fb2c 	bl	8000540 <uartTransmit>
}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	08006f04 	.word	0x08006f04
 8000ef0:	08006f18 	.word	0x08006f18
 8000ef4:	08006f20 	.word	0x08006f20
 8000ef8:	08006f34 	.word	0x08006f34
 8000efc:	08006f3c 	.word	0x08006f3c
 8000f00:	08006f4c 	.word	0x08006f4c
 8000f04:	08006ed4 	.word	0x08006ed4
 8000f08:	08006f78 	.word	0x08006f78
 8000f0c:	08006f90 	.word	0x08006f90
 8000f10:	08006f98 	.word	0x08006f98
 8000f14:	08006fb0 	.word	0x08006fb0
 8000f18:	08006fb8 	.word	0x08006fb8
 8000f1c:	08006fd0 	.word	0x08006fd0
 8000f20:	08006fe4 	.word	0x08006fe4
 8000f24:	08006ff8 	.word	0x08006ff8
 8000f28:	08007004 	.word	0x08007004
 8000f2c:	08007018 	.word	0x08007018

08000f30 <collectGitcounts>:
//----------------------------------------------------------------------

// Collects Git count information and prints it
//----------------------------------------------------------------------
void collectGitcounts(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
	#define STRING_GIT_OVERALL_COMMIT_COUNT	"\nGit Overall count:\t\t\t"
	#define STRING_GIT_BRANCH_COMMIT_COUNT	"\nGit Branch commit count:\t\t"
	#define STRING_GIT_ACTIVE_BRANCHES		"\nGit active Branches:\t\t\t\t"
	#define STRING_GIT_TAG_COUNT			"\nGit Tags count:\t\t\t\t"

	uartTransmit(STRING_GIT_TAG_DIRTY_COUNT, sizeof(STRING_GIT_TAG_DIRTY_COUNT));
 8000f34:	2115      	movs	r1, #21
 8000f36:	4814      	ldr	r0, [pc, #80]	; (8000f88 <collectGitcounts+0x58>)
 8000f38:	f7ff fb02 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY_COUNT, sizeof(GIT_TAG_DIRTY_COUNT));			// Git zaehle Dirty commits nach letztem Tags und Anzahl anzeigen
 8000f3c:	2103      	movs	r1, #3
 8000f3e:	4813      	ldr	r0, [pc, #76]	; (8000f8c <collectGitcounts+0x5c>)
 8000f40:	f7ff fafe 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_OVERALL_COMMIT_COUNT, sizeof(STRING_GIT_OVERALL_COMMIT_COUNT));
 8000f44:	2117      	movs	r1, #23
 8000f46:	4812      	ldr	r0, [pc, #72]	; (8000f90 <collectGitcounts+0x60>)
 8000f48:	f7ff fafa 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_OVERALL_COMMIT_COUNT, sizeof(GIT_OVERALL_COMMIT_COUNT));// Git alle Commits zaehlen und Anzahl anzeigen
 8000f4c:	2103      	movs	r1, #3
 8000f4e:	4811      	ldr	r0, [pc, #68]	; (8000f94 <collectGitcounts+0x64>)
 8000f50:	f7ff faf6 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH_COMMIT_COUNT, sizeof(STRING_GIT_BRANCH_COMMIT_COUNT));
 8000f54:	211c      	movs	r1, #28
 8000f56:	4810      	ldr	r0, [pc, #64]	; (8000f98 <collectGitcounts+0x68>)
 8000f58:	f7ff faf2 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_BRANCH_COMMIT_COUNT, sizeof(GIT_BRANCH_COMMIT_COUNT));	// Git Branch Commits zaehken und Anzahl anzeigen
 8000f5c:	2103      	movs	r1, #3
 8000f5e:	480f      	ldr	r0, [pc, #60]	; (8000f9c <collectGitcounts+0x6c>)
 8000f60:	f7ff faee 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 8000f64:	2116      	movs	r1, #22
 8000f66:	480e      	ldr	r0, [pc, #56]	; (8000fa0 <collectGitcounts+0x70>)
 8000f68:	f7ff faea 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_ACTIVE_BRANCHES, sizeof(GIT_ACTIVE_BRANCHES));			// Git aktive Branches zaehlen und Anzahl anzeigen
 8000f6c:	2102      	movs	r1, #2
 8000f6e:	480d      	ldr	r0, [pc, #52]	; (8000fa4 <collectGitcounts+0x74>)
 8000f70:	f7ff fae6 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 8000f74:	2115      	movs	r1, #21
 8000f76:	480c      	ldr	r0, [pc, #48]	; (8000fa8 <collectGitcounts+0x78>)
 8000f78:	f7ff fae2 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_TAG_COUNT, sizeof(GIT_TAG_COUNT));						// Git Tags zaehlen und Anzahl anzeigen
 8000f7c:	2102      	movs	r1, #2
 8000f7e:	480b      	ldr	r0, [pc, #44]	; (8000fac <collectGitcounts+0x7c>)
 8000f80:	f7ff fade 	bl	8000540 <uartTransmit>
}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	08007024 	.word	0x08007024
 8000f8c:	0800703c 	.word	0x0800703c
 8000f90:	08007040 	.word	0x08007040
 8000f94:	08007058 	.word	0x08007058
 8000f98:	0800705c 	.word	0x0800705c
 8000f9c:	08007078 	.word	0x08007078
 8000fa0:	08006f78 	.word	0x08006f78
 8000fa4:	0800707c 	.word	0x0800707c
 8000fa8:	08006f98 	.word	0x08006f98
 8000fac:	08007080 	.word	0x08007080

08000fb0 <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
	#define STRING_HARDWARE_TITEL			"\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL			"\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL			"\n\t --Software--\n"
	#define STRING_GIT_COUNTS				"\n\t --Git counts--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 8000fb4:	2111      	movs	r1, #17
 8000fb6:	480e      	ldr	r0, [pc, #56]	; (8000ff0 <collectSystemInfo+0x40>)
 8000fb8:	f7ff fac2 	bl	8000540 <uartTransmit>
	collectHardwareInfo();													// Sammelt Hardware Informationen und gibt diese ueber Uart aus
 8000fbc:	f7ff fe60 	bl	8000c80 <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 8000fc0:	2111      	movs	r1, #17
 8000fc2:	480c      	ldr	r0, [pc, #48]	; (8000ff4 <collectSystemInfo+0x44>)
 8000fc4:	f7ff fabc 	bl	8000540 <uartTransmit>
	collectSoftwareInfo();													// Sammelt Software Informationen und gibt diese ueber Uart aus
 8000fc8:	f7ff ff40 	bl	8000e4c <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 8000fcc:	2113      	movs	r1, #19
 8000fce:	480a      	ldr	r0, [pc, #40]	; (8000ff8 <collectSystemInfo+0x48>)
 8000fd0:	f7ff fab6 	bl	8000540 <uartTransmit>
	collectMiddlewareInfo();												// Sammelt Middleware Informationen und gibt diese ueber Uart aus
 8000fd4:	f7ff fee6 	bl	8000da4 <collectMiddlewareInfo>

	uartTransmit(STRING_GIT_COUNTS, sizeof(STRING_GIT_COUNTS));
 8000fd8:	2113      	movs	r1, #19
 8000fda:	4808      	ldr	r0, [pc, #32]	; (8000ffc <collectSystemInfo+0x4c>)
 8000fdc:	f7ff fab0 	bl	8000540 <uartTransmit>
	collectGitcounts();														// Sammelt Git count Informationen und gibt diese ueber Uart aus
 8000fe0:	f7ff ffa6 	bl	8000f30 <collectGitcounts>

	uartTransmit("\n\n\n", 3);
 8000fe4:	2103      	movs	r1, #3
 8000fe6:	4806      	ldr	r0, [pc, #24]	; (8001000 <collectSystemInfo+0x50>)
 8000fe8:	f7ff faaa 	bl	8000540 <uartTransmit>
}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	08007084 	.word	0x08007084
 8000ff4:	08007098 	.word	0x08007098
 8000ff8:	080070ac 	.word	0x080070ac
 8000ffc:	080070c0 	.word	0x080070c0
 8001000:	080070d4 	.word	0x080070d4

08001004 <readResetSource>:
//----------------------------------------------------------------------

// Collects Reset source Flag microcontroller
//----------------------------------------------------------------------
reset_reason readResetSource(void)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
	reset_reason reset_flags = STARTUP;
 800100a:	2300      	movs	r3, #0
 800100c:	71fb      	strb	r3, [r7, #7]

	// Pruefe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 800100e:	4b25      	ldr	r3, [pc, #148]	; (80010a4 <readResetSource+0xa0>)
 8001010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001012:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d002      	beq.n	8001020 <readResetSource+0x1c>
	{
		reset_flags += IWDG1;
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	3301      	adds	r3, #1
 800101e:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 8001020:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <readResetSource+0xa0>)
 8001022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001024:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d002      	beq.n	8001032 <readResetSource+0x2e>
	{
		reset_flags += WWDG1;
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	3302      	adds	r3, #2
 8001030:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 8001032:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <readResetSource+0xa0>)
 8001034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001036:	2b00      	cmp	r3, #0
 8001038:	da02      	bge.n	8001040 <readResetSource+0x3c>
	{
		reset_flags += CPURST1;
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	3304      	adds	r3, #4
 800103e:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 8001040:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <readResetSource+0xa0>)
 8001042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d002      	beq.n	8001052 <readResetSource+0x4e>
	{
		reset_flags += BORST1;
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	3308      	adds	r3, #8
 8001050:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 8001052:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <readResetSource+0xa0>)
 8001054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001056:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d002      	beq.n	8001064 <readResetSource+0x60>
	{
		reset_flags += PORST1;
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	3310      	adds	r3, #16
 8001062:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <readResetSource+0xa0>)
 8001066:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d002      	beq.n	8001076 <readResetSource+0x72>
	{
		reset_flags += SFTRST1;
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	3320      	adds	r3, #32
 8001074:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <readResetSource+0xa0>)
 8001078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800107a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d002      	beq.n	8001088 <readResetSource+0x84>
	{
		reset_flags += PINRST1;
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	3340      	adds	r3, #64	; 0x40
 8001086:	71fb      	strb	r3, [r7, #7]
	}

	// Loesche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <readResetSource+0xa0>)
 800108a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800108c:	4a05      	ldr	r2, [pc, #20]	; (80010a4 <readResetSource+0xa0>)
 800108e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001092:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
 8001094:	79fb      	ldrb	r3, [r7, #7]
}
 8001096:	4618      	mov	r0, r3
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	40023800 	.word	0x40023800

080010a8 <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
	// Returns für Absatz nach Neustart.
	uartTransmit("\r\r\r\r\r\r", 6);
 80010b2:	2106      	movs	r1, #6
 80010b4:	482a      	ldr	r0, [pc, #168]	; (8001160 <printResetSource+0xb8>)
 80010b6:	f7ff fa43 	bl	8000540 <uartTransmit>


	if (reset_flags == STARTUP)											// Regulärer Start
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d104      	bne.n	80010ca <printResetSource+0x22>
	{
		uartTransmit("Regular Start\r\n", 15);
 80010c0:	210f      	movs	r1, #15
 80010c2:	4828      	ldr	r0, [pc, #160]	; (8001164 <printResetSource+0xbc>)
 80010c4:	f7ff fa3c 	bl	8000540 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 80010c8:	e046      	b.n	8001158 <printResetSource+0xb0>
		if (reset_flags & IWDG1)											// Interner watchdog Reset
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d003      	beq.n	80010dc <printResetSource+0x34>
			uartTransmit("Interner Watchdog Reset\n", 24);
 80010d4:	2118      	movs	r1, #24
 80010d6:	4824      	ldr	r0, [pc, #144]	; (8001168 <printResetSource+0xc0>)
 80010d8:	f7ff fa32 	bl	8000540 <uartTransmit>
		if (reset_flags & WWDG1)											// Window watchdog Reset
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <printResetSource+0x46>
			uartTransmit("Window Watchdog Reset\n", 22);
 80010e6:	2116      	movs	r1, #22
 80010e8:	4820      	ldr	r0, [pc, #128]	; (800116c <printResetSource+0xc4>)
 80010ea:	f7ff fa29 	bl	8000540 <uartTransmit>
		if (reset_flags & CPURST1)											// CPU Reset
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	f003 0304 	and.w	r3, r3, #4
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <printResetSource+0x58>
			uartTransmit("CPU Reset\n", 10);
 80010f8:	210a      	movs	r1, #10
 80010fa:	481d      	ldr	r0, [pc, #116]	; (8001170 <printResetSource+0xc8>)
 80010fc:	f7ff fa20 	bl	8000540 <uartTransmit>
		if (reset_flags & BORST1)											// Brown out Reset
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	f003 0308 	and.w	r3, r3, #8
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <printResetSource+0x6a>
			uartTransmit("Brown Out Reset\n", 16);
 800110a:	2110      	movs	r1, #16
 800110c:	4819      	ldr	r0, [pc, #100]	; (8001174 <printResetSource+0xcc>)
 800110e:	f7ff fa17 	bl	8000540 <uartTransmit>
		if (reset_flags & PORST1)											//Power on Reset / Power down Reser
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	f003 0310 	and.w	r3, r3, #16
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <printResetSource+0x7c>
			uartTransmit("Power On Reset\n", 15);
 800111c:	210f      	movs	r1, #15
 800111e:	4816      	ldr	r0, [pc, #88]	; (8001178 <printResetSource+0xd0>)
 8001120:	f7ff fa0e 	bl	8000540 <uartTransmit>
		if (reset_flags & SFTRST1)											// Software Reset
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	f003 0320 	and.w	r3, r3, #32
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <printResetSource+0x8e>
			uartTransmit("Software Reset\n", 15);
 800112e:	210f      	movs	r1, #15
 8001130:	4812      	ldr	r0, [pc, #72]	; (800117c <printResetSource+0xd4>)
 8001132:	f7ff fa05 	bl	8000540 <uartTransmit>
		if (reset_flags & PINRST1)											//NRST pin
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800113c:	2b00      	cmp	r3, #0
 800113e:	d003      	beq.n	8001148 <printResetSource+0xa0>
			uartTransmit("PIN Reset\n", 10);
 8001140:	210a      	movs	r1, #10
 8001142:	480f      	ldr	r0, [pc, #60]	; (8001180 <printResetSource+0xd8>)
 8001144:	f7ff f9fc 	bl	8000540 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
 8001148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114c:	2b00      	cmp	r3, #0
 800114e:	da03      	bge.n	8001158 <printResetSource+0xb0>
			uartTransmit("RMVF\n", 5);
 8001150:	2105      	movs	r1, #5
 8001152:	480c      	ldr	r0, [pc, #48]	; (8001184 <printResetSource+0xdc>)
 8001154:	f7ff f9f4 	bl	8000540 <uartTransmit>
}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	080070d8 	.word	0x080070d8
 8001164:	080070e0 	.word	0x080070e0
 8001168:	080070f0 	.word	0x080070f0
 800116c:	0800710c 	.word	0x0800710c
 8001170:	08007124 	.word	0x08007124
 8001174:	08007130 	.word	0x08007130
 8001178:	08007144 	.word	0x08007144
 800117c:	08007154 	.word	0x08007154
 8001180:	08007164 	.word	0x08007164
 8001184:	08007170 	.word	0x08007170

08001188 <readall_inputs>:
//----------------------------------------------------------------------

// Lese alle Eingaenge
//----------------------------------------------------------------------
void readall_inputs(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	// Systemeingaenge einlesen
	system_in.IMD_PWM = HAL_GPIO_ReadPin(IMD_PWM_GPIO_Port, IMD_PWM_Pin);						// Eingang IMD PWM
 800118c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001190:	4850      	ldr	r0, [pc, #320]	; (80012d4 <readall_inputs+0x14c>)
 8001192:	f002 f8a1 	bl	80032d8 <HAL_GPIO_ReadPin>
 8001196:	4603      	mov	r3, r0
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	b2d9      	uxtb	r1, r3
 800119e:	4a4e      	ldr	r2, [pc, #312]	; (80012d8 <readall_inputs+0x150>)
 80011a0:	7813      	ldrb	r3, [r2, #0]
 80011a2:	f361 0300 	bfi	r3, r1, #0, #1
 80011a6:	7013      	strb	r3, [r2, #0]
	system_in.KL15 = HAL_GPIO_ReadPin(KL15_GPIO_Port, KL15_Pin);								// Eingang Auto an
 80011a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011ac:	484b      	ldr	r0, [pc, #300]	; (80012dc <readall_inputs+0x154>)
 80011ae:	f002 f893 	bl	80032d8 <HAL_GPIO_ReadPin>
 80011b2:	4603      	mov	r3, r0
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	b2d9      	uxtb	r1, r3
 80011ba:	4a47      	ldr	r2, [pc, #284]	; (80012d8 <readall_inputs+0x150>)
 80011bc:	7813      	ldrb	r3, [r2, #0]
 80011be:	f361 0341 	bfi	r3, r1, #1, #1
 80011c2:	7013      	strb	r3, [r2, #0]
	system_in.Button1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);						// Zusatzeingang Taster 1
 80011c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011c8:	4845      	ldr	r0, [pc, #276]	; (80012e0 <readall_inputs+0x158>)
 80011ca:	f002 f885 	bl	80032d8 <HAL_GPIO_ReadPin>
 80011ce:	4603      	mov	r3, r0
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	b2d9      	uxtb	r1, r3
 80011d6:	4a40      	ldr	r2, [pc, #256]	; (80012d8 <readall_inputs+0x150>)
 80011d8:	7813      	ldrb	r3, [r2, #0]
 80011da:	f361 03c3 	bfi	r3, r1, #3, #1
 80011de:	7013      	strb	r3, [r2, #0]
	system_in.Button2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);						// Zusatzeingang Taster 2
 80011e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011e4:	483e      	ldr	r0, [pc, #248]	; (80012e0 <readall_inputs+0x158>)
 80011e6:	f002 f877 	bl	80032d8 <HAL_GPIO_ReadPin>
 80011ea:	4603      	mov	r3, r0
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	b2d9      	uxtb	r1, r3
 80011f2:	4a39      	ldr	r2, [pc, #228]	; (80012d8 <readall_inputs+0x150>)
 80011f4:	7813      	ldrb	r3, [r2, #0]
 80011f6:	f361 1304 	bfi	r3, r1, #4, #1
 80011fa:	7013      	strb	r3, [r2, #0]
	system_in.Crash = HAL_GPIO_ReadPin(CRASH_GPIO_Port, CRASH_Pin);								// Crash Eingang
 80011fc:	2101      	movs	r1, #1
 80011fe:	4838      	ldr	r0, [pc, #224]	; (80012e0 <readall_inputs+0x158>)
 8001200:	f002 f86a 	bl	80032d8 <HAL_GPIO_ReadPin>
 8001204:	4603      	mov	r3, r0
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	b2d9      	uxtb	r1, r3
 800120c:	4a32      	ldr	r2, [pc, #200]	; (80012d8 <readall_inputs+0x150>)
 800120e:	7813      	ldrb	r3, [r2, #0]
 8001210:	f361 1345 	bfi	r3, r1, #5, #1
 8001214:	7013      	strb	r3, [r2, #0]
	system_in.Wakeup = HAL_GPIO_ReadPin(HW_WAKE_GPIO_Port, HW_WAKE_Pin);						// Eingang Hardware Wakeup
 8001216:	2104      	movs	r1, #4
 8001218:	4831      	ldr	r0, [pc, #196]	; (80012e0 <readall_inputs+0x158>)
 800121a:	f002 f85d 	bl	80032d8 <HAL_GPIO_ReadPin>
 800121e:	4603      	mov	r3, r0
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	b2d9      	uxtb	r1, r3
 8001226:	4a2c      	ldr	r2, [pc, #176]	; (80012d8 <readall_inputs+0x150>)
 8001228:	7813      	ldrb	r3, [r2, #0]
 800122a:	f361 1386 	bfi	r3, r1, #6, #1
 800122e:	7013      	strb	r3, [r2, #0]

	// SDC-Eingaenge einlesen
	sdc_in.IMD_OK_IN = HAL_GPIO_ReadPin(IMD_OK_IN_GPIO_Port, IMD_OK_IN_Pin);					// IMD OK, Akku
 8001230:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001234:	4827      	ldr	r0, [pc, #156]	; (80012d4 <readall_inputs+0x14c>)
 8001236:	f002 f84f 	bl	80032d8 <HAL_GPIO_ReadPin>
 800123a:	4603      	mov	r3, r0
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	b2d9      	uxtb	r1, r3
 8001242:	4a28      	ldr	r2, [pc, #160]	; (80012e4 <readall_inputs+0x15c>)
 8001244:	7813      	ldrb	r3, [r2, #0]
 8001246:	f361 0300 	bfi	r3, r1, #0, #1
 800124a:	7013      	strb	r3, [r2, #0]
	sdc_in.HVIL = HAL_GPIO_ReadPin(SENSE_SDC_HVIL_GPIO_Port, SENSE_SDC_HVIL_Pin);				// Shutdown-Circuit HVIL, OK
 800124c:	2108      	movs	r1, #8
 800124e:	4821      	ldr	r0, [pc, #132]	; (80012d4 <readall_inputs+0x14c>)
 8001250:	f002 f842 	bl	80032d8 <HAL_GPIO_ReadPin>
 8001254:	4603      	mov	r3, r0
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	b2d9      	uxtb	r1, r3
 800125c:	4a21      	ldr	r2, [pc, #132]	; (80012e4 <readall_inputs+0x15c>)
 800125e:	7813      	ldrb	r3, [r2, #0]
 8001260:	f361 0341 	bfi	r3, r1, #1, #1
 8001264:	7013      	strb	r3, [r2, #0]
	sdc_in.MotorSDC = HAL_GPIO_ReadPin(SENSE_SDC_MOTOR_GPIO_Port, SENSE_SDC_MOTOR_Pin);			// Shutdown-Circuit Akku, OK
 8001266:	2120      	movs	r1, #32
 8001268:	481a      	ldr	r0, [pc, #104]	; (80012d4 <readall_inputs+0x14c>)
 800126a:	f002 f835 	bl	80032d8 <HAL_GPIO_ReadPin>
 800126e:	4603      	mov	r3, r0
 8001270:	f003 0301 	and.w	r3, r3, #1
 8001274:	b2d9      	uxtb	r1, r3
 8001276:	4a1b      	ldr	r2, [pc, #108]	; (80012e4 <readall_inputs+0x15c>)
 8001278:	7813      	ldrb	r3, [r2, #0]
 800127a:	f361 0382 	bfi	r3, r1, #2, #1
 800127e:	7013      	strb	r3, [r2, #0]
	sdc_in.BTB_SDC = HAL_GPIO_ReadPin(SENSE_SDC_BTB_GPIO_Port, SENSE_SDC_BTB_Pin);				// Shutdown-Circuit Bamocar, OK
 8001280:	2110      	movs	r1, #16
 8001282:	4814      	ldr	r0, [pc, #80]	; (80012d4 <readall_inputs+0x14c>)
 8001284:	f002 f828 	bl	80032d8 <HAL_GPIO_ReadPin>
 8001288:	4603      	mov	r3, r0
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	b2d9      	uxtb	r1, r3
 8001290:	4a14      	ldr	r2, [pc, #80]	; (80012e4 <readall_inputs+0x15c>)
 8001292:	7813      	ldrb	r3, [r2, #0]
 8001294:	f361 03c3 	bfi	r3, r1, #3, #1
 8001298:	7013      	strb	r3, [r2, #0]
	sdc_in.PrechargeIn = HAL_GPIO_ReadPin(PRECHARGE_IN_GPIO_Port, PRECHARGE_IN_Pin);			// Eingang Precharge abgeschlossen
 800129a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800129e:	4812      	ldr	r0, [pc, #72]	; (80012e8 <readall_inputs+0x160>)
 80012a0:	f002 f81a 	bl	80032d8 <HAL_GPIO_ReadPin>
 80012a4:	4603      	mov	r3, r0
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	b2d9      	uxtb	r1, r3
 80012ac:	4a0d      	ldr	r2, [pc, #52]	; (80012e4 <readall_inputs+0x15c>)
 80012ae:	7813      	ldrb	r3, [r2, #0]
 80012b0:	f361 1304 	bfi	r3, r1, #4, #1
 80012b4:	7013      	strb	r3, [r2, #0]

	// Komforteingaenge einlesen
	komfort_in.OVC = HAL_GPIO_ReadPin(OVC_SENSE_GPIO_Port, OVC_SENSE_Pin);						// Eingang Overcurrent erkannt
 80012b6:	2104      	movs	r1, #4
 80012b8:	480b      	ldr	r0, [pc, #44]	; (80012e8 <readall_inputs+0x160>)
 80012ba:	f002 f80d 	bl	80032d8 <HAL_GPIO_ReadPin>
 80012be:	4603      	mov	r3, r0
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	b2d9      	uxtb	r1, r3
 80012c6:	4a09      	ldr	r2, [pc, #36]	; (80012ec <readall_inputs+0x164>)
 80012c8:	7813      	ldrb	r3, [r2, #0]
 80012ca:	f361 0300 	bfi	r3, r1, #0, #1
 80012ce:	7013      	strb	r3, [r2, #0]
}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40021000 	.word	0x40021000
 80012d8:	20000060 	.word	0x20000060
 80012dc:	40020c00 	.word	0x40020c00
 80012e0:	40020000 	.word	0x40020000
 80012e4:	20000068 	.word	0x20000068
 80012e8:	40021400 	.word	0x40021400
 80012ec:	20000064 	.word	0x20000064

080012f0 <testPCB_Leds>:
//----------------------------------------------------------------------

// Teste Platinen LEDs
//----------------------------------------------------------------------
void testPCB_Leds(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
	// Leds Testen
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 80012f4:	2201      	movs	r2, #1
 80012f6:	2180      	movs	r1, #128	; 0x80
 80012f8:	481b      	ldr	r0, [pc, #108]	; (8001368 <testPCB_Leds+0x78>)
 80012fa:	f002 f805 	bl	8003308 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80012fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001302:	f001 f967 	bl	80025d4 <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8001306:	2200      	movs	r2, #0
 8001308:	2180      	movs	r1, #128	; 0x80
 800130a:	4817      	ldr	r0, [pc, #92]	; (8001368 <testPCB_Leds+0x78>)
 800130c:	f001 fffc 	bl	8003308 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001310:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001314:	f001 f95e 	bl	80025d4 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8001318:	2201      	movs	r2, #1
 800131a:	2104      	movs	r1, #4
 800131c:	4812      	ldr	r0, [pc, #72]	; (8001368 <testPCB_Leds+0x78>)
 800131e:	f001 fff3 	bl	8003308 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8001322:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001326:	f001 f955 	bl	80025d4 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 800132a:	2200      	movs	r2, #0
 800132c:	2104      	movs	r1, #4
 800132e:	480e      	ldr	r0, [pc, #56]	; (8001368 <testPCB_Leds+0x78>)
 8001330:	f001 ffea 	bl	8003308 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001334:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001338:	f001 f94c 	bl	80025d4 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 800133c:	2201      	movs	r2, #1
 800133e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001342:	4809      	ldr	r0, [pc, #36]	; (8001368 <testPCB_Leds+0x78>)
 8001344:	f001 ffe0 	bl	8003308 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8001348:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800134c:	f001 f942 	bl	80025d4 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8001350:	2200      	movs	r2, #0
 8001352:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001356:	4804      	ldr	r0, [pc, #16]	; (8001368 <testPCB_Leds+0x78>)
 8001358:	f001 ffd6 	bl	8003308 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 800135c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001360:	f001 f938 	bl	80025d4 <HAL_Delay>
}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40020400 	.word	0x40020400

0800136c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001372:	463b      	mov	r3, r7
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800137e:	4b21      	ldr	r3, [pc, #132]	; (8001404 <MX_ADC1_Init+0x98>)
 8001380:	4a21      	ldr	r2, [pc, #132]	; (8001408 <MX_ADC1_Init+0x9c>)
 8001382:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001384:	4b1f      	ldr	r3, [pc, #124]	; (8001404 <MX_ADC1_Init+0x98>)
 8001386:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800138a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800138c:	4b1d      	ldr	r3, [pc, #116]	; (8001404 <MX_ADC1_Init+0x98>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001392:	4b1c      	ldr	r3, [pc, #112]	; (8001404 <MX_ADC1_Init+0x98>)
 8001394:	2200      	movs	r2, #0
 8001396:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001398:	4b1a      	ldr	r3, [pc, #104]	; (8001404 <MX_ADC1_Init+0x98>)
 800139a:	2200      	movs	r2, #0
 800139c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800139e:	4b19      	ldr	r3, [pc, #100]	; (8001404 <MX_ADC1_Init+0x98>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013a6:	4b17      	ldr	r3, [pc, #92]	; (8001404 <MX_ADC1_Init+0x98>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013ac:	4b15      	ldr	r3, [pc, #84]	; (8001404 <MX_ADC1_Init+0x98>)
 80013ae:	4a17      	ldr	r2, [pc, #92]	; (800140c <MX_ADC1_Init+0xa0>)
 80013b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013b2:	4b14      	ldr	r3, [pc, #80]	; (8001404 <MX_ADC1_Init+0x98>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <MX_ADC1_Init+0x98>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013be:	4b11      	ldr	r3, [pc, #68]	; (8001404 <MX_ADC1_Init+0x98>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013c6:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <MX_ADC1_Init+0x98>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013cc:	480d      	ldr	r0, [pc, #52]	; (8001404 <MX_ADC1_Init+0x98>)
 80013ce:	f001 f96d 	bl	80026ac <HAL_ADC_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80013d8:	f000 fcbc 	bl	8001d54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80013dc:	2304      	movs	r3, #4
 80013de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013e0:	2301      	movs	r3, #1
 80013e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e8:	463b      	mov	r3, r7
 80013ea:	4619      	mov	r1, r3
 80013ec:	4805      	ldr	r0, [pc, #20]	; (8001404 <MX_ADC1_Init+0x98>)
 80013ee:	f001 f9a1 	bl	8002734 <HAL_ADC_ConfigChannel>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80013f8:	f000 fcac 	bl	8001d54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013fc:	bf00      	nop
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	2000006c 	.word	0x2000006c
 8001408:	40012000 	.word	0x40012000
 800140c:	0f000001 	.word	0x0f000001

08001410 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08a      	sub	sp, #40	; 0x28
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a15      	ldr	r2, [pc, #84]	; (8001484 <HAL_ADC_MspInit+0x74>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d123      	bne.n	800147a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001432:	4b15      	ldr	r3, [pc, #84]	; (8001488 <HAL_ADC_MspInit+0x78>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001436:	4a14      	ldr	r2, [pc, #80]	; (8001488 <HAL_ADC_MspInit+0x78>)
 8001438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800143c:	6453      	str	r3, [r2, #68]	; 0x44
 800143e:	4b12      	ldr	r3, [pc, #72]	; (8001488 <HAL_ADC_MspInit+0x78>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001446:	613b      	str	r3, [r7, #16]
 8001448:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144a:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <HAL_ADC_MspInit+0x78>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a0e      	ldr	r2, [pc, #56]	; (8001488 <HAL_ADC_MspInit+0x78>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <HAL_ADC_MspInit+0x78>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = SENSE_TEMP1_Pin|SENSE_TEMP2_Pin|SENSE_TEMP3_Pin|SENSE_TEMP4_Pin
 8001462:	23f8      	movs	r3, #248	; 0xf8
 8001464:	617b      	str	r3, [r7, #20]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001466:	2303      	movs	r3, #3
 8001468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	4619      	mov	r1, r3
 8001474:	4805      	ldr	r0, [pc, #20]	; (800148c <HAL_ADC_MspInit+0x7c>)
 8001476:	f001 fd83 	bl	8002f80 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800147a:	bf00      	nop
 800147c:	3728      	adds	r7, #40	; 0x28
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40012000 	.word	0x40012000
 8001488:	40023800 	.word	0x40023800
 800148c:	40020000 	.word	0x40020000

08001490 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan3;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001494:	4b17      	ldr	r3, [pc, #92]	; (80014f4 <MX_CAN1_Init+0x64>)
 8001496:	4a18      	ldr	r2, [pc, #96]	; (80014f8 <MX_CAN1_Init+0x68>)
 8001498:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800149a:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <MX_CAN1_Init+0x64>)
 800149c:	2210      	movs	r2, #16
 800149e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80014a0:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <MX_CAN1_Init+0x64>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80014a6:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <MX_CAN1_Init+0x64>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80014ac:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <MX_CAN1_Init+0x64>)
 80014ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014b2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80014b4:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <MX_CAN1_Init+0x64>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <MX_CAN1_Init+0x64>)
 80014bc:	2200      	movs	r2, #0
 80014be:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <MX_CAN1_Init+0x64>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80014c6:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <MX_CAN1_Init+0x64>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80014cc:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <MX_CAN1_Init+0x64>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80014d2:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <MX_CAN1_Init+0x64>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <MX_CAN1_Init+0x64>)
 80014da:	2200      	movs	r2, #0
 80014dc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80014de:	4805      	ldr	r0, [pc, #20]	; (80014f4 <MX_CAN1_Init+0x64>)
 80014e0:	f001 fb6c 	bl	8002bbc <HAL_CAN_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80014ea:	f000 fc33 	bl	8001d54 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	200000dc 	.word	0x200000dc
 80014f8:	40006400 	.word	0x40006400

080014fc <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8001500:	4b17      	ldr	r3, [pc, #92]	; (8001560 <MX_CAN3_Init+0x64>)
 8001502:	4a18      	ldr	r2, [pc, #96]	; (8001564 <MX_CAN3_Init+0x68>)
 8001504:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 8001506:	4b16      	ldr	r3, [pc, #88]	; (8001560 <MX_CAN3_Init+0x64>)
 8001508:	2206      	movs	r2, #6
 800150a:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 800150c:	4b14      	ldr	r3, [pc, #80]	; (8001560 <MX_CAN3_Init+0x64>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001512:	4b13      	ldr	r3, [pc, #76]	; (8001560 <MX_CAN3_Init+0x64>)
 8001514:	2200      	movs	r2, #0
 8001516:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001518:	4b11      	ldr	r3, [pc, #68]	; (8001560 <MX_CAN3_Init+0x64>)
 800151a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800151e:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001520:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <MX_CAN3_Init+0x64>)
 8001522:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001526:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8001528:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <MX_CAN3_Init+0x64>)
 800152a:	2200      	movs	r2, #0
 800152c:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 800152e:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <MX_CAN3_Init+0x64>)
 8001530:	2200      	movs	r2, #0
 8001532:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8001534:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <MX_CAN3_Init+0x64>)
 8001536:	2200      	movs	r2, #0
 8001538:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 800153a:	4b09      	ldr	r3, [pc, #36]	; (8001560 <MX_CAN3_Init+0x64>)
 800153c:	2200      	movs	r2, #0
 800153e:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8001540:	4b07      	ldr	r3, [pc, #28]	; (8001560 <MX_CAN3_Init+0x64>)
 8001542:	2200      	movs	r2, #0
 8001544:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <MX_CAN3_Init+0x64>)
 8001548:	2200      	movs	r2, #0
 800154a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 800154c:	4804      	ldr	r0, [pc, #16]	; (8001560 <MX_CAN3_Init+0x64>)
 800154e:	f001 fb35 	bl	8002bbc <HAL_CAN_Init>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8001558:	f000 fbfc 	bl	8001d54 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}
 8001560:	200000b4 	.word	0x200000b4
 8001564:	40003400 	.word	0x40003400

08001568 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08e      	sub	sp, #56	; 0x38
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001570:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a43      	ldr	r2, [pc, #268]	; (8001694 <HAL_CAN_MspInit+0x12c>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d131      	bne.n	80015ee <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800158a:	4b43      	ldr	r3, [pc, #268]	; (8001698 <HAL_CAN_MspInit+0x130>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	3301      	adds	r3, #1
 8001590:	4a41      	ldr	r2, [pc, #260]	; (8001698 <HAL_CAN_MspInit+0x130>)
 8001592:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001594:	4b40      	ldr	r3, [pc, #256]	; (8001698 <HAL_CAN_MspInit+0x130>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d10b      	bne.n	80015b4 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800159c:	4b3f      	ldr	r3, [pc, #252]	; (800169c <HAL_CAN_MspInit+0x134>)
 800159e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a0:	4a3e      	ldr	r2, [pc, #248]	; (800169c <HAL_CAN_MspInit+0x134>)
 80015a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015a6:	6413      	str	r3, [r2, #64]	; 0x40
 80015a8:	4b3c      	ldr	r3, [pc, #240]	; (800169c <HAL_CAN_MspInit+0x134>)
 80015aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b0:	623b      	str	r3, [r7, #32]
 80015b2:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015b4:	4b39      	ldr	r3, [pc, #228]	; (800169c <HAL_CAN_MspInit+0x134>)
 80015b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b8:	4a38      	ldr	r2, [pc, #224]	; (800169c <HAL_CAN_MspInit+0x134>)
 80015ba:	f043 0308 	orr.w	r3, r3, #8
 80015be:	6313      	str	r3, [r2, #48]	; 0x30
 80015c0:	4b36      	ldr	r3, [pc, #216]	; (800169c <HAL_CAN_MspInit+0x134>)
 80015c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c4:	f003 0308 	and.w	r3, r3, #8
 80015c8:	61fb      	str	r3, [r7, #28]
 80015ca:	69fb      	ldr	r3, [r7, #28]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015cc:	2303      	movs	r3, #3
 80015ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d0:	2302      	movs	r3, #2
 80015d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d8:	2303      	movs	r3, #3
 80015da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80015dc:	2309      	movs	r3, #9
 80015de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e4:	4619      	mov	r1, r3
 80015e6:	482e      	ldr	r0, [pc, #184]	; (80016a0 <HAL_CAN_MspInit+0x138>)
 80015e8:	f001 fcca 	bl	8002f80 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 80015ec:	e04e      	b.n	800168c <HAL_CAN_MspInit+0x124>
  else if(canHandle->Instance==CAN3)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a2c      	ldr	r2, [pc, #176]	; (80016a4 <HAL_CAN_MspInit+0x13c>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d149      	bne.n	800168c <HAL_CAN_MspInit+0x124>
    __HAL_RCC_CAN3_CLK_ENABLE();
 80015f8:	4b28      	ldr	r3, [pc, #160]	; (800169c <HAL_CAN_MspInit+0x134>)
 80015fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fc:	4a27      	ldr	r2, [pc, #156]	; (800169c <HAL_CAN_MspInit+0x134>)
 80015fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001602:	6413      	str	r3, [r2, #64]	; 0x40
 8001604:	4b25      	ldr	r3, [pc, #148]	; (800169c <HAL_CAN_MspInit+0x134>)
 8001606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001608:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800160c:	61bb      	str	r3, [r7, #24]
 800160e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001610:	4b22      	ldr	r3, [pc, #136]	; (800169c <HAL_CAN_MspInit+0x134>)
 8001612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001614:	4a21      	ldr	r2, [pc, #132]	; (800169c <HAL_CAN_MspInit+0x134>)
 8001616:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800161a:	6413      	str	r3, [r2, #64]	; 0x40
 800161c:	4b1f      	ldr	r3, [pc, #124]	; (800169c <HAL_CAN_MspInit+0x134>)
 800161e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001620:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001624:	617b      	str	r3, [r7, #20]
 8001626:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001628:	4b1b      	ldr	r3, [pc, #108]	; (8001698 <HAL_CAN_MspInit+0x130>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	3301      	adds	r3, #1
 800162e:	4a1a      	ldr	r2, [pc, #104]	; (8001698 <HAL_CAN_MspInit+0x130>)
 8001630:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001632:	4b19      	ldr	r3, [pc, #100]	; (8001698 <HAL_CAN_MspInit+0x130>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d10b      	bne.n	8001652 <HAL_CAN_MspInit+0xea>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800163a:	4b18      	ldr	r3, [pc, #96]	; (800169c <HAL_CAN_MspInit+0x134>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	4a17      	ldr	r2, [pc, #92]	; (800169c <HAL_CAN_MspInit+0x134>)
 8001640:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001644:	6413      	str	r3, [r2, #64]	; 0x40
 8001646:	4b15      	ldr	r3, [pc, #84]	; (800169c <HAL_CAN_MspInit+0x134>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001652:	4b12      	ldr	r3, [pc, #72]	; (800169c <HAL_CAN_MspInit+0x134>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a11      	ldr	r2, [pc, #68]	; (800169c <HAL_CAN_MspInit+0x134>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b0f      	ldr	r3, [pc, #60]	; (800169c <HAL_CAN_MspInit+0x134>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 800166a:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800166e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001670:	2302      	movs	r3, #2
 8001672:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001678:	2303      	movs	r3, #3
 800167a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 800167c:	230b      	movs	r3, #11
 800167e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001680:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001684:	4619      	mov	r1, r3
 8001686:	4808      	ldr	r0, [pc, #32]	; (80016a8 <HAL_CAN_MspInit+0x140>)
 8001688:	f001 fc7a 	bl	8002f80 <HAL_GPIO_Init>
}
 800168c:	bf00      	nop
 800168e:	3738      	adds	r7, #56	; 0x38
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40006400 	.word	0x40006400
 8001698:	20000028 	.word	0x20000028
 800169c:	40023800 	.word	0x40023800
 80016a0:	40020c00 	.word	0x40020c00
 80016a4:	40003400 	.word	0x40003400
 80016a8:	40020000 	.word	0x40020000

080016ac <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08e      	sub	sp, #56	; 0x38
 80016b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]
 80016c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016c2:	4bb7      	ldr	r3, [pc, #732]	; (80019a0 <MX_GPIO_Init+0x2f4>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4ab6      	ldr	r2, [pc, #728]	; (80019a0 <MX_GPIO_Init+0x2f4>)
 80016c8:	f043 0310 	orr.w	r3, r3, #16
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4bb4      	ldr	r3, [pc, #720]	; (80019a0 <MX_GPIO_Init+0x2f4>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0310 	and.w	r3, r3, #16
 80016d6:	623b      	str	r3, [r7, #32]
 80016d8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016da:	4bb1      	ldr	r3, [pc, #708]	; (80019a0 <MX_GPIO_Init+0x2f4>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4ab0      	ldr	r2, [pc, #704]	; (80019a0 <MX_GPIO_Init+0x2f4>)
 80016e0:	f043 0304 	orr.w	r3, r3, #4
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4bae      	ldr	r3, [pc, #696]	; (80019a0 <MX_GPIO_Init+0x2f4>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0304 	and.w	r3, r3, #4
 80016ee:	61fb      	str	r3, [r7, #28]
 80016f0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016f2:	4bab      	ldr	r3, [pc, #684]	; (80019a0 <MX_GPIO_Init+0x2f4>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4aaa      	ldr	r2, [pc, #680]	; (80019a0 <MX_GPIO_Init+0x2f4>)
 80016f8:	f043 0320 	orr.w	r3, r3, #32
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4ba8      	ldr	r3, [pc, #672]	; (80019a0 <MX_GPIO_Init+0x2f4>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f003 0320 	and.w	r3, r3, #32
 8001706:	61bb      	str	r3, [r7, #24]
 8001708:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800170a:	4ba5      	ldr	r3, [pc, #660]	; (80019a0 <MX_GPIO_Init+0x2f4>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4aa4      	ldr	r2, [pc, #656]	; (80019a0 <MX_GPIO_Init+0x2f4>)
 8001710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4ba2      	ldr	r3, [pc, #648]	; (80019a0 <MX_GPIO_Init+0x2f4>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800171e:	617b      	str	r3, [r7, #20]
 8001720:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001722:	4b9f      	ldr	r3, [pc, #636]	; (80019a0 <MX_GPIO_Init+0x2f4>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	4a9e      	ldr	r2, [pc, #632]	; (80019a0 <MX_GPIO_Init+0x2f4>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	6313      	str	r3, [r2, #48]	; 0x30
 800172e:	4b9c      	ldr	r3, [pc, #624]	; (80019a0 <MX_GPIO_Init+0x2f4>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800173a:	4b99      	ldr	r3, [pc, #612]	; (80019a0 <MX_GPIO_Init+0x2f4>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	4a98      	ldr	r2, [pc, #608]	; (80019a0 <MX_GPIO_Init+0x2f4>)
 8001740:	f043 0302 	orr.w	r3, r3, #2
 8001744:	6313      	str	r3, [r2, #48]	; 0x30
 8001746:	4b96      	ldr	r3, [pc, #600]	; (80019a0 <MX_GPIO_Init+0x2f4>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001752:	4b93      	ldr	r3, [pc, #588]	; (80019a0 <MX_GPIO_Init+0x2f4>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4a92      	ldr	r2, [pc, #584]	; (80019a0 <MX_GPIO_Init+0x2f4>)
 8001758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
 800175e:	4b90      	ldr	r3, [pc, #576]	; (80019a0 <MX_GPIO_Init+0x2f4>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001766:	60bb      	str	r3, [r7, #8]
 8001768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800176a:	4b8d      	ldr	r3, [pc, #564]	; (80019a0 <MX_GPIO_Init+0x2f4>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	4a8c      	ldr	r2, [pc, #560]	; (80019a0 <MX_GPIO_Init+0x2f4>)
 8001770:	f043 0308 	orr.w	r3, r3, #8
 8001774:	6313      	str	r3, [r2, #48]	; 0x30
 8001776:	4b8a      	ldr	r3, [pc, #552]	; (80019a0 <MX_GPIO_Init+0x2f4>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	f003 0308 	and.w	r3, r3, #8
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, INLET_RED_Pin|AMS_OK_Pin|ISOSPI_EN_Pin|FREIGABE_Pin
 8001782:	2200      	movs	r2, #0
 8001784:	f248 0187 	movw	r1, #32903	; 0x8087
 8001788:	4886      	ldr	r0, [pc, #536]	; (80019a4 <MX_GPIO_Init+0x2f8>)
 800178a:	f001 fdbd 	bl	8003308 <HAL_GPIO_WritePin>
                          |INLET_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POWER_ON_GPIO_Port, POWER_ON_Pin, GPIO_PIN_RESET);
 800178e:	2200      	movs	r2, #0
 8001790:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001794:	4884      	ldr	r0, [pc, #528]	; (80019a8 <MX_GPIO_Init+0x2fc>)
 8001796:	f001 fdb7 	bl	8003308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin, GPIO_PIN_RESET);
 800179a:	2200      	movs	r2, #0
 800179c:	f242 0102 	movw	r1, #8194	; 0x2002
 80017a0:	4882      	ldr	r0, [pc, #520]	; (80019ac <MX_GPIO_Init+0x300>)
 80017a2:	f001 fdb1 	bl	8003308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin, GPIO_PIN_RESET);
 80017a6:	2200      	movs	r2, #0
 80017a8:	f240 6102 	movw	r1, #1538	; 0x602
 80017ac:	4880      	ldr	r0, [pc, #512]	; (80019b0 <MX_GPIO_Init+0x304>)
 80017ae:	f001 fdab 	bl	8003308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 80017b2:	2200      	movs	r2, #0
 80017b4:	f244 0184 	movw	r1, #16516	; 0x4084
 80017b8:	487e      	ldr	r0, [pc, #504]	; (80019b4 <MX_GPIO_Init+0x308>)
 80017ba:	f001 fda5 	bl	8003308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISOSPI_CS_GPIO_Port, ISOSPI_CS_Pin, GPIO_PIN_SET);
 80017be:	2201      	movs	r2, #1
 80017c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017c4:	4877      	ldr	r0, [pc, #476]	; (80019a4 <MX_GPIO_Init+0x2f8>)
 80017c6:	f001 fd9f 	bl	8003308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 80017ca:	2200      	movs	r2, #0
 80017cc:	f24f 01bc 	movw	r1, #61628	; 0xf0bc
 80017d0:	4879      	ldr	r0, [pc, #484]	; (80019b8 <MX_GPIO_Init+0x30c>)
 80017d2:	f001 fd99 	bl	8003308 <HAL_GPIO_WritePin>
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DIGITAL1_Pin|DIGITAL2_Pin, GPIO_PIN_RESET);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2118      	movs	r1, #24
 80017da:	4878      	ldr	r0, [pc, #480]	; (80019bc <MX_GPIO_Init+0x310>)
 80017dc:	f001 fd94 	bl	8003308 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = INLET_RED_Pin|AMS_OK_Pin|ISOSPI_CS_Pin|ISOSPI_EN_Pin
 80017e0:	f648 0387 	movw	r3, #34951	; 0x8887
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
                          |FREIGABE_Pin|INLET_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e6:	2301      	movs	r3, #1
 80017e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ee:	2300      	movs	r3, #0
 80017f0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f6:	4619      	mov	r1, r3
 80017f8:	486a      	ldr	r0, [pc, #424]	; (80019a4 <MX_GPIO_Init+0x2f8>)
 80017fa:	f001 fbc1 	bl	8002f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SENSE_SDC_HVIL_Pin|SENSE_SDC_BTB_Pin|SENSE_SDC_MOTOR_Pin|IMD_OK_IN_Pin;
 80017fe:	f44f 739c 	mov.w	r3, #312	; 0x138
 8001802:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001804:	2300      	movs	r3, #0
 8001806:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800180c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001810:	4619      	mov	r1, r3
 8001812:	4864      	ldr	r0, [pc, #400]	; (80019a4 <MX_GPIO_Init+0x2f8>)
 8001814:	f001 fbb4 	bl	8002f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 8001818:	f44f 6388 	mov.w	r3, #1088	; 0x440
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800181e:	2303      	movs	r3, #3
 8001820:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800182a:	4619      	mov	r1, r3
 800182c:	485d      	ldr	r0, [pc, #372]	; (80019a4 <MX_GPIO_Init+0x2f8>)
 800182e:	f001 fba7 	bl	8002f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 8001832:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001836:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001838:	2301      	movs	r3, #1
 800183a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001840:	2300      	movs	r3, #0
 8001842:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 8001844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001848:	4619      	mov	r1, r3
 800184a:	4857      	ldr	r0, [pc, #348]	; (80019a8 <MX_GPIO_Init+0x2fc>)
 800184c:	f001 fb98 	bl	8002f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PC3 PC4 PC5
                           PCPin PC7 PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8001850:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |SD_SW_Pin|GPIO_PIN_7|SD_D0_Pin|SD_D1_Pin
                          |SD_D2_Pin|SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001856:	2303      	movs	r3, #3
 8001858:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800185e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001862:	4619      	mov	r1, r3
 8001864:	4850      	ldr	r0, [pc, #320]	; (80019a8 <MX_GPIO_Init+0x2fc>)
 8001866:	f001 fb8b 	bl	8002f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF3 PF4 PF5
                           PFPin PFPin PFPin PFPin
                           PF10 PF11 PF12 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800186a:	f645 73f9 	movw	r3, #24569	; 0x5ff9
 800186e:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPI_CS_Pin|SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001870:	2303      	movs	r3, #3
 8001872:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001878:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800187c:	4619      	mov	r1, r3
 800187e:	484b      	ldr	r0, [pc, #300]	; (80019ac <MX_GPIO_Init+0x300>)
 8001880:	f001 fb7e 	bl	8002f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin;
 8001884:	f242 0302 	movw	r3, #8194	; 0x2002
 8001888:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188a:	2301      	movs	r3, #1
 800188c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001892:	2300      	movs	r3, #0
 8001894:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800189a:	4619      	mov	r1, r3
 800189c:	4843      	ldr	r0, [pc, #268]	; (80019ac <MX_GPIO_Init+0x300>)
 800189e:	f001 fb6f 	bl	8002f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OVC_SENSE_Pin|PRECHARGE_IN_Pin;
 80018a2:	f248 0304 	movw	r3, #32772	; 0x8004
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a8:	2300      	movs	r3, #0
 80018aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b4:	4619      	mov	r1, r3
 80018b6:	483d      	ldr	r0, [pc, #244]	; (80019ac <MX_GPIO_Init+0x300>)
 80018b8:	f001 fb62 	bl	8002f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|HW_WAKE_Pin|BUTTON2_Pin|BUTTON1_Pin;
 80018bc:	f641 0305 	movw	r3, #6149	; 0x1805
 80018c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c2:	2300      	movs	r3, #0
 80018c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ce:	4619      	mov	r1, r3
 80018d0:	4837      	ldr	r0, [pc, #220]	; (80019b0 <MX_GPIO_Init+0x304>)
 80018d2:	f001 fb55 	bl	8002f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin;
 80018d6:	f240 6302 	movw	r3, #1538	; 0x602
 80018da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018dc:	2301      	movs	r3, #1
 80018de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e4:	2300      	movs	r3, #0
 80018e6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ec:	4619      	mov	r1, r3
 80018ee:	4830      	ldr	r0, [pc, #192]	; (80019b0 <MX_GPIO_Init+0x304>)
 80018f0:	f001 fb46 	bl	8002f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB15 PB4
                           PB5 PB6 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 80018f4:	f64b 7373 	movw	r3, #49011	; 0xbf73
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|I2C_SCL_Pin|I2C_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018fa:	2303      	movs	r3, #3
 80018fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001906:	4619      	mov	r1, r3
 8001908:	482a      	ldr	r0, [pc, #168]	; (80019b4 <MX_GPIO_Init+0x308>)
 800190a:	f001 fb39 	bl	8002f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin;
 800190e:	f244 0384 	movw	r3, #16516	; 0x4084
 8001912:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001914:	2301      	movs	r3, #1
 8001916:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191c:	2300      	movs	r3, #0
 800191e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001924:	4619      	mov	r1, r3
 8001926:	4823      	ldr	r0, [pc, #140]	; (80019b4 <MX_GPIO_Init+0x308>)
 8001928:	f001 fb2a 	bl	8002f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG6 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_8;
 800192c:	f240 1343 	movw	r3, #323	; 0x143
 8001930:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001932:	2303      	movs	r3, #3
 8001934:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800193a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800193e:	4619      	mov	r1, r3
 8001940:	481d      	ldr	r0, [pc, #116]	; (80019b8 <MX_GPIO_Init+0x30c>)
 8001942:	f001 fb1d 	bl	8002f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|SD_CMD_Pin;
 8001946:	f240 7304 	movw	r3, #1796	; 0x704
 800194a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800194c:	2303      	movs	r3, #3
 800194e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001958:	4619      	mov	r1, r3
 800195a:	4818      	ldr	r0, [pc, #96]	; (80019bc <MX_GPIO_Init+0x310>)
 800195c:	f001 fb10 	bl	8002f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KL15_Pin;
 8001960:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001966:	2300      	movs	r3, #0
 8001968:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KL15_GPIO_Port, &GPIO_InitStruct);
 800196e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001972:	4619      	mov	r1, r3
 8001974:	4811      	ldr	r0, [pc, #68]	; (80019bc <MX_GPIO_Init+0x310>)
 8001976:	f001 fb03 	bl	8002f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 800197a:	f24f 03bc 	movw	r3, #61628	; 0xf0bc
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001980:	2301      	movs	r3, #1
 8001982:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001988:	2300      	movs	r3, #0
 800198a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800198c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001990:	4619      	mov	r1, r3
 8001992:	4809      	ldr	r0, [pc, #36]	; (80019b8 <MX_GPIO_Init+0x30c>)
 8001994:	f001 faf4 	bl	8002f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|DIGITAL2_Pin;
 8001998:	2318      	movs	r3, #24
 800199a:	627b      	str	r3, [r7, #36]	; 0x24
 800199c:	e010      	b.n	80019c0 <MX_GPIO_Init+0x314>
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40021000 	.word	0x40021000
 80019a8:	40020800 	.word	0x40020800
 80019ac:	40021400 	.word	0x40021400
 80019b0:	40020000 	.word	0x40020000
 80019b4:	40020400 	.word	0x40020400
 80019b8:	40021800 	.word	0x40021800
 80019bc:	40020c00 	.word	0x40020c00
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c0:	2301      	movs	r3, #1
 80019c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c8:	2300      	movs	r3, #0
 80019ca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d0:	4619      	mov	r1, r3
 80019d2:	4803      	ldr	r0, [pc, #12]	; (80019e0 <MX_GPIO_Init+0x334>)
 80019d4:	f001 fad4 	bl	8002f80 <HAL_GPIO_Init>

}
 80019d8:	bf00      	nop
 80019da:	3738      	adds	r7, #56	; 0x38
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40020c00 	.word	0x40020c00

080019e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b088      	sub	sp, #32
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019ea:	f000 fd96 	bl	800251a <HAL_Init>

  /* USER CODE BEGIN Init */
  uint16_t spannungen[12] = {0};
 80019ee:	1d3b      	adds	r3, r7, #4
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
 80019fc:	615a      	str	r2, [r3, #20]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019fe:	f000 f917 	bl	8001c30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a02:	f7ff fe53 	bl	80016ac <MX_GPIO_Init>
  MX_CAN1_Init();
 8001a06:	f7ff fd43 	bl	8001490 <MX_CAN1_Init>
  MX_SPI4_Init();
 8001a0a:	f000 fa0f 	bl	8001e2c <MX_SPI4_Init>
  MX_USART2_UART_Init();
 8001a0e:	f000 fce7 	bl	80023e0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001a12:	f7ff fcab 	bl	800136c <MX_ADC1_Init>
  MX_TIM1_Init();
 8001a16:	f000 fb45 	bl	80020a4 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001a1a:	f000 fbc9 	bl	80021b0 <MX_TIM4_Init>
  MX_SPI1_Init();
 8001a1e:	f000 f9c7 	bl	8001db0 <MX_SPI1_Init>
  MX_CAN3_Init();
 8001a22:	f7ff fd6b 	bl	80014fc <MX_CAN3_Init>
  /* USER CODE BEGIN 2 */

	/* Schreibe Resetquelle auf die Konsole */
#ifdef DEBUG
	printResetSource(readResetSource());
 8001a26:	f7ff faed 	bl	8001004 <readResetSource>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff fb3b 	bl	80010a8 <printResetSource>

	/* Teste serielle Schnittstelle*/
	#define TEST_STRING_UART	"\nUART2 Transmitting in polling mode, Hello Diveturtle93!\n"
	uartTransmit(TEST_STRING_UART, sizeof(TEST_STRING_UART));
 8001a32:	213a      	movs	r1, #58	; 0x3a
 8001a34:	486d      	ldr	r0, [pc, #436]	; (8001bec <main+0x208>)
 8001a36:	f7fe fd83 	bl	8000540 <uartTransmit>

	/* Sammel Systeminformationen */
	collectSystemInfo();
 8001a3a:	f7ff fab9 	bl	8000fb0 <collectSystemInfo>
#endif

	// Leds Testen
	testPCB_Leds();
 8001a3e:	f7ff fc57 	bl	80012f0 <testPCB_Leds>

  	// Lese alle Eingaenge
  	readall_inputs();
 8001a42:	f7ff fba1 	bl	8001188 <readall_inputs>

  	// IsoSPI einschalten, Isolierte Spannungsversorgung IsoSPI und HV-Precharge Messung einschalten
    HAL_GPIO_WritePin(ISOSPI_EN_GPIO_Port, ISOSPI_EN_Pin, GPIO_PIN_SET);
 8001a46:	2201      	movs	r2, #1
 8001a48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a4c:	4868      	ldr	r0, [pc, #416]	; (8001bf0 <main+0x20c>)
 8001a4e:	f001 fc5b 	bl	8003308 <HAL_GPIO_WritePin>

    uartTransmit("\n", 1);
 8001a52:	2101      	movs	r1, #1
 8001a54:	4867      	ldr	r0, [pc, #412]	; (8001bf4 <main+0x210>)
 8001a56:	f7fe fd73 	bl	8000540 <uartTransmit>
#define TEST_LTC6811	"Starte Batteriemanagement-System\n"
    uartTransmit(TEST_LTC6811, sizeof(TEST_LTC6811));
 8001a5a:	2122      	movs	r1, #34	; 0x22
 8001a5c:	4866      	ldr	r0, [pc, #408]	; (8001bf8 <main+0x214>)
 8001a5e:	f7fe fd6f 	bl	8000540 <uartTransmit>

	if ((temp = ltc6811_check()) != 0)									// LTC6804 Selftest durchfuehren
 8001a62:	f7fe feb9 	bl	80007d8 <ltc6811_check>
 8001a66:	4603      	mov	r3, r0
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4b64      	ldr	r3, [pc, #400]	; (8001bfc <main+0x218>)
 8001a6c:	701a      	strb	r2, [r3, #0]
 8001a6e:	4b63      	ldr	r3, [pc, #396]	; (8001bfc <main+0x218>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d01e      	beq.n	8001ab4 <main+0xd0>
	{
#define LTC6811_FAILED	"Selbsttest LTC6811 fehlerhaft\n"
		uartTransmit(LTC6811_FAILED, sizeof(LTC6811_FAILED));			// Ausgabe bei Fehlerhaftem Selbsttest
 8001a76:	211f      	movs	r1, #31
 8001a78:	4861      	ldr	r0, [pc, #388]	; (8001c00 <main+0x21c>)
 8001a7a:	f7fe fd61 	bl	8000540 <uartTransmit>
		leuchten_out.RedLed = 1;										// Variable setzen
 8001a7e:	4a61      	ldr	r2, [pc, #388]	; (8001c04 <main+0x220>)
 8001a80:	7813      	ldrb	r3, [r2, #0]
 8001a82:	f043 0320 	orr.w	r3, r3, #32
 8001a86:	7013      	strb	r3, [r2, #0]
	    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);// Ausgabe auf LEDs
 8001a88:	4b5e      	ldr	r3, [pc, #376]	; (8001c04 <main+0x220>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	461a      	mov	r2, r3
 8001a94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a98:	485b      	ldr	r0, [pc, #364]	; (8001c08 <main+0x224>)
 8001a9a:	f001 fc35 	bl	8003308 <HAL_GPIO_WritePin>

	    uartTransmitNumber(temp, 10);
 8001a9e:	4b57      	ldr	r3, [pc, #348]	; (8001bfc <main+0x218>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	210a      	movs	r1, #10
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7fe fd5f 	bl	8000568 <uartTransmitNumber>
		uartTransmit("\n", 1);
 8001aaa:	2101      	movs	r1, #1
 8001aac:	4851      	ldr	r0, [pc, #324]	; (8001bf4 <main+0x210>)
 8001aae:	f7fe fd47 	bl	8000540 <uartTransmit>
 8001ab2:	e003      	b.n	8001abc <main+0xd8>
		//return 0;														// Programm abbrechen
	}
	else
	{
#define LTC6811_PASSED	"Selbsttest LTC6811 erfolgreich\n"
		uartTransmit(LTC6811_PASSED, sizeof(LTC6811_PASSED));			// Ausgabe bei Erfolgreichem Selbsttest
 8001ab4:	2120      	movs	r1, #32
 8001ab6:	4855      	ldr	r0, [pc, #340]	; (8001c0c <main+0x228>)
 8001ab8:	f7fe fd42 	bl	8000540 <uartTransmit>
	}

	ltc6811_read(RDCFG, &data[0]);
 8001abc:	4954      	ldr	r1, [pc, #336]	; (8001c10 <main+0x22c>)
 8001abe:	2002      	movs	r0, #2
 8001ac0:	f7fe fde6 	bl	8000690 <ltc6811_read>

	// Alle Register zuruecksetzen
	ltc6811(CLRCELL);
 8001ac4:	f240 7011 	movw	r0, #1809	; 0x711
 8001ac8:	f7fe fd90 	bl	80005ec <ltc6811>
	ltc6811(CLRSTAT);
 8001acc:	f240 7013 	movw	r0, #1811	; 0x713
 8001ad0:	f7fe fd8c 	bl	80005ec <ltc6811>
	ltc6811(CLRAUX);
 8001ad4:	f240 7012 	movw	r0, #1810	; 0x712
 8001ad8:	f7fe fd88 	bl	80005ec <ltc6811>

	ltc6811(ADAX | MD262 | GPIOALL);
 8001adc:	f44f 60bc 	mov.w	r0, #1504	; 0x5e0
 8001ae0:	f7fe fd84 	bl	80005ec <ltc6811>
	ltc6811_read(RDAUXA, &data[0]);
 8001ae4:	494a      	ldr	r1, [pc, #296]	; (8001c10 <main+0x22c>)
 8001ae6:	200c      	movs	r0, #12
 8001ae8:	f7fe fdd2 	bl	8000690 <ltc6811_read>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		ltc6811(ADCVC | MD73 | CELLALL);
 8001aec:	f44f 7058 	mov.w	r0, #864	; 0x360
 8001af0:	f7fe fd7c 	bl	80005ec <ltc6811>
		HAL_Delay(300);
 8001af4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001af8:	f000 fd6c 	bl	80025d4 <HAL_Delay>

		ltc6811_read(RDCVA, &data[0]);
 8001afc:	4944      	ldr	r1, [pc, #272]	; (8001c10 <main+0x22c>)
 8001afe:	2004      	movs	r0, #4
 8001b00:	f7fe fdc6 	bl	8000690 <ltc6811_read>
		ltc6811_read(RDCVB, &data[6]);
 8001b04:	4943      	ldr	r1, [pc, #268]	; (8001c14 <main+0x230>)
 8001b06:	2006      	movs	r0, #6
 8001b08:	f7fe fdc2 	bl	8000690 <ltc6811_read>
		ltc6811_read(RDCVC, &data[12]);
 8001b0c:	4942      	ldr	r1, [pc, #264]	; (8001c18 <main+0x234>)
 8001b0e:	2008      	movs	r0, #8
 8001b10:	f7fe fdbe 	bl	8000690 <ltc6811_read>
		ltc6811_read(RDCVD, &data[18]);
 8001b14:	4941      	ldr	r1, [pc, #260]	; (8001c1c <main+0x238>)
 8001b16:	200a      	movs	r0, #10
 8001b18:	f7fe fdba 	bl	8000690 <ltc6811_read>
		ltc6811_read(RDCFG, &data[26]);
 8001b1c:	4940      	ldr	r1, [pc, #256]	; (8001c20 <main+0x23c>)
 8001b1e:	2002      	movs	r0, #2
 8001b20:	f7fe fdb6 	bl	8000690 <ltc6811_read>

		for (uint8_t i = 0; i < 12; i++)
 8001b24:	2300      	movs	r3, #0
 8001b26:	77fb      	strb	r3, [r7, #31]
 8001b28:	e018      	b.n	8001b5c <main+0x178>
		{
			spannungen[i] = ((data[i*2+1]<<8) | data[i*2]);
 8001b2a:	7ffb      	ldrb	r3, [r7, #31]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	3301      	adds	r3, #1
 8001b30:	4a37      	ldr	r2, [pc, #220]	; (8001c10 <main+0x22c>)
 8001b32:	5cd3      	ldrb	r3, [r2, r3]
 8001b34:	021b      	lsls	r3, r3, #8
 8001b36:	b21a      	sxth	r2, r3
 8001b38:	7ffb      	ldrb	r3, [r7, #31]
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	4934      	ldr	r1, [pc, #208]	; (8001c10 <main+0x22c>)
 8001b3e:	5ccb      	ldrb	r3, [r1, r3]
 8001b40:	b21b      	sxth	r3, r3
 8001b42:	4313      	orrs	r3, r2
 8001b44:	b21a      	sxth	r2, r3
 8001b46:	7ffb      	ldrb	r3, [r7, #31]
 8001b48:	b292      	uxth	r2, r2
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	f107 0120 	add.w	r1, r7, #32
 8001b50:	440b      	add	r3, r1
 8001b52:	f823 2c1c 	strh.w	r2, [r3, #-28]
		for (uint8_t i = 0; i < 12; i++)
 8001b56:	7ffb      	ldrb	r3, [r7, #31]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	77fb      	strb	r3, [r7, #31]
 8001b5c:	7ffb      	ldrb	r3, [r7, #31]
 8001b5e:	2b0b      	cmp	r3, #11
 8001b60:	d9e3      	bls.n	8001b2a <main+0x146>
		}

		for (uint8_t i = 0; i < 12; i++)
 8001b62:	2300      	movs	r3, #0
 8001b64:	77bb      	strb	r3, [r7, #30]
 8001b66:	e011      	b.n	8001b8c <main+0x1a8>
		{
			uartTransmitNumber(spannungen[i], 10);
 8001b68:	7fbb      	ldrb	r3, [r7, #30]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	f107 0220 	add.w	r2, r7, #32
 8001b70:	4413      	add	r3, r2
 8001b72:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8001b76:	210a      	movs	r1, #10
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7fe fcf5 	bl	8000568 <uartTransmitNumber>
			uartTransmit(";", 1);
 8001b7e:	2101      	movs	r1, #1
 8001b80:	4828      	ldr	r0, [pc, #160]	; (8001c24 <main+0x240>)
 8001b82:	f7fe fcdd 	bl	8000540 <uartTransmit>
		for (uint8_t i = 0; i < 12; i++)
 8001b86:	7fbb      	ldrb	r3, [r7, #30]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	77bb      	strb	r3, [r7, #30]
 8001b8c:	7fbb      	ldrb	r3, [r7, #30]
 8001b8e:	2b0b      	cmp	r3, #11
 8001b90:	d9ea      	bls.n	8001b68 <main+0x184>
		}

		tmp = 0;
 8001b92:	4b25      	ldr	r3, [pc, #148]	; (8001c28 <main+0x244>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
		for (uint8_t i = 0; i < 12; i++)
 8001b98:	2300      	movs	r3, #0
 8001b9a:	777b      	strb	r3, [r7, #29]
 8001b9c:	e00f      	b.n	8001bbe <main+0x1da>
		{
			tmp += spannungen[i];
 8001b9e:	7f7b      	ldrb	r3, [r7, #29]
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	f107 0220 	add.w	r2, r7, #32
 8001ba6:	4413      	add	r3, r2
 8001ba8:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8001bac:	461a      	mov	r2, r3
 8001bae:	4b1e      	ldr	r3, [pc, #120]	; (8001c28 <main+0x244>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	4a1c      	ldr	r2, [pc, #112]	; (8001c28 <main+0x244>)
 8001bb6:	6013      	str	r3, [r2, #0]
		for (uint8_t i = 0; i < 12; i++)
 8001bb8:	7f7b      	ldrb	r3, [r7, #29]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	777b      	strb	r3, [r7, #29]
 8001bbe:	7f7b      	ldrb	r3, [r7, #29]
 8001bc0:	2b0b      	cmp	r3, #11
 8001bc2:	d9ec      	bls.n	8001b9e <main+0x1ba>
		}
		tmp /= 12;
 8001bc4:	4b18      	ldr	r3, [pc, #96]	; (8001c28 <main+0x244>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a18      	ldr	r2, [pc, #96]	; (8001c2c <main+0x248>)
 8001bca:	fba2 2303 	umull	r2, r3, r2, r3
 8001bce:	08db      	lsrs	r3, r3, #3
 8001bd0:	4a15      	ldr	r2, [pc, #84]	; (8001c28 <main+0x244>)
 8001bd2:	6013      	str	r3, [r2, #0]
		uartTransmitNumber(tmp, 10);
 8001bd4:	4b14      	ldr	r3, [pc, #80]	; (8001c28 <main+0x244>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	210a      	movs	r1, #10
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe fcc4 	bl	8000568 <uartTransmitNumber>

		uartTransmit("\n", 1);
 8001be0:	2101      	movs	r1, #1
 8001be2:	4804      	ldr	r0, [pc, #16]	; (8001bf4 <main+0x210>)
 8001be4:	f7fe fcac 	bl	8000540 <uartTransmit>
		ltc6811(ADCVC | MD73 | CELLALL);
 8001be8:	e780      	b.n	8001aec <main+0x108>
 8001bea:	bf00      	nop
 8001bec:	08007178 	.word	0x08007178
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	080071b4 	.word	0x080071b4
 8001bf8:	080071b8 	.word	0x080071b8
 8001bfc:	20000108 	.word	0x20000108
 8001c00:	080071dc 	.word	0x080071dc
 8001c04:	2000005c 	.word	0x2000005c
 8001c08:	40020400 	.word	0x40020400
 8001c0c:	080071fc 	.word	0x080071fc
 8001c10:	2000002c 	.word	0x2000002c
 8001c14:	20000032 	.word	0x20000032
 8001c18:	20000038 	.word	0x20000038
 8001c1c:	2000003e 	.word	0x2000003e
 8001c20:	20000046 	.word	0x20000046
 8001c24:	0800721c 	.word	0x0800721c
 8001c28:	20000104 	.word	0x20000104
 8001c2c:	aaaaaaab 	.word	0xaaaaaaab

08001c30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b0b8      	sub	sp, #224	; 0xe0
 8001c34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c36:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c3a:	2234      	movs	r2, #52	; 0x34
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f005 f8b6 	bl	8006db0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c44:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
 8001c52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c54:	f107 0308 	add.w	r3, r7, #8
 8001c58:	2290      	movs	r2, #144	; 0x90
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f005 f8a7 	bl	8006db0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c62:	4b3a      	ldr	r3, [pc, #232]	; (8001d4c <SystemClock_Config+0x11c>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	4a39      	ldr	r2, [pc, #228]	; (8001d4c <SystemClock_Config+0x11c>)
 8001c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c6e:	4b37      	ldr	r3, [pc, #220]	; (8001d4c <SystemClock_Config+0x11c>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c76:	607b      	str	r3, [r7, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c7a:	4b35      	ldr	r3, [pc, #212]	; (8001d50 <SystemClock_Config+0x120>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a34      	ldr	r2, [pc, #208]	; (8001d50 <SystemClock_Config+0x120>)
 8001c80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	4b32      	ldr	r3, [pc, #200]	; (8001d50 <SystemClock_Config+0x120>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c8e:	603b      	str	r3, [r7, #0]
 8001c90:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c92:	2301      	movs	r3, #1
 8001c94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ca6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001caa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001cae:	2319      	movs	r3, #25
 8001cb0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001cb4:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001cb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001cc2:	2308      	movs	r3, #8
 8001cc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cce:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f001 fb82 	bl	80033dc <HAL_RCC_OscConfig>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001cde:	f000 f839 	bl	8001d54 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001ce2:	f001 fb2b 	bl	800333c <HAL_PWREx_EnableOverDrive>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001cec:	f000 f832 	bl	8001d54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cf0:	230f      	movs	r3, #15
 8001cf2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d02:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001d12:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001d16:	2107      	movs	r1, #7
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f001 fe0d 	bl	8003938 <HAL_RCC_ClockConfig>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8001d24:	f000 f816 	bl	8001d54 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d28:	2380      	movs	r3, #128	; 0x80
 8001d2a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d30:	f107 0308 	add.w	r3, r7, #8
 8001d34:	4618      	mov	r0, r3
 8001d36:	f001 ffd5 	bl	8003ce4 <HAL_RCCEx_PeriphCLKConfig>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8001d40:	f000 f808 	bl	8001d54 <Error_Handler>
  }
}
 8001d44:	bf00      	nop
 8001d46:	37e0      	adds	r7, #224	; 0xe0
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	40007000 	.word	0x40007000

08001d54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d58:	b672      	cpsid	i
}
 8001d5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();														// Interrupts deaktivieren

	// Schalte Fehler LED ein
	leuchten_out.RedLed = 1;												// Setze Variable
 8001d5c:	4a11      	ldr	r2, [pc, #68]	; (8001da4 <Error_Handler+0x50>)
 8001d5e:	7813      	ldrb	r3, [r2, #0]
 8001d60:	f043 0320 	orr.w	r3, r3, #32
 8001d64:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);	// Fehler LED einschalten
 8001d66:	4b0f      	ldr	r3, [pc, #60]	; (8001da4 <Error_Handler+0x50>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	461a      	mov	r2, r3
 8001d72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d76:	480c      	ldr	r0, [pc, #48]	; (8001da8 <Error_Handler+0x54>)
 8001d78:	f001 fac6 	bl	8003308 <HAL_GPIO_WritePin>

	// Schalte Ok LED aus
	leuchten_out.GreenLed = 0;												// Zuruechsetzen Variable
 8001d7c:	4a09      	ldr	r2, [pc, #36]	; (8001da4 <Error_Handler+0x50>)
 8001d7e:	7813      	ldrb	r3, [r2, #0]
 8001d80:	f36f 1386 	bfc	r3, #6, #1
 8001d84:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);// Fehler LED ausschalten
 8001d86:	4b07      	ldr	r3, [pc, #28]	; (8001da4 <Error_Handler+0x50>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	461a      	mov	r2, r3
 8001d92:	2104      	movs	r1, #4
 8001d94:	4804      	ldr	r0, [pc, #16]	; (8001da8 <Error_Handler+0x54>)
 8001d96:	f001 fab7 	bl	8003308 <HAL_GPIO_WritePin>

	// Sende Nachricht auf Uart-Interface
#ifdef DEBUG
#define STRING_ERROR_HANDLER			"Error Handler wird ausgefuehrt!!!"
	uartTransmit(STRING_ERROR_HANDLER, sizeof(STRING_ERROR_HANDLER));
 8001d9a:	2122      	movs	r1, #34	; 0x22
 8001d9c:	4803      	ldr	r0, [pc, #12]	; (8001dac <Error_Handler+0x58>)
 8001d9e:	f7fe fbcf 	bl	8000540 <uartTransmit>
#endif
	// Beginne Endlosschleife nachdem Fehler aufgetreten ist
	while (1);
 8001da2:	e7fe      	b.n	8001da2 <Error_Handler+0x4e>
 8001da4:	2000005c 	.word	0x2000005c
 8001da8:	40020400 	.word	0x40020400
 8001dac:	08007220 	.word	0x08007220

08001db0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001db4:	4b1b      	ldr	r3, [pc, #108]	; (8001e24 <MX_SPI1_Init+0x74>)
 8001db6:	4a1c      	ldr	r2, [pc, #112]	; (8001e28 <MX_SPI1_Init+0x78>)
 8001db8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001dba:	4b1a      	ldr	r3, [pc, #104]	; (8001e24 <MX_SPI1_Init+0x74>)
 8001dbc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001dc0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001dc2:	4b18      	ldr	r3, [pc, #96]	; (8001e24 <MX_SPI1_Init+0x74>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001dc8:	4b16      	ldr	r3, [pc, #88]	; (8001e24 <MX_SPI1_Init+0x74>)
 8001dca:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001dce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dd0:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <MX_SPI1_Init+0x74>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dd6:	4b13      	ldr	r3, [pc, #76]	; (8001e24 <MX_SPI1_Init+0x74>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001ddc:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <MX_SPI1_Init+0x74>)
 8001dde:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001de2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001de4:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <MX_SPI1_Init+0x74>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dea:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <MX_SPI1_Init+0x74>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001df0:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <MX_SPI1_Init+0x74>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001df6:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <MX_SPI1_Init+0x74>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001dfc:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <MX_SPI1_Init+0x74>)
 8001dfe:	2207      	movs	r2, #7
 8001e00:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e02:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <MX_SPI1_Init+0x74>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <MX_SPI1_Init+0x74>)
 8001e0a:	2208      	movs	r2, #8
 8001e0c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e0e:	4805      	ldr	r0, [pc, #20]	; (8001e24 <MX_SPI1_Init+0x74>)
 8001e10:	f002 fb90 	bl	8004534 <HAL_SPI_Init>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001e1a:	f7ff ff9b 	bl	8001d54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000170 	.word	0x20000170
 8001e28:	40013000 	.word	0x40013000

08001e2c <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001e30:	4b1b      	ldr	r3, [pc, #108]	; (8001ea0 <MX_SPI4_Init+0x74>)
 8001e32:	4a1c      	ldr	r2, [pc, #112]	; (8001ea4 <MX_SPI4_Init+0x78>)
 8001e34:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001e36:	4b1a      	ldr	r3, [pc, #104]	; (8001ea0 <MX_SPI4_Init+0x74>)
 8001e38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e3c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001e3e:	4b18      	ldr	r3, [pc, #96]	; (8001ea0 <MX_SPI4_Init+0x74>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e44:	4b16      	ldr	r3, [pc, #88]	; (8001ea0 <MX_SPI4_Init+0x74>)
 8001e46:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001e4a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001e4c:	4b14      	ldr	r3, [pc, #80]	; (8001ea0 <MX_SPI4_Init+0x74>)
 8001e4e:	2202      	movs	r2, #2
 8001e50:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001e52:	4b13      	ldr	r3, [pc, #76]	; (8001ea0 <MX_SPI4_Init+0x74>)
 8001e54:	2201      	movs	r2, #1
 8001e56:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001e58:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <MX_SPI4_Init+0x74>)
 8001e5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e5e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001e60:	4b0f      	ldr	r3, [pc, #60]	; (8001ea0 <MX_SPI4_Init+0x74>)
 8001e62:	2230      	movs	r2, #48	; 0x30
 8001e64:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e66:	4b0e      	ldr	r3, [pc, #56]	; (8001ea0 <MX_SPI4_Init+0x74>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <MX_SPI4_Init+0x74>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e72:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <MX_SPI4_Init+0x74>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001e78:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <MX_SPI4_Init+0x74>)
 8001e7a:	2207      	movs	r2, #7
 8001e7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e7e:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <MX_SPI4_Init+0x74>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001e84:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <MX_SPI4_Init+0x74>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001e8a:	4805      	ldr	r0, [pc, #20]	; (8001ea0 <MX_SPI4_Init+0x74>)
 8001e8c:	f002 fb52 	bl	8004534 <HAL_SPI_Init>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001e96:	f7ff ff5d 	bl	8001d54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	2000010c 	.word	0x2000010c
 8001ea4:	40013400 	.word	0x40013400

08001ea8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08c      	sub	sp, #48	; 0x30
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb0:	f107 031c 	add.w	r3, r7, #28
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a3d      	ldr	r2, [pc, #244]	; (8001fbc <HAL_SPI_MspInit+0x114>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d145      	bne.n	8001f56 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001eca:	4b3d      	ldr	r3, [pc, #244]	; (8001fc0 <HAL_SPI_MspInit+0x118>)
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ece:	4a3c      	ldr	r2, [pc, #240]	; (8001fc0 <HAL_SPI_MspInit+0x118>)
 8001ed0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ed6:	4b3a      	ldr	r3, [pc, #232]	; (8001fc0 <HAL_SPI_MspInit+0x118>)
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ede:	61bb      	str	r3, [r7, #24]
 8001ee0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ee2:	4b37      	ldr	r3, [pc, #220]	; (8001fc0 <HAL_SPI_MspInit+0x118>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	4a36      	ldr	r2, [pc, #216]	; (8001fc0 <HAL_SPI_MspInit+0x118>)
 8001ee8:	f043 0308 	orr.w	r3, r3, #8
 8001eec:	6313      	str	r3, [r2, #48]	; 0x30
 8001eee:	4b34      	ldr	r3, [pc, #208]	; (8001fc0 <HAL_SPI_MspInit+0x118>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	617b      	str	r3, [r7, #20]
 8001ef8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001efa:	4b31      	ldr	r3, [pc, #196]	; (8001fc0 <HAL_SPI_MspInit+0x118>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	4a30      	ldr	r2, [pc, #192]	; (8001fc0 <HAL_SPI_MspInit+0x118>)
 8001f00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f04:	6313      	str	r3, [r2, #48]	; 0x30
 8001f06:	4b2e      	ldr	r3, [pc, #184]	; (8001fc0 <HAL_SPI_MspInit+0x118>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f0e:	613b      	str	r3, [r7, #16]
 8001f10:	693b      	ldr	r3, [r7, #16]
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG10     ------> SPI1_NSS
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = POTI_MOSI_Pin;
 8001f12:	2380      	movs	r3, #128	; 0x80
 8001f14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f16:	2302      	movs	r3, #2
 8001f18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f22:	2305      	movs	r3, #5
 8001f24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(POTI_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001f26:	f107 031c 	add.w	r3, r7, #28
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4825      	ldr	r0, [pc, #148]	; (8001fc4 <HAL_SPI_MspInit+0x11c>)
 8001f2e:	f001 f827 	bl	8002f80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POTI_MISO_Pin|POTI_CS_Pin|POTI_SCK_Pin;
 8001f32:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8001f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f40:	2303      	movs	r3, #3
 8001f42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f44:	2305      	movs	r3, #5
 8001f46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f48:	f107 031c 	add.w	r3, r7, #28
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	481e      	ldr	r0, [pc, #120]	; (8001fc8 <HAL_SPI_MspInit+0x120>)
 8001f50:	f001 f816 	bl	8002f80 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001f54:	e02d      	b.n	8001fb2 <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI4)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a1c      	ldr	r2, [pc, #112]	; (8001fcc <HAL_SPI_MspInit+0x124>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d128      	bne.n	8001fb2 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001f60:	4b17      	ldr	r3, [pc, #92]	; (8001fc0 <HAL_SPI_MspInit+0x118>)
 8001f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f64:	4a16      	ldr	r2, [pc, #88]	; (8001fc0 <HAL_SPI_MspInit+0x118>)
 8001f66:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f6a:	6453      	str	r3, [r2, #68]	; 0x44
 8001f6c:	4b14      	ldr	r3, [pc, #80]	; (8001fc0 <HAL_SPI_MspInit+0x118>)
 8001f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f78:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <HAL_SPI_MspInit+0x118>)
 8001f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7c:	4a10      	ldr	r2, [pc, #64]	; (8001fc0 <HAL_SPI_MspInit+0x118>)
 8001f7e:	f043 0310 	orr.w	r3, r3, #16
 8001f82:	6313      	str	r3, [r2, #48]	; 0x30
 8001f84:	4b0e      	ldr	r3, [pc, #56]	; (8001fc0 <HAL_SPI_MspInit+0x118>)
 8001f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f88:	f003 0310 	and.w	r3, r3, #16
 8001f8c:	60bb      	str	r3, [r7, #8]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ISOSPI_SCK_Pin|ISOSPI_MISO_Pin|ISOSPI_MOSI_Pin;
 8001f90:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f96:	2302      	movs	r3, #2
 8001f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001fa2:	2305      	movs	r3, #5
 8001fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fa6:	f107 031c 	add.w	r3, r7, #28
 8001faa:	4619      	mov	r1, r3
 8001fac:	4808      	ldr	r0, [pc, #32]	; (8001fd0 <HAL_SPI_MspInit+0x128>)
 8001fae:	f000 ffe7 	bl	8002f80 <HAL_GPIO_Init>
}
 8001fb2:	bf00      	nop
 8001fb4:	3730      	adds	r7, #48	; 0x30
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40013000 	.word	0x40013000
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40020c00 	.word	0x40020c00
 8001fc8:	40021800 	.word	0x40021800
 8001fcc:	40013400 	.word	0x40013400
 8001fd0:	40021000 	.word	0x40021000

08001fd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001fda:	4b0f      	ldr	r3, [pc, #60]	; (8002018 <HAL_MspInit+0x44>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	4a0e      	ldr	r2, [pc, #56]	; (8002018 <HAL_MspInit+0x44>)
 8001fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fe6:	4b0c      	ldr	r3, [pc, #48]	; (8002018 <HAL_MspInit+0x44>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fee:	607b      	str	r3, [r7, #4]
 8001ff0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff2:	4b09      	ldr	r3, [pc, #36]	; (8002018 <HAL_MspInit+0x44>)
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff6:	4a08      	ldr	r2, [pc, #32]	; (8002018 <HAL_MspInit+0x44>)
 8001ff8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ffe:	4b06      	ldr	r3, [pc, #24]	; (8002018 <HAL_MspInit+0x44>)
 8002000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002006:	603b      	str	r3, [r7, #0]
 8002008:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	40023800 	.word	0x40023800

0800201c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800202a:	b480      	push	{r7}
 800202c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800202e:	e7fe      	b.n	800202e <HardFault_Handler+0x4>

08002030 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002034:	e7fe      	b.n	8002034 <MemManage_Handler+0x4>

08002036 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002036:	b480      	push	{r7}
 8002038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800203a:	e7fe      	b.n	800203a <BusFault_Handler+0x4>

0800203c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002040:	e7fe      	b.n	8002040 <UsageFault_Handler+0x4>

08002042 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002042:	b480      	push	{r7}
 8002044:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800205e:	b480      	push	{r7}
 8002060:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002070:	f000 fa90 	bl	8002594 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002074:	bf00      	nop
 8002076:	bd80      	pop	{r7, pc}

08002078 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800207c:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <SystemInit+0x28>)
 800207e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002082:	4a07      	ldr	r2, [pc, #28]	; (80020a0 <SystemInit+0x28>)
 8002084:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002088:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800208c:	4b04      	ldr	r3, [pc, #16]	; (80020a0 <SystemInit+0x28>)
 800208e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002092:	609a      	str	r2, [r3, #8]
#endif
}
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	e000ed00 	.word	0xe000ed00

080020a4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08c      	sub	sp, #48	; 0x30
 80020a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80020aa:	f107 031c 	add.w	r3, r7, #28
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	605a      	str	r2, [r3, #4]
 80020b4:	609a      	str	r2, [r3, #8]
 80020b6:	60da      	str	r2, [r3, #12]
 80020b8:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80020ba:	f107 030c 	add.w	r3, r7, #12
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	605a      	str	r2, [r3, #4]
 80020c4:	609a      	str	r2, [r3, #8]
 80020c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020c8:	463b      	mov	r3, r7
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	605a      	str	r2, [r3, #4]
 80020d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020d2:	4b35      	ldr	r3, [pc, #212]	; (80021a8 <MX_TIM1_Init+0x104>)
 80020d4:	4a35      	ldr	r2, [pc, #212]	; (80021ac <MX_TIM1_Init+0x108>)
 80020d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80020d8:	4b33      	ldr	r3, [pc, #204]	; (80021a8 <MX_TIM1_Init+0x104>)
 80020da:	2200      	movs	r2, #0
 80020dc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020de:	4b32      	ldr	r3, [pc, #200]	; (80021a8 <MX_TIM1_Init+0x104>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80020e4:	4b30      	ldr	r3, [pc, #192]	; (80021a8 <MX_TIM1_Init+0x104>)
 80020e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ec:	4b2e      	ldr	r3, [pc, #184]	; (80021a8 <MX_TIM1_Init+0x104>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020f2:	4b2d      	ldr	r3, [pc, #180]	; (80021a8 <MX_TIM1_Init+0x104>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020f8:	4b2b      	ldr	r3, [pc, #172]	; (80021a8 <MX_TIM1_Init+0x104>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80020fe:	482a      	ldr	r0, [pc, #168]	; (80021a8 <MX_TIM1_Init+0x104>)
 8002100:	f003 f983 	bl	800540a <HAL_TIM_IC_Init>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 800210a:	f7ff fe23 	bl	8001d54 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800210e:	2304      	movs	r3, #4
 8002110:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002112:	2350      	movs	r3, #80	; 0x50
 8002114:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002116:	2300      	movs	r3, #0
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800211a:	2300      	movs	r3, #0
 800211c:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 800211e:	2300      	movs	r3, #0
 8002120:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8002122:	f107 031c 	add.w	r3, r7, #28
 8002126:	4619      	mov	r1, r3
 8002128:	481f      	ldr	r0, [pc, #124]	; (80021a8 <MX_TIM1_Init+0x104>)
 800212a:	f003 fb69 	bl	8005800 <HAL_TIM_SlaveConfigSynchro>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002134:	f7ff fe0e 	bl	8001d54 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002138:	2300      	movs	r3, #0
 800213a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800213c:	2301      	movs	r3, #1
 800213e:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002148:	f107 030c 	add.w	r3, r7, #12
 800214c:	2200      	movs	r2, #0
 800214e:	4619      	mov	r1, r3
 8002150:	4815      	ldr	r0, [pc, #84]	; (80021a8 <MX_TIM1_Init+0x104>)
 8002152:	f003 f9b1 	bl	80054b8 <HAL_TIM_IC_ConfigChannel>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 800215c:	f7ff fdfa 	bl	8001d54 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002160:	2302      	movs	r3, #2
 8002162:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002164:	2302      	movs	r3, #2
 8002166:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002168:	f107 030c 	add.w	r3, r7, #12
 800216c:	2204      	movs	r2, #4
 800216e:	4619      	mov	r1, r3
 8002170:	480d      	ldr	r0, [pc, #52]	; (80021a8 <MX_TIM1_Init+0x104>)
 8002172:	f003 f9a1 	bl	80054b8 <HAL_TIM_IC_ConfigChannel>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 800217c:	f7ff fdea 	bl	8001d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002180:	2300      	movs	r3, #0
 8002182:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002184:	2300      	movs	r3, #0
 8002186:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002188:	2300      	movs	r3, #0
 800218a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800218c:	463b      	mov	r3, r7
 800218e:	4619      	mov	r1, r3
 8002190:	4805      	ldr	r0, [pc, #20]	; (80021a8 <MX_TIM1_Init+0x104>)
 8002192:	f004 f8af 	bl	80062f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 800219c:	f7ff fdda 	bl	8001d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80021a0:	bf00      	nop
 80021a2:	3730      	adds	r7, #48	; 0x30
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	20000220 	.word	0x20000220
 80021ac:	40010000 	.word	0x40010000

080021b0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b08a      	sub	sp, #40	; 0x28
 80021b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021b6:	f107 031c 	add.w	r3, r7, #28
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	605a      	str	r2, [r3, #4]
 80021c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021c2:	463b      	mov	r3, r7
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	611a      	str	r2, [r3, #16]
 80021d0:	615a      	str	r2, [r3, #20]
 80021d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80021d4:	4b32      	ldr	r3, [pc, #200]	; (80022a0 <MX_TIM4_Init+0xf0>)
 80021d6:	4a33      	ldr	r2, [pc, #204]	; (80022a4 <MX_TIM4_Init+0xf4>)
 80021d8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80021da:	4b31      	ldr	r3, [pc, #196]	; (80022a0 <MX_TIM4_Init+0xf0>)
 80021dc:	2200      	movs	r2, #0
 80021de:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021e0:	4b2f      	ldr	r3, [pc, #188]	; (80022a0 <MX_TIM4_Init+0xf0>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80021e6:	4b2e      	ldr	r3, [pc, #184]	; (80022a0 <MX_TIM4_Init+0xf0>)
 80021e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021ec:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ee:	4b2c      	ldr	r3, [pc, #176]	; (80022a0 <MX_TIM4_Init+0xf0>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021f4:	4b2a      	ldr	r3, [pc, #168]	; (80022a0 <MX_TIM4_Init+0xf0>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80021fa:	4829      	ldr	r0, [pc, #164]	; (80022a0 <MX_TIM4_Init+0xf0>)
 80021fc:	f003 f8ae 	bl	800535c <HAL_TIM_PWM_Init>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8002206:	f7ff fda5 	bl	8001d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800220a:	2300      	movs	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800220e:	2300      	movs	r3, #0
 8002210:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002212:	f107 031c 	add.w	r3, r7, #28
 8002216:	4619      	mov	r1, r3
 8002218:	4821      	ldr	r0, [pc, #132]	; (80022a0 <MX_TIM4_Init+0xf0>)
 800221a:	f004 f86b 	bl	80062f4 <HAL_TIMEx_MasterConfigSynchronization>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002224:	f7ff fd96 	bl	8001d54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002228:	2360      	movs	r3, #96	; 0x60
 800222a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800222c:	2300      	movs	r3, #0
 800222e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002230:	2300      	movs	r3, #0
 8002232:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002234:	2300      	movs	r3, #0
 8002236:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002238:	463b      	mov	r3, r7
 800223a:	2200      	movs	r2, #0
 800223c:	4619      	mov	r1, r3
 800223e:	4818      	ldr	r0, [pc, #96]	; (80022a0 <MX_TIM4_Init+0xf0>)
 8002240:	f003 f9ce 	bl	80055e0 <HAL_TIM_PWM_ConfigChannel>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800224a:	f7ff fd83 	bl	8001d54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800224e:	463b      	mov	r3, r7
 8002250:	2204      	movs	r2, #4
 8002252:	4619      	mov	r1, r3
 8002254:	4812      	ldr	r0, [pc, #72]	; (80022a0 <MX_TIM4_Init+0xf0>)
 8002256:	f003 f9c3 	bl	80055e0 <HAL_TIM_PWM_ConfigChannel>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002260:	f7ff fd78 	bl	8001d54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002264:	463b      	mov	r3, r7
 8002266:	2208      	movs	r2, #8
 8002268:	4619      	mov	r1, r3
 800226a:	480d      	ldr	r0, [pc, #52]	; (80022a0 <MX_TIM4_Init+0xf0>)
 800226c:	f003 f9b8 	bl	80055e0 <HAL_TIM_PWM_ConfigChannel>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8002276:	f7ff fd6d 	bl	8001d54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800227a:	463b      	mov	r3, r7
 800227c:	220c      	movs	r2, #12
 800227e:	4619      	mov	r1, r3
 8002280:	4807      	ldr	r0, [pc, #28]	; (80022a0 <MX_TIM4_Init+0xf0>)
 8002282:	f003 f9ad 	bl	80055e0 <HAL_TIM_PWM_ConfigChannel>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 800228c:	f7ff fd62 	bl	8001d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002290:	4803      	ldr	r0, [pc, #12]	; (80022a0 <MX_TIM4_Init+0xf0>)
 8002292:	f000 f86d 	bl	8002370 <HAL_TIM_MspPostInit>

}
 8002296:	bf00      	nop
 8002298:	3728      	adds	r7, #40	; 0x28
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	200001d4 	.word	0x200001d4
 80022a4:	40000800 	.word	0x40000800

080022a8 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08a      	sub	sp, #40	; 0x28
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b0:	f107 0314 	add.w	r3, r7, #20
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	605a      	str	r2, [r3, #4]
 80022ba:	609a      	str	r2, [r3, #8]
 80022bc:	60da      	str	r2, [r3, #12]
 80022be:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a17      	ldr	r2, [pc, #92]	; (8002324 <HAL_TIM_IC_MspInit+0x7c>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d128      	bne.n	800231c <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022ca:	4b17      	ldr	r3, [pc, #92]	; (8002328 <HAL_TIM_IC_MspInit+0x80>)
 80022cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ce:	4a16      	ldr	r2, [pc, #88]	; (8002328 <HAL_TIM_IC_MspInit+0x80>)
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	6453      	str	r3, [r2, #68]	; 0x44
 80022d6:	4b14      	ldr	r3, [pc, #80]	; (8002328 <HAL_TIM_IC_MspInit+0x80>)
 80022d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	613b      	str	r3, [r7, #16]
 80022e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80022e2:	4b11      	ldr	r3, [pc, #68]	; (8002328 <HAL_TIM_IC_MspInit+0x80>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	4a10      	ldr	r2, [pc, #64]	; (8002328 <HAL_TIM_IC_MspInit+0x80>)
 80022e8:	f043 0310 	orr.w	r3, r3, #16
 80022ec:	6313      	str	r3, [r2, #48]	; 0x30
 80022ee:	4b0e      	ldr	r3, [pc, #56]	; (8002328 <HAL_TIM_IC_MspInit+0x80>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	f003 0310 	and.w	r3, r3, #16
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = IMD_PWM_Pin;
 80022fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002300:	2302      	movs	r3, #2
 8002302:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002304:	2300      	movs	r3, #0
 8002306:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002308:	2300      	movs	r3, #0
 800230a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800230c:	2301      	movs	r3, #1
 800230e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(IMD_PWM_GPIO_Port, &GPIO_InitStruct);
 8002310:	f107 0314 	add.w	r3, r7, #20
 8002314:	4619      	mov	r1, r3
 8002316:	4805      	ldr	r0, [pc, #20]	; (800232c <HAL_TIM_IC_MspInit+0x84>)
 8002318:	f000 fe32 	bl	8002f80 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800231c:	bf00      	nop
 800231e:	3728      	adds	r7, #40	; 0x28
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40010000 	.word	0x40010000
 8002328:	40023800 	.word	0x40023800
 800232c:	40021000 	.word	0x40021000

08002330 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a0a      	ldr	r2, [pc, #40]	; (8002368 <HAL_TIM_PWM_MspInit+0x38>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d10b      	bne.n	800235a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002342:	4b0a      	ldr	r3, [pc, #40]	; (800236c <HAL_TIM_PWM_MspInit+0x3c>)
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	4a09      	ldr	r2, [pc, #36]	; (800236c <HAL_TIM_PWM_MspInit+0x3c>)
 8002348:	f043 0304 	orr.w	r3, r3, #4
 800234c:	6413      	str	r3, [r2, #64]	; 0x40
 800234e:	4b07      	ldr	r3, [pc, #28]	; (800236c <HAL_TIM_PWM_MspInit+0x3c>)
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	f003 0304 	and.w	r3, r3, #4
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800235a:	bf00      	nop
 800235c:	3714      	adds	r7, #20
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	40000800 	.word	0x40000800
 800236c:	40023800 	.word	0x40023800

08002370 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b088      	sub	sp, #32
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002378:	f107 030c 	add.w	r3, r7, #12
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	60da      	str	r2, [r3, #12]
 8002386:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a11      	ldr	r2, [pc, #68]	; (80023d4 <HAL_TIM_MspPostInit+0x64>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d11c      	bne.n	80023cc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002392:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <HAL_TIM_MspPostInit+0x68>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	4a10      	ldr	r2, [pc, #64]	; (80023d8 <HAL_TIM_MspPostInit+0x68>)
 8002398:	f043 0308 	orr.w	r3, r3, #8
 800239c:	6313      	str	r3, [r2, #48]	; 0x30
 800239e:	4b0e      	ldr	r3, [pc, #56]	; (80023d8 <HAL_TIM_MspPostInit+0x68>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	f003 0308 	and.w	r3, r3, #8
 80023a6:	60bb      	str	r3, [r7, #8]
 80023a8:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PWM_HV_N_Pin|PWM_HV_P_Pin|PWM_HV_M_Pin|PWM_HV_Charger_Pin;
 80023aa:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80023ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b0:	2302      	movs	r3, #2
 80023b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b8:	2300      	movs	r3, #0
 80023ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80023bc:	2302      	movs	r3, #2
 80023be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023c0:	f107 030c 	add.w	r3, r7, #12
 80023c4:	4619      	mov	r1, r3
 80023c6:	4805      	ldr	r0, [pc, #20]	; (80023dc <HAL_TIM_MspPostInit+0x6c>)
 80023c8:	f000 fdda 	bl	8002f80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80023cc:	bf00      	nop
 80023ce:	3720      	adds	r7, #32
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40000800 	.word	0x40000800
 80023d8:	40023800 	.word	0x40023800
 80023dc:	40020c00 	.word	0x40020c00

080023e0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023e4:	4b14      	ldr	r3, [pc, #80]	; (8002438 <MX_USART2_UART_Init+0x58>)
 80023e6:	4a15      	ldr	r2, [pc, #84]	; (800243c <MX_USART2_UART_Init+0x5c>)
 80023e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80023ea:	4b13      	ldr	r3, [pc, #76]	; (8002438 <MX_USART2_UART_Init+0x58>)
 80023ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80023f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023f2:	4b11      	ldr	r3, [pc, #68]	; (8002438 <MX_USART2_UART_Init+0x58>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023f8:	4b0f      	ldr	r3, [pc, #60]	; (8002438 <MX_USART2_UART_Init+0x58>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023fe:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <MX_USART2_UART_Init+0x58>)
 8002400:	2200      	movs	r2, #0
 8002402:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002404:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <MX_USART2_UART_Init+0x58>)
 8002406:	220c      	movs	r2, #12
 8002408:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800240a:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <MX_USART2_UART_Init+0x58>)
 800240c:	2200      	movs	r2, #0
 800240e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002410:	4b09      	ldr	r3, [pc, #36]	; (8002438 <MX_USART2_UART_Init+0x58>)
 8002412:	2200      	movs	r2, #0
 8002414:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002416:	4b08      	ldr	r3, [pc, #32]	; (8002438 <MX_USART2_UART_Init+0x58>)
 8002418:	2200      	movs	r2, #0
 800241a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800241c:	4b06      	ldr	r3, [pc, #24]	; (8002438 <MX_USART2_UART_Init+0x58>)
 800241e:	2200      	movs	r2, #0
 8002420:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002422:	4805      	ldr	r0, [pc, #20]	; (8002438 <MX_USART2_UART_Init+0x58>)
 8002424:	f003 fff4 	bl	8006410 <HAL_UART_Init>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800242e:	f7ff fc91 	bl	8001d54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	2000026c 	.word	0x2000026c
 800243c:	40004400 	.word	0x40004400

08002440 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b08a      	sub	sp, #40	; 0x28
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002448:	f107 0314 	add.w	r3, r7, #20
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	60da      	str	r2, [r3, #12]
 8002456:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a17      	ldr	r2, [pc, #92]	; (80024bc <HAL_UART_MspInit+0x7c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d127      	bne.n	80024b2 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002462:	4b17      	ldr	r3, [pc, #92]	; (80024c0 <HAL_UART_MspInit+0x80>)
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	4a16      	ldr	r2, [pc, #88]	; (80024c0 <HAL_UART_MspInit+0x80>)
 8002468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800246c:	6413      	str	r3, [r2, #64]	; 0x40
 800246e:	4b14      	ldr	r3, [pc, #80]	; (80024c0 <HAL_UART_MspInit+0x80>)
 8002470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002476:	613b      	str	r3, [r7, #16]
 8002478:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800247a:	4b11      	ldr	r3, [pc, #68]	; (80024c0 <HAL_UART_MspInit+0x80>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	4a10      	ldr	r2, [pc, #64]	; (80024c0 <HAL_UART_MspInit+0x80>)
 8002480:	f043 0308 	orr.w	r3, r3, #8
 8002484:	6313      	str	r3, [r2, #48]	; 0x30
 8002486:	4b0e      	ldr	r3, [pc, #56]	; (80024c0 <HAL_UART_MspInit+0x80>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002492:	2360      	movs	r3, #96	; 0x60
 8002494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002496:	2302      	movs	r3, #2
 8002498:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249a:	2300      	movs	r3, #0
 800249c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800249e:	2303      	movs	r3, #3
 80024a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024a2:	2307      	movs	r3, #7
 80024a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024a6:	f107 0314 	add.w	r3, r7, #20
 80024aa:	4619      	mov	r1, r3
 80024ac:	4805      	ldr	r0, [pc, #20]	; (80024c4 <HAL_UART_MspInit+0x84>)
 80024ae:	f000 fd67 	bl	8002f80 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80024b2:	bf00      	nop
 80024b4:	3728      	adds	r7, #40	; 0x28
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40004400 	.word	0x40004400
 80024c0:	40023800 	.word	0x40023800
 80024c4:	40020c00 	.word	0x40020c00

080024c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80024c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002500 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80024cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80024ce:	e003      	b.n	80024d8 <LoopCopyDataInit>

080024d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80024d0:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80024d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80024d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80024d6:	3104      	adds	r1, #4

080024d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80024d8:	480b      	ldr	r0, [pc, #44]	; (8002508 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80024da:	4b0c      	ldr	r3, [pc, #48]	; (800250c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80024dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80024de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80024e0:	d3f6      	bcc.n	80024d0 <CopyDataInit>
  ldr  r2, =_sbss
 80024e2:	4a0b      	ldr	r2, [pc, #44]	; (8002510 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80024e4:	e002      	b.n	80024ec <LoopFillZerobss>

080024e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80024e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80024e8:	f842 3b04 	str.w	r3, [r2], #4

080024ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80024ec:	4b09      	ldr	r3, [pc, #36]	; (8002514 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80024ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80024f0:	d3f9      	bcc.n	80024e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024f2:	f7ff fdc1 	bl	8002078 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024f6:	f004 fc37 	bl	8006d68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024fa:	f7ff fa73 	bl	80019e4 <main>
  bx  lr    
 80024fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002500:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002504:	08007494 	.word	0x08007494
  ldr  r0, =_sdata
 8002508:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800250c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002510:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002514:	200002f4 	.word	0x200002f4

08002518 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002518:	e7fe      	b.n	8002518 <ADC_IRQHandler>

0800251a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800251e:	2003      	movs	r0, #3
 8002520:	f000 fcfa 	bl	8002f18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002524:	2000      	movs	r0, #0
 8002526:	f000 f805 	bl	8002534 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800252a:	f7ff fd53 	bl	8001fd4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	bd80      	pop	{r7, pc}

08002534 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800253c:	4b12      	ldr	r3, [pc, #72]	; (8002588 <HAL_InitTick+0x54>)
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	4b12      	ldr	r3, [pc, #72]	; (800258c <HAL_InitTick+0x58>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	4619      	mov	r1, r3
 8002546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800254a:	fbb3 f3f1 	udiv	r3, r3, r1
 800254e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002552:	4618      	mov	r0, r3
 8002554:	f000 fd07 	bl	8002f66 <HAL_SYSTICK_Config>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e00e      	b.n	8002580 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b0f      	cmp	r3, #15
 8002566:	d80a      	bhi.n	800257e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002568:	2200      	movs	r2, #0
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	f04f 30ff 	mov.w	r0, #4294967295
 8002570:	f000 fcdd 	bl	8002f2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002574:	4a06      	ldr	r2, [pc, #24]	; (8002590 <HAL_InitTick+0x5c>)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800257a:	2300      	movs	r3, #0
 800257c:	e000      	b.n	8002580 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
}
 8002580:	4618      	mov	r0, r3
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	20000000 	.word	0x20000000
 800258c:	20000008 	.word	0x20000008
 8002590:	20000004 	.word	0x20000004

08002594 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002598:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <HAL_IncTick+0x20>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	461a      	mov	r2, r3
 800259e:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <HAL_IncTick+0x24>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4413      	add	r3, r2
 80025a4:	4a04      	ldr	r2, [pc, #16]	; (80025b8 <HAL_IncTick+0x24>)
 80025a6:	6013      	str	r3, [r2, #0]
}
 80025a8:	bf00      	nop
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	20000008 	.word	0x20000008
 80025b8:	200002f0 	.word	0x200002f0

080025bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  return uwTick;
 80025c0:	4b03      	ldr	r3, [pc, #12]	; (80025d0 <HAL_GetTick+0x14>)
 80025c2:	681b      	ldr	r3, [r3, #0]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	200002f0 	.word	0x200002f0

080025d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025dc:	f7ff ffee 	bl	80025bc <HAL_GetTick>
 80025e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ec:	d005      	beq.n	80025fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025ee:	4b0a      	ldr	r3, [pc, #40]	; (8002618 <HAL_Delay+0x44>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	461a      	mov	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	4413      	add	r3, r2
 80025f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025fa:	bf00      	nop
 80025fc:	f7ff ffde 	bl	80025bc <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	429a      	cmp	r2, r3
 800260a:	d8f7      	bhi.n	80025fc <HAL_Delay+0x28>
  {
  }
}
 800260c:	bf00      	nop
 800260e:	bf00      	nop
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	20000008 	.word	0x20000008

0800261c <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
 return __STM32F7xx_HAL_VERSION;
 8002620:	4b02      	ldr	r3, [pc, #8]	; (800262c <HAL_GetHalVersion+0x10>)
}
 8002622:	4618      	mov	r0, r3
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	01020900 	.word	0x01020900

08002630 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8002634:	4b03      	ldr	r3, [pc, #12]	; (8002644 <HAL_GetREVID+0x14>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	0c1b      	lsrs	r3, r3, #16
}
 800263a:	4618      	mov	r0, r3
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	e0042000 	.word	0xe0042000

08002648 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800264c:	4b04      	ldr	r3, [pc, #16]	; (8002660 <HAL_GetDEVID+0x18>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8002654:	4618      	mov	r0, r3
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	e0042000 	.word	0xe0042000

08002664 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)UID_BASE)));
 8002668:	4b03      	ldr	r3, [pc, #12]	; (8002678 <HAL_GetUIDw0+0x14>)
 800266a:	681b      	ldr	r3, [r3, #0]
}
 800266c:	4618      	mov	r0, r3
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	1ff0f420 	.word	0x1ff0f420

0800267c <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002680:	4b03      	ldr	r3, [pc, #12]	; (8002690 <HAL_GetUIDw1+0x14>)
 8002682:	681b      	ldr	r3, [r3, #0]
}
 8002684:	4618      	mov	r0, r3
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	1ff0f424 	.word	0x1ff0f424

08002694 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002698:	4b03      	ldr	r3, [pc, #12]	; (80026a8 <HAL_GetUIDw2+0x14>)
 800269a:	681b      	ldr	r3, [r3, #0]
}
 800269c:	4618      	mov	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	1ff0f428 	.word	0x1ff0f428

080026ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026b4:	2300      	movs	r3, #0
 80026b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e031      	b.n	8002726 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d109      	bne.n	80026de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7fe fea0 	bl	8001410 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	f003 0310 	and.w	r3, r3, #16
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d116      	bne.n	8002718 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026ee:	4b10      	ldr	r3, [pc, #64]	; (8002730 <HAL_ADC_Init+0x84>)
 80026f0:	4013      	ands	r3, r2
 80026f2:	f043 0202 	orr.w	r2, r3, #2
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f964 	bl	80029c8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f023 0303 	bic.w	r3, r3, #3
 800270e:	f043 0201 	orr.w	r2, r3, #1
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	641a      	str	r2, [r3, #64]	; 0x40
 8002716:	e001      	b.n	800271c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002724:	7bfb      	ldrb	r3, [r7, #15]
}
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	ffffeefd 	.word	0xffffeefd

08002734 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800273e:	2300      	movs	r3, #0
 8002740:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002748:	2b01      	cmp	r3, #1
 800274a:	d101      	bne.n	8002750 <HAL_ADC_ConfigChannel+0x1c>
 800274c:	2302      	movs	r3, #2
 800274e:	e12a      	b.n	80029a6 <HAL_ADC_ConfigChannel+0x272>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b09      	cmp	r3, #9
 800275e:	d93a      	bls.n	80027d6 <HAL_ADC_ConfigChannel+0xa2>
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002768:	d035      	beq.n	80027d6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68d9      	ldr	r1, [r3, #12]
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	b29b      	uxth	r3, r3
 8002776:	461a      	mov	r2, r3
 8002778:	4613      	mov	r3, r2
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	4413      	add	r3, r2
 800277e:	3b1e      	subs	r3, #30
 8002780:	2207      	movs	r2, #7
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43da      	mvns	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	400a      	ands	r2, r1
 800278e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a87      	ldr	r2, [pc, #540]	; (80029b4 <HAL_ADC_ConfigChannel+0x280>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d10a      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68d9      	ldr	r1, [r3, #12]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	061a      	lsls	r2, r3, #24
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	430a      	orrs	r2, r1
 80027ac:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027ae:	e035      	b.n	800281c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68d9      	ldr	r1, [r3, #12]
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	b29b      	uxth	r3, r3
 80027c0:	4618      	mov	r0, r3
 80027c2:	4603      	mov	r3, r0
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	4403      	add	r3, r0
 80027c8:	3b1e      	subs	r3, #30
 80027ca:	409a      	lsls	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027d4:	e022      	b.n	800281c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6919      	ldr	r1, [r3, #16]
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	461a      	mov	r2, r3
 80027e4:	4613      	mov	r3, r2
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	4413      	add	r3, r2
 80027ea:	2207      	movs	r2, #7
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43da      	mvns	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	400a      	ands	r2, r1
 80027f8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6919      	ldr	r1, [r3, #16]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	b29b      	uxth	r3, r3
 800280a:	4618      	mov	r0, r3
 800280c:	4603      	mov	r3, r0
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	4403      	add	r3, r0
 8002812:	409a      	lsls	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	430a      	orrs	r2, r1
 800281a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2b06      	cmp	r3, #6
 8002822:	d824      	bhi.n	800286e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685a      	ldr	r2, [r3, #4]
 800282e:	4613      	mov	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	3b05      	subs	r3, #5
 8002836:	221f      	movs	r2, #31
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	43da      	mvns	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	400a      	ands	r2, r1
 8002844:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	b29b      	uxth	r3, r3
 8002852:	4618      	mov	r0, r3
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685a      	ldr	r2, [r3, #4]
 8002858:	4613      	mov	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	3b05      	subs	r3, #5
 8002860:	fa00 f203 	lsl.w	r2, r0, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	430a      	orrs	r2, r1
 800286a:	635a      	str	r2, [r3, #52]	; 0x34
 800286c:	e04c      	b.n	8002908 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b0c      	cmp	r3, #12
 8002874:	d824      	bhi.n	80028c0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	4613      	mov	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4413      	add	r3, r2
 8002886:	3b23      	subs	r3, #35	; 0x23
 8002888:	221f      	movs	r2, #31
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43da      	mvns	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	400a      	ands	r2, r1
 8002896:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	4618      	mov	r0, r3
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	4613      	mov	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	3b23      	subs	r3, #35	; 0x23
 80028b2:	fa00 f203 	lsl.w	r2, r0, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	430a      	orrs	r2, r1
 80028bc:	631a      	str	r2, [r3, #48]	; 0x30
 80028be:	e023      	b.n	8002908 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	4613      	mov	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	3b41      	subs	r3, #65	; 0x41
 80028d2:	221f      	movs	r2, #31
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	43da      	mvns	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	400a      	ands	r2, r1
 80028e0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	4618      	mov	r0, r3
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	4613      	mov	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4413      	add	r3, r2
 80028fa:	3b41      	subs	r3, #65	; 0x41
 80028fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a2a      	ldr	r2, [pc, #168]	; (80029b8 <HAL_ADC_ConfigChannel+0x284>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d10a      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x1f4>
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800291a:	d105      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800291c:	4b27      	ldr	r3, [pc, #156]	; (80029bc <HAL_ADC_ConfigChannel+0x288>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	4a26      	ldr	r2, [pc, #152]	; (80029bc <HAL_ADC_ConfigChannel+0x288>)
 8002922:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002926:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a22      	ldr	r2, [pc, #136]	; (80029b8 <HAL_ADC_ConfigChannel+0x284>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d109      	bne.n	8002946 <HAL_ADC_ConfigChannel+0x212>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2b12      	cmp	r3, #18
 8002938:	d105      	bne.n	8002946 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800293a:	4b20      	ldr	r3, [pc, #128]	; (80029bc <HAL_ADC_ConfigChannel+0x288>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	4a1f      	ldr	r2, [pc, #124]	; (80029bc <HAL_ADC_ConfigChannel+0x288>)
 8002940:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002944:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a1b      	ldr	r2, [pc, #108]	; (80029b8 <HAL_ADC_ConfigChannel+0x284>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d125      	bne.n	800299c <HAL_ADC_ConfigChannel+0x268>
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a17      	ldr	r2, [pc, #92]	; (80029b4 <HAL_ADC_ConfigChannel+0x280>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d003      	beq.n	8002962 <HAL_ADC_ConfigChannel+0x22e>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2b11      	cmp	r3, #17
 8002960:	d11c      	bne.n	800299c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002962:	4b16      	ldr	r3, [pc, #88]	; (80029bc <HAL_ADC_ConfigChannel+0x288>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	4a15      	ldr	r2, [pc, #84]	; (80029bc <HAL_ADC_ConfigChannel+0x288>)
 8002968:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800296c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a10      	ldr	r2, [pc, #64]	; (80029b4 <HAL_ADC_ConfigChannel+0x280>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d111      	bne.n	800299c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002978:	4b11      	ldr	r3, [pc, #68]	; (80029c0 <HAL_ADC_ConfigChannel+0x28c>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a11      	ldr	r2, [pc, #68]	; (80029c4 <HAL_ADC_ConfigChannel+0x290>)
 800297e:	fba2 2303 	umull	r2, r3, r2, r3
 8002982:	0c9a      	lsrs	r2, r3, #18
 8002984:	4613      	mov	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4413      	add	r3, r2
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800298e:	e002      	b.n	8002996 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	3b01      	subs	r3, #1
 8002994:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1f9      	bne.n	8002990 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3714      	adds	r7, #20
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	10000012 	.word	0x10000012
 80029b8:	40012000 	.word	0x40012000
 80029bc:	40012300 	.word	0x40012300
 80029c0:	20000000 	.word	0x20000000
 80029c4:	431bde83 	.word	0x431bde83

080029c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80029d0:	4b78      	ldr	r3, [pc, #480]	; (8002bb4 <ADC_Init+0x1ec>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	4a77      	ldr	r2, [pc, #476]	; (8002bb4 <ADC_Init+0x1ec>)
 80029d6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80029da:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80029dc:	4b75      	ldr	r3, [pc, #468]	; (8002bb4 <ADC_Init+0x1ec>)
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	4973      	ldr	r1, [pc, #460]	; (8002bb4 <ADC_Init+0x1ec>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6859      	ldr	r1, [r3, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	021a      	lsls	r2, r3, #8
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002a1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6859      	ldr	r1, [r3, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689a      	ldr	r2, [r3, #8]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6899      	ldr	r1, [r3, #8]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68da      	ldr	r2, [r3, #12]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a56:	4a58      	ldr	r2, [pc, #352]	; (8002bb8 <ADC_Init+0x1f0>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d022      	beq.n	8002aa2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689a      	ldr	r2, [r3, #8]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a6a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6899      	ldr	r1, [r3, #8]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6899      	ldr	r1, [r3, #8]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	609a      	str	r2, [r3, #8]
 8002aa0:	e00f      	b.n	8002ac2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ab0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ac0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0202 	bic.w	r2, r2, #2
 8002ad0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6899      	ldr	r1, [r3, #8]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	005a      	lsls	r2, r3, #1
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d01b      	beq.n	8002b28 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002afe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b0e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6859      	ldr	r1, [r3, #4]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	035a      	lsls	r2, r3, #13
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	605a      	str	r2, [r3, #4]
 8002b26:	e007      	b.n	8002b38 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	685a      	ldr	r2, [r3, #4]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b36:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	3b01      	subs	r3, #1
 8002b54:	051a      	lsls	r2, r3, #20
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	6899      	ldr	r1, [r3, #8]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b7a:	025a      	lsls	r2, r3, #9
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689a      	ldr	r2, [r3, #8]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6899      	ldr	r1, [r3, #8]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	029a      	lsls	r2, r3, #10
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	609a      	str	r2, [r3, #8]
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	40012300 	.word	0x40012300
 8002bb8:	0f000001 	.word	0x0f000001

08002bbc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e0ed      	b.n	8002daa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d102      	bne.n	8002be0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7fe fcc4 	bl	8001568 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 0202 	bic.w	r2, r2, #2
 8002bee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bf0:	f7ff fce4 	bl	80025bc <HAL_GetTick>
 8002bf4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002bf6:	e012      	b.n	8002c1e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002bf8:	f7ff fce0 	bl	80025bc <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b0a      	cmp	r3, #10
 8002c04:	d90b      	bls.n	8002c1e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2205      	movs	r2, #5
 8002c16:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e0c5      	b.n	8002daa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1e5      	bne.n	8002bf8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f042 0201 	orr.w	r2, r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c3c:	f7ff fcbe 	bl	80025bc <HAL_GetTick>
 8002c40:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c42:	e012      	b.n	8002c6a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c44:	f7ff fcba 	bl	80025bc <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b0a      	cmp	r3, #10
 8002c50:	d90b      	bls.n	8002c6a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2205      	movs	r2, #5
 8002c62:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e09f      	b.n	8002daa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d0e5      	beq.n	8002c44 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	7e1b      	ldrb	r3, [r3, #24]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d108      	bne.n	8002c92 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	e007      	b.n	8002ca2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ca0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	7e5b      	ldrb	r3, [r3, #25]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d108      	bne.n	8002cbc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	e007      	b.n	8002ccc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	7e9b      	ldrb	r3, [r3, #26]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d108      	bne.n	8002ce6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 0220 	orr.w	r2, r2, #32
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	e007      	b.n	8002cf6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 0220 	bic.w	r2, r2, #32
 8002cf4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	7edb      	ldrb	r3, [r3, #27]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d108      	bne.n	8002d10 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 0210 	bic.w	r2, r2, #16
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	e007      	b.n	8002d20 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f042 0210 	orr.w	r2, r2, #16
 8002d1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	7f1b      	ldrb	r3, [r3, #28]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d108      	bne.n	8002d3a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f042 0208 	orr.w	r2, r2, #8
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	e007      	b.n	8002d4a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f022 0208 	bic.w	r2, r2, #8
 8002d48:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	7f5b      	ldrb	r3, [r3, #29]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d108      	bne.n	8002d64 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f042 0204 	orr.w	r2, r2, #4
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	e007      	b.n	8002d74 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0204 	bic.w	r2, r2, #4
 8002d72:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689a      	ldr	r2, [r3, #8]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	431a      	orrs	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	ea42 0103 	orr.w	r1, r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	1e5a      	subs	r2, r3, #1
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
	...

08002db4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f003 0307 	and.w	r3, r3, #7
 8002dc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dc4:	4b0b      	ldr	r3, [pc, #44]	; (8002df4 <__NVIC_SetPriorityGrouping+0x40>)
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ddc:	4b06      	ldr	r3, [pc, #24]	; (8002df8 <__NVIC_SetPriorityGrouping+0x44>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002de2:	4a04      	ldr	r2, [pc, #16]	; (8002df4 <__NVIC_SetPriorityGrouping+0x40>)
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	60d3      	str	r3, [r2, #12]
}
 8002de8:	bf00      	nop
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	e000ed00 	.word	0xe000ed00
 8002df8:	05fa0000 	.word	0x05fa0000

08002dfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e00:	4b04      	ldr	r3, [pc, #16]	; (8002e14 <__NVIC_GetPriorityGrouping+0x18>)
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	0a1b      	lsrs	r3, r3, #8
 8002e06:	f003 0307 	and.w	r3, r3, #7
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	e000ed00 	.word	0xe000ed00

08002e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	4603      	mov	r3, r0
 8002e20:	6039      	str	r1, [r7, #0]
 8002e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	db0a      	blt.n	8002e42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	490c      	ldr	r1, [pc, #48]	; (8002e64 <__NVIC_SetPriority+0x4c>)
 8002e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e36:	0112      	lsls	r2, r2, #4
 8002e38:	b2d2      	uxtb	r2, r2
 8002e3a:	440b      	add	r3, r1
 8002e3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e40:	e00a      	b.n	8002e58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	4908      	ldr	r1, [pc, #32]	; (8002e68 <__NVIC_SetPriority+0x50>)
 8002e48:	79fb      	ldrb	r3, [r7, #7]
 8002e4a:	f003 030f 	and.w	r3, r3, #15
 8002e4e:	3b04      	subs	r3, #4
 8002e50:	0112      	lsls	r2, r2, #4
 8002e52:	b2d2      	uxtb	r2, r2
 8002e54:	440b      	add	r3, r1
 8002e56:	761a      	strb	r2, [r3, #24]
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	e000e100 	.word	0xe000e100
 8002e68:	e000ed00 	.word	0xe000ed00

08002e6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b089      	sub	sp, #36	; 0x24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f003 0307 	and.w	r3, r3, #7
 8002e7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	f1c3 0307 	rsb	r3, r3, #7
 8002e86:	2b04      	cmp	r3, #4
 8002e88:	bf28      	it	cs
 8002e8a:	2304      	movcs	r3, #4
 8002e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	3304      	adds	r3, #4
 8002e92:	2b06      	cmp	r3, #6
 8002e94:	d902      	bls.n	8002e9c <NVIC_EncodePriority+0x30>
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	3b03      	subs	r3, #3
 8002e9a:	e000      	b.n	8002e9e <NVIC_EncodePriority+0x32>
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eaa:	43da      	mvns	r2, r3
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	401a      	ands	r2, r3
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	fa01 f303 	lsl.w	r3, r1, r3
 8002ebe:	43d9      	mvns	r1, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ec4:	4313      	orrs	r3, r2
         );
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3724      	adds	r7, #36	; 0x24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
	...

08002ed4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ee4:	d301      	bcc.n	8002eea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e00f      	b.n	8002f0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eea:	4a0a      	ldr	r2, [pc, #40]	; (8002f14 <SysTick_Config+0x40>)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ef2:	210f      	movs	r1, #15
 8002ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef8:	f7ff ff8e 	bl	8002e18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002efc:	4b05      	ldr	r3, [pc, #20]	; (8002f14 <SysTick_Config+0x40>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f02:	4b04      	ldr	r3, [pc, #16]	; (8002f14 <SysTick_Config+0x40>)
 8002f04:	2207      	movs	r2, #7
 8002f06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	e000e010 	.word	0xe000e010

08002f18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f7ff ff47 	bl	8002db4 <__NVIC_SetPriorityGrouping>
}
 8002f26:	bf00      	nop
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b086      	sub	sp, #24
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	4603      	mov	r3, r0
 8002f36:	60b9      	str	r1, [r7, #8]
 8002f38:	607a      	str	r2, [r7, #4]
 8002f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f40:	f7ff ff5c 	bl	8002dfc <__NVIC_GetPriorityGrouping>
 8002f44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	68b9      	ldr	r1, [r7, #8]
 8002f4a:	6978      	ldr	r0, [r7, #20]
 8002f4c:	f7ff ff8e 	bl	8002e6c <NVIC_EncodePriority>
 8002f50:	4602      	mov	r2, r0
 8002f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f56:	4611      	mov	r1, r2
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff ff5d 	bl	8002e18 <__NVIC_SetPriority>
}
 8002f5e:	bf00      	nop
 8002f60:	3718      	adds	r7, #24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b082      	sub	sp, #8
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7ff ffb0 	bl	8002ed4 <SysTick_Config>
 8002f74:	4603      	mov	r3, r0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
	...

08002f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b089      	sub	sp, #36	; 0x24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002f92:	2300      	movs	r3, #0
 8002f94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002f96:	2300      	movs	r3, #0
 8002f98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	61fb      	str	r3, [r7, #28]
 8002f9e:	e175      	b.n	800328c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	f040 8164 	bne.w	8003286 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d00b      	beq.n	8002fde <HAL_GPIO_Init+0x5e>
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d007      	beq.n	8002fde <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002fd2:	2b11      	cmp	r3, #17
 8002fd4:	d003      	beq.n	8002fde <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2b12      	cmp	r3, #18
 8002fdc:	d130      	bne.n	8003040 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	2203      	movs	r2, #3
 8002fea:	fa02 f303 	lsl.w	r3, r2, r3
 8002fee:	43db      	mvns	r3, r3
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	68da      	ldr	r2, [r3, #12]
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4313      	orrs	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003014:	2201      	movs	r2, #1
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	43db      	mvns	r3, r3
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4013      	ands	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	091b      	lsrs	r3, r3, #4
 800302a:	f003 0201 	and.w	r2, r3, #1
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	4313      	orrs	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	2203      	movs	r2, #3
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	43db      	mvns	r3, r3
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	4013      	ands	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	689a      	ldr	r2, [r3, #8]
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	4313      	orrs	r3, r2
 8003068:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	2b02      	cmp	r3, #2
 8003076:	d003      	beq.n	8003080 <HAL_GPIO_Init+0x100>
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	2b12      	cmp	r3, #18
 800307e:	d123      	bne.n	80030c8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	08da      	lsrs	r2, r3, #3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3208      	adds	r2, #8
 8003088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800308c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	f003 0307 	and.w	r3, r3, #7
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	220f      	movs	r2, #15
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	43db      	mvns	r3, r3
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	4013      	ands	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	691a      	ldr	r2, [r3, #16]
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	08da      	lsrs	r2, r3, #3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	3208      	adds	r2, #8
 80030c2:	69b9      	ldr	r1, [r7, #24]
 80030c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	2203      	movs	r2, #3
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	4013      	ands	r3, r2
 80030de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f003 0203 	and.w	r2, r3, #3
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003104:	2b00      	cmp	r3, #0
 8003106:	f000 80be 	beq.w	8003286 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800310a:	4b66      	ldr	r3, [pc, #408]	; (80032a4 <HAL_GPIO_Init+0x324>)
 800310c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310e:	4a65      	ldr	r2, [pc, #404]	; (80032a4 <HAL_GPIO_Init+0x324>)
 8003110:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003114:	6453      	str	r3, [r2, #68]	; 0x44
 8003116:	4b63      	ldr	r3, [pc, #396]	; (80032a4 <HAL_GPIO_Init+0x324>)
 8003118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800311e:	60fb      	str	r3, [r7, #12]
 8003120:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003122:	4a61      	ldr	r2, [pc, #388]	; (80032a8 <HAL_GPIO_Init+0x328>)
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	089b      	lsrs	r3, r3, #2
 8003128:	3302      	adds	r3, #2
 800312a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800312e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	f003 0303 	and.w	r3, r3, #3
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	220f      	movs	r2, #15
 800313a:	fa02 f303 	lsl.w	r3, r2, r3
 800313e:	43db      	mvns	r3, r3
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	4013      	ands	r3, r2
 8003144:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a58      	ldr	r2, [pc, #352]	; (80032ac <HAL_GPIO_Init+0x32c>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d037      	beq.n	80031be <HAL_GPIO_Init+0x23e>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a57      	ldr	r2, [pc, #348]	; (80032b0 <HAL_GPIO_Init+0x330>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d031      	beq.n	80031ba <HAL_GPIO_Init+0x23a>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a56      	ldr	r2, [pc, #344]	; (80032b4 <HAL_GPIO_Init+0x334>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d02b      	beq.n	80031b6 <HAL_GPIO_Init+0x236>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a55      	ldr	r2, [pc, #340]	; (80032b8 <HAL_GPIO_Init+0x338>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d025      	beq.n	80031b2 <HAL_GPIO_Init+0x232>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a54      	ldr	r2, [pc, #336]	; (80032bc <HAL_GPIO_Init+0x33c>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d01f      	beq.n	80031ae <HAL_GPIO_Init+0x22e>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a53      	ldr	r2, [pc, #332]	; (80032c0 <HAL_GPIO_Init+0x340>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d019      	beq.n	80031aa <HAL_GPIO_Init+0x22a>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a52      	ldr	r2, [pc, #328]	; (80032c4 <HAL_GPIO_Init+0x344>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d013      	beq.n	80031a6 <HAL_GPIO_Init+0x226>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a51      	ldr	r2, [pc, #324]	; (80032c8 <HAL_GPIO_Init+0x348>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d00d      	beq.n	80031a2 <HAL_GPIO_Init+0x222>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a50      	ldr	r2, [pc, #320]	; (80032cc <HAL_GPIO_Init+0x34c>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d007      	beq.n	800319e <HAL_GPIO_Init+0x21e>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a4f      	ldr	r2, [pc, #316]	; (80032d0 <HAL_GPIO_Init+0x350>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d101      	bne.n	800319a <HAL_GPIO_Init+0x21a>
 8003196:	2309      	movs	r3, #9
 8003198:	e012      	b.n	80031c0 <HAL_GPIO_Init+0x240>
 800319a:	230a      	movs	r3, #10
 800319c:	e010      	b.n	80031c0 <HAL_GPIO_Init+0x240>
 800319e:	2308      	movs	r3, #8
 80031a0:	e00e      	b.n	80031c0 <HAL_GPIO_Init+0x240>
 80031a2:	2307      	movs	r3, #7
 80031a4:	e00c      	b.n	80031c0 <HAL_GPIO_Init+0x240>
 80031a6:	2306      	movs	r3, #6
 80031a8:	e00a      	b.n	80031c0 <HAL_GPIO_Init+0x240>
 80031aa:	2305      	movs	r3, #5
 80031ac:	e008      	b.n	80031c0 <HAL_GPIO_Init+0x240>
 80031ae:	2304      	movs	r3, #4
 80031b0:	e006      	b.n	80031c0 <HAL_GPIO_Init+0x240>
 80031b2:	2303      	movs	r3, #3
 80031b4:	e004      	b.n	80031c0 <HAL_GPIO_Init+0x240>
 80031b6:	2302      	movs	r3, #2
 80031b8:	e002      	b.n	80031c0 <HAL_GPIO_Init+0x240>
 80031ba:	2301      	movs	r3, #1
 80031bc:	e000      	b.n	80031c0 <HAL_GPIO_Init+0x240>
 80031be:	2300      	movs	r3, #0
 80031c0:	69fa      	ldr	r2, [r7, #28]
 80031c2:	f002 0203 	and.w	r2, r2, #3
 80031c6:	0092      	lsls	r2, r2, #2
 80031c8:	4093      	lsls	r3, r2
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80031d0:	4935      	ldr	r1, [pc, #212]	; (80032a8 <HAL_GPIO_Init+0x328>)
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	089b      	lsrs	r3, r3, #2
 80031d6:	3302      	adds	r3, #2
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031de:	4b3d      	ldr	r3, [pc, #244]	; (80032d4 <HAL_GPIO_Init+0x354>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	43db      	mvns	r3, r3
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	4013      	ands	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	4313      	orrs	r3, r2
 8003200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003202:	4a34      	ldr	r2, [pc, #208]	; (80032d4 <HAL_GPIO_Init+0x354>)
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003208:	4b32      	ldr	r3, [pc, #200]	; (80032d4 <HAL_GPIO_Init+0x354>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	43db      	mvns	r3, r3
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	4013      	ands	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	4313      	orrs	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800322c:	4a29      	ldr	r2, [pc, #164]	; (80032d4 <HAL_GPIO_Init+0x354>)
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003232:	4b28      	ldr	r3, [pc, #160]	; (80032d4 <HAL_GPIO_Init+0x354>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	43db      	mvns	r3, r3
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	4013      	ands	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d003      	beq.n	8003256 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	4313      	orrs	r3, r2
 8003254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003256:	4a1f      	ldr	r2, [pc, #124]	; (80032d4 <HAL_GPIO_Init+0x354>)
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800325c:	4b1d      	ldr	r3, [pc, #116]	; (80032d4 <HAL_GPIO_Init+0x354>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	43db      	mvns	r3, r3
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	4013      	ands	r3, r2
 800326a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d003      	beq.n	8003280 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	4313      	orrs	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003280:	4a14      	ldr	r2, [pc, #80]	; (80032d4 <HAL_GPIO_Init+0x354>)
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	3301      	adds	r3, #1
 800328a:	61fb      	str	r3, [r7, #28]
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	2b0f      	cmp	r3, #15
 8003290:	f67f ae86 	bls.w	8002fa0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003294:	bf00      	nop
 8003296:	bf00      	nop
 8003298:	3724      	adds	r7, #36	; 0x24
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	40023800 	.word	0x40023800
 80032a8:	40013800 	.word	0x40013800
 80032ac:	40020000 	.word	0x40020000
 80032b0:	40020400 	.word	0x40020400
 80032b4:	40020800 	.word	0x40020800
 80032b8:	40020c00 	.word	0x40020c00
 80032bc:	40021000 	.word	0x40021000
 80032c0:	40021400 	.word	0x40021400
 80032c4:	40021800 	.word	0x40021800
 80032c8:	40021c00 	.word	0x40021c00
 80032cc:	40022000 	.word	0x40022000
 80032d0:	40022400 	.word	0x40022400
 80032d4:	40013c00 	.word	0x40013c00

080032d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	460b      	mov	r3, r1
 80032e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	691a      	ldr	r2, [r3, #16]
 80032e8:	887b      	ldrh	r3, [r7, #2]
 80032ea:	4013      	ands	r3, r2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d002      	beq.n	80032f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032f0:	2301      	movs	r3, #1
 80032f2:	73fb      	strb	r3, [r7, #15]
 80032f4:	e001      	b.n	80032fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032f6:	2300      	movs	r3, #0
 80032f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3714      	adds	r7, #20
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	460b      	mov	r3, r1
 8003312:	807b      	strh	r3, [r7, #2]
 8003314:	4613      	mov	r3, r2
 8003316:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003318:	787b      	ldrb	r3, [r7, #1]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d003      	beq.n	8003326 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800331e:	887a      	ldrh	r2, [r7, #2]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003324:	e003      	b.n	800332e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003326:	887b      	ldrh	r3, [r7, #2]
 8003328:	041a      	lsls	r2, r3, #16
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	619a      	str	r2, [r3, #24]
}
 800332e:	bf00      	nop
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
	...

0800333c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003342:	2300      	movs	r3, #0
 8003344:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003346:	4b23      	ldr	r3, [pc, #140]	; (80033d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	4a22      	ldr	r2, [pc, #136]	; (80033d4 <HAL_PWREx_EnableOverDrive+0x98>)
 800334c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003350:	6413      	str	r3, [r2, #64]	; 0x40
 8003352:	4b20      	ldr	r3, [pc, #128]	; (80033d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800335a:	603b      	str	r3, [r7, #0]
 800335c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800335e:	4b1e      	ldr	r3, [pc, #120]	; (80033d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a1d      	ldr	r2, [pc, #116]	; (80033d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003368:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800336a:	f7ff f927 	bl	80025bc <HAL_GetTick>
 800336e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003370:	e009      	b.n	8003386 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003372:	f7ff f923 	bl	80025bc <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003380:	d901      	bls.n	8003386 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e022      	b.n	80033cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003386:	4b14      	ldr	r3, [pc, #80]	; (80033d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800338e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003392:	d1ee      	bne.n	8003372 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003394:	4b10      	ldr	r3, [pc, #64]	; (80033d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a0f      	ldr	r2, [pc, #60]	; (80033d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800339a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800339e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033a0:	f7ff f90c 	bl	80025bc <HAL_GetTick>
 80033a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033a6:	e009      	b.n	80033bc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80033a8:	f7ff f908 	bl	80025bc <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033b6:	d901      	bls.n	80033bc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e007      	b.n	80033cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033bc:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033c8:	d1ee      	bne.n	80033a8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3708      	adds	r7, #8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	40023800 	.word	0x40023800
 80033d8:	40007000 	.word	0x40007000

080033dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80033e4:	2300      	movs	r3, #0
 80033e6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e29b      	b.n	800392a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f000 8087 	beq.w	800350e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003400:	4b96      	ldr	r3, [pc, #600]	; (800365c <HAL_RCC_OscConfig+0x280>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f003 030c 	and.w	r3, r3, #12
 8003408:	2b04      	cmp	r3, #4
 800340a:	d00c      	beq.n	8003426 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800340c:	4b93      	ldr	r3, [pc, #588]	; (800365c <HAL_RCC_OscConfig+0x280>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f003 030c 	and.w	r3, r3, #12
 8003414:	2b08      	cmp	r3, #8
 8003416:	d112      	bne.n	800343e <HAL_RCC_OscConfig+0x62>
 8003418:	4b90      	ldr	r3, [pc, #576]	; (800365c <HAL_RCC_OscConfig+0x280>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003420:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003424:	d10b      	bne.n	800343e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003426:	4b8d      	ldr	r3, [pc, #564]	; (800365c <HAL_RCC_OscConfig+0x280>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d06c      	beq.n	800350c <HAL_RCC_OscConfig+0x130>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d168      	bne.n	800350c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e275      	b.n	800392a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003446:	d106      	bne.n	8003456 <HAL_RCC_OscConfig+0x7a>
 8003448:	4b84      	ldr	r3, [pc, #528]	; (800365c <HAL_RCC_OscConfig+0x280>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a83      	ldr	r2, [pc, #524]	; (800365c <HAL_RCC_OscConfig+0x280>)
 800344e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003452:	6013      	str	r3, [r2, #0]
 8003454:	e02e      	b.n	80034b4 <HAL_RCC_OscConfig+0xd8>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10c      	bne.n	8003478 <HAL_RCC_OscConfig+0x9c>
 800345e:	4b7f      	ldr	r3, [pc, #508]	; (800365c <HAL_RCC_OscConfig+0x280>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a7e      	ldr	r2, [pc, #504]	; (800365c <HAL_RCC_OscConfig+0x280>)
 8003464:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003468:	6013      	str	r3, [r2, #0]
 800346a:	4b7c      	ldr	r3, [pc, #496]	; (800365c <HAL_RCC_OscConfig+0x280>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a7b      	ldr	r2, [pc, #492]	; (800365c <HAL_RCC_OscConfig+0x280>)
 8003470:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003474:	6013      	str	r3, [r2, #0]
 8003476:	e01d      	b.n	80034b4 <HAL_RCC_OscConfig+0xd8>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003480:	d10c      	bne.n	800349c <HAL_RCC_OscConfig+0xc0>
 8003482:	4b76      	ldr	r3, [pc, #472]	; (800365c <HAL_RCC_OscConfig+0x280>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a75      	ldr	r2, [pc, #468]	; (800365c <HAL_RCC_OscConfig+0x280>)
 8003488:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800348c:	6013      	str	r3, [r2, #0]
 800348e:	4b73      	ldr	r3, [pc, #460]	; (800365c <HAL_RCC_OscConfig+0x280>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a72      	ldr	r2, [pc, #456]	; (800365c <HAL_RCC_OscConfig+0x280>)
 8003494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003498:	6013      	str	r3, [r2, #0]
 800349a:	e00b      	b.n	80034b4 <HAL_RCC_OscConfig+0xd8>
 800349c:	4b6f      	ldr	r3, [pc, #444]	; (800365c <HAL_RCC_OscConfig+0x280>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a6e      	ldr	r2, [pc, #440]	; (800365c <HAL_RCC_OscConfig+0x280>)
 80034a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034a6:	6013      	str	r3, [r2, #0]
 80034a8:	4b6c      	ldr	r3, [pc, #432]	; (800365c <HAL_RCC_OscConfig+0x280>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a6b      	ldr	r2, [pc, #428]	; (800365c <HAL_RCC_OscConfig+0x280>)
 80034ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d013      	beq.n	80034e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034bc:	f7ff f87e 	bl	80025bc <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034c4:	f7ff f87a 	bl	80025bc <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b64      	cmp	r3, #100	; 0x64
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e229      	b.n	800392a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034d6:	4b61      	ldr	r3, [pc, #388]	; (800365c <HAL_RCC_OscConfig+0x280>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0f0      	beq.n	80034c4 <HAL_RCC_OscConfig+0xe8>
 80034e2:	e014      	b.n	800350e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e4:	f7ff f86a 	bl	80025bc <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034ec:	f7ff f866 	bl	80025bc <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b64      	cmp	r3, #100	; 0x64
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e215      	b.n	800392a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034fe:	4b57      	ldr	r3, [pc, #348]	; (800365c <HAL_RCC_OscConfig+0x280>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1f0      	bne.n	80034ec <HAL_RCC_OscConfig+0x110>
 800350a:	e000      	b.n	800350e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800350c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d069      	beq.n	80035ee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800351a:	4b50      	ldr	r3, [pc, #320]	; (800365c <HAL_RCC_OscConfig+0x280>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 030c 	and.w	r3, r3, #12
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00b      	beq.n	800353e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003526:	4b4d      	ldr	r3, [pc, #308]	; (800365c <HAL_RCC_OscConfig+0x280>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 030c 	and.w	r3, r3, #12
 800352e:	2b08      	cmp	r3, #8
 8003530:	d11c      	bne.n	800356c <HAL_RCC_OscConfig+0x190>
 8003532:	4b4a      	ldr	r3, [pc, #296]	; (800365c <HAL_RCC_OscConfig+0x280>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d116      	bne.n	800356c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800353e:	4b47      	ldr	r3, [pc, #284]	; (800365c <HAL_RCC_OscConfig+0x280>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d005      	beq.n	8003556 <HAL_RCC_OscConfig+0x17a>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d001      	beq.n	8003556 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e1e9      	b.n	800392a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003556:	4b41      	ldr	r3, [pc, #260]	; (800365c <HAL_RCC_OscConfig+0x280>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	493d      	ldr	r1, [pc, #244]	; (800365c <HAL_RCC_OscConfig+0x280>)
 8003566:	4313      	orrs	r3, r2
 8003568:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800356a:	e040      	b.n	80035ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d023      	beq.n	80035bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003574:	4b39      	ldr	r3, [pc, #228]	; (800365c <HAL_RCC_OscConfig+0x280>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a38      	ldr	r2, [pc, #224]	; (800365c <HAL_RCC_OscConfig+0x280>)
 800357a:	f043 0301 	orr.w	r3, r3, #1
 800357e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003580:	f7ff f81c 	bl	80025bc <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003588:	f7ff f818 	bl	80025bc <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e1c7      	b.n	800392a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800359a:	4b30      	ldr	r3, [pc, #192]	; (800365c <HAL_RCC_OscConfig+0x280>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d0f0      	beq.n	8003588 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035a6:	4b2d      	ldr	r3, [pc, #180]	; (800365c <HAL_RCC_OscConfig+0x280>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	4929      	ldr	r1, [pc, #164]	; (800365c <HAL_RCC_OscConfig+0x280>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	600b      	str	r3, [r1, #0]
 80035ba:	e018      	b.n	80035ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035bc:	4b27      	ldr	r3, [pc, #156]	; (800365c <HAL_RCC_OscConfig+0x280>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a26      	ldr	r2, [pc, #152]	; (800365c <HAL_RCC_OscConfig+0x280>)
 80035c2:	f023 0301 	bic.w	r3, r3, #1
 80035c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c8:	f7fe fff8 	bl	80025bc <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035d0:	f7fe fff4 	bl	80025bc <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e1a3      	b.n	800392a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035e2:	4b1e      	ldr	r3, [pc, #120]	; (800365c <HAL_RCC_OscConfig+0x280>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1f0      	bne.n	80035d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0308 	and.w	r3, r3, #8
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d038      	beq.n	800366c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d019      	beq.n	8003636 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003602:	4b16      	ldr	r3, [pc, #88]	; (800365c <HAL_RCC_OscConfig+0x280>)
 8003604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003606:	4a15      	ldr	r2, [pc, #84]	; (800365c <HAL_RCC_OscConfig+0x280>)
 8003608:	f043 0301 	orr.w	r3, r3, #1
 800360c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800360e:	f7fe ffd5 	bl	80025bc <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003614:	e008      	b.n	8003628 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003616:	f7fe ffd1 	bl	80025bc <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e180      	b.n	800392a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003628:	4b0c      	ldr	r3, [pc, #48]	; (800365c <HAL_RCC_OscConfig+0x280>)
 800362a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d0f0      	beq.n	8003616 <HAL_RCC_OscConfig+0x23a>
 8003634:	e01a      	b.n	800366c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003636:	4b09      	ldr	r3, [pc, #36]	; (800365c <HAL_RCC_OscConfig+0x280>)
 8003638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800363a:	4a08      	ldr	r2, [pc, #32]	; (800365c <HAL_RCC_OscConfig+0x280>)
 800363c:	f023 0301 	bic.w	r3, r3, #1
 8003640:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003642:	f7fe ffbb 	bl	80025bc <HAL_GetTick>
 8003646:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003648:	e00a      	b.n	8003660 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800364a:	f7fe ffb7 	bl	80025bc <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d903      	bls.n	8003660 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e166      	b.n	800392a <HAL_RCC_OscConfig+0x54e>
 800365c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003660:	4b92      	ldr	r3, [pc, #584]	; (80038ac <HAL_RCC_OscConfig+0x4d0>)
 8003662:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1ee      	bne.n	800364a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0304 	and.w	r3, r3, #4
 8003674:	2b00      	cmp	r3, #0
 8003676:	f000 80a4 	beq.w	80037c2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800367a:	4b8c      	ldr	r3, [pc, #560]	; (80038ac <HAL_RCC_OscConfig+0x4d0>)
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10d      	bne.n	80036a2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003686:	4b89      	ldr	r3, [pc, #548]	; (80038ac <HAL_RCC_OscConfig+0x4d0>)
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	4a88      	ldr	r2, [pc, #544]	; (80038ac <HAL_RCC_OscConfig+0x4d0>)
 800368c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003690:	6413      	str	r3, [r2, #64]	; 0x40
 8003692:	4b86      	ldr	r3, [pc, #536]	; (80038ac <HAL_RCC_OscConfig+0x4d0>)
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800369a:	60bb      	str	r3, [r7, #8]
 800369c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800369e:	2301      	movs	r3, #1
 80036a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036a2:	4b83      	ldr	r3, [pc, #524]	; (80038b0 <HAL_RCC_OscConfig+0x4d4>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d118      	bne.n	80036e0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80036ae:	4b80      	ldr	r3, [pc, #512]	; (80038b0 <HAL_RCC_OscConfig+0x4d4>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a7f      	ldr	r2, [pc, #508]	; (80038b0 <HAL_RCC_OscConfig+0x4d4>)
 80036b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036ba:	f7fe ff7f 	bl	80025bc <HAL_GetTick>
 80036be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036c0:	e008      	b.n	80036d4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036c2:	f7fe ff7b 	bl	80025bc <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b64      	cmp	r3, #100	; 0x64
 80036ce:	d901      	bls.n	80036d4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e12a      	b.n	800392a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036d4:	4b76      	ldr	r3, [pc, #472]	; (80038b0 <HAL_RCC_OscConfig+0x4d4>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0f0      	beq.n	80036c2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d106      	bne.n	80036f6 <HAL_RCC_OscConfig+0x31a>
 80036e8:	4b70      	ldr	r3, [pc, #448]	; (80038ac <HAL_RCC_OscConfig+0x4d0>)
 80036ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ec:	4a6f      	ldr	r2, [pc, #444]	; (80038ac <HAL_RCC_OscConfig+0x4d0>)
 80036ee:	f043 0301 	orr.w	r3, r3, #1
 80036f2:	6713      	str	r3, [r2, #112]	; 0x70
 80036f4:	e02d      	b.n	8003752 <HAL_RCC_OscConfig+0x376>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10c      	bne.n	8003718 <HAL_RCC_OscConfig+0x33c>
 80036fe:	4b6b      	ldr	r3, [pc, #428]	; (80038ac <HAL_RCC_OscConfig+0x4d0>)
 8003700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003702:	4a6a      	ldr	r2, [pc, #424]	; (80038ac <HAL_RCC_OscConfig+0x4d0>)
 8003704:	f023 0301 	bic.w	r3, r3, #1
 8003708:	6713      	str	r3, [r2, #112]	; 0x70
 800370a:	4b68      	ldr	r3, [pc, #416]	; (80038ac <HAL_RCC_OscConfig+0x4d0>)
 800370c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370e:	4a67      	ldr	r2, [pc, #412]	; (80038ac <HAL_RCC_OscConfig+0x4d0>)
 8003710:	f023 0304 	bic.w	r3, r3, #4
 8003714:	6713      	str	r3, [r2, #112]	; 0x70
 8003716:	e01c      	b.n	8003752 <HAL_RCC_OscConfig+0x376>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	2b05      	cmp	r3, #5
 800371e:	d10c      	bne.n	800373a <HAL_RCC_OscConfig+0x35e>
 8003720:	4b62      	ldr	r3, [pc, #392]	; (80038ac <HAL_RCC_OscConfig+0x4d0>)
 8003722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003724:	4a61      	ldr	r2, [pc, #388]	; (80038ac <HAL_RCC_OscConfig+0x4d0>)
 8003726:	f043 0304 	orr.w	r3, r3, #4
 800372a:	6713      	str	r3, [r2, #112]	; 0x70
 800372c:	4b5f      	ldr	r3, [pc, #380]	; (80038ac <HAL_RCC_OscConfig+0x4d0>)
 800372e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003730:	4a5e      	ldr	r2, [pc, #376]	; (80038ac <HAL_RCC_OscConfig+0x4d0>)
 8003732:	f043 0301 	orr.w	r3, r3, #1
 8003736:	6713      	str	r3, [r2, #112]	; 0x70
 8003738:	e00b      	b.n	8003752 <HAL_RCC_OscConfig+0x376>
 800373a:	4b5c      	ldr	r3, [pc, #368]	; (80038ac <HAL_RCC_OscConfig+0x4d0>)
 800373c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373e:	4a5b      	ldr	r2, [pc, #364]	; (80038ac <HAL_RCC_OscConfig+0x4d0>)
 8003740:	f023 0301 	bic.w	r3, r3, #1
 8003744:	6713      	str	r3, [r2, #112]	; 0x70
 8003746:	4b59      	ldr	r3, [pc, #356]	; (80038ac <HAL_RCC_OscConfig+0x4d0>)
 8003748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374a:	4a58      	ldr	r2, [pc, #352]	; (80038ac <HAL_RCC_OscConfig+0x4d0>)
 800374c:	f023 0304 	bic.w	r3, r3, #4
 8003750:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d015      	beq.n	8003786 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800375a:	f7fe ff2f 	bl	80025bc <HAL_GetTick>
 800375e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003760:	e00a      	b.n	8003778 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003762:	f7fe ff2b 	bl	80025bc <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003770:	4293      	cmp	r3, r2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e0d8      	b.n	800392a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003778:	4b4c      	ldr	r3, [pc, #304]	; (80038ac <HAL_RCC_OscConfig+0x4d0>)
 800377a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0ee      	beq.n	8003762 <HAL_RCC_OscConfig+0x386>
 8003784:	e014      	b.n	80037b0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003786:	f7fe ff19 	bl	80025bc <HAL_GetTick>
 800378a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800378c:	e00a      	b.n	80037a4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800378e:	f7fe ff15 	bl	80025bc <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	f241 3288 	movw	r2, #5000	; 0x1388
 800379c:	4293      	cmp	r3, r2
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e0c2      	b.n	800392a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037a4:	4b41      	ldr	r3, [pc, #260]	; (80038ac <HAL_RCC_OscConfig+0x4d0>)
 80037a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1ee      	bne.n	800378e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037b0:	7dfb      	ldrb	r3, [r7, #23]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d105      	bne.n	80037c2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037b6:	4b3d      	ldr	r3, [pc, #244]	; (80038ac <HAL_RCC_OscConfig+0x4d0>)
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	4a3c      	ldr	r2, [pc, #240]	; (80038ac <HAL_RCC_OscConfig+0x4d0>)
 80037bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 80ae 	beq.w	8003928 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037cc:	4b37      	ldr	r3, [pc, #220]	; (80038ac <HAL_RCC_OscConfig+0x4d0>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f003 030c 	and.w	r3, r3, #12
 80037d4:	2b08      	cmp	r3, #8
 80037d6:	d06d      	beq.n	80038b4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d14b      	bne.n	8003878 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037e0:	4b32      	ldr	r3, [pc, #200]	; (80038ac <HAL_RCC_OscConfig+0x4d0>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a31      	ldr	r2, [pc, #196]	; (80038ac <HAL_RCC_OscConfig+0x4d0>)
 80037e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ec:	f7fe fee6 	bl	80025bc <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f4:	f7fe fee2 	bl	80025bc <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e091      	b.n	800392a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003806:	4b29      	ldr	r3, [pc, #164]	; (80038ac <HAL_RCC_OscConfig+0x4d0>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1f0      	bne.n	80037f4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	69da      	ldr	r2, [r3, #28]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	431a      	orrs	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003820:	019b      	lsls	r3, r3, #6
 8003822:	431a      	orrs	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003828:	085b      	lsrs	r3, r3, #1
 800382a:	3b01      	subs	r3, #1
 800382c:	041b      	lsls	r3, r3, #16
 800382e:	431a      	orrs	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003834:	061b      	lsls	r3, r3, #24
 8003836:	431a      	orrs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383c:	071b      	lsls	r3, r3, #28
 800383e:	491b      	ldr	r1, [pc, #108]	; (80038ac <HAL_RCC_OscConfig+0x4d0>)
 8003840:	4313      	orrs	r3, r2
 8003842:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003844:	4b19      	ldr	r3, [pc, #100]	; (80038ac <HAL_RCC_OscConfig+0x4d0>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a18      	ldr	r2, [pc, #96]	; (80038ac <HAL_RCC_OscConfig+0x4d0>)
 800384a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800384e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003850:	f7fe feb4 	bl	80025bc <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003856:	e008      	b.n	800386a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003858:	f7fe feb0 	bl	80025bc <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e05f      	b.n	800392a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800386a:	4b10      	ldr	r3, [pc, #64]	; (80038ac <HAL_RCC_OscConfig+0x4d0>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d0f0      	beq.n	8003858 <HAL_RCC_OscConfig+0x47c>
 8003876:	e057      	b.n	8003928 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003878:	4b0c      	ldr	r3, [pc, #48]	; (80038ac <HAL_RCC_OscConfig+0x4d0>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a0b      	ldr	r2, [pc, #44]	; (80038ac <HAL_RCC_OscConfig+0x4d0>)
 800387e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003882:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003884:	f7fe fe9a 	bl	80025bc <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800388a:	e008      	b.n	800389e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800388c:	f7fe fe96 	bl	80025bc <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b02      	cmp	r3, #2
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e045      	b.n	800392a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800389e:	4b03      	ldr	r3, [pc, #12]	; (80038ac <HAL_RCC_OscConfig+0x4d0>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1f0      	bne.n	800388c <HAL_RCC_OscConfig+0x4b0>
 80038aa:	e03d      	b.n	8003928 <HAL_RCC_OscConfig+0x54c>
 80038ac:	40023800 	.word	0x40023800
 80038b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80038b4:	4b1f      	ldr	r3, [pc, #124]	; (8003934 <HAL_RCC_OscConfig+0x558>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d030      	beq.n	8003924 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d129      	bne.n	8003924 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038da:	429a      	cmp	r2, r3
 80038dc:	d122      	bne.n	8003924 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038e4:	4013      	ands	r3, r2
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038ea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d119      	bne.n	8003924 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fa:	085b      	lsrs	r3, r3, #1
 80038fc:	3b01      	subs	r3, #1
 80038fe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003900:	429a      	cmp	r2, r3
 8003902:	d10f      	bne.n	8003924 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003910:	429a      	cmp	r2, r3
 8003912:	d107      	bne.n	8003924 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003920:	429a      	cmp	r2, r3
 8003922:	d001      	beq.n	8003928 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e000      	b.n	800392a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3718      	adds	r7, #24
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	40023800 	.word	0x40023800

08003938 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003942:	2300      	movs	r3, #0
 8003944:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d101      	bne.n	8003950 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e0d0      	b.n	8003af2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003950:	4b6a      	ldr	r3, [pc, #424]	; (8003afc <HAL_RCC_ClockConfig+0x1c4>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 030f 	and.w	r3, r3, #15
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	429a      	cmp	r2, r3
 800395c:	d910      	bls.n	8003980 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800395e:	4b67      	ldr	r3, [pc, #412]	; (8003afc <HAL_RCC_ClockConfig+0x1c4>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f023 020f 	bic.w	r2, r3, #15
 8003966:	4965      	ldr	r1, [pc, #404]	; (8003afc <HAL_RCC_ClockConfig+0x1c4>)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	4313      	orrs	r3, r2
 800396c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800396e:	4b63      	ldr	r3, [pc, #396]	; (8003afc <HAL_RCC_ClockConfig+0x1c4>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 030f 	and.w	r3, r3, #15
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	429a      	cmp	r2, r3
 800397a:	d001      	beq.n	8003980 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e0b8      	b.n	8003af2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d020      	beq.n	80039ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	2b00      	cmp	r3, #0
 8003996:	d005      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003998:	4b59      	ldr	r3, [pc, #356]	; (8003b00 <HAL_RCC_ClockConfig+0x1c8>)
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	4a58      	ldr	r2, [pc, #352]	; (8003b00 <HAL_RCC_ClockConfig+0x1c8>)
 800399e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0308 	and.w	r3, r3, #8
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d005      	beq.n	80039bc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039b0:	4b53      	ldr	r3, [pc, #332]	; (8003b00 <HAL_RCC_ClockConfig+0x1c8>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	4a52      	ldr	r2, [pc, #328]	; (8003b00 <HAL_RCC_ClockConfig+0x1c8>)
 80039b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039bc:	4b50      	ldr	r3, [pc, #320]	; (8003b00 <HAL_RCC_ClockConfig+0x1c8>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	494d      	ldr	r1, [pc, #308]	; (8003b00 <HAL_RCC_ClockConfig+0x1c8>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d040      	beq.n	8003a5c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d107      	bne.n	80039f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039e2:	4b47      	ldr	r3, [pc, #284]	; (8003b00 <HAL_RCC_ClockConfig+0x1c8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d115      	bne.n	8003a1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e07f      	b.n	8003af2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d107      	bne.n	8003a0a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039fa:	4b41      	ldr	r3, [pc, #260]	; (8003b00 <HAL_RCC_ClockConfig+0x1c8>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d109      	bne.n	8003a1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e073      	b.n	8003af2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a0a:	4b3d      	ldr	r3, [pc, #244]	; (8003b00 <HAL_RCC_ClockConfig+0x1c8>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e06b      	b.n	8003af2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a1a:	4b39      	ldr	r3, [pc, #228]	; (8003b00 <HAL_RCC_ClockConfig+0x1c8>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f023 0203 	bic.w	r2, r3, #3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	4936      	ldr	r1, [pc, #216]	; (8003b00 <HAL_RCC_ClockConfig+0x1c8>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a2c:	f7fe fdc6 	bl	80025bc <HAL_GetTick>
 8003a30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a32:	e00a      	b.n	8003a4a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a34:	f7fe fdc2 	bl	80025bc <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e053      	b.n	8003af2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a4a:	4b2d      	ldr	r3, [pc, #180]	; (8003b00 <HAL_RCC_ClockConfig+0x1c8>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f003 020c 	and.w	r2, r3, #12
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d1eb      	bne.n	8003a34 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a5c:	4b27      	ldr	r3, [pc, #156]	; (8003afc <HAL_RCC_ClockConfig+0x1c4>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 030f 	and.w	r3, r3, #15
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d210      	bcs.n	8003a8c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a6a:	4b24      	ldr	r3, [pc, #144]	; (8003afc <HAL_RCC_ClockConfig+0x1c4>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f023 020f 	bic.w	r2, r3, #15
 8003a72:	4922      	ldr	r1, [pc, #136]	; (8003afc <HAL_RCC_ClockConfig+0x1c4>)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a7a:	4b20      	ldr	r3, [pc, #128]	; (8003afc <HAL_RCC_ClockConfig+0x1c4>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 030f 	and.w	r3, r3, #15
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d001      	beq.n	8003a8c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e032      	b.n	8003af2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d008      	beq.n	8003aaa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a98:	4b19      	ldr	r3, [pc, #100]	; (8003b00 <HAL_RCC_ClockConfig+0x1c8>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	4916      	ldr	r1, [pc, #88]	; (8003b00 <HAL_RCC_ClockConfig+0x1c8>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0308 	and.w	r3, r3, #8
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d009      	beq.n	8003aca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ab6:	4b12      	ldr	r3, [pc, #72]	; (8003b00 <HAL_RCC_ClockConfig+0x1c8>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	490e      	ldr	r1, [pc, #56]	; (8003b00 <HAL_RCC_ClockConfig+0x1c8>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003aca:	f000 f821 	bl	8003b10 <HAL_RCC_GetSysClockFreq>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <HAL_RCC_ClockConfig+0x1c8>)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	091b      	lsrs	r3, r3, #4
 8003ad6:	f003 030f 	and.w	r3, r3, #15
 8003ada:	490a      	ldr	r1, [pc, #40]	; (8003b04 <HAL_RCC_ClockConfig+0x1cc>)
 8003adc:	5ccb      	ldrb	r3, [r1, r3]
 8003ade:	fa22 f303 	lsr.w	r3, r2, r3
 8003ae2:	4a09      	ldr	r2, [pc, #36]	; (8003b08 <HAL_RCC_ClockConfig+0x1d0>)
 8003ae4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ae6:	4b09      	ldr	r3, [pc, #36]	; (8003b0c <HAL_RCC_ClockConfig+0x1d4>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7fe fd22 	bl	8002534 <HAL_InitTick>

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	40023c00 	.word	0x40023c00
 8003b00:	40023800 	.word	0x40023800
 8003b04:	08007444 	.word	0x08007444
 8003b08:	20000000 	.word	0x20000000
 8003b0c:	20000004 	.word	0x20000004

08003b10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b10:	b5b0      	push	{r4, r5, r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003b16:	2100      	movs	r1, #0
 8003b18:	6079      	str	r1, [r7, #4]
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	60f9      	str	r1, [r7, #12]
 8003b1e:	2100      	movs	r1, #0
 8003b20:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003b22:	2100      	movs	r1, #0
 8003b24:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b26:	4952      	ldr	r1, [pc, #328]	; (8003c70 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b28:	6889      	ldr	r1, [r1, #8]
 8003b2a:	f001 010c 	and.w	r1, r1, #12
 8003b2e:	2908      	cmp	r1, #8
 8003b30:	d00d      	beq.n	8003b4e <HAL_RCC_GetSysClockFreq+0x3e>
 8003b32:	2908      	cmp	r1, #8
 8003b34:	f200 8094 	bhi.w	8003c60 <HAL_RCC_GetSysClockFreq+0x150>
 8003b38:	2900      	cmp	r1, #0
 8003b3a:	d002      	beq.n	8003b42 <HAL_RCC_GetSysClockFreq+0x32>
 8003b3c:	2904      	cmp	r1, #4
 8003b3e:	d003      	beq.n	8003b48 <HAL_RCC_GetSysClockFreq+0x38>
 8003b40:	e08e      	b.n	8003c60 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b42:	4b4c      	ldr	r3, [pc, #304]	; (8003c74 <HAL_RCC_GetSysClockFreq+0x164>)
 8003b44:	60bb      	str	r3, [r7, #8]
      break;
 8003b46:	e08e      	b.n	8003c66 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b48:	4b4b      	ldr	r3, [pc, #300]	; (8003c78 <HAL_RCC_GetSysClockFreq+0x168>)
 8003b4a:	60bb      	str	r3, [r7, #8]
      break;
 8003b4c:	e08b      	b.n	8003c66 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b4e:	4948      	ldr	r1, [pc, #288]	; (8003c70 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b50:	6849      	ldr	r1, [r1, #4]
 8003b52:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003b56:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003b58:	4945      	ldr	r1, [pc, #276]	; (8003c70 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b5a:	6849      	ldr	r1, [r1, #4]
 8003b5c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003b60:	2900      	cmp	r1, #0
 8003b62:	d024      	beq.n	8003bae <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b64:	4942      	ldr	r1, [pc, #264]	; (8003c70 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b66:	6849      	ldr	r1, [r1, #4]
 8003b68:	0989      	lsrs	r1, r1, #6
 8003b6a:	4608      	mov	r0, r1
 8003b6c:	f04f 0100 	mov.w	r1, #0
 8003b70:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003b74:	f04f 0500 	mov.w	r5, #0
 8003b78:	ea00 0204 	and.w	r2, r0, r4
 8003b7c:	ea01 0305 	and.w	r3, r1, r5
 8003b80:	493d      	ldr	r1, [pc, #244]	; (8003c78 <HAL_RCC_GetSysClockFreq+0x168>)
 8003b82:	fb01 f003 	mul.w	r0, r1, r3
 8003b86:	2100      	movs	r1, #0
 8003b88:	fb01 f102 	mul.w	r1, r1, r2
 8003b8c:	1844      	adds	r4, r0, r1
 8003b8e:	493a      	ldr	r1, [pc, #232]	; (8003c78 <HAL_RCC_GetSysClockFreq+0x168>)
 8003b90:	fba2 0101 	umull	r0, r1, r2, r1
 8003b94:	1863      	adds	r3, r4, r1
 8003b96:	4619      	mov	r1, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	f04f 0300 	mov.w	r3, #0
 8003ba0:	f7fc fb52 	bl	8000248 <__aeabi_uldivmod>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	4613      	mov	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]
 8003bac:	e04a      	b.n	8003c44 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bae:	4b30      	ldr	r3, [pc, #192]	; (8003c70 <HAL_RCC_GetSysClockFreq+0x160>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	099b      	lsrs	r3, r3, #6
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	f04f 0300 	mov.w	r3, #0
 8003bba:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003bbe:	f04f 0100 	mov.w	r1, #0
 8003bc2:	ea02 0400 	and.w	r4, r2, r0
 8003bc6:	ea03 0501 	and.w	r5, r3, r1
 8003bca:	4620      	mov	r0, r4
 8003bcc:	4629      	mov	r1, r5
 8003bce:	f04f 0200 	mov.w	r2, #0
 8003bd2:	f04f 0300 	mov.w	r3, #0
 8003bd6:	014b      	lsls	r3, r1, #5
 8003bd8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003bdc:	0142      	lsls	r2, r0, #5
 8003bde:	4610      	mov	r0, r2
 8003be0:	4619      	mov	r1, r3
 8003be2:	1b00      	subs	r0, r0, r4
 8003be4:	eb61 0105 	sbc.w	r1, r1, r5
 8003be8:	f04f 0200 	mov.w	r2, #0
 8003bec:	f04f 0300 	mov.w	r3, #0
 8003bf0:	018b      	lsls	r3, r1, #6
 8003bf2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003bf6:	0182      	lsls	r2, r0, #6
 8003bf8:	1a12      	subs	r2, r2, r0
 8003bfa:	eb63 0301 	sbc.w	r3, r3, r1
 8003bfe:	f04f 0000 	mov.w	r0, #0
 8003c02:	f04f 0100 	mov.w	r1, #0
 8003c06:	00d9      	lsls	r1, r3, #3
 8003c08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c0c:	00d0      	lsls	r0, r2, #3
 8003c0e:	4602      	mov	r2, r0
 8003c10:	460b      	mov	r3, r1
 8003c12:	1912      	adds	r2, r2, r4
 8003c14:	eb45 0303 	adc.w	r3, r5, r3
 8003c18:	f04f 0000 	mov.w	r0, #0
 8003c1c:	f04f 0100 	mov.w	r1, #0
 8003c20:	0299      	lsls	r1, r3, #10
 8003c22:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003c26:	0290      	lsls	r0, r2, #10
 8003c28:	4602      	mov	r2, r0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	4610      	mov	r0, r2
 8003c2e:	4619      	mov	r1, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	461a      	mov	r2, r3
 8003c34:	f04f 0300 	mov.w	r3, #0
 8003c38:	f7fc fb06 	bl	8000248 <__aeabi_uldivmod>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4613      	mov	r3, r2
 8003c42:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003c44:	4b0a      	ldr	r3, [pc, #40]	; (8003c70 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	0c1b      	lsrs	r3, r3, #16
 8003c4a:	f003 0303 	and.w	r3, r3, #3
 8003c4e:	3301      	adds	r3, #1
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c5c:	60bb      	str	r3, [r7, #8]
      break;
 8003c5e:	e002      	b.n	8003c66 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c60:	4b04      	ldr	r3, [pc, #16]	; (8003c74 <HAL_RCC_GetSysClockFreq+0x164>)
 8003c62:	60bb      	str	r3, [r7, #8]
      break;
 8003c64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c66:	68bb      	ldr	r3, [r7, #8]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bdb0      	pop	{r4, r5, r7, pc}
 8003c70:	40023800 	.word	0x40023800
 8003c74:	00f42400 	.word	0x00f42400
 8003c78:	017d7840 	.word	0x017d7840

08003c7c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c80:	4b03      	ldr	r3, [pc, #12]	; (8003c90 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c82:	681b      	ldr	r3, [r3, #0]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	20000000 	.word	0x20000000

08003c94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c98:	f7ff fff0 	bl	8003c7c <HAL_RCC_GetHCLKFreq>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	4b05      	ldr	r3, [pc, #20]	; (8003cb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	0a9b      	lsrs	r3, r3, #10
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	4903      	ldr	r1, [pc, #12]	; (8003cb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003caa:	5ccb      	ldrb	r3, [r1, r3]
 8003cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40023800 	.word	0x40023800
 8003cb8:	08007454 	.word	0x08007454

08003cbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003cc0:	f7ff ffdc 	bl	8003c7c <HAL_RCC_GetHCLKFreq>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	4b05      	ldr	r3, [pc, #20]	; (8003cdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	0b5b      	lsrs	r3, r3, #13
 8003ccc:	f003 0307 	and.w	r3, r3, #7
 8003cd0:	4903      	ldr	r1, [pc, #12]	; (8003ce0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cd2:	5ccb      	ldrb	r3, [r1, r3]
 8003cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	40023800 	.word	0x40023800
 8003ce0:	08007454 	.word	0x08007454

08003ce4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b088      	sub	sp, #32
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003cec:	2300      	movs	r3, #0
 8003cee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d012      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d0c:	4b69      	ldr	r3, [pc, #420]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	4a68      	ldr	r2, [pc, #416]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d12:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003d16:	6093      	str	r3, [r2, #8]
 8003d18:	4b66      	ldr	r3, [pc, #408]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d20:	4964      	ldr	r1, [pc, #400]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d017      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d3e:	4b5d      	ldr	r3, [pc, #372]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d4c:	4959      	ldr	r1, [pc, #356]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d5c:	d101      	bne.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d101      	bne.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d017      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d7a:	4b4e      	ldr	r3, [pc, #312]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d80:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d88:	494a      	ldr	r1, [pc, #296]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d98:	d101      	bne.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003da6:	2301      	movs	r3, #1
 8003da8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003db6:	2301      	movs	r3, #1
 8003db8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0320 	and.w	r3, r3, #32
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f000 808b 	beq.w	8003ede <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003dc8:	4b3a      	ldr	r3, [pc, #232]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dcc:	4a39      	ldr	r2, [pc, #228]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dd2:	6413      	str	r3, [r2, #64]	; 0x40
 8003dd4:	4b37      	ldr	r3, [pc, #220]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ddc:	60bb      	str	r3, [r7, #8]
 8003dde:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003de0:	4b35      	ldr	r3, [pc, #212]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a34      	ldr	r2, [pc, #208]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003de6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dec:	f7fe fbe6 	bl	80025bc <HAL_GetTick>
 8003df0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003df2:	e008      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003df4:	f7fe fbe2 	bl	80025bc <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b64      	cmp	r3, #100	; 0x64
 8003e00:	d901      	bls.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e38f      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e06:	4b2c      	ldr	r3, [pc, #176]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d0f0      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e12:	4b28      	ldr	r3, [pc, #160]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e1a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d035      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d02e      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e30:	4b20      	ldr	r3, [pc, #128]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e38:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e3a:	4b1e      	ldr	r3, [pc, #120]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3e:	4a1d      	ldr	r2, [pc, #116]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e44:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e46:	4b1b      	ldr	r3, [pc, #108]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4a:	4a1a      	ldr	r2, [pc, #104]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e50:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003e52:	4a18      	ldr	r2, [pc, #96]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e58:	4b16      	ldr	r3, [pc, #88]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d114      	bne.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e64:	f7fe fbaa 	bl	80025bc <HAL_GetTick>
 8003e68:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e6a:	e00a      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e6c:	f7fe fba6 	bl	80025bc <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e351      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e82:	4b0c      	ldr	r3, [pc, #48]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0ee      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e9a:	d111      	bne.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003e9c:	4b05      	ldr	r3, [pc, #20]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ea8:	4b04      	ldr	r3, [pc, #16]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003eaa:	400b      	ands	r3, r1
 8003eac:	4901      	ldr	r1, [pc, #4]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	608b      	str	r3, [r1, #8]
 8003eb2:	e00b      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	40007000 	.word	0x40007000
 8003ebc:	0ffffcff 	.word	0x0ffffcff
 8003ec0:	4bb3      	ldr	r3, [pc, #716]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	4ab2      	ldr	r2, [pc, #712]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ec6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003eca:	6093      	str	r3, [r2, #8]
 8003ecc:	4bb0      	ldr	r3, [pc, #704]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ece:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ed8:	49ad      	ldr	r1, [pc, #692]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0310 	and.w	r3, r3, #16
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d010      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003eea:	4ba9      	ldr	r3, [pc, #676]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ef0:	4aa7      	ldr	r2, [pc, #668]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ef2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ef6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003efa:	4ba5      	ldr	r3, [pc, #660]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003efc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f04:	49a2      	ldr	r1, [pc, #648]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00a      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f18:	4b9d      	ldr	r3, [pc, #628]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f26:	499a      	ldr	r1, [pc, #616]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00a      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f3a:	4b95      	ldr	r3, [pc, #596]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f40:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f48:	4991      	ldr	r1, [pc, #580]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00a      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f5c:	4b8c      	ldr	r3, [pc, #560]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f6a:	4989      	ldr	r1, [pc, #548]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00a      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f7e:	4b84      	ldr	r3, [pc, #528]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f84:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8c:	4980      	ldr	r1, [pc, #512]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00a      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fa0:	4b7b      	ldr	r3, [pc, #492]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa6:	f023 0203 	bic.w	r2, r3, #3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fae:	4978      	ldr	r1, [pc, #480]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00a      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fc2:	4b73      	ldr	r3, [pc, #460]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc8:	f023 020c 	bic.w	r2, r3, #12
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fd0:	496f      	ldr	r1, [pc, #444]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00a      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fe4:	4b6a      	ldr	r3, [pc, #424]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ff2:	4967      	ldr	r1, [pc, #412]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00a      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004006:	4b62      	ldr	r3, [pc, #392]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004014:	495e      	ldr	r1, [pc, #376]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004016:	4313      	orrs	r3, r2
 8004018:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00a      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004028:	4b59      	ldr	r3, [pc, #356]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800402a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004036:	4956      	ldr	r1, [pc, #344]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004038:	4313      	orrs	r3, r2
 800403a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00a      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800404a:	4b51      	ldr	r3, [pc, #324]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800404c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004050:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004058:	494d      	ldr	r1, [pc, #308]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800405a:	4313      	orrs	r3, r2
 800405c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00a      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800406c:	4b48      	ldr	r3, [pc, #288]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800406e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004072:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800407a:	4945      	ldr	r1, [pc, #276]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800407c:	4313      	orrs	r3, r2
 800407e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00a      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800408e:	4b40      	ldr	r3, [pc, #256]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004094:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800409c:	493c      	ldr	r1, [pc, #240]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00a      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80040b0:	4b37      	ldr	r3, [pc, #220]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040be:	4934      	ldr	r1, [pc, #208]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d011      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80040d2:	4b2f      	ldr	r3, [pc, #188]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040e0:	492b      	ldr	r1, [pc, #172]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040f0:	d101      	bne.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80040f2:	2301      	movs	r3, #1
 80040f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0308 	and.w	r3, r3, #8
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004102:	2301      	movs	r3, #1
 8004104:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00a      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004112:	4b1f      	ldr	r3, [pc, #124]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004118:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004120:	491b      	ldr	r1, [pc, #108]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004122:	4313      	orrs	r3, r2
 8004124:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00b      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004134:	4b16      	ldr	r3, [pc, #88]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004144:	4912      	ldr	r1, [pc, #72]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004146:	4313      	orrs	r3, r2
 8004148:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00b      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004158:	4b0d      	ldr	r3, [pc, #52]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800415a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004168:	4909      	ldr	r1, [pc, #36]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800416a:	4313      	orrs	r3, r2
 800416c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00f      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800417c:	4b04      	ldr	r3, [pc, #16]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800417e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004182:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418c:	e002      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800418e:	bf00      	nop
 8004190:	40023800 	.word	0x40023800
 8004194:	4986      	ldr	r1, [pc, #536]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004196:	4313      	orrs	r3, r2
 8004198:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00b      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80041a8:	4b81      	ldr	r3, [pc, #516]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041ae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041b8:	497d      	ldr	r1, [pc, #500]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d006      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f000 80d6 	beq.w	8004380 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80041d4:	4b76      	ldr	r3, [pc, #472]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a75      	ldr	r2, [pc, #468]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041e0:	f7fe f9ec 	bl	80025bc <HAL_GetTick>
 80041e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041e6:	e008      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80041e8:	f7fe f9e8 	bl	80025bc <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b64      	cmp	r3, #100	; 0x64
 80041f4:	d901      	bls.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e195      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041fa:	4b6d      	ldr	r3, [pc, #436]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1f0      	bne.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	2b00      	cmp	r3, #0
 8004210:	d021      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004216:	2b00      	cmp	r3, #0
 8004218:	d11d      	bne.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800421a:	4b65      	ldr	r3, [pc, #404]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800421c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004220:	0c1b      	lsrs	r3, r3, #16
 8004222:	f003 0303 	and.w	r3, r3, #3
 8004226:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004228:	4b61      	ldr	r3, [pc, #388]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800422a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800422e:	0e1b      	lsrs	r3, r3, #24
 8004230:	f003 030f 	and.w	r3, r3, #15
 8004234:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	019a      	lsls	r2, r3, #6
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	041b      	lsls	r3, r3, #16
 8004240:	431a      	orrs	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	061b      	lsls	r3, r3, #24
 8004246:	431a      	orrs	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	071b      	lsls	r3, r3, #28
 800424e:	4958      	ldr	r1, [pc, #352]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004250:	4313      	orrs	r3, r2
 8004252:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d004      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004266:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800426a:	d00a      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004274:	2b00      	cmp	r3, #0
 8004276:	d02e      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004280:	d129      	bne.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004282:	4b4b      	ldr	r3, [pc, #300]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004284:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004288:	0c1b      	lsrs	r3, r3, #16
 800428a:	f003 0303 	and.w	r3, r3, #3
 800428e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004290:	4b47      	ldr	r3, [pc, #284]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004292:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004296:	0f1b      	lsrs	r3, r3, #28
 8004298:	f003 0307 	and.w	r3, r3, #7
 800429c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	019a      	lsls	r2, r3, #6
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	041b      	lsls	r3, r3, #16
 80042a8:	431a      	orrs	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	061b      	lsls	r3, r3, #24
 80042b0:	431a      	orrs	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	071b      	lsls	r3, r3, #28
 80042b6:	493e      	ldr	r1, [pc, #248]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80042be:	4b3c      	ldr	r3, [pc, #240]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042c4:	f023 021f 	bic.w	r2, r3, #31
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042cc:	3b01      	subs	r3, #1
 80042ce:	4938      	ldr	r1, [pc, #224]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d01d      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80042e2:	4b33      	ldr	r3, [pc, #204]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042e8:	0e1b      	lsrs	r3, r3, #24
 80042ea:	f003 030f 	and.w	r3, r3, #15
 80042ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042f0:	4b2f      	ldr	r3, [pc, #188]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042f6:	0f1b      	lsrs	r3, r3, #28
 80042f8:	f003 0307 	and.w	r3, r3, #7
 80042fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	019a      	lsls	r2, r3, #6
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	041b      	lsls	r3, r3, #16
 800430a:	431a      	orrs	r2, r3
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	061b      	lsls	r3, r3, #24
 8004310:	431a      	orrs	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	071b      	lsls	r3, r3, #28
 8004316:	4926      	ldr	r1, [pc, #152]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004318:	4313      	orrs	r3, r2
 800431a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d011      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	019a      	lsls	r2, r3, #6
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	041b      	lsls	r3, r3, #16
 8004336:	431a      	orrs	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	061b      	lsls	r3, r3, #24
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	071b      	lsls	r3, r3, #28
 8004346:	491a      	ldr	r1, [pc, #104]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004348:	4313      	orrs	r3, r2
 800434a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800434e:	4b18      	ldr	r3, [pc, #96]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a17      	ldr	r2, [pc, #92]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004354:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004358:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800435a:	f7fe f92f 	bl	80025bc <HAL_GetTick>
 800435e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004360:	e008      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004362:	f7fe f92b 	bl	80025bc <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b64      	cmp	r3, #100	; 0x64
 800436e:	d901      	bls.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e0d8      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004374:	4b0e      	ldr	r3, [pc, #56]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d0f0      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	2b01      	cmp	r3, #1
 8004384:	f040 80ce 	bne.w	8004524 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004388:	4b09      	ldr	r3, [pc, #36]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a08      	ldr	r2, [pc, #32]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800438e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004392:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004394:	f7fe f912 	bl	80025bc <HAL_GetTick>
 8004398:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800439a:	e00b      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800439c:	f7fe f90e 	bl	80025bc <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b64      	cmp	r3, #100	; 0x64
 80043a8:	d904      	bls.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e0bb      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80043ae:	bf00      	nop
 80043b0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043b4:	4b5e      	ldr	r3, [pc, #376]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043c0:	d0ec      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d009      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d02e      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d12a      	bne.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80043ea:	4b51      	ldr	r3, [pc, #324]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f0:	0c1b      	lsrs	r3, r3, #16
 80043f2:	f003 0303 	and.w	r3, r3, #3
 80043f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80043f8:	4b4d      	ldr	r3, [pc, #308]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fe:	0f1b      	lsrs	r3, r3, #28
 8004400:	f003 0307 	and.w	r3, r3, #7
 8004404:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	019a      	lsls	r2, r3, #6
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	041b      	lsls	r3, r3, #16
 8004410:	431a      	orrs	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	061b      	lsls	r3, r3, #24
 8004418:	431a      	orrs	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	071b      	lsls	r3, r3, #28
 800441e:	4944      	ldr	r1, [pc, #272]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004420:	4313      	orrs	r3, r2
 8004422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004426:	4b42      	ldr	r3, [pc, #264]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004428:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800442c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004434:	3b01      	subs	r3, #1
 8004436:	021b      	lsls	r3, r3, #8
 8004438:	493d      	ldr	r1, [pc, #244]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800443a:	4313      	orrs	r3, r2
 800443c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d022      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004450:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004454:	d11d      	bne.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004456:	4b36      	ldr	r3, [pc, #216]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800445c:	0e1b      	lsrs	r3, r3, #24
 800445e:	f003 030f 	and.w	r3, r3, #15
 8004462:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004464:	4b32      	ldr	r3, [pc, #200]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446a:	0f1b      	lsrs	r3, r3, #28
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	019a      	lsls	r2, r3, #6
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a1b      	ldr	r3, [r3, #32]
 800447c:	041b      	lsls	r3, r3, #16
 800447e:	431a      	orrs	r2, r3
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	061b      	lsls	r3, r3, #24
 8004484:	431a      	orrs	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	071b      	lsls	r3, r3, #28
 800448a:	4929      	ldr	r1, [pc, #164]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800448c:	4313      	orrs	r3, r2
 800448e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0308 	and.w	r3, r3, #8
 800449a:	2b00      	cmp	r3, #0
 800449c:	d028      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800449e:	4b24      	ldr	r3, [pc, #144]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a4:	0e1b      	lsrs	r3, r3, #24
 80044a6:	f003 030f 	and.w	r3, r3, #15
 80044aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80044ac:	4b20      	ldr	r3, [pc, #128]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b2:	0c1b      	lsrs	r3, r3, #16
 80044b4:	f003 0303 	and.w	r3, r3, #3
 80044b8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	019a      	lsls	r2, r3, #6
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	041b      	lsls	r3, r3, #16
 80044c4:	431a      	orrs	r2, r3
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	061b      	lsls	r3, r3, #24
 80044ca:	431a      	orrs	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	69db      	ldr	r3, [r3, #28]
 80044d0:	071b      	lsls	r3, r3, #28
 80044d2:	4917      	ldr	r1, [pc, #92]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80044da:	4b15      	ldr	r3, [pc, #84]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e8:	4911      	ldr	r1, [pc, #68]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80044f0:	4b0f      	ldr	r3, [pc, #60]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a0e      	ldr	r2, [pc, #56]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044fc:	f7fe f85e 	bl	80025bc <HAL_GetTick>
 8004500:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004502:	e008      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004504:	f7fe f85a 	bl	80025bc <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b64      	cmp	r3, #100	; 0x64
 8004510:	d901      	bls.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e007      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004516:	4b06      	ldr	r3, [pc, #24]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800451e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004522:	d1ef      	bne.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3720      	adds	r7, #32
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	40023800 	.word	0x40023800

08004534 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e09d      	b.n	8004682 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	2b00      	cmp	r3, #0
 800454c:	d108      	bne.n	8004560 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004556:	d009      	beq.n	800456c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	61da      	str	r2, [r3, #28]
 800455e:	e005      	b.n	800456c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d106      	bne.n	800458c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f7fd fc8e 	bl	8001ea8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2202      	movs	r2, #2
 8004590:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045a2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045ac:	d902      	bls.n	80045b4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80045ae:	2300      	movs	r3, #0
 80045b0:	60fb      	str	r3, [r7, #12]
 80045b2:	e002      	b.n	80045ba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80045b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045b8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80045c2:	d007      	beq.n	80045d4 <HAL_SPI_Init+0xa0>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045cc:	d002      	beq.n	80045d4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80045e4:	431a      	orrs	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	431a      	orrs	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	431a      	orrs	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004602:	431a      	orrs	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	69db      	ldr	r3, [r3, #28]
 8004608:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800460c:	431a      	orrs	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004616:	ea42 0103 	orr.w	r1, r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	430a      	orrs	r2, r1
 8004628:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	0c1b      	lsrs	r3, r3, #16
 8004630:	f003 0204 	and.w	r2, r3, #4
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004638:	f003 0310 	and.w	r3, r3, #16
 800463c:	431a      	orrs	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004642:	f003 0308 	and.w	r3, r3, #8
 8004646:	431a      	orrs	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004650:	ea42 0103 	orr.w	r1, r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	430a      	orrs	r2, r1
 8004660:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	69da      	ldr	r2, [r3, #28]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004670:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b088      	sub	sp, #32
 800468e:	af00      	add	r7, sp, #0
 8004690:	60f8      	str	r0, [r7, #12]
 8004692:	60b9      	str	r1, [r7, #8]
 8004694:	603b      	str	r3, [r7, #0]
 8004696:	4613      	mov	r3, r2
 8004698:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800469a:	2300      	movs	r3, #0
 800469c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d101      	bne.n	80046ac <HAL_SPI_Transmit+0x22>
 80046a8:	2302      	movs	r3, #2
 80046aa:	e158      	b.n	800495e <HAL_SPI_Transmit+0x2d4>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046b4:	f7fd ff82 	bl	80025bc <HAL_GetTick>
 80046b8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80046ba:	88fb      	ldrh	r3, [r7, #6]
 80046bc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d002      	beq.n	80046d0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80046ca:	2302      	movs	r3, #2
 80046cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80046ce:	e13d      	b.n	800494c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d002      	beq.n	80046dc <HAL_SPI_Transmit+0x52>
 80046d6:	88fb      	ldrh	r3, [r7, #6]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d102      	bne.n	80046e2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	77fb      	strb	r3, [r7, #31]
    goto error;
 80046e0:	e134      	b.n	800494c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2203      	movs	r2, #3
 80046e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	68ba      	ldr	r2, [r7, #8]
 80046f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	88fa      	ldrh	r2, [r7, #6]
 80046fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	88fa      	ldrh	r2, [r7, #6]
 8004700:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800472c:	d10f      	bne.n	800474e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800473c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800474c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004758:	2b40      	cmp	r3, #64	; 0x40
 800475a:	d007      	beq.n	800476c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800476a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004774:	d94b      	bls.n	800480e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <HAL_SPI_Transmit+0xfa>
 800477e:	8afb      	ldrh	r3, [r7, #22]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d13e      	bne.n	8004802 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004788:	881a      	ldrh	r2, [r3, #0]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004794:	1c9a      	adds	r2, r3, #2
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800479e:	b29b      	uxth	r3, r3
 80047a0:	3b01      	subs	r3, #1
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80047a8:	e02b      	b.n	8004802 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d112      	bne.n	80047de <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047bc:	881a      	ldrh	r2, [r3, #0]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c8:	1c9a      	adds	r2, r3, #2
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	3b01      	subs	r3, #1
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047dc:	e011      	b.n	8004802 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047de:	f7fd feed 	bl	80025bc <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d803      	bhi.n	80047f6 <HAL_SPI_Transmit+0x16c>
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f4:	d102      	bne.n	80047fc <HAL_SPI_Transmit+0x172>
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d102      	bne.n	8004802 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004800:	e0a4      	b.n	800494c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004806:	b29b      	uxth	r3, r3
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1ce      	bne.n	80047aa <HAL_SPI_Transmit+0x120>
 800480c:	e07c      	b.n	8004908 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d002      	beq.n	800481c <HAL_SPI_Transmit+0x192>
 8004816:	8afb      	ldrh	r3, [r7, #22]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d170      	bne.n	80048fe <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004820:	b29b      	uxth	r3, r3
 8004822:	2b01      	cmp	r3, #1
 8004824:	d912      	bls.n	800484c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482a:	881a      	ldrh	r2, [r3, #0]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004836:	1c9a      	adds	r2, r3, #2
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004840:	b29b      	uxth	r3, r3
 8004842:	3b02      	subs	r3, #2
 8004844:	b29a      	uxth	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	87da      	strh	r2, [r3, #62]	; 0x3e
 800484a:	e058      	b.n	80048fe <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	330c      	adds	r3, #12
 8004856:	7812      	ldrb	r2, [r2, #0]
 8004858:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485e:	1c5a      	adds	r2, r3, #1
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004868:	b29b      	uxth	r3, r3
 800486a:	3b01      	subs	r3, #1
 800486c:	b29a      	uxth	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004872:	e044      	b.n	80048fe <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b02      	cmp	r3, #2
 8004880:	d12b      	bne.n	80048da <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004886:	b29b      	uxth	r3, r3
 8004888:	2b01      	cmp	r3, #1
 800488a:	d912      	bls.n	80048b2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004890:	881a      	ldrh	r2, [r3, #0]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489c:	1c9a      	adds	r2, r3, #2
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	3b02      	subs	r3, #2
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80048b0:	e025      	b.n	80048fe <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	330c      	adds	r3, #12
 80048bc:	7812      	ldrb	r2, [r2, #0]
 80048be:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c4:	1c5a      	adds	r2, r3, #1
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	3b01      	subs	r3, #1
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80048d8:	e011      	b.n	80048fe <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048da:	f7fd fe6f 	bl	80025bc <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	683a      	ldr	r2, [r7, #0]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d803      	bhi.n	80048f2 <HAL_SPI_Transmit+0x268>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f0:	d102      	bne.n	80048f8 <HAL_SPI_Transmit+0x26e>
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d102      	bne.n	80048fe <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80048fc:	e026      	b.n	800494c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004902:	b29b      	uxth	r3, r3
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1b5      	bne.n	8004874 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	6839      	ldr	r1, [r7, #0]
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f000 fcdf 	bl	80052d0 <SPI_EndRxTxTransaction>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d002      	beq.n	800491e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2220      	movs	r2, #32
 800491c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10a      	bne.n	800493c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004926:	2300      	movs	r3, #0
 8004928:	613b      	str	r3, [r7, #16]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	613b      	str	r3, [r7, #16]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	613b      	str	r3, [r7, #16]
 800493a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004940:	2b00      	cmp	r3, #0
 8004942:	d002      	beq.n	800494a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	77fb      	strb	r3, [r7, #31]
 8004948:	e000      	b.n	800494c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800494a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800495c:	7ffb      	ldrb	r3, [r7, #31]
}
 800495e:	4618      	mov	r0, r3
 8004960:	3720      	adds	r7, #32
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b088      	sub	sp, #32
 800496a:	af02      	add	r7, sp, #8
 800496c:	60f8      	str	r0, [r7, #12]
 800496e:	60b9      	str	r1, [r7, #8]
 8004970:	603b      	str	r3, [r7, #0]
 8004972:	4613      	mov	r3, r2
 8004974:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004976:	2300      	movs	r3, #0
 8004978:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004982:	d112      	bne.n	80049aa <HAL_SPI_Receive+0x44>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d10e      	bne.n	80049aa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2204      	movs	r2, #4
 8004990:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004994:	88fa      	ldrh	r2, [r7, #6]
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	9300      	str	r3, [sp, #0]
 800499a:	4613      	mov	r3, r2
 800499c:	68ba      	ldr	r2, [r7, #8]
 800499e:	68b9      	ldr	r1, [r7, #8]
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f000 f910 	bl	8004bc6 <HAL_SPI_TransmitReceive>
 80049a6:	4603      	mov	r3, r0
 80049a8:	e109      	b.n	8004bbe <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d101      	bne.n	80049b8 <HAL_SPI_Receive+0x52>
 80049b4:	2302      	movs	r3, #2
 80049b6:	e102      	b.n	8004bbe <HAL_SPI_Receive+0x258>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049c0:	f7fd fdfc 	bl	80025bc <HAL_GetTick>
 80049c4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d002      	beq.n	80049d8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80049d2:	2302      	movs	r3, #2
 80049d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80049d6:	e0e9      	b.n	8004bac <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d002      	beq.n	80049e4 <HAL_SPI_Receive+0x7e>
 80049de:	88fb      	ldrh	r3, [r7, #6]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d102      	bne.n	80049ea <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80049e8:	e0e0      	b.n	8004bac <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2204      	movs	r2, #4
 80049ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	88fa      	ldrh	r2, [r7, #6]
 8004a02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	88fa      	ldrh	r2, [r7, #6]
 8004a0a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a34:	d908      	bls.n	8004a48 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a44:	605a      	str	r2, [r3, #4]
 8004a46:	e007      	b.n	8004a58 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a56:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a60:	d10f      	bne.n	8004a82 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a70:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a80:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a8c:	2b40      	cmp	r3, #64	; 0x40
 8004a8e:	d007      	beq.n	8004aa0 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a9e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004aa8:	d867      	bhi.n	8004b7a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004aaa:	e030      	b.n	8004b0e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d117      	bne.n	8004aea <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f103 020c 	add.w	r2, r3, #12
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	7812      	ldrb	r2, [r2, #0]
 8004ac8:	b2d2      	uxtb	r2, r2
 8004aca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad0:	1c5a      	adds	r2, r3, #1
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004ae8:	e011      	b.n	8004b0e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004aea:	f7fd fd67 	bl	80025bc <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	683a      	ldr	r2, [r7, #0]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d803      	bhi.n	8004b02 <HAL_SPI_Receive+0x19c>
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b00:	d102      	bne.n	8004b08 <HAL_SPI_Receive+0x1a2>
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d102      	bne.n	8004b0e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004b0c:	e04e      	b.n	8004bac <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1c8      	bne.n	8004aac <HAL_SPI_Receive+0x146>
 8004b1a:	e034      	b.n	8004b86 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d115      	bne.n	8004b56 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68da      	ldr	r2, [r3, #12]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b34:	b292      	uxth	r2, r2
 8004b36:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3c:	1c9a      	adds	r2, r3, #2
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	b29a      	uxth	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004b54:	e011      	b.n	8004b7a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b56:	f7fd fd31 	bl	80025bc <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d803      	bhi.n	8004b6e <HAL_SPI_Receive+0x208>
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b6c:	d102      	bne.n	8004b74 <HAL_SPI_Receive+0x20e>
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d102      	bne.n	8004b7a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004b78:	e018      	b.n	8004bac <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1ca      	bne.n	8004b1c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	6839      	ldr	r1, [r7, #0]
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f000 fb48 	bl	8005220 <SPI_EndRxTransaction>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d002      	beq.n	8004b9c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2220      	movs	r2, #32
 8004b9a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d002      	beq.n	8004baa <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	75fb      	strb	r3, [r7, #23]
 8004ba8:	e000      	b.n	8004bac <HAL_SPI_Receive+0x246>
  }

error :
 8004baa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3718      	adds	r7, #24
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	b08a      	sub	sp, #40	; 0x28
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	60f8      	str	r0, [r7, #12]
 8004bce:	60b9      	str	r1, [r7, #8]
 8004bd0:	607a      	str	r2, [r7, #4]
 8004bd2:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d101      	bne.n	8004bec <HAL_SPI_TransmitReceive+0x26>
 8004be8:	2302      	movs	r3, #2
 8004bea:	e1fb      	b.n	8004fe4 <HAL_SPI_TransmitReceive+0x41e>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bf4:	f7fd fce2 	bl	80025bc <HAL_GetTick>
 8004bf8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c00:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004c08:	887b      	ldrh	r3, [r7, #2]
 8004c0a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004c0c:	887b      	ldrh	r3, [r7, #2]
 8004c0e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c10:	7efb      	ldrb	r3, [r7, #27]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d00e      	beq.n	8004c34 <HAL_SPI_TransmitReceive+0x6e>
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c1c:	d106      	bne.n	8004c2c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d102      	bne.n	8004c2c <HAL_SPI_TransmitReceive+0x66>
 8004c26:	7efb      	ldrb	r3, [r7, #27]
 8004c28:	2b04      	cmp	r3, #4
 8004c2a:	d003      	beq.n	8004c34 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004c32:	e1cd      	b.n	8004fd0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d005      	beq.n	8004c46 <HAL_SPI_TransmitReceive+0x80>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d002      	beq.n	8004c46 <HAL_SPI_TransmitReceive+0x80>
 8004c40:	887b      	ldrh	r3, [r7, #2]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d103      	bne.n	8004c4e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004c4c:	e1c0      	b.n	8004fd0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b04      	cmp	r3, #4
 8004c58:	d003      	beq.n	8004c62 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2205      	movs	r2, #5
 8004c5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	887a      	ldrh	r2, [r7, #2]
 8004c72:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	887a      	ldrh	r2, [r7, #2]
 8004c7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	887a      	ldrh	r2, [r7, #2]
 8004c88:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	887a      	ldrh	r2, [r7, #2]
 8004c8e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ca4:	d802      	bhi.n	8004cac <HAL_SPI_TransmitReceive+0xe6>
 8004ca6:	8a3b      	ldrh	r3, [r7, #16]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d908      	bls.n	8004cbe <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685a      	ldr	r2, [r3, #4]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004cba:	605a      	str	r2, [r3, #4]
 8004cbc:	e007      	b.n	8004cce <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	685a      	ldr	r2, [r3, #4]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ccc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd8:	2b40      	cmp	r3, #64	; 0x40
 8004cda:	d007      	beq.n	8004cec <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004cf4:	d97c      	bls.n	8004df0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d002      	beq.n	8004d04 <HAL_SPI_TransmitReceive+0x13e>
 8004cfe:	8a7b      	ldrh	r3, [r7, #18]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d169      	bne.n	8004dd8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d08:	881a      	ldrh	r2, [r3, #0]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d14:	1c9a      	adds	r2, r3, #2
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	3b01      	subs	r3, #1
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d28:	e056      	b.n	8004dd8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d11b      	bne.n	8004d70 <HAL_SPI_TransmitReceive+0x1aa>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d016      	beq.n	8004d70 <HAL_SPI_TransmitReceive+0x1aa>
 8004d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d113      	bne.n	8004d70 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4c:	881a      	ldrh	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d58:	1c9a      	adds	r2, r3, #2
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	3b01      	subs	r3, #1
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d11c      	bne.n	8004db8 <HAL_SPI_TransmitReceive+0x1f2>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d016      	beq.n	8004db8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68da      	ldr	r2, [r3, #12]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d94:	b292      	uxth	r2, r2
 8004d96:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9c:	1c9a      	adds	r2, r3, #2
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	3b01      	subs	r3, #1
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004db4:	2301      	movs	r3, #1
 8004db6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004db8:	f7fd fc00 	bl	80025bc <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d807      	bhi.n	8004dd8 <HAL_SPI_TransmitReceive+0x212>
 8004dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dce:	d003      	beq.n	8004dd8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004dd6:	e0fb      	b.n	8004fd0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1a3      	bne.n	8004d2a <HAL_SPI_TransmitReceive+0x164>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d19d      	bne.n	8004d2a <HAL_SPI_TransmitReceive+0x164>
 8004dee:	e0df      	b.n	8004fb0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d003      	beq.n	8004e00 <HAL_SPI_TransmitReceive+0x23a>
 8004df8:	8a7b      	ldrh	r3, [r7, #18]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	f040 80cb 	bne.w	8004f96 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d912      	bls.n	8004e30 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0e:	881a      	ldrh	r2, [r3, #0]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1a:	1c9a      	adds	r2, r3, #2
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	3b02      	subs	r3, #2
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e2e:	e0b2      	b.n	8004f96 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	330c      	adds	r3, #12
 8004e3a:	7812      	ldrb	r2, [r2, #0]
 8004e3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e42:	1c5a      	adds	r2, r3, #1
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e56:	e09e      	b.n	8004f96 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d134      	bne.n	8004ed0 <HAL_SPI_TransmitReceive+0x30a>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d02f      	beq.n	8004ed0 <HAL_SPI_TransmitReceive+0x30a>
 8004e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d12c      	bne.n	8004ed0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d912      	bls.n	8004ea6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e84:	881a      	ldrh	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e90:	1c9a      	adds	r2, r3, #2
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	3b02      	subs	r3, #2
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ea4:	e012      	b.n	8004ecc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	330c      	adds	r3, #12
 8004eb0:	7812      	ldrb	r2, [r2, #0]
 8004eb2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb8:	1c5a      	adds	r2, r3, #1
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d148      	bne.n	8004f70 <HAL_SPI_TransmitReceive+0x3aa>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d042      	beq.n	8004f70 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d923      	bls.n	8004f3e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68da      	ldr	r2, [r3, #12]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f00:	b292      	uxth	r2, r2
 8004f02:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f08:	1c9a      	adds	r2, r3, #2
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	3b02      	subs	r3, #2
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d81f      	bhi.n	8004f6c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f3a:	605a      	str	r2, [r3, #4]
 8004f3c:	e016      	b.n	8004f6c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f103 020c 	add.w	r2, r3, #12
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	7812      	ldrb	r2, [r2, #0]
 8004f4c:	b2d2      	uxtb	r2, r2
 8004f4e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f54:	1c5a      	adds	r2, r3, #1
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	3b01      	subs	r3, #1
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f70:	f7fd fb24 	bl	80025bc <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d803      	bhi.n	8004f88 <HAL_SPI_TransmitReceive+0x3c2>
 8004f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f86:	d102      	bne.n	8004f8e <HAL_SPI_TransmitReceive+0x3c8>
 8004f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d103      	bne.n	8004f96 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004f94:	e01c      	b.n	8004fd0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f47f af5b 	bne.w	8004e58 <HAL_SPI_TransmitReceive+0x292>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	f47f af54 	bne.w	8004e58 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fb0:	69fa      	ldr	r2, [r7, #28]
 8004fb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f000 f98b 	bl	80052d0 <SPI_EndRxTxTransaction>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d006      	beq.n	8004fce <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	661a      	str	r2, [r3, #96]	; 0x60
 8004fcc:	e000      	b.n	8004fd0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004fce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004fe0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3728      	adds	r7, #40	; 0x28
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b088      	sub	sp, #32
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	603b      	str	r3, [r7, #0]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ffc:	f7fd fade 	bl	80025bc <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005004:	1a9b      	subs	r3, r3, r2
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	4413      	add	r3, r2
 800500a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800500c:	f7fd fad6 	bl	80025bc <HAL_GetTick>
 8005010:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005012:	4b39      	ldr	r3, [pc, #228]	; (80050f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	015b      	lsls	r3, r3, #5
 8005018:	0d1b      	lsrs	r3, r3, #20
 800501a:	69fa      	ldr	r2, [r7, #28]
 800501c:	fb02 f303 	mul.w	r3, r2, r3
 8005020:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005022:	e054      	b.n	80050ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800502a:	d050      	beq.n	80050ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800502c:	f7fd fac6 	bl	80025bc <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	69fa      	ldr	r2, [r7, #28]
 8005038:	429a      	cmp	r2, r3
 800503a:	d902      	bls.n	8005042 <SPI_WaitFlagStateUntilTimeout+0x56>
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d13d      	bne.n	80050be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	685a      	ldr	r2, [r3, #4]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005050:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800505a:	d111      	bne.n	8005080 <SPI_WaitFlagStateUntilTimeout+0x94>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005064:	d004      	beq.n	8005070 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800506e:	d107      	bne.n	8005080 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800507e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005084:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005088:	d10f      	bne.n	80050aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005098:	601a      	str	r2, [r3, #0]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e017      	b.n	80050ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d101      	bne.n	80050c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80050c4:	2300      	movs	r3, #0
 80050c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	3b01      	subs	r3, #1
 80050cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	689a      	ldr	r2, [r3, #8]
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	4013      	ands	r3, r2
 80050d8:	68ba      	ldr	r2, [r7, #8]
 80050da:	429a      	cmp	r2, r3
 80050dc:	bf0c      	ite	eq
 80050de:	2301      	moveq	r3, #1
 80050e0:	2300      	movne	r3, #0
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	461a      	mov	r2, r3
 80050e6:	79fb      	ldrb	r3, [r7, #7]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d19b      	bne.n	8005024 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3720      	adds	r7, #32
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	20000000 	.word	0x20000000

080050fc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b088      	sub	sp, #32
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
 8005108:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800510a:	f7fd fa57 	bl	80025bc <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005112:	1a9b      	subs	r3, r3, r2
 8005114:	683a      	ldr	r2, [r7, #0]
 8005116:	4413      	add	r3, r2
 8005118:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800511a:	f7fd fa4f 	bl	80025bc <HAL_GetTick>
 800511e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005120:	4b3e      	ldr	r3, [pc, #248]	; (800521c <SPI_WaitFifoStateUntilTimeout+0x120>)
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	4613      	mov	r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	4413      	add	r3, r2
 800512a:	00da      	lsls	r2, r3, #3
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	0d1b      	lsrs	r3, r3, #20
 8005130:	69fa      	ldr	r2, [r7, #28]
 8005132:	fb02 f303 	mul.w	r3, r2, r3
 8005136:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8005138:	e062      	b.n	8005200 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005140:	d109      	bne.n	8005156 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d106      	bne.n	8005156 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	330c      	adds	r3, #12
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	b2db      	uxtb	r3, r3
 8005152:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005154:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800515c:	d050      	beq.n	8005200 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800515e:	f7fd fa2d 	bl	80025bc <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	69fa      	ldr	r2, [r7, #28]
 800516a:	429a      	cmp	r2, r3
 800516c:	d902      	bls.n	8005174 <SPI_WaitFifoStateUntilTimeout+0x78>
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d13d      	bne.n	80051f0 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	685a      	ldr	r2, [r3, #4]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005182:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800518c:	d111      	bne.n	80051b2 <SPI_WaitFifoStateUntilTimeout+0xb6>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005196:	d004      	beq.n	80051a2 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051a0:	d107      	bne.n	80051b2 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051b0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051ba:	d10f      	bne.n	80051dc <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051ca:	601a      	str	r2, [r3, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051da:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e010      	b.n	8005212 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d101      	bne.n	80051fa <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 80051f6:	2300      	movs	r3, #0
 80051f8:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	3b01      	subs	r3, #1
 80051fe:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	689a      	ldr	r2, [r3, #8]
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	4013      	ands	r3, r2
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	429a      	cmp	r2, r3
 800520e:	d194      	bne.n	800513a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3720      	adds	r7, #32
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	20000000 	.word	0x20000000

08005220 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af02      	add	r7, sp, #8
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005234:	d111      	bne.n	800525a <SPI_EndRxTransaction+0x3a>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800523e:	d004      	beq.n	800524a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005248:	d107      	bne.n	800525a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005258:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	9300      	str	r3, [sp, #0]
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	2200      	movs	r2, #0
 8005262:	2180      	movs	r1, #128	; 0x80
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f7ff fec1 	bl	8004fec <SPI_WaitFlagStateUntilTimeout>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d007      	beq.n	8005280 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005274:	f043 0220 	orr.w	r2, r3, #32
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e023      	b.n	80052c8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005288:	d11d      	bne.n	80052c6 <SPI_EndRxTransaction+0xa6>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005292:	d004      	beq.n	800529e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800529c:	d113      	bne.n	80052c6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	9300      	str	r3, [sp, #0]
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f7ff ff26 	bl	80050fc <SPI_WaitFifoStateUntilTimeout>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d007      	beq.n	80052c6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052ba:	f043 0220 	orr.w	r2, r3, #32
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e000      	b.n	80052c8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af02      	add	r7, sp, #8
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	9300      	str	r3, [sp, #0]
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80052e8:	68f8      	ldr	r0, [r7, #12]
 80052ea:	f7ff ff07 	bl	80050fc <SPI_WaitFifoStateUntilTimeout>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d007      	beq.n	8005304 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052f8:	f043 0220 	orr.w	r2, r3, #32
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e027      	b.n	8005354 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	9300      	str	r3, [sp, #0]
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	2200      	movs	r2, #0
 800530c:	2180      	movs	r1, #128	; 0x80
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f7ff fe6c 	bl	8004fec <SPI_WaitFlagStateUntilTimeout>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d007      	beq.n	800532a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800531e:	f043 0220 	orr.w	r2, r3, #32
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e014      	b.n	8005354 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	9300      	str	r3, [sp, #0]
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	2200      	movs	r2, #0
 8005332:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005336:	68f8      	ldr	r0, [r7, #12]
 8005338:	f7ff fee0 	bl	80050fc <SPI_WaitFifoStateUntilTimeout>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d007      	beq.n	8005352 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005346:	f043 0220 	orr.w	r2, r3, #32
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e000      	b.n	8005354 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3710      	adds	r7, #16
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d101      	bne.n	800536e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e049      	b.n	8005402 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	d106      	bne.n	8005388 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f7fc ffd4 	bl	8002330 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2202      	movs	r2, #2
 800538c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	3304      	adds	r3, #4
 8005398:	4619      	mov	r1, r3
 800539a:	4610      	mov	r0, r2
 800539c:	f000 fa72 	bl	8005884 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3708      	adds	r7, #8
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800540a:	b580      	push	{r7, lr}
 800540c:	b082      	sub	sp, #8
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d101      	bne.n	800541c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e049      	b.n	80054b0 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005422:	b2db      	uxtb	r3, r3
 8005424:	2b00      	cmp	r3, #0
 8005426:	d106      	bne.n	8005436 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f7fc ff39 	bl	80022a8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2202      	movs	r2, #2
 800543a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	3304      	adds	r3, #4
 8005446:	4619      	mov	r1, r3
 8005448:	4610      	mov	r0, r2
 800544a:	f000 fa1b 	bl	8005884 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2201      	movs	r2, #1
 8005462:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2201      	movs	r2, #1
 800546a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2201      	movs	r2, #1
 8005472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3708      	adds	r7, #8
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d101      	bne.n	80054d2 <HAL_TIM_IC_ConfigChannel+0x1a>
 80054ce:	2302      	movs	r3, #2
 80054d0:	e082      	b.n	80055d8 <HAL_TIM_IC_ConfigChannel+0x120>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2201      	movs	r2, #1
 80054d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d11b      	bne.n	8005518 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6818      	ldr	r0, [r3, #0]
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	6819      	ldr	r1, [r3, #0]
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	685a      	ldr	r2, [r3, #4]
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	f000 fd56 	bl	8005fa0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	699a      	ldr	r2, [r3, #24]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f022 020c 	bic.w	r2, r2, #12
 8005502:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6999      	ldr	r1, [r3, #24]
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	689a      	ldr	r2, [r3, #8]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	430a      	orrs	r2, r1
 8005514:	619a      	str	r2, [r3, #24]
 8005516:	e05a      	b.n	80055ce <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b04      	cmp	r3, #4
 800551c:	d11c      	bne.n	8005558 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6818      	ldr	r0, [r3, #0]
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	6819      	ldr	r1, [r3, #0]
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	685a      	ldr	r2, [r3, #4]
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	f000 fdda 	bl	80060e6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	699a      	ldr	r2, [r3, #24]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005540:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	6999      	ldr	r1, [r3, #24]
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	021a      	lsls	r2, r3, #8
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	430a      	orrs	r2, r1
 8005554:	619a      	str	r2, [r3, #24]
 8005556:	e03a      	b.n	80055ce <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2b08      	cmp	r3, #8
 800555c:	d11b      	bne.n	8005596 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6818      	ldr	r0, [r3, #0]
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	6819      	ldr	r1, [r3, #0]
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	685a      	ldr	r2, [r3, #4]
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	f000 fe27 	bl	80061c0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	69da      	ldr	r2, [r3, #28]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f022 020c 	bic.w	r2, r2, #12
 8005580:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	69d9      	ldr	r1, [r3, #28]
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	689a      	ldr	r2, [r3, #8]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	430a      	orrs	r2, r1
 8005592:	61da      	str	r2, [r3, #28]
 8005594:	e01b      	b.n	80055ce <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6818      	ldr	r0, [r3, #0]
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	6819      	ldr	r1, [r3, #0]
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	685a      	ldr	r2, [r3, #4]
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	f000 fe47 	bl	8006238 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	69da      	ldr	r2, [r3, #28]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80055b8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	69d9      	ldr	r1, [r3, #28]
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	021a      	lsls	r2, r3, #8
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	430a      	orrs	r2, r1
 80055cc:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d101      	bne.n	80055fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80055f6:	2302      	movs	r3, #2
 80055f8:	e0fd      	b.n	80057f6 <HAL_TIM_PWM_ConfigChannel+0x216>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2b14      	cmp	r3, #20
 8005606:	f200 80f0 	bhi.w	80057ea <HAL_TIM_PWM_ConfigChannel+0x20a>
 800560a:	a201      	add	r2, pc, #4	; (adr r2, 8005610 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800560c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005610:	08005665 	.word	0x08005665
 8005614:	080057eb 	.word	0x080057eb
 8005618:	080057eb 	.word	0x080057eb
 800561c:	080057eb 	.word	0x080057eb
 8005620:	080056a5 	.word	0x080056a5
 8005624:	080057eb 	.word	0x080057eb
 8005628:	080057eb 	.word	0x080057eb
 800562c:	080057eb 	.word	0x080057eb
 8005630:	080056e7 	.word	0x080056e7
 8005634:	080057eb 	.word	0x080057eb
 8005638:	080057eb 	.word	0x080057eb
 800563c:	080057eb 	.word	0x080057eb
 8005640:	08005727 	.word	0x08005727
 8005644:	080057eb 	.word	0x080057eb
 8005648:	080057eb 	.word	0x080057eb
 800564c:	080057eb 	.word	0x080057eb
 8005650:	08005769 	.word	0x08005769
 8005654:	080057eb 	.word	0x080057eb
 8005658:	080057eb 	.word	0x080057eb
 800565c:	080057eb 	.word	0x080057eb
 8005660:	080057a9 	.word	0x080057a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68b9      	ldr	r1, [r7, #8]
 800566a:	4618      	mov	r0, r3
 800566c:	f000 f9aa 	bl	80059c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	699a      	ldr	r2, [r3, #24]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f042 0208 	orr.w	r2, r2, #8
 800567e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	699a      	ldr	r2, [r3, #24]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f022 0204 	bic.w	r2, r2, #4
 800568e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	6999      	ldr	r1, [r3, #24]
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	691a      	ldr	r2, [r3, #16]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	430a      	orrs	r2, r1
 80056a0:	619a      	str	r2, [r3, #24]
      break;
 80056a2:	e0a3      	b.n	80057ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68b9      	ldr	r1, [r7, #8]
 80056aa:	4618      	mov	r0, r3
 80056ac:	f000 f9fc 	bl	8005aa8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	699a      	ldr	r2, [r3, #24]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	699a      	ldr	r2, [r3, #24]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6999      	ldr	r1, [r3, #24]
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	021a      	lsls	r2, r3, #8
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	430a      	orrs	r2, r1
 80056e2:	619a      	str	r2, [r3, #24]
      break;
 80056e4:	e082      	b.n	80057ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68b9      	ldr	r1, [r7, #8]
 80056ec:	4618      	mov	r0, r3
 80056ee:	f000 fa53 	bl	8005b98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	69da      	ldr	r2, [r3, #28]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f042 0208 	orr.w	r2, r2, #8
 8005700:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	69da      	ldr	r2, [r3, #28]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f022 0204 	bic.w	r2, r2, #4
 8005710:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	69d9      	ldr	r1, [r3, #28]
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	691a      	ldr	r2, [r3, #16]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	430a      	orrs	r2, r1
 8005722:	61da      	str	r2, [r3, #28]
      break;
 8005724:	e062      	b.n	80057ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68b9      	ldr	r1, [r7, #8]
 800572c:	4618      	mov	r0, r3
 800572e:	f000 faa9 	bl	8005c84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	69da      	ldr	r2, [r3, #28]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005740:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	69da      	ldr	r2, [r3, #28]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005750:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	69d9      	ldr	r1, [r3, #28]
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	021a      	lsls	r2, r3, #8
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	430a      	orrs	r2, r1
 8005764:	61da      	str	r2, [r3, #28]
      break;
 8005766:	e041      	b.n	80057ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68b9      	ldr	r1, [r7, #8]
 800576e:	4618      	mov	r0, r3
 8005770:	f000 fae0 	bl	8005d34 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f042 0208 	orr.w	r2, r2, #8
 8005782:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f022 0204 	bic.w	r2, r2, #4
 8005792:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	691a      	ldr	r2, [r3, #16]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	430a      	orrs	r2, r1
 80057a4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80057a6:	e021      	b.n	80057ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68b9      	ldr	r1, [r7, #8]
 80057ae:	4618      	mov	r0, r3
 80057b0:	f000 fb12 	bl	8005dd8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	021a      	lsls	r2, r3, #8
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	430a      	orrs	r2, r1
 80057e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80057e8:	e000      	b.n	80057ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80057ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3710      	adds	r7, #16
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop

08005800 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005810:	2b01      	cmp	r3, #1
 8005812:	d101      	bne.n	8005818 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005814:	2302      	movs	r3, #2
 8005816:	e031      	b.n	800587c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2202      	movs	r2, #2
 8005824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005828:	6839      	ldr	r1, [r7, #0]
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 fb28 	bl	8005e80 <TIM_SlaveTimer_SetConfig>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d009      	beq.n	800584a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e018      	b.n	800587c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68da      	ldr	r2, [r3, #12]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005858:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68da      	ldr	r2, [r3, #12]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005868:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2201      	movs	r2, #1
 800586e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3708      	adds	r7, #8
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a40      	ldr	r2, [pc, #256]	; (8005998 <TIM_Base_SetConfig+0x114>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d013      	beq.n	80058c4 <TIM_Base_SetConfig+0x40>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058a2:	d00f      	beq.n	80058c4 <TIM_Base_SetConfig+0x40>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a3d      	ldr	r2, [pc, #244]	; (800599c <TIM_Base_SetConfig+0x118>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d00b      	beq.n	80058c4 <TIM_Base_SetConfig+0x40>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a3c      	ldr	r2, [pc, #240]	; (80059a0 <TIM_Base_SetConfig+0x11c>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d007      	beq.n	80058c4 <TIM_Base_SetConfig+0x40>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a3b      	ldr	r2, [pc, #236]	; (80059a4 <TIM_Base_SetConfig+0x120>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d003      	beq.n	80058c4 <TIM_Base_SetConfig+0x40>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a3a      	ldr	r2, [pc, #232]	; (80059a8 <TIM_Base_SetConfig+0x124>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d108      	bne.n	80058d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a2f      	ldr	r2, [pc, #188]	; (8005998 <TIM_Base_SetConfig+0x114>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d02b      	beq.n	8005936 <TIM_Base_SetConfig+0xb2>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058e4:	d027      	beq.n	8005936 <TIM_Base_SetConfig+0xb2>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a2c      	ldr	r2, [pc, #176]	; (800599c <TIM_Base_SetConfig+0x118>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d023      	beq.n	8005936 <TIM_Base_SetConfig+0xb2>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a2b      	ldr	r2, [pc, #172]	; (80059a0 <TIM_Base_SetConfig+0x11c>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d01f      	beq.n	8005936 <TIM_Base_SetConfig+0xb2>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a2a      	ldr	r2, [pc, #168]	; (80059a4 <TIM_Base_SetConfig+0x120>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d01b      	beq.n	8005936 <TIM_Base_SetConfig+0xb2>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a29      	ldr	r2, [pc, #164]	; (80059a8 <TIM_Base_SetConfig+0x124>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d017      	beq.n	8005936 <TIM_Base_SetConfig+0xb2>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a28      	ldr	r2, [pc, #160]	; (80059ac <TIM_Base_SetConfig+0x128>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d013      	beq.n	8005936 <TIM_Base_SetConfig+0xb2>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a27      	ldr	r2, [pc, #156]	; (80059b0 <TIM_Base_SetConfig+0x12c>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d00f      	beq.n	8005936 <TIM_Base_SetConfig+0xb2>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a26      	ldr	r2, [pc, #152]	; (80059b4 <TIM_Base_SetConfig+0x130>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d00b      	beq.n	8005936 <TIM_Base_SetConfig+0xb2>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a25      	ldr	r2, [pc, #148]	; (80059b8 <TIM_Base_SetConfig+0x134>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d007      	beq.n	8005936 <TIM_Base_SetConfig+0xb2>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a24      	ldr	r2, [pc, #144]	; (80059bc <TIM_Base_SetConfig+0x138>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d003      	beq.n	8005936 <TIM_Base_SetConfig+0xb2>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a23      	ldr	r2, [pc, #140]	; (80059c0 <TIM_Base_SetConfig+0x13c>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d108      	bne.n	8005948 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800593c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	4313      	orrs	r3, r2
 8005946:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	4313      	orrs	r3, r2
 8005954:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	689a      	ldr	r2, [r3, #8]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a0a      	ldr	r2, [pc, #40]	; (8005998 <TIM_Base_SetConfig+0x114>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d003      	beq.n	800597c <TIM_Base_SetConfig+0xf8>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a0c      	ldr	r2, [pc, #48]	; (80059a8 <TIM_Base_SetConfig+0x124>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d103      	bne.n	8005984 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	691a      	ldr	r2, [r3, #16]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	615a      	str	r2, [r3, #20]
}
 800598a:	bf00      	nop
 800598c:	3714      	adds	r7, #20
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	40010000 	.word	0x40010000
 800599c:	40000400 	.word	0x40000400
 80059a0:	40000800 	.word	0x40000800
 80059a4:	40000c00 	.word	0x40000c00
 80059a8:	40010400 	.word	0x40010400
 80059ac:	40014000 	.word	0x40014000
 80059b0:	40014400 	.word	0x40014400
 80059b4:	40014800 	.word	0x40014800
 80059b8:	40001800 	.word	0x40001800
 80059bc:	40001c00 	.word	0x40001c00
 80059c0:	40002000 	.word	0x40002000

080059c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b087      	sub	sp, #28
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	f023 0201 	bic.w	r2, r3, #1
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	4b2b      	ldr	r3, [pc, #172]	; (8005a9c <TIM_OC1_SetConfig+0xd8>)
 80059f0:	4013      	ands	r3, r2
 80059f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f023 0303 	bic.w	r3, r3, #3
 80059fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	f023 0302 	bic.w	r3, r3, #2
 8005a0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a21      	ldr	r2, [pc, #132]	; (8005aa0 <TIM_OC1_SetConfig+0xdc>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d003      	beq.n	8005a28 <TIM_OC1_SetConfig+0x64>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a20      	ldr	r2, [pc, #128]	; (8005aa4 <TIM_OC1_SetConfig+0xe0>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d10c      	bne.n	8005a42 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	f023 0308 	bic.w	r3, r3, #8
 8005a2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	f023 0304 	bic.w	r3, r3, #4
 8005a40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a16      	ldr	r2, [pc, #88]	; (8005aa0 <TIM_OC1_SetConfig+0xdc>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d003      	beq.n	8005a52 <TIM_OC1_SetConfig+0x8e>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a15      	ldr	r2, [pc, #84]	; (8005aa4 <TIM_OC1_SetConfig+0xe0>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d111      	bne.n	8005a76 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	693a      	ldr	r2, [r7, #16]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	697a      	ldr	r2, [r7, #20]
 8005a8e:	621a      	str	r2, [r3, #32]
}
 8005a90:	bf00      	nop
 8005a92:	371c      	adds	r7, #28
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr
 8005a9c:	fffeff8f 	.word	0xfffeff8f
 8005aa0:	40010000 	.word	0x40010000
 8005aa4:	40010400 	.word	0x40010400

08005aa8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b087      	sub	sp, #28
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	f023 0210 	bic.w	r2, r3, #16
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
 8005ac2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	4b2e      	ldr	r3, [pc, #184]	; (8005b8c <TIM_OC2_SetConfig+0xe4>)
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ade:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	021b      	lsls	r3, r3, #8
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	f023 0320 	bic.w	r3, r3, #32
 8005af2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	011b      	lsls	r3, r3, #4
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a23      	ldr	r2, [pc, #140]	; (8005b90 <TIM_OC2_SetConfig+0xe8>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d003      	beq.n	8005b10 <TIM_OC2_SetConfig+0x68>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a22      	ldr	r2, [pc, #136]	; (8005b94 <TIM_OC2_SetConfig+0xec>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d10d      	bne.n	8005b2c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	011b      	lsls	r3, r3, #4
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a18      	ldr	r2, [pc, #96]	; (8005b90 <TIM_OC2_SetConfig+0xe8>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d003      	beq.n	8005b3c <TIM_OC2_SetConfig+0x94>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a17      	ldr	r2, [pc, #92]	; (8005b94 <TIM_OC2_SetConfig+0xec>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d113      	bne.n	8005b64 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	695b      	ldr	r3, [r3, #20]
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	699b      	ldr	r3, [r3, #24]
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	693a      	ldr	r2, [r7, #16]
 8005b68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	685a      	ldr	r2, [r3, #4]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	621a      	str	r2, [r3, #32]
}
 8005b7e:	bf00      	nop
 8005b80:	371c      	adds	r7, #28
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	feff8fff 	.word	0xfeff8fff
 8005b90:	40010000 	.word	0x40010000
 8005b94:	40010400 	.word	0x40010400

08005b98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b087      	sub	sp, #28
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	69db      	ldr	r3, [r3, #28]
 8005bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	4b2d      	ldr	r3, [pc, #180]	; (8005c78 <TIM_OC3_SetConfig+0xe0>)
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f023 0303 	bic.w	r3, r3, #3
 8005bce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005be0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	021b      	lsls	r3, r3, #8
 8005be8:	697a      	ldr	r2, [r7, #20]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a22      	ldr	r2, [pc, #136]	; (8005c7c <TIM_OC3_SetConfig+0xe4>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d003      	beq.n	8005bfe <TIM_OC3_SetConfig+0x66>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a21      	ldr	r2, [pc, #132]	; (8005c80 <TIM_OC3_SetConfig+0xe8>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d10d      	bne.n	8005c1a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	021b      	lsls	r3, r3, #8
 8005c0c:	697a      	ldr	r2, [r7, #20]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a17      	ldr	r2, [pc, #92]	; (8005c7c <TIM_OC3_SetConfig+0xe4>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d003      	beq.n	8005c2a <TIM_OC3_SetConfig+0x92>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a16      	ldr	r2, [pc, #88]	; (8005c80 <TIM_OC3_SetConfig+0xe8>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d113      	bne.n	8005c52 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	695b      	ldr	r3, [r3, #20]
 8005c3e:	011b      	lsls	r3, r3, #4
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	011b      	lsls	r3, r3, #4
 8005c4c:	693a      	ldr	r2, [r7, #16]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	685a      	ldr	r2, [r3, #4]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	621a      	str	r2, [r3, #32]
}
 8005c6c:	bf00      	nop
 8005c6e:	371c      	adds	r7, #28
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr
 8005c78:	fffeff8f 	.word	0xfffeff8f
 8005c7c:	40010000 	.word	0x40010000
 8005c80:	40010400 	.word	0x40010400

08005c84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b087      	sub	sp, #28
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	69db      	ldr	r3, [r3, #28]
 8005caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	4b1e      	ldr	r3, [pc, #120]	; (8005d28 <TIM_OC4_SetConfig+0xa4>)
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	021b      	lsls	r3, r3, #8
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	031b      	lsls	r3, r3, #12
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a13      	ldr	r2, [pc, #76]	; (8005d2c <TIM_OC4_SetConfig+0xa8>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d003      	beq.n	8005cec <TIM_OC4_SetConfig+0x68>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a12      	ldr	r2, [pc, #72]	; (8005d30 <TIM_OC4_SetConfig+0xac>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d109      	bne.n	8005d00 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cf2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	695b      	ldr	r3, [r3, #20]
 8005cf8:	019b      	lsls	r3, r3, #6
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	685a      	ldr	r2, [r3, #4]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	693a      	ldr	r2, [r7, #16]
 8005d18:	621a      	str	r2, [r3, #32]
}
 8005d1a:	bf00      	nop
 8005d1c:	371c      	adds	r7, #28
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	feff8fff 	.word	0xfeff8fff
 8005d2c:	40010000 	.word	0x40010000
 8005d30:	40010400 	.word	0x40010400

08005d34 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b087      	sub	sp, #28
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	4b1b      	ldr	r3, [pc, #108]	; (8005dcc <TIM_OC5_SetConfig+0x98>)
 8005d60:	4013      	ands	r3, r2
 8005d62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005d74:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	041b      	lsls	r3, r3, #16
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a12      	ldr	r2, [pc, #72]	; (8005dd0 <TIM_OC5_SetConfig+0x9c>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d003      	beq.n	8005d92 <TIM_OC5_SetConfig+0x5e>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a11      	ldr	r2, [pc, #68]	; (8005dd4 <TIM_OC5_SetConfig+0xa0>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d109      	bne.n	8005da6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d98:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	021b      	lsls	r3, r3, #8
 8005da0:	697a      	ldr	r2, [r7, #20]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	697a      	ldr	r2, [r7, #20]
 8005daa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	685a      	ldr	r2, [r3, #4]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	621a      	str	r2, [r3, #32]
}
 8005dc0:	bf00      	nop
 8005dc2:	371c      	adds	r7, #28
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr
 8005dcc:	fffeff8f 	.word	0xfffeff8f
 8005dd0:	40010000 	.word	0x40010000
 8005dd4:	40010400 	.word	0x40010400

08005dd8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b087      	sub	sp, #28
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a1b      	ldr	r3, [r3, #32]
 8005de6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	4b1c      	ldr	r3, [pc, #112]	; (8005e74 <TIM_OC6_SetConfig+0x9c>)
 8005e04:	4013      	ands	r3, r2
 8005e06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	021b      	lsls	r3, r3, #8
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	051b      	lsls	r3, r3, #20
 8005e22:	693a      	ldr	r2, [r7, #16]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a13      	ldr	r2, [pc, #76]	; (8005e78 <TIM_OC6_SetConfig+0xa0>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d003      	beq.n	8005e38 <TIM_OC6_SetConfig+0x60>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a12      	ldr	r2, [pc, #72]	; (8005e7c <TIM_OC6_SetConfig+0xa4>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d109      	bne.n	8005e4c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	695b      	ldr	r3, [r3, #20]
 8005e44:	029b      	lsls	r3, r3, #10
 8005e46:	697a      	ldr	r2, [r7, #20]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	685a      	ldr	r2, [r3, #4]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	693a      	ldr	r2, [r7, #16]
 8005e64:	621a      	str	r2, [r3, #32]
}
 8005e66:	bf00      	nop
 8005e68:	371c      	adds	r7, #28
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	feff8fff 	.word	0xfeff8fff
 8005e78:	40010000 	.word	0x40010000
 8005e7c:	40010400 	.word	0x40010400

08005e80 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e98:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	697a      	ldr	r2, [r7, #20]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005ea4:	697a      	ldr	r2, [r7, #20]
 8005ea6:	4b3d      	ldr	r3, [pc, #244]	; (8005f9c <TIM_SlaveTimer_SetConfig+0x11c>)
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	697a      	ldr	r2, [r7, #20]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	2b70      	cmp	r3, #112	; 0x70
 8005ec4:	d01a      	beq.n	8005efc <TIM_SlaveTimer_SetConfig+0x7c>
 8005ec6:	2b70      	cmp	r3, #112	; 0x70
 8005ec8:	d860      	bhi.n	8005f8c <TIM_SlaveTimer_SetConfig+0x10c>
 8005eca:	2b60      	cmp	r3, #96	; 0x60
 8005ecc:	d054      	beq.n	8005f78 <TIM_SlaveTimer_SetConfig+0xf8>
 8005ece:	2b60      	cmp	r3, #96	; 0x60
 8005ed0:	d85c      	bhi.n	8005f8c <TIM_SlaveTimer_SetConfig+0x10c>
 8005ed2:	2b50      	cmp	r3, #80	; 0x50
 8005ed4:	d046      	beq.n	8005f64 <TIM_SlaveTimer_SetConfig+0xe4>
 8005ed6:	2b50      	cmp	r3, #80	; 0x50
 8005ed8:	d858      	bhi.n	8005f8c <TIM_SlaveTimer_SetConfig+0x10c>
 8005eda:	2b40      	cmp	r3, #64	; 0x40
 8005edc:	d019      	beq.n	8005f12 <TIM_SlaveTimer_SetConfig+0x92>
 8005ede:	2b40      	cmp	r3, #64	; 0x40
 8005ee0:	d854      	bhi.n	8005f8c <TIM_SlaveTimer_SetConfig+0x10c>
 8005ee2:	2b30      	cmp	r3, #48	; 0x30
 8005ee4:	d054      	beq.n	8005f90 <TIM_SlaveTimer_SetConfig+0x110>
 8005ee6:	2b30      	cmp	r3, #48	; 0x30
 8005ee8:	d850      	bhi.n	8005f8c <TIM_SlaveTimer_SetConfig+0x10c>
 8005eea:	2b20      	cmp	r3, #32
 8005eec:	d050      	beq.n	8005f90 <TIM_SlaveTimer_SetConfig+0x110>
 8005eee:	2b20      	cmp	r3, #32
 8005ef0:	d84c      	bhi.n	8005f8c <TIM_SlaveTimer_SetConfig+0x10c>
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d04c      	beq.n	8005f90 <TIM_SlaveTimer_SetConfig+0x110>
 8005ef6:	2b10      	cmp	r3, #16
 8005ef8:	d04a      	beq.n	8005f90 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8005efa:	e047      	b.n	8005f8c <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6818      	ldr	r0, [r3, #0]
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	68d9      	ldr	r1, [r3, #12]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	689a      	ldr	r2, [r3, #8]
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	f000 f9d1 	bl	80062b2 <TIM_ETR_SetConfig>
      break;
 8005f10:	e03f      	b.n	8005f92 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2b05      	cmp	r3, #5
 8005f18:	d101      	bne.n	8005f1e <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e03a      	b.n	8005f94 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	6a1b      	ldr	r3, [r3, #32]
 8005f24:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	6a1a      	ldr	r2, [r3, #32]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f022 0201 	bic.w	r2, r2, #1
 8005f34:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f44:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	011b      	lsls	r3, r3, #4
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	621a      	str	r2, [r3, #32]
      break;
 8005f62:	e016      	b.n	8005f92 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6818      	ldr	r0, [r3, #0]
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	6899      	ldr	r1, [r3, #8]
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	461a      	mov	r2, r3
 8005f72:	f000 f889 	bl	8006088 <TIM_TI1_ConfigInputStage>
      break;
 8005f76:	e00c      	b.n	8005f92 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6818      	ldr	r0, [r3, #0]
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	6899      	ldr	r1, [r3, #8]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	461a      	mov	r2, r3
 8005f86:	f000 f8eb 	bl	8006160 <TIM_TI2_ConfigInputStage>
      break;
 8005f8a:	e002      	b.n	8005f92 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8005f8c:	bf00      	nop
 8005f8e:	e000      	b.n	8005f92 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8005f90:	bf00      	nop
  }
  return HAL_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3718      	adds	r7, #24
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	fffefff8 	.word	0xfffefff8

08005fa0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b087      	sub	sp, #28
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
 8005fac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6a1b      	ldr	r3, [r3, #32]
 8005fb2:	f023 0201 	bic.w	r2, r3, #1
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6a1b      	ldr	r3, [r3, #32]
 8005fc4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	4a28      	ldr	r2, [pc, #160]	; (800606c <TIM_TI1_SetConfig+0xcc>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d01b      	beq.n	8006006 <TIM_TI1_SetConfig+0x66>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fd4:	d017      	beq.n	8006006 <TIM_TI1_SetConfig+0x66>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	4a25      	ldr	r2, [pc, #148]	; (8006070 <TIM_TI1_SetConfig+0xd0>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d013      	beq.n	8006006 <TIM_TI1_SetConfig+0x66>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	4a24      	ldr	r2, [pc, #144]	; (8006074 <TIM_TI1_SetConfig+0xd4>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d00f      	beq.n	8006006 <TIM_TI1_SetConfig+0x66>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	4a23      	ldr	r2, [pc, #140]	; (8006078 <TIM_TI1_SetConfig+0xd8>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d00b      	beq.n	8006006 <TIM_TI1_SetConfig+0x66>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	4a22      	ldr	r2, [pc, #136]	; (800607c <TIM_TI1_SetConfig+0xdc>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d007      	beq.n	8006006 <TIM_TI1_SetConfig+0x66>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	4a21      	ldr	r2, [pc, #132]	; (8006080 <TIM_TI1_SetConfig+0xe0>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d003      	beq.n	8006006 <TIM_TI1_SetConfig+0x66>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	4a20      	ldr	r2, [pc, #128]	; (8006084 <TIM_TI1_SetConfig+0xe4>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d101      	bne.n	800600a <TIM_TI1_SetConfig+0x6a>
 8006006:	2301      	movs	r3, #1
 8006008:	e000      	b.n	800600c <TIM_TI1_SetConfig+0x6c>
 800600a:	2300      	movs	r3, #0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d008      	beq.n	8006022 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f023 0303 	bic.w	r3, r3, #3
 8006016:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4313      	orrs	r3, r2
 800601e:	617b      	str	r3, [r7, #20]
 8006020:	e003      	b.n	800602a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f043 0301 	orr.w	r3, r3, #1
 8006028:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006030:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	011b      	lsls	r3, r3, #4
 8006036:	b2db      	uxtb	r3, r3
 8006038:	697a      	ldr	r2, [r7, #20]
 800603a:	4313      	orrs	r3, r2
 800603c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	f023 030a 	bic.w	r3, r3, #10
 8006044:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	f003 030a 	and.w	r3, r3, #10
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	4313      	orrs	r3, r2
 8006050:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	697a      	ldr	r2, [r7, #20]
 8006056:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	693a      	ldr	r2, [r7, #16]
 800605c:	621a      	str	r2, [r3, #32]
}
 800605e:	bf00      	nop
 8006060:	371c      	adds	r7, #28
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	40010000 	.word	0x40010000
 8006070:	40000400 	.word	0x40000400
 8006074:	40000800 	.word	0x40000800
 8006078:	40000c00 	.word	0x40000c00
 800607c:	40010400 	.word	0x40010400
 8006080:	40014000 	.word	0x40014000
 8006084:	40001800 	.word	0x40001800

08006088 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006088:	b480      	push	{r7}
 800608a:	b087      	sub	sp, #28
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6a1b      	ldr	r3, [r3, #32]
 8006098:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	f023 0201 	bic.w	r2, r3, #1
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	011b      	lsls	r3, r3, #4
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	f023 030a 	bic.w	r3, r3, #10
 80060c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	621a      	str	r2, [r3, #32]
}
 80060da:	bf00      	nop
 80060dc:	371c      	adds	r7, #28
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr

080060e6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80060e6:	b480      	push	{r7}
 80060e8:	b087      	sub	sp, #28
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	60f8      	str	r0, [r7, #12]
 80060ee:	60b9      	str	r1, [r7, #8]
 80060f0:	607a      	str	r2, [r7, #4]
 80060f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	f023 0210 	bic.w	r2, r3, #16
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006112:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	021b      	lsls	r3, r3, #8
 8006118:	697a      	ldr	r2, [r7, #20]
 800611a:	4313      	orrs	r3, r2
 800611c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006124:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	031b      	lsls	r3, r3, #12
 800612a:	b29b      	uxth	r3, r3
 800612c:	697a      	ldr	r2, [r7, #20]
 800612e:	4313      	orrs	r3, r2
 8006130:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006138:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	011b      	lsls	r3, r3, #4
 800613e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006142:	693a      	ldr	r2, [r7, #16]
 8006144:	4313      	orrs	r3, r2
 8006146:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	697a      	ldr	r2, [r7, #20]
 800614c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	693a      	ldr	r2, [r7, #16]
 8006152:	621a      	str	r2, [r3, #32]
}
 8006154:	bf00      	nop
 8006156:	371c      	adds	r7, #28
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006160:	b480      	push	{r7}
 8006162:	b087      	sub	sp, #28
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6a1b      	ldr	r3, [r3, #32]
 8006170:	f023 0210 	bic.w	r2, r3, #16
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	699b      	ldr	r3, [r3, #24]
 800617c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6a1b      	ldr	r3, [r3, #32]
 8006182:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800618a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	031b      	lsls	r3, r3, #12
 8006190:	697a      	ldr	r2, [r7, #20]
 8006192:	4313      	orrs	r3, r2
 8006194:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800619c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	011b      	lsls	r3, r3, #4
 80061a2:	693a      	ldr	r2, [r7, #16]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	621a      	str	r2, [r3, #32]
}
 80061b4:	bf00      	nop
 80061b6:	371c      	adds	r7, #28
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b087      	sub	sp, #28
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
 80061cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	69db      	ldr	r3, [r3, #28]
 80061de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6a1b      	ldr	r3, [r3, #32]
 80061e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	f023 0303 	bic.w	r3, r3, #3
 80061ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	011b      	lsls	r3, r3, #4
 8006202:	b2db      	uxtb	r3, r3
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	4313      	orrs	r3, r2
 8006208:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006210:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	021b      	lsls	r3, r3, #8
 8006216:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	4313      	orrs	r3, r2
 800621e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	693a      	ldr	r2, [r7, #16]
 800622a:	621a      	str	r2, [r3, #32]
}
 800622c:	bf00      	nop
 800622e:	371c      	adds	r7, #28
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006238:	b480      	push	{r7}
 800623a:	b087      	sub	sp, #28
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
 8006244:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	69db      	ldr	r3, [r3, #28]
 8006256:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6a1b      	ldr	r3, [r3, #32]
 800625c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006264:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	021b      	lsls	r3, r3, #8
 800626a:	697a      	ldr	r2, [r7, #20]
 800626c:	4313      	orrs	r3, r2
 800626e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006276:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	031b      	lsls	r3, r3, #12
 800627c:	b29b      	uxth	r3, r3
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	4313      	orrs	r3, r2
 8006282:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800628a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	031b      	lsls	r3, r3, #12
 8006290:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	4313      	orrs	r3, r2
 8006298:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	697a      	ldr	r2, [r7, #20]
 800629e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	693a      	ldr	r2, [r7, #16]
 80062a4:	621a      	str	r2, [r3, #32]
}
 80062a6:	bf00      	nop
 80062a8:	371c      	adds	r7, #28
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr

080062b2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062b2:	b480      	push	{r7}
 80062b4:	b087      	sub	sp, #28
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	60f8      	str	r0, [r7, #12]
 80062ba:	60b9      	str	r1, [r7, #8]
 80062bc:	607a      	str	r2, [r7, #4]
 80062be:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062cc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	021a      	lsls	r2, r3, #8
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	431a      	orrs	r2, r3
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	4313      	orrs	r3, r2
 80062da:	697a      	ldr	r2, [r7, #20]
 80062dc:	4313      	orrs	r3, r2
 80062de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	609a      	str	r2, [r3, #8]
}
 80062e6:	bf00      	nop
 80062e8:	371c      	adds	r7, #28
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr
	...

080062f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b085      	sub	sp, #20
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006304:	2b01      	cmp	r3, #1
 8006306:	d101      	bne.n	800630c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006308:	2302      	movs	r3, #2
 800630a:	e06d      	b.n	80063e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2202      	movs	r2, #2
 8006318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a30      	ldr	r2, [pc, #192]	; (80063f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d004      	beq.n	8006340 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a2f      	ldr	r2, [pc, #188]	; (80063f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d108      	bne.n	8006352 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006346:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	4313      	orrs	r3, r2
 8006350:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006358:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	4313      	orrs	r3, r2
 8006362:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a20      	ldr	r2, [pc, #128]	; (80063f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d022      	beq.n	80063bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800637e:	d01d      	beq.n	80063bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a1d      	ldr	r2, [pc, #116]	; (80063fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d018      	beq.n	80063bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a1c      	ldr	r2, [pc, #112]	; (8006400 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d013      	beq.n	80063bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a1a      	ldr	r2, [pc, #104]	; (8006404 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d00e      	beq.n	80063bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a15      	ldr	r2, [pc, #84]	; (80063f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d009      	beq.n	80063bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a16      	ldr	r2, [pc, #88]	; (8006408 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d004      	beq.n	80063bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a15      	ldr	r2, [pc, #84]	; (800640c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d10c      	bne.n	80063d6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	68ba      	ldr	r2, [r7, #8]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68ba      	ldr	r2, [r7, #8]
 80063d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2201      	movs	r2, #1
 80063da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063e6:	2300      	movs	r3, #0
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3714      	adds	r7, #20
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr
 80063f4:	40010000 	.word	0x40010000
 80063f8:	40010400 	.word	0x40010400
 80063fc:	40000400 	.word	0x40000400
 8006400:	40000800 	.word	0x40000800
 8006404:	40000c00 	.word	0x40000c00
 8006408:	40014000 	.word	0x40014000
 800640c:	40001800 	.word	0x40001800

08006410 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b082      	sub	sp, #8
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d101      	bne.n	8006422 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	e040      	b.n	80064a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006426:	2b00      	cmp	r3, #0
 8006428:	d106      	bne.n	8006438 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f7fc f804 	bl	8002440 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2224      	movs	r2, #36	; 0x24
 800643c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f022 0201 	bic.w	r2, r2, #1
 800644c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 f8c0 	bl	80065d4 <UART_SetConfig>
 8006454:	4603      	mov	r3, r0
 8006456:	2b01      	cmp	r3, #1
 8006458:	d101      	bne.n	800645e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e022      	b.n	80064a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006462:	2b00      	cmp	r3, #0
 8006464:	d002      	beq.n	800646c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 fb16 	bl	8006a98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	685a      	ldr	r2, [r3, #4]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800647a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	689a      	ldr	r2, [r3, #8]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800648a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f042 0201 	orr.w	r2, r2, #1
 800649a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 fb9d 	bl	8006bdc <UART_CheckIdleState>
 80064a2:	4603      	mov	r3, r0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3708      	adds	r7, #8
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b08a      	sub	sp, #40	; 0x28
 80064b0:	af02      	add	r7, sp, #8
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	603b      	str	r3, [r7, #0]
 80064b8:	4613      	mov	r3, r2
 80064ba:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064c0:	2b20      	cmp	r3, #32
 80064c2:	f040 8081 	bne.w	80065c8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d002      	beq.n	80064d2 <HAL_UART_Transmit+0x26>
 80064cc:	88fb      	ldrh	r3, [r7, #6]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d101      	bne.n	80064d6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e079      	b.n	80065ca <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d101      	bne.n	80064e4 <HAL_UART_Transmit+0x38>
 80064e0:	2302      	movs	r3, #2
 80064e2:	e072      	b.n	80065ca <HAL_UART_Transmit+0x11e>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2221      	movs	r2, #33	; 0x21
 80064f8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064fa:	f7fc f85f 	bl	80025bc <HAL_GetTick>
 80064fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	88fa      	ldrh	r2, [r7, #6]
 8006504:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	88fa      	ldrh	r2, [r7, #6]
 800650c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006518:	d108      	bne.n	800652c <HAL_UART_Transmit+0x80>
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d104      	bne.n	800652c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006522:	2300      	movs	r3, #0
 8006524:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	61bb      	str	r3, [r7, #24]
 800652a:	e003      	b.n	8006534 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006530:	2300      	movs	r3, #0
 8006532:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800653c:	e02c      	b.n	8006598 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	9300      	str	r3, [sp, #0]
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	2200      	movs	r2, #0
 8006546:	2180      	movs	r1, #128	; 0x80
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f000 fb90 	bl	8006c6e <UART_WaitOnFlagUntilTimeout>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d001      	beq.n	8006558 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006554:	2303      	movs	r3, #3
 8006556:	e038      	b.n	80065ca <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d10b      	bne.n	8006576 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	881b      	ldrh	r3, [r3, #0]
 8006562:	461a      	mov	r2, r3
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800656c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	3302      	adds	r3, #2
 8006572:	61bb      	str	r3, [r7, #24]
 8006574:	e007      	b.n	8006586 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	781a      	ldrb	r2, [r3, #0]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	3301      	adds	r3, #1
 8006584:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800658c:	b29b      	uxth	r3, r3
 800658e:	3b01      	subs	r3, #1
 8006590:	b29a      	uxth	r2, r3
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800659e:	b29b      	uxth	r3, r3
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d1cc      	bne.n	800653e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	9300      	str	r3, [sp, #0]
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	2200      	movs	r2, #0
 80065ac:	2140      	movs	r1, #64	; 0x40
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	f000 fb5d 	bl	8006c6e <UART_WaitOnFlagUntilTimeout>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d001      	beq.n	80065be <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	e005      	b.n	80065ca <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2220      	movs	r2, #32
 80065c2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80065c4:	2300      	movs	r3, #0
 80065c6:	e000      	b.n	80065ca <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80065c8:	2302      	movs	r3, #2
  }
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3720      	adds	r7, #32
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
	...

080065d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b088      	sub	sp, #32
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065dc:	2300      	movs	r3, #0
 80065de:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	689a      	ldr	r2, [r3, #8]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	431a      	orrs	r2, r3
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	431a      	orrs	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	69db      	ldr	r3, [r3, #28]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	4ba7      	ldr	r3, [pc, #668]	; (800689c <UART_SetConfig+0x2c8>)
 8006600:	4013      	ands	r3, r2
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	6812      	ldr	r2, [r2, #0]
 8006606:	6979      	ldr	r1, [r7, #20]
 8006608:	430b      	orrs	r3, r1
 800660a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	68da      	ldr	r2, [r3, #12]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	430a      	orrs	r2, r1
 8006620:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	699b      	ldr	r3, [r3, #24]
 8006626:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6a1b      	ldr	r3, [r3, #32]
 800662c:	697a      	ldr	r2, [r7, #20]
 800662e:	4313      	orrs	r3, r2
 8006630:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	697a      	ldr	r2, [r7, #20]
 8006642:	430a      	orrs	r2, r1
 8006644:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a95      	ldr	r2, [pc, #596]	; (80068a0 <UART_SetConfig+0x2cc>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d120      	bne.n	8006692 <UART_SetConfig+0xbe>
 8006650:	4b94      	ldr	r3, [pc, #592]	; (80068a4 <UART_SetConfig+0x2d0>)
 8006652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006656:	f003 0303 	and.w	r3, r3, #3
 800665a:	2b03      	cmp	r3, #3
 800665c:	d816      	bhi.n	800668c <UART_SetConfig+0xb8>
 800665e:	a201      	add	r2, pc, #4	; (adr r2, 8006664 <UART_SetConfig+0x90>)
 8006660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006664:	08006675 	.word	0x08006675
 8006668:	08006681 	.word	0x08006681
 800666c:	0800667b 	.word	0x0800667b
 8006670:	08006687 	.word	0x08006687
 8006674:	2301      	movs	r3, #1
 8006676:	77fb      	strb	r3, [r7, #31]
 8006678:	e14f      	b.n	800691a <UART_SetConfig+0x346>
 800667a:	2302      	movs	r3, #2
 800667c:	77fb      	strb	r3, [r7, #31]
 800667e:	e14c      	b.n	800691a <UART_SetConfig+0x346>
 8006680:	2304      	movs	r3, #4
 8006682:	77fb      	strb	r3, [r7, #31]
 8006684:	e149      	b.n	800691a <UART_SetConfig+0x346>
 8006686:	2308      	movs	r3, #8
 8006688:	77fb      	strb	r3, [r7, #31]
 800668a:	e146      	b.n	800691a <UART_SetConfig+0x346>
 800668c:	2310      	movs	r3, #16
 800668e:	77fb      	strb	r3, [r7, #31]
 8006690:	e143      	b.n	800691a <UART_SetConfig+0x346>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a84      	ldr	r2, [pc, #528]	; (80068a8 <UART_SetConfig+0x2d4>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d132      	bne.n	8006702 <UART_SetConfig+0x12e>
 800669c:	4b81      	ldr	r3, [pc, #516]	; (80068a4 <UART_SetConfig+0x2d0>)
 800669e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066a2:	f003 030c 	and.w	r3, r3, #12
 80066a6:	2b0c      	cmp	r3, #12
 80066a8:	d828      	bhi.n	80066fc <UART_SetConfig+0x128>
 80066aa:	a201      	add	r2, pc, #4	; (adr r2, 80066b0 <UART_SetConfig+0xdc>)
 80066ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b0:	080066e5 	.word	0x080066e5
 80066b4:	080066fd 	.word	0x080066fd
 80066b8:	080066fd 	.word	0x080066fd
 80066bc:	080066fd 	.word	0x080066fd
 80066c0:	080066f1 	.word	0x080066f1
 80066c4:	080066fd 	.word	0x080066fd
 80066c8:	080066fd 	.word	0x080066fd
 80066cc:	080066fd 	.word	0x080066fd
 80066d0:	080066eb 	.word	0x080066eb
 80066d4:	080066fd 	.word	0x080066fd
 80066d8:	080066fd 	.word	0x080066fd
 80066dc:	080066fd 	.word	0x080066fd
 80066e0:	080066f7 	.word	0x080066f7
 80066e4:	2300      	movs	r3, #0
 80066e6:	77fb      	strb	r3, [r7, #31]
 80066e8:	e117      	b.n	800691a <UART_SetConfig+0x346>
 80066ea:	2302      	movs	r3, #2
 80066ec:	77fb      	strb	r3, [r7, #31]
 80066ee:	e114      	b.n	800691a <UART_SetConfig+0x346>
 80066f0:	2304      	movs	r3, #4
 80066f2:	77fb      	strb	r3, [r7, #31]
 80066f4:	e111      	b.n	800691a <UART_SetConfig+0x346>
 80066f6:	2308      	movs	r3, #8
 80066f8:	77fb      	strb	r3, [r7, #31]
 80066fa:	e10e      	b.n	800691a <UART_SetConfig+0x346>
 80066fc:	2310      	movs	r3, #16
 80066fe:	77fb      	strb	r3, [r7, #31]
 8006700:	e10b      	b.n	800691a <UART_SetConfig+0x346>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a69      	ldr	r2, [pc, #420]	; (80068ac <UART_SetConfig+0x2d8>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d120      	bne.n	800674e <UART_SetConfig+0x17a>
 800670c:	4b65      	ldr	r3, [pc, #404]	; (80068a4 <UART_SetConfig+0x2d0>)
 800670e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006712:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006716:	2b30      	cmp	r3, #48	; 0x30
 8006718:	d013      	beq.n	8006742 <UART_SetConfig+0x16e>
 800671a:	2b30      	cmp	r3, #48	; 0x30
 800671c:	d814      	bhi.n	8006748 <UART_SetConfig+0x174>
 800671e:	2b20      	cmp	r3, #32
 8006720:	d009      	beq.n	8006736 <UART_SetConfig+0x162>
 8006722:	2b20      	cmp	r3, #32
 8006724:	d810      	bhi.n	8006748 <UART_SetConfig+0x174>
 8006726:	2b00      	cmp	r3, #0
 8006728:	d002      	beq.n	8006730 <UART_SetConfig+0x15c>
 800672a:	2b10      	cmp	r3, #16
 800672c:	d006      	beq.n	800673c <UART_SetConfig+0x168>
 800672e:	e00b      	b.n	8006748 <UART_SetConfig+0x174>
 8006730:	2300      	movs	r3, #0
 8006732:	77fb      	strb	r3, [r7, #31]
 8006734:	e0f1      	b.n	800691a <UART_SetConfig+0x346>
 8006736:	2302      	movs	r3, #2
 8006738:	77fb      	strb	r3, [r7, #31]
 800673a:	e0ee      	b.n	800691a <UART_SetConfig+0x346>
 800673c:	2304      	movs	r3, #4
 800673e:	77fb      	strb	r3, [r7, #31]
 8006740:	e0eb      	b.n	800691a <UART_SetConfig+0x346>
 8006742:	2308      	movs	r3, #8
 8006744:	77fb      	strb	r3, [r7, #31]
 8006746:	e0e8      	b.n	800691a <UART_SetConfig+0x346>
 8006748:	2310      	movs	r3, #16
 800674a:	77fb      	strb	r3, [r7, #31]
 800674c:	e0e5      	b.n	800691a <UART_SetConfig+0x346>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a57      	ldr	r2, [pc, #348]	; (80068b0 <UART_SetConfig+0x2dc>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d120      	bne.n	800679a <UART_SetConfig+0x1c6>
 8006758:	4b52      	ldr	r3, [pc, #328]	; (80068a4 <UART_SetConfig+0x2d0>)
 800675a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800675e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006762:	2bc0      	cmp	r3, #192	; 0xc0
 8006764:	d013      	beq.n	800678e <UART_SetConfig+0x1ba>
 8006766:	2bc0      	cmp	r3, #192	; 0xc0
 8006768:	d814      	bhi.n	8006794 <UART_SetConfig+0x1c0>
 800676a:	2b80      	cmp	r3, #128	; 0x80
 800676c:	d009      	beq.n	8006782 <UART_SetConfig+0x1ae>
 800676e:	2b80      	cmp	r3, #128	; 0x80
 8006770:	d810      	bhi.n	8006794 <UART_SetConfig+0x1c0>
 8006772:	2b00      	cmp	r3, #0
 8006774:	d002      	beq.n	800677c <UART_SetConfig+0x1a8>
 8006776:	2b40      	cmp	r3, #64	; 0x40
 8006778:	d006      	beq.n	8006788 <UART_SetConfig+0x1b4>
 800677a:	e00b      	b.n	8006794 <UART_SetConfig+0x1c0>
 800677c:	2300      	movs	r3, #0
 800677e:	77fb      	strb	r3, [r7, #31]
 8006780:	e0cb      	b.n	800691a <UART_SetConfig+0x346>
 8006782:	2302      	movs	r3, #2
 8006784:	77fb      	strb	r3, [r7, #31]
 8006786:	e0c8      	b.n	800691a <UART_SetConfig+0x346>
 8006788:	2304      	movs	r3, #4
 800678a:	77fb      	strb	r3, [r7, #31]
 800678c:	e0c5      	b.n	800691a <UART_SetConfig+0x346>
 800678e:	2308      	movs	r3, #8
 8006790:	77fb      	strb	r3, [r7, #31]
 8006792:	e0c2      	b.n	800691a <UART_SetConfig+0x346>
 8006794:	2310      	movs	r3, #16
 8006796:	77fb      	strb	r3, [r7, #31]
 8006798:	e0bf      	b.n	800691a <UART_SetConfig+0x346>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a45      	ldr	r2, [pc, #276]	; (80068b4 <UART_SetConfig+0x2e0>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d125      	bne.n	80067f0 <UART_SetConfig+0x21c>
 80067a4:	4b3f      	ldr	r3, [pc, #252]	; (80068a4 <UART_SetConfig+0x2d0>)
 80067a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067b2:	d017      	beq.n	80067e4 <UART_SetConfig+0x210>
 80067b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067b8:	d817      	bhi.n	80067ea <UART_SetConfig+0x216>
 80067ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067be:	d00b      	beq.n	80067d8 <UART_SetConfig+0x204>
 80067c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067c4:	d811      	bhi.n	80067ea <UART_SetConfig+0x216>
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d003      	beq.n	80067d2 <UART_SetConfig+0x1fe>
 80067ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067ce:	d006      	beq.n	80067de <UART_SetConfig+0x20a>
 80067d0:	e00b      	b.n	80067ea <UART_SetConfig+0x216>
 80067d2:	2300      	movs	r3, #0
 80067d4:	77fb      	strb	r3, [r7, #31]
 80067d6:	e0a0      	b.n	800691a <UART_SetConfig+0x346>
 80067d8:	2302      	movs	r3, #2
 80067da:	77fb      	strb	r3, [r7, #31]
 80067dc:	e09d      	b.n	800691a <UART_SetConfig+0x346>
 80067de:	2304      	movs	r3, #4
 80067e0:	77fb      	strb	r3, [r7, #31]
 80067e2:	e09a      	b.n	800691a <UART_SetConfig+0x346>
 80067e4:	2308      	movs	r3, #8
 80067e6:	77fb      	strb	r3, [r7, #31]
 80067e8:	e097      	b.n	800691a <UART_SetConfig+0x346>
 80067ea:	2310      	movs	r3, #16
 80067ec:	77fb      	strb	r3, [r7, #31]
 80067ee:	e094      	b.n	800691a <UART_SetConfig+0x346>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a30      	ldr	r2, [pc, #192]	; (80068b8 <UART_SetConfig+0x2e4>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d125      	bne.n	8006846 <UART_SetConfig+0x272>
 80067fa:	4b2a      	ldr	r3, [pc, #168]	; (80068a4 <UART_SetConfig+0x2d0>)
 80067fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006800:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006804:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006808:	d017      	beq.n	800683a <UART_SetConfig+0x266>
 800680a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800680e:	d817      	bhi.n	8006840 <UART_SetConfig+0x26c>
 8006810:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006814:	d00b      	beq.n	800682e <UART_SetConfig+0x25a>
 8006816:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800681a:	d811      	bhi.n	8006840 <UART_SetConfig+0x26c>
 800681c:	2b00      	cmp	r3, #0
 800681e:	d003      	beq.n	8006828 <UART_SetConfig+0x254>
 8006820:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006824:	d006      	beq.n	8006834 <UART_SetConfig+0x260>
 8006826:	e00b      	b.n	8006840 <UART_SetConfig+0x26c>
 8006828:	2301      	movs	r3, #1
 800682a:	77fb      	strb	r3, [r7, #31]
 800682c:	e075      	b.n	800691a <UART_SetConfig+0x346>
 800682e:	2302      	movs	r3, #2
 8006830:	77fb      	strb	r3, [r7, #31]
 8006832:	e072      	b.n	800691a <UART_SetConfig+0x346>
 8006834:	2304      	movs	r3, #4
 8006836:	77fb      	strb	r3, [r7, #31]
 8006838:	e06f      	b.n	800691a <UART_SetConfig+0x346>
 800683a:	2308      	movs	r3, #8
 800683c:	77fb      	strb	r3, [r7, #31]
 800683e:	e06c      	b.n	800691a <UART_SetConfig+0x346>
 8006840:	2310      	movs	r3, #16
 8006842:	77fb      	strb	r3, [r7, #31]
 8006844:	e069      	b.n	800691a <UART_SetConfig+0x346>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a1c      	ldr	r2, [pc, #112]	; (80068bc <UART_SetConfig+0x2e8>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d137      	bne.n	80068c0 <UART_SetConfig+0x2ec>
 8006850:	4b14      	ldr	r3, [pc, #80]	; (80068a4 <UART_SetConfig+0x2d0>)
 8006852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006856:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800685a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800685e:	d017      	beq.n	8006890 <UART_SetConfig+0x2bc>
 8006860:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006864:	d817      	bhi.n	8006896 <UART_SetConfig+0x2c2>
 8006866:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800686a:	d00b      	beq.n	8006884 <UART_SetConfig+0x2b0>
 800686c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006870:	d811      	bhi.n	8006896 <UART_SetConfig+0x2c2>
 8006872:	2b00      	cmp	r3, #0
 8006874:	d003      	beq.n	800687e <UART_SetConfig+0x2aa>
 8006876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800687a:	d006      	beq.n	800688a <UART_SetConfig+0x2b6>
 800687c:	e00b      	b.n	8006896 <UART_SetConfig+0x2c2>
 800687e:	2300      	movs	r3, #0
 8006880:	77fb      	strb	r3, [r7, #31]
 8006882:	e04a      	b.n	800691a <UART_SetConfig+0x346>
 8006884:	2302      	movs	r3, #2
 8006886:	77fb      	strb	r3, [r7, #31]
 8006888:	e047      	b.n	800691a <UART_SetConfig+0x346>
 800688a:	2304      	movs	r3, #4
 800688c:	77fb      	strb	r3, [r7, #31]
 800688e:	e044      	b.n	800691a <UART_SetConfig+0x346>
 8006890:	2308      	movs	r3, #8
 8006892:	77fb      	strb	r3, [r7, #31]
 8006894:	e041      	b.n	800691a <UART_SetConfig+0x346>
 8006896:	2310      	movs	r3, #16
 8006898:	77fb      	strb	r3, [r7, #31]
 800689a:	e03e      	b.n	800691a <UART_SetConfig+0x346>
 800689c:	efff69f3 	.word	0xefff69f3
 80068a0:	40011000 	.word	0x40011000
 80068a4:	40023800 	.word	0x40023800
 80068a8:	40004400 	.word	0x40004400
 80068ac:	40004800 	.word	0x40004800
 80068b0:	40004c00 	.word	0x40004c00
 80068b4:	40005000 	.word	0x40005000
 80068b8:	40011400 	.word	0x40011400
 80068bc:	40007800 	.word	0x40007800
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a71      	ldr	r2, [pc, #452]	; (8006a8c <UART_SetConfig+0x4b8>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d125      	bne.n	8006916 <UART_SetConfig+0x342>
 80068ca:	4b71      	ldr	r3, [pc, #452]	; (8006a90 <UART_SetConfig+0x4bc>)
 80068cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80068d4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80068d8:	d017      	beq.n	800690a <UART_SetConfig+0x336>
 80068da:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80068de:	d817      	bhi.n	8006910 <UART_SetConfig+0x33c>
 80068e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068e4:	d00b      	beq.n	80068fe <UART_SetConfig+0x32a>
 80068e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068ea:	d811      	bhi.n	8006910 <UART_SetConfig+0x33c>
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d003      	beq.n	80068f8 <UART_SetConfig+0x324>
 80068f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068f4:	d006      	beq.n	8006904 <UART_SetConfig+0x330>
 80068f6:	e00b      	b.n	8006910 <UART_SetConfig+0x33c>
 80068f8:	2300      	movs	r3, #0
 80068fa:	77fb      	strb	r3, [r7, #31]
 80068fc:	e00d      	b.n	800691a <UART_SetConfig+0x346>
 80068fe:	2302      	movs	r3, #2
 8006900:	77fb      	strb	r3, [r7, #31]
 8006902:	e00a      	b.n	800691a <UART_SetConfig+0x346>
 8006904:	2304      	movs	r3, #4
 8006906:	77fb      	strb	r3, [r7, #31]
 8006908:	e007      	b.n	800691a <UART_SetConfig+0x346>
 800690a:	2308      	movs	r3, #8
 800690c:	77fb      	strb	r3, [r7, #31]
 800690e:	e004      	b.n	800691a <UART_SetConfig+0x346>
 8006910:	2310      	movs	r3, #16
 8006912:	77fb      	strb	r3, [r7, #31]
 8006914:	e001      	b.n	800691a <UART_SetConfig+0x346>
 8006916:	2310      	movs	r3, #16
 8006918:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	69db      	ldr	r3, [r3, #28]
 800691e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006922:	d15b      	bne.n	80069dc <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8006924:	7ffb      	ldrb	r3, [r7, #31]
 8006926:	2b08      	cmp	r3, #8
 8006928:	d827      	bhi.n	800697a <UART_SetConfig+0x3a6>
 800692a:	a201      	add	r2, pc, #4	; (adr r2, 8006930 <UART_SetConfig+0x35c>)
 800692c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006930:	08006955 	.word	0x08006955
 8006934:	0800695d 	.word	0x0800695d
 8006938:	08006965 	.word	0x08006965
 800693c:	0800697b 	.word	0x0800697b
 8006940:	0800696b 	.word	0x0800696b
 8006944:	0800697b 	.word	0x0800697b
 8006948:	0800697b 	.word	0x0800697b
 800694c:	0800697b 	.word	0x0800697b
 8006950:	08006973 	.word	0x08006973
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006954:	f7fd f99e 	bl	8003c94 <HAL_RCC_GetPCLK1Freq>
 8006958:	61b8      	str	r0, [r7, #24]
        break;
 800695a:	e013      	b.n	8006984 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800695c:	f7fd f9ae 	bl	8003cbc <HAL_RCC_GetPCLK2Freq>
 8006960:	61b8      	str	r0, [r7, #24]
        break;
 8006962:	e00f      	b.n	8006984 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006964:	4b4b      	ldr	r3, [pc, #300]	; (8006a94 <UART_SetConfig+0x4c0>)
 8006966:	61bb      	str	r3, [r7, #24]
        break;
 8006968:	e00c      	b.n	8006984 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800696a:	f7fd f8d1 	bl	8003b10 <HAL_RCC_GetSysClockFreq>
 800696e:	61b8      	str	r0, [r7, #24]
        break;
 8006970:	e008      	b.n	8006984 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006976:	61bb      	str	r3, [r7, #24]
        break;
 8006978:	e004      	b.n	8006984 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800697a:	2300      	movs	r3, #0
 800697c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	77bb      	strb	r3, [r7, #30]
        break;
 8006982:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d074      	beq.n	8006a74 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	005a      	lsls	r2, r3, #1
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	085b      	lsrs	r3, r3, #1
 8006994:	441a      	add	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	fbb2 f3f3 	udiv	r3, r2, r3
 800699e:	b29b      	uxth	r3, r3
 80069a0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	2b0f      	cmp	r3, #15
 80069a6:	d916      	bls.n	80069d6 <UART_SetConfig+0x402>
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069ae:	d212      	bcs.n	80069d6 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	f023 030f 	bic.w	r3, r3, #15
 80069b8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	085b      	lsrs	r3, r3, #1
 80069be:	b29b      	uxth	r3, r3
 80069c0:	f003 0307 	and.w	r3, r3, #7
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	89fb      	ldrh	r3, [r7, #14]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	89fa      	ldrh	r2, [r7, #14]
 80069d2:	60da      	str	r2, [r3, #12]
 80069d4:	e04e      	b.n	8006a74 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	77bb      	strb	r3, [r7, #30]
 80069da:	e04b      	b.n	8006a74 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80069dc:	7ffb      	ldrb	r3, [r7, #31]
 80069de:	2b08      	cmp	r3, #8
 80069e0:	d827      	bhi.n	8006a32 <UART_SetConfig+0x45e>
 80069e2:	a201      	add	r2, pc, #4	; (adr r2, 80069e8 <UART_SetConfig+0x414>)
 80069e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e8:	08006a0d 	.word	0x08006a0d
 80069ec:	08006a15 	.word	0x08006a15
 80069f0:	08006a1d 	.word	0x08006a1d
 80069f4:	08006a33 	.word	0x08006a33
 80069f8:	08006a23 	.word	0x08006a23
 80069fc:	08006a33 	.word	0x08006a33
 8006a00:	08006a33 	.word	0x08006a33
 8006a04:	08006a33 	.word	0x08006a33
 8006a08:	08006a2b 	.word	0x08006a2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a0c:	f7fd f942 	bl	8003c94 <HAL_RCC_GetPCLK1Freq>
 8006a10:	61b8      	str	r0, [r7, #24]
        break;
 8006a12:	e013      	b.n	8006a3c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a14:	f7fd f952 	bl	8003cbc <HAL_RCC_GetPCLK2Freq>
 8006a18:	61b8      	str	r0, [r7, #24]
        break;
 8006a1a:	e00f      	b.n	8006a3c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a1c:	4b1d      	ldr	r3, [pc, #116]	; (8006a94 <UART_SetConfig+0x4c0>)
 8006a1e:	61bb      	str	r3, [r7, #24]
        break;
 8006a20:	e00c      	b.n	8006a3c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a22:	f7fd f875 	bl	8003b10 <HAL_RCC_GetSysClockFreq>
 8006a26:	61b8      	str	r0, [r7, #24]
        break;
 8006a28:	e008      	b.n	8006a3c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a2e:	61bb      	str	r3, [r7, #24]
        break;
 8006a30:	e004      	b.n	8006a3c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006a32:	2300      	movs	r3, #0
 8006a34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	77bb      	strb	r3, [r7, #30]
        break;
 8006a3a:	bf00      	nop
    }

    if (pclk != 0U)
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d018      	beq.n	8006a74 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	085a      	lsrs	r2, r3, #1
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	441a      	add	r2, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	2b0f      	cmp	r3, #15
 8006a5c:	d908      	bls.n	8006a70 <UART_SetConfig+0x49c>
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a64:	d204      	bcs.n	8006a70 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	693a      	ldr	r2, [r7, #16]
 8006a6c:	60da      	str	r2, [r3, #12]
 8006a6e:	e001      	b.n	8006a74 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006a80:	7fbb      	ldrb	r3, [r7, #30]
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3720      	adds	r7, #32
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	40007c00 	.word	0x40007c00
 8006a90:	40023800 	.word	0x40023800
 8006a94:	00f42400 	.word	0x00f42400

08006a98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa4:	f003 0301 	and.w	r3, r3, #1
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d00a      	beq.n	8006ac2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	430a      	orrs	r2, r1
 8006ac0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac6:	f003 0302 	and.w	r3, r3, #2
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00a      	beq.n	8006ae4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	430a      	orrs	r2, r1
 8006ae2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae8:	f003 0304 	and.w	r3, r3, #4
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d00a      	beq.n	8006b06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	430a      	orrs	r2, r1
 8006b04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0a:	f003 0308 	and.w	r3, r3, #8
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d00a      	beq.n	8006b28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	430a      	orrs	r2, r1
 8006b26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2c:	f003 0310 	and.w	r3, r3, #16
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d00a      	beq.n	8006b4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	430a      	orrs	r2, r1
 8006b48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4e:	f003 0320 	and.w	r3, r3, #32
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d00a      	beq.n	8006b6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	430a      	orrs	r2, r1
 8006b6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d01a      	beq.n	8006bae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	430a      	orrs	r2, r1
 8006b8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b96:	d10a      	bne.n	8006bae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	430a      	orrs	r2, r1
 8006bac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00a      	beq.n	8006bd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	430a      	orrs	r2, r1
 8006bce:	605a      	str	r2, [r3, #4]
  }
}
 8006bd0:	bf00      	nop
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b086      	sub	sp, #24
 8006be0:	af02      	add	r7, sp, #8
 8006be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006bec:	f7fb fce6 	bl	80025bc <HAL_GetTick>
 8006bf0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 0308 	and.w	r3, r3, #8
 8006bfc:	2b08      	cmp	r3, #8
 8006bfe:	d10e      	bne.n	8006c1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c04:	9300      	str	r3, [sp, #0]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 f82d 	bl	8006c6e <UART_WaitOnFlagUntilTimeout>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d001      	beq.n	8006c1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	e023      	b.n	8006c66 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 0304 	and.w	r3, r3, #4
 8006c28:	2b04      	cmp	r3, #4
 8006c2a:	d10e      	bne.n	8006c4a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c30:	9300      	str	r3, [sp, #0]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f817 	bl	8006c6e <UART_WaitOnFlagUntilTimeout>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d001      	beq.n	8006c4a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c46:	2303      	movs	r3, #3
 8006c48:	e00d      	b.n	8006c66 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2220      	movs	r2, #32
 8006c4e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2220      	movs	r2, #32
 8006c54:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006c64:	2300      	movs	r3, #0
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c6e:	b580      	push	{r7, lr}
 8006c70:	b084      	sub	sp, #16
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	60f8      	str	r0, [r7, #12]
 8006c76:	60b9      	str	r1, [r7, #8]
 8006c78:	603b      	str	r3, [r7, #0]
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c7e:	e05e      	b.n	8006d3e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c86:	d05a      	beq.n	8006d3e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c88:	f7fb fc98 	bl	80025bc <HAL_GetTick>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	69ba      	ldr	r2, [r7, #24]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d302      	bcc.n	8006c9e <UART_WaitOnFlagUntilTimeout+0x30>
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d11b      	bne.n	8006cd6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006cac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	689a      	ldr	r2, [r3, #8]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f022 0201 	bic.w	r2, r2, #1
 8006cbc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2220      	movs	r2, #32
 8006cc2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2220      	movs	r2, #32
 8006cc8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	e043      	b.n	8006d5e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 0304 	and.w	r3, r3, #4
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d02c      	beq.n	8006d3e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	69db      	ldr	r3, [r3, #28]
 8006cea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cf2:	d124      	bne.n	8006d3e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cfc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006d0c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	689a      	ldr	r2, [r3, #8]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f022 0201 	bic.w	r2, r2, #1
 8006d1c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2220      	movs	r2, #32
 8006d22:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2220      	movs	r2, #32
 8006d28:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2220      	movs	r2, #32
 8006d2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	e00f      	b.n	8006d5e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	69da      	ldr	r2, [r3, #28]
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	4013      	ands	r3, r2
 8006d48:	68ba      	ldr	r2, [r7, #8]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	bf0c      	ite	eq
 8006d4e:	2301      	moveq	r3, #1
 8006d50:	2300      	movne	r3, #0
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	461a      	mov	r2, r3
 8006d56:	79fb      	ldrb	r3, [r7, #7]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d091      	beq.n	8006c80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
	...

08006d68 <__libc_init_array>:
 8006d68:	b570      	push	{r4, r5, r6, lr}
 8006d6a:	4d0d      	ldr	r5, [pc, #52]	; (8006da0 <__libc_init_array+0x38>)
 8006d6c:	4c0d      	ldr	r4, [pc, #52]	; (8006da4 <__libc_init_array+0x3c>)
 8006d6e:	1b64      	subs	r4, r4, r5
 8006d70:	10a4      	asrs	r4, r4, #2
 8006d72:	2600      	movs	r6, #0
 8006d74:	42a6      	cmp	r6, r4
 8006d76:	d109      	bne.n	8006d8c <__libc_init_array+0x24>
 8006d78:	4d0b      	ldr	r5, [pc, #44]	; (8006da8 <__libc_init_array+0x40>)
 8006d7a:	4c0c      	ldr	r4, [pc, #48]	; (8006dac <__libc_init_array+0x44>)
 8006d7c:	f000 f864 	bl	8006e48 <_init>
 8006d80:	1b64      	subs	r4, r4, r5
 8006d82:	10a4      	asrs	r4, r4, #2
 8006d84:	2600      	movs	r6, #0
 8006d86:	42a6      	cmp	r6, r4
 8006d88:	d105      	bne.n	8006d96 <__libc_init_array+0x2e>
 8006d8a:	bd70      	pop	{r4, r5, r6, pc}
 8006d8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d90:	4798      	blx	r3
 8006d92:	3601      	adds	r6, #1
 8006d94:	e7ee      	b.n	8006d74 <__libc_init_array+0xc>
 8006d96:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d9a:	4798      	blx	r3
 8006d9c:	3601      	adds	r6, #1
 8006d9e:	e7f2      	b.n	8006d86 <__libc_init_array+0x1e>
 8006da0:	0800748c 	.word	0x0800748c
 8006da4:	0800748c 	.word	0x0800748c
 8006da8:	0800748c 	.word	0x0800748c
 8006dac:	08007490 	.word	0x08007490

08006db0 <memset>:
 8006db0:	4402      	add	r2, r0
 8006db2:	4603      	mov	r3, r0
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d100      	bne.n	8006dba <memset+0xa>
 8006db8:	4770      	bx	lr
 8006dba:	f803 1b01 	strb.w	r1, [r3], #1
 8006dbe:	e7f9      	b.n	8006db4 <memset+0x4>

08006dc0 <__utoa>:
 8006dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dc2:	4c1f      	ldr	r4, [pc, #124]	; (8006e40 <__utoa+0x80>)
 8006dc4:	b08b      	sub	sp, #44	; 0x2c
 8006dc6:	4605      	mov	r5, r0
 8006dc8:	460b      	mov	r3, r1
 8006dca:	466e      	mov	r6, sp
 8006dcc:	f104 0c20 	add.w	ip, r4, #32
 8006dd0:	6820      	ldr	r0, [r4, #0]
 8006dd2:	6861      	ldr	r1, [r4, #4]
 8006dd4:	4637      	mov	r7, r6
 8006dd6:	c703      	stmia	r7!, {r0, r1}
 8006dd8:	3408      	adds	r4, #8
 8006dda:	4564      	cmp	r4, ip
 8006ddc:	463e      	mov	r6, r7
 8006dde:	d1f7      	bne.n	8006dd0 <__utoa+0x10>
 8006de0:	7921      	ldrb	r1, [r4, #4]
 8006de2:	7139      	strb	r1, [r7, #4]
 8006de4:	1e91      	subs	r1, r2, #2
 8006de6:	6820      	ldr	r0, [r4, #0]
 8006de8:	6038      	str	r0, [r7, #0]
 8006dea:	2922      	cmp	r1, #34	; 0x22
 8006dec:	f04f 0100 	mov.w	r1, #0
 8006df0:	d904      	bls.n	8006dfc <__utoa+0x3c>
 8006df2:	7019      	strb	r1, [r3, #0]
 8006df4:	460b      	mov	r3, r1
 8006df6:	4618      	mov	r0, r3
 8006df8:	b00b      	add	sp, #44	; 0x2c
 8006dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dfc:	1e58      	subs	r0, r3, #1
 8006dfe:	4684      	mov	ip, r0
 8006e00:	fbb5 f7f2 	udiv	r7, r5, r2
 8006e04:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8006e08:	fb02 5617 	mls	r6, r2, r7, r5
 8006e0c:	4476      	add	r6, lr
 8006e0e:	460c      	mov	r4, r1
 8006e10:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8006e14:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8006e18:	462e      	mov	r6, r5
 8006e1a:	42b2      	cmp	r2, r6
 8006e1c:	f101 0101 	add.w	r1, r1, #1
 8006e20:	463d      	mov	r5, r7
 8006e22:	d9ed      	bls.n	8006e00 <__utoa+0x40>
 8006e24:	2200      	movs	r2, #0
 8006e26:	545a      	strb	r2, [r3, r1]
 8006e28:	1919      	adds	r1, r3, r4
 8006e2a:	1aa5      	subs	r5, r4, r2
 8006e2c:	42aa      	cmp	r2, r5
 8006e2e:	dae2      	bge.n	8006df6 <__utoa+0x36>
 8006e30:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8006e34:	780e      	ldrb	r6, [r1, #0]
 8006e36:	7006      	strb	r6, [r0, #0]
 8006e38:	3201      	adds	r2, #1
 8006e3a:	f801 5901 	strb.w	r5, [r1], #-1
 8006e3e:	e7f4      	b.n	8006e2a <__utoa+0x6a>
 8006e40:	0800745c 	.word	0x0800745c

08006e44 <utoa>:
 8006e44:	f7ff bfbc 	b.w	8006dc0 <__utoa>

08006e48 <_init>:
 8006e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e4a:	bf00      	nop
 8006e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e4e:	bc08      	pop	{r3}
 8006e50:	469e      	mov	lr, r3
 8006e52:	4770      	bx	lr

08006e54 <_fini>:
 8006e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e56:	bf00      	nop
 8006e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e5a:	bc08      	pop	{r3}
 8006e5c:	469e      	mov	lr, r3
 8006e5e:	4770      	bx	lr
