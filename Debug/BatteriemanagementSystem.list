
BatteriemanagementSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007380  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  08007578  08007578  00017578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079f8  080079f8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080079f8  080079f8  000179f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a00  08007a00  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a00  08007a00  00017a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a04  08007a04  00017a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007a08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  2000000c  08007a14  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  08007a14  00020324  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001be72  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003979  00000000  00000000  0003beac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001320  00000000  00000000  0003f828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001188  00000000  00000000  00040b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c3e6  00000000  00000000  00041cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001adc7  00000000  00000000  0006e0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108e32  00000000  00000000  00088e7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00191caf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e38  00000000  00000000  00191d04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08007560 	.word	0x08007560

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08007560 	.word	0x08007560

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b96e 	b.w	800053c <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468c      	mov	ip, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	f040 8083 	bne.w	800038e <__udivmoddi4+0x116>
 8000288:	428a      	cmp	r2, r1
 800028a:	4617      	mov	r7, r2
 800028c:	d947      	bls.n	800031e <__udivmoddi4+0xa6>
 800028e:	fab2 f282 	clz	r2, r2
 8000292:	b142      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000294:	f1c2 0020 	rsb	r0, r2, #32
 8000298:	fa24 f000 	lsr.w	r0, r4, r0
 800029c:	4091      	lsls	r1, r2
 800029e:	4097      	lsls	r7, r2
 80002a0:	ea40 0c01 	orr.w	ip, r0, r1
 80002a4:	4094      	lsls	r4, r2
 80002a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002aa:	0c23      	lsrs	r3, r4, #16
 80002ac:	fbbc f6f8 	udiv	r6, ip, r8
 80002b0:	fa1f fe87 	uxth.w	lr, r7
 80002b4:	fb08 c116 	mls	r1, r8, r6, ip
 80002b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002bc:	fb06 f10e 	mul.w	r1, r6, lr
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x60>
 80002c4:	18fb      	adds	r3, r7, r3
 80002c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ca:	f080 8119 	bcs.w	8000500 <__udivmoddi4+0x288>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 8116 	bls.w	8000500 <__udivmoddi4+0x288>
 80002d4:	3e02      	subs	r6, #2
 80002d6:	443b      	add	r3, r7
 80002d8:	1a5b      	subs	r3, r3, r1
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e0:	fb08 3310 	mls	r3, r8, r0, r3
 80002e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x8c>
 80002f0:	193c      	adds	r4, r7, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f6:	f080 8105 	bcs.w	8000504 <__udivmoddi4+0x28c>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f240 8102 	bls.w	8000504 <__udivmoddi4+0x28c>
 8000300:	3802      	subs	r0, #2
 8000302:	443c      	add	r4, r7
 8000304:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000308:	eba4 040e 	sub.w	r4, r4, lr
 800030c:	2600      	movs	r6, #0
 800030e:	b11d      	cbz	r5, 8000318 <__udivmoddi4+0xa0>
 8000310:	40d4      	lsrs	r4, r2
 8000312:	2300      	movs	r3, #0
 8000314:	e9c5 4300 	strd	r4, r3, [r5]
 8000318:	4631      	mov	r1, r6
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	b902      	cbnz	r2, 8000322 <__udivmoddi4+0xaa>
 8000320:	deff      	udf	#255	; 0xff
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	2a00      	cmp	r2, #0
 8000328:	d150      	bne.n	80003cc <__udivmoddi4+0x154>
 800032a:	1bcb      	subs	r3, r1, r7
 800032c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000330:	fa1f f887 	uxth.w	r8, r7
 8000334:	2601      	movs	r6, #1
 8000336:	fbb3 fcfe 	udiv	ip, r3, lr
 800033a:	0c21      	lsrs	r1, r4, #16
 800033c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000340:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000344:	fb08 f30c 	mul.w	r3, r8, ip
 8000348:	428b      	cmp	r3, r1
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0xe4>
 800034c:	1879      	adds	r1, r7, r1
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0xe2>
 8000354:	428b      	cmp	r3, r1
 8000356:	f200 80e9 	bhi.w	800052c <__udivmoddi4+0x2b4>
 800035a:	4684      	mov	ip, r0
 800035c:	1ac9      	subs	r1, r1, r3
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1110 	mls	r1, lr, r0, r1
 8000368:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x10c>
 8000374:	193c      	adds	r4, r7, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x10a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80d9 	bhi.w	8000534 <__udivmoddi4+0x2bc>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e7bf      	b.n	800030e <__udivmoddi4+0x96>
 800038e:	428b      	cmp	r3, r1
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0x12e>
 8000392:	2d00      	cmp	r5, #0
 8000394:	f000 80b1 	beq.w	80004fa <__udivmoddi4+0x282>
 8000398:	2600      	movs	r6, #0
 800039a:	e9c5 0100 	strd	r0, r1, [r5]
 800039e:	4630      	mov	r0, r6
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	fab3 f683 	clz	r6, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d14a      	bne.n	8000444 <__udivmoddi4+0x1cc>
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0x140>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 80b8 	bhi.w	8000528 <__udivmoddi4+0x2b0>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb61 0103 	sbc.w	r1, r1, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	468c      	mov	ip, r1
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0a8      	beq.n	8000318 <__udivmoddi4+0xa0>
 80003c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ca:	e7a5      	b.n	8000318 <__udivmoddi4+0xa0>
 80003cc:	f1c2 0320 	rsb	r3, r2, #32
 80003d0:	fa20 f603 	lsr.w	r6, r0, r3
 80003d4:	4097      	lsls	r7, r2
 80003d6:	fa01 f002 	lsl.w	r0, r1, r2
 80003da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003de:	40d9      	lsrs	r1, r3
 80003e0:	4330      	orrs	r0, r6
 80003e2:	0c03      	lsrs	r3, r0, #16
 80003e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003e8:	fa1f f887 	uxth.w	r8, r7
 80003ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f108 	mul.w	r1, r6, r8
 80003f8:	4299      	cmp	r1, r3
 80003fa:	fa04 f402 	lsl.w	r4, r4, r2
 80003fe:	d909      	bls.n	8000414 <__udivmoddi4+0x19c>
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	f106 3cff 	add.w	ip, r6, #4294967295
 8000406:	f080 808d 	bcs.w	8000524 <__udivmoddi4+0x2ac>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 808a 	bls.w	8000524 <__udivmoddi4+0x2ac>
 8000410:	3e02      	subs	r6, #2
 8000412:	443b      	add	r3, r7
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b281      	uxth	r1, r0
 8000418:	fbb3 f0fe 	udiv	r0, r3, lr
 800041c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000420:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000424:	fb00 f308 	mul.w	r3, r0, r8
 8000428:	428b      	cmp	r3, r1
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x1c4>
 800042c:	1879      	adds	r1, r7, r1
 800042e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000432:	d273      	bcs.n	800051c <__udivmoddi4+0x2a4>
 8000434:	428b      	cmp	r3, r1
 8000436:	d971      	bls.n	800051c <__udivmoddi4+0x2a4>
 8000438:	3802      	subs	r0, #2
 800043a:	4439      	add	r1, r7
 800043c:	1acb      	subs	r3, r1, r3
 800043e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000442:	e778      	b.n	8000336 <__udivmoddi4+0xbe>
 8000444:	f1c6 0c20 	rsb	ip, r6, #32
 8000448:	fa03 f406 	lsl.w	r4, r3, r6
 800044c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000450:	431c      	orrs	r4, r3
 8000452:	fa20 f70c 	lsr.w	r7, r0, ip
 8000456:	fa01 f306 	lsl.w	r3, r1, r6
 800045a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800045e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000462:	431f      	orrs	r7, r3
 8000464:	0c3b      	lsrs	r3, r7, #16
 8000466:	fbb1 f9fe 	udiv	r9, r1, lr
 800046a:	fa1f f884 	uxth.w	r8, r4
 800046e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000472:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000476:	fb09 fa08 	mul.w	sl, r9, r8
 800047a:	458a      	cmp	sl, r1
 800047c:	fa02 f206 	lsl.w	r2, r2, r6
 8000480:	fa00 f306 	lsl.w	r3, r0, r6
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x220>
 8000486:	1861      	adds	r1, r4, r1
 8000488:	f109 30ff 	add.w	r0, r9, #4294967295
 800048c:	d248      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 800048e:	458a      	cmp	sl, r1
 8000490:	d946      	bls.n	8000520 <__udivmoddi4+0x2a8>
 8000492:	f1a9 0902 	sub.w	r9, r9, #2
 8000496:	4421      	add	r1, r4
 8000498:	eba1 010a 	sub.w	r1, r1, sl
 800049c:	b2bf      	uxth	r7, r7
 800049e:	fbb1 f0fe 	udiv	r0, r1, lr
 80004a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004aa:	fb00 f808 	mul.w	r8, r0, r8
 80004ae:	45b8      	cmp	r8, r7
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x24a>
 80004b2:	19e7      	adds	r7, r4, r7
 80004b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004b8:	d22e      	bcs.n	8000518 <__udivmoddi4+0x2a0>
 80004ba:	45b8      	cmp	r8, r7
 80004bc:	d92c      	bls.n	8000518 <__udivmoddi4+0x2a0>
 80004be:	3802      	subs	r0, #2
 80004c0:	4427      	add	r7, r4
 80004c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c6:	eba7 0708 	sub.w	r7, r7, r8
 80004ca:	fba0 8902 	umull	r8, r9, r0, r2
 80004ce:	454f      	cmp	r7, r9
 80004d0:	46c6      	mov	lr, r8
 80004d2:	4649      	mov	r1, r9
 80004d4:	d31a      	bcc.n	800050c <__udivmoddi4+0x294>
 80004d6:	d017      	beq.n	8000508 <__udivmoddi4+0x290>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x27a>
 80004da:	ebb3 020e 	subs.w	r2, r3, lr
 80004de:	eb67 0701 	sbc.w	r7, r7, r1
 80004e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004e6:	40f2      	lsrs	r2, r6
 80004e8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ec:	40f7      	lsrs	r7, r6
 80004ee:	e9c5 2700 	strd	r2, r7, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e70b      	b.n	8000318 <__udivmoddi4+0xa0>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0x60>
 8000504:	4618      	mov	r0, r3
 8000506:	e6fd      	b.n	8000304 <__udivmoddi4+0x8c>
 8000508:	4543      	cmp	r3, r8
 800050a:	d2e5      	bcs.n	80004d8 <__udivmoddi4+0x260>
 800050c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000510:	eb69 0104 	sbc.w	r1, r9, r4
 8000514:	3801      	subs	r0, #1
 8000516:	e7df      	b.n	80004d8 <__udivmoddi4+0x260>
 8000518:	4608      	mov	r0, r1
 800051a:	e7d2      	b.n	80004c2 <__udivmoddi4+0x24a>
 800051c:	4660      	mov	r0, ip
 800051e:	e78d      	b.n	800043c <__udivmoddi4+0x1c4>
 8000520:	4681      	mov	r9, r0
 8000522:	e7b9      	b.n	8000498 <__udivmoddi4+0x220>
 8000524:	4666      	mov	r6, ip
 8000526:	e775      	b.n	8000414 <__udivmoddi4+0x19c>
 8000528:	4630      	mov	r0, r6
 800052a:	e74a      	b.n	80003c2 <__udivmoddi4+0x14a>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	4439      	add	r1, r7
 8000532:	e713      	b.n	800035c <__udivmoddi4+0xe4>
 8000534:	3802      	subs	r0, #2
 8000536:	443c      	add	r4, r7
 8000538:	e724      	b.n	8000384 <__udivmoddi4+0x10c>
 800053a:	bf00      	nop

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, size, 1000);
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	b29a      	uxth	r2, r3
 800054e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000552:	6879      	ldr	r1, [r7, #4]
 8000554:	4803      	ldr	r0, [pc, #12]	; (8000564 <uartTransmit+0x24>)
 8000556:	f006 faa7 	bl	8006aa8 <HAL_UART_Transmit>
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	2000029c 	.word	0x2000029c

08000568 <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	6039      	str	r1, [r7, #0]
	char str[11];

	utoa(number, str, base);
 8000572:	683a      	ldr	r2, [r7, #0]
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	4619      	mov	r1, r3
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f006 ffa8 	bl	80074d0 <utoa>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff fe57 	bl	8000238 <strlen>
 800058a:	4603      	mov	r3, r0
 800058c:	b29a      	uxth	r2, r3
 800058e:	f107 010c 	add.w	r1, r7, #12
 8000592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000596:	4803      	ldr	r0, [pc, #12]	; (80005a4 <uartTransmitNumber+0x3c>)
 8000598:	f006 fa86 	bl	8006aa8 <HAL_UART_Transmit>
}
 800059c:	bf00      	nop
 800059e:	3718      	adds	r7, #24
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	2000029c 	.word	0x2000029c

080005a8 <collectHardwareInfo>:


// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
	#define STRING_STM_DEVICE_ID			"\nSTM32 Device ID:\t"
	#define STRING_STM_REVISION				"\nSTM32 Revision ID:\t"
	#define STRING_STM_FREQ					"\nSTM32 CPU-Freq:\t\t"
	#define STRING_STM_UUID					"\nSTM32 UUID:\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 80005ae:	2113      	movs	r1, #19
 80005b0:	483b      	ldr	r0, [pc, #236]	; (80006a0 <collectHardwareInfo+0xf8>)
 80005b2:	f7ff ffc5 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);									// Mikrocontroller Typ
 80005b6:	f002 f9f1 	bl	800299c <HAL_GetDEVID>
 80005ba:	4603      	mov	r3, r0
 80005bc:	210a      	movs	r1, #10
 80005be:	4618      	mov	r0, r3
 80005c0:	f7ff ffd2 	bl	8000568 <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 80005c4:	2115      	movs	r1, #21
 80005c6:	4837      	ldr	r0, [pc, #220]	; (80006a4 <collectHardwareInfo+0xfc>)
 80005c8:	f7ff ffba 	bl	8000540 <uartTransmit>

	switch(HAL_GetREVID())													// Mikrocontroller Revision
 80005cc:	f002 f9da 	bl	8002984 <HAL_GetREVID>
 80005d0:	4603      	mov	r3, r0
 80005d2:	f242 0201 	movw	r2, #8193	; 0x2001
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d016      	beq.n	8000608 <collectHardwareInfo+0x60>
 80005da:	f242 0201 	movw	r2, #8193	; 0x2001
 80005de:	4293      	cmp	r3, r2
 80005e0:	d817      	bhi.n	8000612 <collectHardwareInfo+0x6a>
 80005e2:	f241 0201 	movw	r2, #4097	; 0x1001
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d004      	beq.n	80005f4 <collectHardwareInfo+0x4c>
 80005ea:	f241 0203 	movw	r2, #4099	; 0x1003
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d005      	beq.n	80005fe <collectHardwareInfo+0x56>
 80005f2:	e00e      	b.n	8000612 <collectHardwareInfo+0x6a>
	{
		case 0x1001:
			uartTransmit("Z", 1);
 80005f4:	2101      	movs	r1, #1
 80005f6:	482c      	ldr	r0, [pc, #176]	; (80006a8 <collectHardwareInfo+0x100>)
 80005f8:	f7ff ffa2 	bl	8000540 <uartTransmit>
			break;
 80005fc:	e011      	b.n	8000622 <collectHardwareInfo+0x7a>
		case 0x1003:
			uartTransmit("Y", 1);
 80005fe:	2101      	movs	r1, #1
 8000600:	482a      	ldr	r0, [pc, #168]	; (80006ac <collectHardwareInfo+0x104>)
 8000602:	f7ff ff9d 	bl	8000540 <uartTransmit>
			break;
 8000606:	e00c      	b.n	8000622 <collectHardwareInfo+0x7a>
		case 0x2001:
			uartTransmit("X", 1);
 8000608:	2101      	movs	r1, #1
 800060a:	4829      	ldr	r0, [pc, #164]	; (80006b0 <collectHardwareInfo+0x108>)
 800060c:	f7ff ff98 	bl	8000540 <uartTransmit>
			break;
 8000610:	e007      	b.n	8000622 <collectHardwareInfo+0x7a>
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 8000612:	f002 f9b7 	bl	8002984 <HAL_GetREVID>
 8000616:	4603      	mov	r3, r0
 8000618:	210a      	movs	r1, #10
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff ffa4 	bl	8000568 <uartTransmitNumber>
			break;
 8000620:	bf00      	nop
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 8000622:	2113      	movs	r1, #19
 8000624:	4823      	ldr	r0, [pc, #140]	; (80006b4 <collectHardwareInfo+0x10c>)
 8000626:	f7ff ff8b 	bl	8000540 <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();						// Systemfrequenz ausgeben
 800062a:	f003 fe85 	bl	8004338 <HAL_RCC_GetSysClockFreq>
 800062e:	6078      	str	r0, [r7, #4]
		frequency = frequency/1000000;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4a21      	ldr	r2, [pc, #132]	; (80006b8 <collectHardwareInfo+0x110>)
 8000634:	fba2 2303 	umull	r2, r3, r2, r3
 8000638:	0c9b      	lsrs	r3, r3, #18
 800063a:	607b      	str	r3, [r7, #4]

		uartTransmitNumber(frequency, 10);
 800063c:	210a      	movs	r1, #10
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f7ff ff92 	bl	8000568 <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 8000644:	2104      	movs	r1, #4
 8000646:	481d      	ldr	r0, [pc, #116]	; (80006bc <collectHardwareInfo+0x114>)
 8000648:	f7ff ff7a 	bl	8000540 <uartTransmit>


	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 800064c:	210f      	movs	r1, #15
 800064e:	481c      	ldr	r0, [pc, #112]	; (80006c0 <collectHardwareInfo+0x118>)
 8000650:	f7ff ff76 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);									// UID0 ausgeben
 8000654:	f002 f9b0 	bl	80029b8 <HAL_GetUIDw0>
 8000658:	4603      	mov	r3, r0
 800065a:	2110      	movs	r1, #16
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff ff83 	bl	8000568 <uartTransmitNumber>

	uartTransmit(" ", 1);
 8000662:	2101      	movs	r1, #1
 8000664:	4817      	ldr	r0, [pc, #92]	; (80006c4 <collectHardwareInfo+0x11c>)
 8000666:	f7ff ff6b 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);									// UID1 ausgeben
 800066a:	f002 f9b1 	bl	80029d0 <HAL_GetUIDw1>
 800066e:	4603      	mov	r3, r0
 8000670:	2110      	movs	r1, #16
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff ff78 	bl	8000568 <uartTransmitNumber>

	uartTransmit(" ", 1);
 8000678:	2101      	movs	r1, #1
 800067a:	4812      	ldr	r0, [pc, #72]	; (80006c4 <collectHardwareInfo+0x11c>)
 800067c:	f7ff ff60 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);									// UID2 ausgeben
 8000680:	f002 f9b2 	bl	80029e8 <HAL_GetUIDw2>
 8000684:	4603      	mov	r3, r0
 8000686:	2110      	movs	r1, #16
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff ff6d 	bl	8000568 <uartTransmitNumber>

	uartTransmit("\n", 1);
 800068e:	2101      	movs	r1, #1
 8000690:	480d      	ldr	r0, [pc, #52]	; (80006c8 <collectHardwareInfo+0x120>)
 8000692:	f7ff ff55 	bl	8000540 <uartTransmit>
}
 8000696:	bf00      	nop
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	08007578 	.word	0x08007578
 80006a4:	0800758c 	.word	0x0800758c
 80006a8:	080075a4 	.word	0x080075a4
 80006ac:	080075a8 	.word	0x080075a8
 80006b0:	080075ac 	.word	0x080075ac
 80006b4:	080075b0 	.word	0x080075b0
 80006b8:	431bde83 	.word	0x431bde83
 80006bc:	080075c4 	.word	0x080075c4
 80006c0:	080075cc 	.word	0x080075cc
 80006c4:	080075dc 	.word	0x080075dc
 80006c8:	080075e0 	.word	0x080075e0

080006cc <collectMiddlewareInfo>:
//----------------------------------------------------------------------

// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	#define STRING_CMSIS_VERSION			"\nCMSIS Version:\t\t"
	#define STRING_HAL_VERSION				"\nHAL Version:\t\t"
	#define STRING_RTOS_CMSIS_VERSION		"\nRTOS CMSIS Version:\t"
	#define STRING_RTOS_VERSION				"\nRTOS Version:\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 80006d0:	2112      	movs	r1, #18
 80006d2:	4824      	ldr	r0, [pc, #144]	; (8000764 <collectMiddlewareInfo+0x98>)
 80006d4:	f7ff ff34 	bl	8000540 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);						// CMSIS Version anzeigen
 80006d8:	210a      	movs	r1, #10
 80006da:	2005      	movs	r0, #5
 80006dc:	f7ff ff44 	bl	8000568 <uartTransmitNumber>
	uartTransmit(".", 1);
 80006e0:	2101      	movs	r1, #1
 80006e2:	4821      	ldr	r0, [pc, #132]	; (8000768 <collectMiddlewareInfo+0x9c>)
 80006e4:	f7ff ff2c 	bl	8000540 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);						// CMSIS Version anzeigen
 80006e8:	210a      	movs	r1, #10
 80006ea:	2001      	movs	r0, #1
 80006ec:	f7ff ff3c 	bl	8000568 <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));			// Hal Version anzeigen
 80006f0:	2110      	movs	r1, #16
 80006f2:	481e      	ldr	r0, [pc, #120]	; (800076c <collectMiddlewareInfo+0xa0>)
 80006f4:	f7ff ff24 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 80006f8:	f002 f93a 	bl	8002970 <HAL_GetHalVersion>
 80006fc:	4603      	mov	r3, r0
 80006fe:	0e1b      	lsrs	r3, r3, #24
 8000700:	b2db      	uxtb	r3, r3
 8000702:	210a      	movs	r1, #10
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ff2f 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 800070a:	2101      	movs	r1, #1
 800070c:	4816      	ldr	r0, [pc, #88]	; (8000768 <collectMiddlewareInfo+0x9c>)
 800070e:	f7ff ff17 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 8000712:	f002 f92d 	bl	8002970 <HAL_GetHalVersion>
 8000716:	4603      	mov	r3, r0
 8000718:	0c1b      	lsrs	r3, r3, #16
 800071a:	b2db      	uxtb	r3, r3
 800071c:	210a      	movs	r1, #10
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ff22 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000724:	2101      	movs	r1, #1
 8000726:	4810      	ldr	r0, [pc, #64]	; (8000768 <collectMiddlewareInfo+0x9c>)
 8000728:	f7ff ff0a 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 800072c:	f002 f920 	bl	8002970 <HAL_GetHalVersion>
 8000730:	4603      	mov	r3, r0
 8000732:	0a1b      	lsrs	r3, r3, #8
 8000734:	b2db      	uxtb	r3, r3
 8000736:	210a      	movs	r1, #10
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff ff15 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 800073e:	2101      	movs	r1, #1
 8000740:	4809      	ldr	r0, [pc, #36]	; (8000768 <collectMiddlewareInfo+0x9c>)
 8000742:	f7ff fefd 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 8000746:	f002 f913 	bl	8002970 <HAL_GetHalVersion>
 800074a:	4603      	mov	r3, r0
 800074c:	b2db      	uxtb	r3, r3
 800074e:	210a      	movs	r1, #10
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff ff09 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);						// FreeRTOS Kernel Version anzeigen
#endif

	uartTransmit("\n", 1);
 8000756:	2101      	movs	r1, #1
 8000758:	4805      	ldr	r0, [pc, #20]	; (8000770 <collectMiddlewareInfo+0xa4>)
 800075a:	f7ff fef1 	bl	8000540 <uartTransmit>
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	080075e4 	.word	0x080075e4
 8000768:	080075f8 	.word	0x080075f8
 800076c:	080075fc 	.word	0x080075fc
 8000770:	080075e0 	.word	0x080075e0

08000774 <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
	#define STRING_GIT_TAG_COMMIT			"\nGit Tags commit:\t\t"
	#define STRING_GIT_TAG_DIRTY			"\nGit Dirty commit:\t\t"
	#define STRING_BUILD_DATE				"\nBuild Date:\t\t"
	#define STRING_BUILD_TIME				"\nBuild Time:\t\t"

	uartTransmit(STRING_GIT_COMMIT, sizeof(STRING_GIT_COMMIT));
 8000778:	210f      	movs	r1, #15
 800077a:	4826      	ldr	r0, [pc, #152]	; (8000814 <collectSoftwareInfo+0xa0>)
 800077c:	f7ff fee0 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));							// Git Commit anzeigen
 8000780:	2108      	movs	r1, #8
 8000782:	4825      	ldr	r0, [pc, #148]	; (8000818 <collectSoftwareInfo+0xa4>)
 8000784:	f7ff fedc 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 8000788:	210f      	movs	r1, #15
 800078a:	4824      	ldr	r0, [pc, #144]	; (800081c <collectSoftwareInfo+0xa8>)
 800078c:	f7ff fed8 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));							// Git Branch anzeigen
 8000790:	2104      	movs	r1, #4
 8000792:	4823      	ldr	r0, [pc, #140]	; (8000820 <collectSoftwareInfo+0xac>)
 8000794:	f7ff fed4 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 8000798:	210d      	movs	r1, #13
 800079a:	4822      	ldr	r0, [pc, #136]	; (8000824 <collectSoftwareInfo+0xb0>)
 800079c:	f7ff fed0 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));								// Git Hash anzeigen
 80007a0:	2129      	movs	r1, #41	; 0x29
 80007a2:	4821      	ldr	r0, [pc, #132]	; (8000828 <collectSoftwareInfo+0xb4>)
 80007a4:	f7ff fecc 	bl	8000540 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 80007a8:	2101      	movs	r1, #1
 80007aa:	4820      	ldr	r0, [pc, #128]	; (800082c <collectSoftwareInfo+0xb8>)
 80007ac:	f7ff fec8 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 80007b0:	2115      	movs	r1, #21
 80007b2:	481f      	ldr	r0, [pc, #124]	; (8000830 <collectSoftwareInfo+0xbc>)
 80007b4:	f7ff fec4 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_LAST_TAG, sizeof(GIT_LAST_TAG));						// Git letzten Tags anzeigen
 80007b8:	2105      	movs	r1, #5
 80007ba:	481e      	ldr	r0, [pc, #120]	; (8000834 <collectSoftwareInfo+0xc0>)
 80007bc:	f7ff fec0 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 80007c0:	2114      	movs	r1, #20
 80007c2:	481d      	ldr	r0, [pc, #116]	; (8000838 <collectSoftwareInfo+0xc4>)
 80007c4:	f7ff febc 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_TAG_COMMIT, sizeof(GIT_TAG_COMMIT));					// Git Tags Commit anzeigen
 80007c8:	2108      	movs	r1, #8
 80007ca:	481c      	ldr	r0, [pc, #112]	; (800083c <collectSoftwareInfo+0xc8>)
 80007cc:	f7ff feb8 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_DIRTY, sizeof(STRING_GIT_TAG_DIRTY));
 80007d0:	2115      	movs	r1, #21
 80007d2:	481b      	ldr	r0, [pc, #108]	; (8000840 <collectSoftwareInfo+0xcc>)
 80007d4:	f7ff feb4 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY, sizeof(GIT_TAG_DIRTY));						// Git Dirty Commit anzeigen
 80007d8:	2111      	movs	r1, #17
 80007da:	481a      	ldr	r0, [pc, #104]	; (8000844 <collectSoftwareInfo+0xd0>)
 80007dc:	f7ff feb0 	bl	8000540 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 80007e0:	2101      	movs	r1, #1
 80007e2:	4812      	ldr	r0, [pc, #72]	; (800082c <collectSoftwareInfo+0xb8>)
 80007e4:	f7ff feac 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 80007e8:	210f      	movs	r1, #15
 80007ea:	4817      	ldr	r0, [pc, #92]	; (8000848 <collectSoftwareInfo+0xd4>)
 80007ec:	f7ff fea8 	bl	8000540 <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));							// Kompilierdatum anzeigen
 80007f0:	210b      	movs	r1, #11
 80007f2:	4816      	ldr	r0, [pc, #88]	; (800084c <collectSoftwareInfo+0xd8>)
 80007f4:	f7ff fea4 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 80007f8:	210f      	movs	r1, #15
 80007fa:	4815      	ldr	r0, [pc, #84]	; (8000850 <collectSoftwareInfo+0xdc>)
 80007fc:	f7ff fea0 	bl	8000540 <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));							// Kompilierzeit anzeigen
 8000800:	2109      	movs	r1, #9
 8000802:	4814      	ldr	r0, [pc, #80]	; (8000854 <collectSoftwareInfo+0xe0>)
 8000804:	f7ff fe9c 	bl	8000540 <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8000808:	2101      	movs	r1, #1
 800080a:	4808      	ldr	r0, [pc, #32]	; (800082c <collectSoftwareInfo+0xb8>)
 800080c:	f7ff fe98 	bl	8000540 <uartTransmit>
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	0800760c 	.word	0x0800760c
 8000818:	0800761c 	.word	0x0800761c
 800081c:	08007624 	.word	0x08007624
 8000820:	08007634 	.word	0x08007634
 8000824:	08007638 	.word	0x08007638
 8000828:	08007648 	.word	0x08007648
 800082c:	080075e0 	.word	0x080075e0
 8000830:	08007674 	.word	0x08007674
 8000834:	0800768c 	.word	0x0800768c
 8000838:	08007694 	.word	0x08007694
 800083c:	080076a8 	.word	0x080076a8
 8000840:	080076b0 	.word	0x080076b0
 8000844:	080076c8 	.word	0x080076c8
 8000848:	080076dc 	.word	0x080076dc
 800084c:	080076ec 	.word	0x080076ec
 8000850:	080076f8 	.word	0x080076f8
 8000854:	08007708 	.word	0x08007708

08000858 <collectGitcounts>:
//----------------------------------------------------------------------

// Collects Git count information and prints it
//----------------------------------------------------------------------
void collectGitcounts(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	#define STRING_GIT_OVERALL_COMMIT_COUNT	"\nGit Overall count:\t\t"
	#define STRING_GIT_BRANCH_COMMIT_COUNT	"\nGit Branch commit count:\t\t"
	#define STRING_GIT_ACTIVE_BRANCHES		"\nGit active Branches:\t\t"
	#define STRING_GIT_TAG_COUNT			"\nGit Tags count:\t\t"

	uartTransmit(STRING_GIT_TAG_DIRTY_COUNT, sizeof(STRING_GIT_TAG_DIRTY_COUNT));
 800085c:	2114      	movs	r1, #20
 800085e:	4814      	ldr	r0, [pc, #80]	; (80008b0 <collectGitcounts+0x58>)
 8000860:	f7ff fe6e 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY_COUNT, sizeof(GIT_TAG_DIRTY_COUNT));			// Git zaehle Dirty commits nach letztem Tags und Anzahl anzeigen
 8000864:	2103      	movs	r1, #3
 8000866:	4813      	ldr	r0, [pc, #76]	; (80008b4 <collectGitcounts+0x5c>)
 8000868:	f7ff fe6a 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_OVERALL_COMMIT_COUNT, sizeof(STRING_GIT_OVERALL_COMMIT_COUNT));
 800086c:	2116      	movs	r1, #22
 800086e:	4812      	ldr	r0, [pc, #72]	; (80008b8 <collectGitcounts+0x60>)
 8000870:	f7ff fe66 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_OVERALL_COMMIT_COUNT, sizeof(GIT_OVERALL_COMMIT_COUNT));// Git alle Commits zaehlen und Anzahl anzeigen
 8000874:	2103      	movs	r1, #3
 8000876:	4811      	ldr	r0, [pc, #68]	; (80008bc <collectGitcounts+0x64>)
 8000878:	f7ff fe62 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH_COMMIT_COUNT, sizeof(STRING_GIT_BRANCH_COMMIT_COUNT));
 800087c:	211c      	movs	r1, #28
 800087e:	4810      	ldr	r0, [pc, #64]	; (80008c0 <collectGitcounts+0x68>)
 8000880:	f7ff fe5e 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_BRANCH_COMMIT_COUNT, sizeof(GIT_BRANCH_COMMIT_COUNT));	// Git Branch Commits zaehken und Anzahl anzeigen
 8000884:	2103      	movs	r1, #3
 8000886:	480f      	ldr	r0, [pc, #60]	; (80008c4 <collectGitcounts+0x6c>)
 8000888:	f7ff fe5a 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 800088c:	2115      	movs	r1, #21
 800088e:	480e      	ldr	r0, [pc, #56]	; (80008c8 <collectGitcounts+0x70>)
 8000890:	f7ff fe56 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_ACTIVE_BRANCHES, sizeof(GIT_ACTIVE_BRANCHES));			// Git aktive Branches zaehlen und Anzahl anzeigen
 8000894:	2102      	movs	r1, #2
 8000896:	480d      	ldr	r0, [pc, #52]	; (80008cc <collectGitcounts+0x74>)
 8000898:	f7ff fe52 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 800089c:	2114      	movs	r1, #20
 800089e:	480c      	ldr	r0, [pc, #48]	; (80008d0 <collectGitcounts+0x78>)
 80008a0:	f7ff fe4e 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_TAG_COUNT, sizeof(GIT_TAG_COUNT));						// Git Tags zaehlen und Anzahl anzeigen
 80008a4:	2102      	movs	r1, #2
 80008a6:	480b      	ldr	r0, [pc, #44]	; (80008d4 <collectGitcounts+0x7c>)
 80008a8:	f7ff fe4a 	bl	8000540 <uartTransmit>
}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	08007714 	.word	0x08007714
 80008b4:	08007728 	.word	0x08007728
 80008b8:	0800772c 	.word	0x0800772c
 80008bc:	08007744 	.word	0x08007744
 80008c0:	08007748 	.word	0x08007748
 80008c4:	08007764 	.word	0x08007764
 80008c8:	08007674 	.word	0x08007674
 80008cc:	08007768 	.word	0x08007768
 80008d0:	08007694 	.word	0x08007694
 80008d4:	0800776c 	.word	0x0800776c

080008d8 <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	#define STRING_HARDWARE_TITEL			"\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL			"\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL			"\n\t --Software--\n"
	#define STRING_GIT_COUNTS				"\n\t --Git counts--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 80008dc:	2111      	movs	r1, #17
 80008de:	480e      	ldr	r0, [pc, #56]	; (8000918 <collectSystemInfo+0x40>)
 80008e0:	f7ff fe2e 	bl	8000540 <uartTransmit>
	collectHardwareInfo();													// Sammelt Hardware Informationen und gibt diese ueber Uart aus
 80008e4:	f7ff fe60 	bl	80005a8 <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 80008e8:	2111      	movs	r1, #17
 80008ea:	480c      	ldr	r0, [pc, #48]	; (800091c <collectSystemInfo+0x44>)
 80008ec:	f7ff fe28 	bl	8000540 <uartTransmit>
	collectSoftwareInfo();													// Sammelt Software Informationen und gibt diese ueber Uart aus
 80008f0:	f7ff ff40 	bl	8000774 <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 80008f4:	2113      	movs	r1, #19
 80008f6:	480a      	ldr	r0, [pc, #40]	; (8000920 <collectSystemInfo+0x48>)
 80008f8:	f7ff fe22 	bl	8000540 <uartTransmit>
	collectMiddlewareInfo();												// Sammelt Middleware Informationen und gibt diese ueber Uart aus
 80008fc:	f7ff fee6 	bl	80006cc <collectMiddlewareInfo>

	uartTransmit(STRING_GIT_COUNTS, sizeof(STRING_GIT_COUNTS));
 8000900:	2113      	movs	r1, #19
 8000902:	4808      	ldr	r0, [pc, #32]	; (8000924 <collectSystemInfo+0x4c>)
 8000904:	f7ff fe1c 	bl	8000540 <uartTransmit>
	collectGitcounts();														// Sammelt Git count Informationen und gibt diese ueber Uart aus
 8000908:	f7ff ffa6 	bl	8000858 <collectGitcounts>

	uartTransmit("\n\n\n", 3);
 800090c:	2103      	movs	r1, #3
 800090e:	4806      	ldr	r0, [pc, #24]	; (8000928 <collectSystemInfo+0x50>)
 8000910:	f7ff fe16 	bl	8000540 <uartTransmit>
}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	08007770 	.word	0x08007770
 800091c:	08007784 	.word	0x08007784
 8000920:	08007798 	.word	0x08007798
 8000924:	080077ac 	.word	0x080077ac
 8000928:	080077c0 	.word	0x080077c0

0800092c <readResetSource>:
//----------------------------------------------------------------------

// Collects Reset source Flag microcontroller
//----------------------------------------------------------------------
reset_reason readResetSource(void)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
	reset_reason reset_flags = STARTUP;
 8000932:	2300      	movs	r3, #0
 8000934:	71fb      	strb	r3, [r7, #7]

	// Pruefe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 8000936:	4b25      	ldr	r3, [pc, #148]	; (80009cc <readResetSource+0xa0>)
 8000938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800093a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800093e:	2b00      	cmp	r3, #0
 8000940:	d002      	beq.n	8000948 <readResetSource+0x1c>
	{
		reset_flags += IWDG1;
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	3301      	adds	r3, #1
 8000946:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 8000948:	4b20      	ldr	r3, [pc, #128]	; (80009cc <readResetSource+0xa0>)
 800094a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800094c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000950:	2b00      	cmp	r3, #0
 8000952:	d002      	beq.n	800095a <readResetSource+0x2e>
	{
		reset_flags += WWDG1;
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	3302      	adds	r3, #2
 8000958:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 800095a:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <readResetSource+0xa0>)
 800095c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800095e:	2b00      	cmp	r3, #0
 8000960:	da02      	bge.n	8000968 <readResetSource+0x3c>
	{
		reset_flags += CPURST1;
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	3304      	adds	r3, #4
 8000966:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 8000968:	4b18      	ldr	r3, [pc, #96]	; (80009cc <readResetSource+0xa0>)
 800096a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800096c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000970:	2b00      	cmp	r3, #0
 8000972:	d002      	beq.n	800097a <readResetSource+0x4e>
	{
		reset_flags += BORST1;
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	3308      	adds	r3, #8
 8000978:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 800097a:	4b14      	ldr	r3, [pc, #80]	; (80009cc <readResetSource+0xa0>)
 800097c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800097e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000982:	2b00      	cmp	r3, #0
 8000984:	d002      	beq.n	800098c <readResetSource+0x60>
	{
		reset_flags += PORST1;
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	3310      	adds	r3, #16
 800098a:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 800098c:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <readResetSource+0xa0>)
 800098e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000994:	2b00      	cmp	r3, #0
 8000996:	d002      	beq.n	800099e <readResetSource+0x72>
	{
		reset_flags += SFTRST1;
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	3320      	adds	r3, #32
 800099c:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <readResetSource+0xa0>)
 80009a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80009a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d002      	beq.n	80009b0 <readResetSource+0x84>
	{
		reset_flags += PINRST1;
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	3340      	adds	r3, #64	; 0x40
 80009ae:	71fb      	strb	r3, [r7, #7]
	}

	// Loesche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <readResetSource+0xa0>)
 80009b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80009b4:	4a05      	ldr	r2, [pc, #20]	; (80009cc <readResetSource+0xa0>)
 80009b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80009ba:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
 80009bc:	79fb      	ldrb	r3, [r7, #7]
}
 80009be:	4618      	mov	r0, r3
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	40023800 	.word	0x40023800

080009d0 <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	71fb      	strb	r3, [r7, #7]
	// Returns für Absatz nach Neustart.
	uartTransmit("\r\r\r\r\r\r", 6);
 80009da:	2106      	movs	r1, #6
 80009dc:	482a      	ldr	r0, [pc, #168]	; (8000a88 <printResetSource+0xb8>)
 80009de:	f7ff fdaf 	bl	8000540 <uartTransmit>


	if (reset_flags == STARTUP)											// Regulärer Start
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d104      	bne.n	80009f2 <printResetSource+0x22>
	{
		uartTransmit("Regular Start\r\n", 15);
 80009e8:	210f      	movs	r1, #15
 80009ea:	4828      	ldr	r0, [pc, #160]	; (8000a8c <printResetSource+0xbc>)
 80009ec:	f7ff fda8 	bl	8000540 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 80009f0:	e046      	b.n	8000a80 <printResetSource+0xb0>
		if (reset_flags & IWDG1)											// Interner watchdog Reset
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	f003 0301 	and.w	r3, r3, #1
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d003      	beq.n	8000a04 <printResetSource+0x34>
			uartTransmit("Interner Watchdog Reset\n", 24);
 80009fc:	2118      	movs	r1, #24
 80009fe:	4824      	ldr	r0, [pc, #144]	; (8000a90 <printResetSource+0xc0>)
 8000a00:	f7ff fd9e 	bl	8000540 <uartTransmit>
		if (reset_flags & WWDG1)											// Window watchdog Reset
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d003      	beq.n	8000a16 <printResetSource+0x46>
			uartTransmit("Window Watchdog Reset\n", 22);
 8000a0e:	2116      	movs	r1, #22
 8000a10:	4820      	ldr	r0, [pc, #128]	; (8000a94 <printResetSource+0xc4>)
 8000a12:	f7ff fd95 	bl	8000540 <uartTransmit>
		if (reset_flags & CPURST1)											// CPU Reset
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	f003 0304 	and.w	r3, r3, #4
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d003      	beq.n	8000a28 <printResetSource+0x58>
			uartTransmit("CPU Reset\n", 10);
 8000a20:	210a      	movs	r1, #10
 8000a22:	481d      	ldr	r0, [pc, #116]	; (8000a98 <printResetSource+0xc8>)
 8000a24:	f7ff fd8c 	bl	8000540 <uartTransmit>
		if (reset_flags & BORST1)											// Brown out Reset
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	f003 0308 	and.w	r3, r3, #8
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d003      	beq.n	8000a3a <printResetSource+0x6a>
			uartTransmit("Brown Out Reset\n", 16);
 8000a32:	2110      	movs	r1, #16
 8000a34:	4819      	ldr	r0, [pc, #100]	; (8000a9c <printResetSource+0xcc>)
 8000a36:	f7ff fd83 	bl	8000540 <uartTransmit>
		if (reset_flags & PORST1)											//Power on Reset / Power down Reser
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	f003 0310 	and.w	r3, r3, #16
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d003      	beq.n	8000a4c <printResetSource+0x7c>
			uartTransmit("Power On Reset\n", 15);
 8000a44:	210f      	movs	r1, #15
 8000a46:	4816      	ldr	r0, [pc, #88]	; (8000aa0 <printResetSource+0xd0>)
 8000a48:	f7ff fd7a 	bl	8000540 <uartTransmit>
		if (reset_flags & SFTRST1)											// Software Reset
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	f003 0320 	and.w	r3, r3, #32
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d003      	beq.n	8000a5e <printResetSource+0x8e>
			uartTransmit("Software Reset\n", 15);
 8000a56:	210f      	movs	r1, #15
 8000a58:	4812      	ldr	r0, [pc, #72]	; (8000aa4 <printResetSource+0xd4>)
 8000a5a:	f7ff fd71 	bl	8000540 <uartTransmit>
		if (reset_flags & PINRST1)											//NRST pin
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d003      	beq.n	8000a70 <printResetSource+0xa0>
			uartTransmit("PIN Reset\n", 10);
 8000a68:	210a      	movs	r1, #10
 8000a6a:	480f      	ldr	r0, [pc, #60]	; (8000aa8 <printResetSource+0xd8>)
 8000a6c:	f7ff fd68 	bl	8000540 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
 8000a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	da03      	bge.n	8000a80 <printResetSource+0xb0>
			uartTransmit("RMVF\n", 5);
 8000a78:	2105      	movs	r1, #5
 8000a7a:	480c      	ldr	r0, [pc, #48]	; (8000aac <printResetSource+0xdc>)
 8000a7c:	f7ff fd60 	bl	8000540 <uartTransmit>
}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	080077c4 	.word	0x080077c4
 8000a8c:	080077cc 	.word	0x080077cc
 8000a90:	080077dc 	.word	0x080077dc
 8000a94:	080077f8 	.word	0x080077f8
 8000a98:	08007810 	.word	0x08007810
 8000a9c:	0800781c 	.word	0x0800781c
 8000aa0:	08007830 	.word	0x08007830
 8000aa4:	08007840 	.word	0x08007840
 8000aa8:	08007850 	.word	0x08007850
 8000aac:	0800785c 	.word	0x0800785c

08000ab0 <hal_error>:
//----------------------------------------------------------------------

// Hal Error auswerten und ausgeben
//----------------------------------------------------------------------
void hal_error(uint8_t status)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG
	if (status == HAL_OK) {													// HAL OK
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d104      	bne.n	8000aca <hal_error+0x1a>
		uartTransmit("HAL OK\n", 7);
 8000ac0:	2107      	movs	r1, #7
 8000ac2:	480f      	ldr	r0, [pc, #60]	; (8000b00 <hal_error+0x50>)
 8000ac4:	f7ff fd3c 	bl	8000540 <uartTransmit>
	}
	else if (status == HAL_TIMEOUT) {										// HAL Timeout
		uartTransmit("HAL TIMEOUT\n", 12);
	}
#endif
}
 8000ac8:	e016      	b.n	8000af8 <hal_error+0x48>
	else if (status == HAL_ERROR) {											// HAL Error
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d104      	bne.n	8000ada <hal_error+0x2a>
		uartTransmit("HAL ERROR\n", 10);
 8000ad0:	210a      	movs	r1, #10
 8000ad2:	480c      	ldr	r0, [pc, #48]	; (8000b04 <hal_error+0x54>)
 8000ad4:	f7ff fd34 	bl	8000540 <uartTransmit>
}
 8000ad8:	e00e      	b.n	8000af8 <hal_error+0x48>
	else if (status == HAL_BUSY) {											// HAL Beschaeftigt
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	2b02      	cmp	r3, #2
 8000ade:	d104      	bne.n	8000aea <hal_error+0x3a>
		uartTransmit("HAL BUSY\n", 9);
 8000ae0:	2109      	movs	r1, #9
 8000ae2:	4809      	ldr	r0, [pc, #36]	; (8000b08 <hal_error+0x58>)
 8000ae4:	f7ff fd2c 	bl	8000540 <uartTransmit>
}
 8000ae8:	e006      	b.n	8000af8 <hal_error+0x48>
	else if (status == HAL_TIMEOUT) {										// HAL Timeout
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	2b03      	cmp	r3, #3
 8000aee:	d103      	bne.n	8000af8 <hal_error+0x48>
		uartTransmit("HAL TIMEOUT\n", 12);
 8000af0:	210c      	movs	r1, #12
 8000af2:	4806      	ldr	r0, [pc, #24]	; (8000b0c <hal_error+0x5c>)
 8000af4:	f7ff fd24 	bl	8000540 <uartTransmit>
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	08007864 	.word	0x08007864
 8000b04:	0800786c 	.word	0x0800786c
 8000b08:	08007878 	.word	0x08007878
 8000b0c:	08007884 	.word	0x08007884

08000b10 <imd_status>:
//----------------------------------------------------------------------

// IMD Status einlesen
//----------------------------------------------------------------------
void imd_status(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
	// Einlesen von IMD Ok Pin
	sdc_in.IMD_OK_IN = HAL_GPIO_ReadPin(IMD_OK_IN_GPIO_Port, IMD_OK_IN_Pin);		// IMD OK einlesen
 8000b14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b18:	48c6      	ldr	r0, [pc, #792]	; (8000e34 <imd_status+0x324>)
 8000b1a:	f002 fff1 	bl	8003b00 <HAL_GPIO_ReadPin>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	b2d9      	uxtb	r1, r3
 8000b26:	4ac4      	ldr	r2, [pc, #784]	; (8000e38 <imd_status+0x328>)
 8000b28:	7813      	ldrb	r3, [r2, #0]
 8000b2a:	f361 0300 	bfi	r3, r1, #0, #1
 8000b2e:	7013      	strb	r3, [r2, #0]

	// Abfrage ob IMD Ok ist
	if(sdc_in.IMD_OK_IN == 1)
 8000b30:	4bc1      	ldr	r3, [pc, #772]	; (8000e38 <imd_status+0x328>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	f003 0301 	and.w	r3, r3, #1
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d00f      	beq.n	8000b5e <imd_status+0x4e>
	{
		// Ausgabe IMD OK kommend BMS
		system_out.ImdOK = 1;
 8000b3e:	4abf      	ldr	r2, [pc, #764]	; (8000e3c <imd_status+0x32c>)
 8000b40:	7813      	ldrb	r3, [r2, #0]
 8000b42:	f043 0302 	orr.w	r3, r3, #2
 8000b46:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(IMD_OK_OUT_GPIO_Port, IMD_OK_OUT_Pin, system_out.ImdOK);	// IMD Status von BMS ausgeben
 8000b48:	4bbc      	ldr	r3, [pc, #752]	; (8000e3c <imd_status+0x32c>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	461a      	mov	r2, r3
 8000b54:	2102      	movs	r1, #2
 8000b56:	48ba      	ldr	r0, [pc, #744]	; (8000e40 <imd_status+0x330>)
 8000b58:	f002 ffea 	bl	8003b30 <HAL_GPIO_WritePin>
 8000b5c:	e00e      	b.n	8000b7c <imd_status+0x6c>
	}
	else
	{
		// Ausgabe IMD nicht Ok kommend BMS
		system_out.ImdOK = 0;
 8000b5e:	4ab7      	ldr	r2, [pc, #732]	; (8000e3c <imd_status+0x32c>)
 8000b60:	7813      	ldrb	r3, [r2, #0]
 8000b62:	f36f 0341 	bfc	r3, #1, #1
 8000b66:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(IMD_OK_OUT_GPIO_Port, IMD_OK_OUT_Pin, system_out.ImdOK);	// IMD Status von BMS ausgeben
 8000b68:	4bb4      	ldr	r3, [pc, #720]	; (8000e3c <imd_status+0x32c>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	461a      	mov	r2, r3
 8000b74:	2102      	movs	r1, #2
 8000b76:	48b2      	ldr	r0, [pc, #712]	; (8000e40 <imd_status+0x330>)
 8000b78:	f002 ffda 	bl	8003b30 <HAL_GPIO_WritePin>
	}

#ifdef DEBUG_IMD
	// Ausgabe Frequenz
	uartTransmit("Frequenz: \t", 11);
 8000b7c:	210b      	movs	r1, #11
 8000b7e:	48b1      	ldr	r0, [pc, #708]	; (8000e44 <imd_status+0x334>)
 8000b80:	f7ff fcde 	bl	8000540 <uartTransmit>
	uartTransmitNumber(imd.Frequency, 10);
 8000b84:	4bb0      	ldr	r3, [pc, #704]	; (8000e48 <imd_status+0x338>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	210a      	movs	r1, #10
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff fce9 	bl	8000568 <uartTransmitNumber>
	uartTransmit("\n", 1);
 8000b96:	2101      	movs	r1, #1
 8000b98:	48ac      	ldr	r0, [pc, #688]	; (8000e4c <imd_status+0x33c>)
 8000b9a:	f7ff fcd1 	bl	8000540 <uartTransmit>

	// Ausgabe DutyCycle
	uartTransmit("DutyCycle: \t", 12);
 8000b9e:	210c      	movs	r1, #12
 8000ba0:	48ab      	ldr	r0, [pc, #684]	; (8000e50 <imd_status+0x340>)
 8000ba2:	f7ff fccd 	bl	8000540 <uartTransmit>
	uartTransmitNumber(imd.DutyCycle, 10);
 8000ba6:	4ba8      	ldr	r3, [pc, #672]	; (8000e48 <imd_status+0x338>)
 8000ba8:	791b      	ldrb	r3, [r3, #4]
 8000baa:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	210a      	movs	r1, #10
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff fcd8 	bl	8000568 <uartTransmitNumber>
	uartTransmit("\n", 1);
 8000bb8:	2101      	movs	r1, #1
 8000bba:	48a4      	ldr	r0, [pc, #656]	; (8000e4c <imd_status+0x33c>)
 8000bbc:	f7ff fcc0 	bl	8000540 <uartTransmit>
#endif

	// IMD PWM abfragen
	switch (imd.Frequency)
 8000bc0:	4ba1      	ldr	r3, [pc, #644]	; (8000e48 <imd_status+0x338>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	2b33      	cmp	r3, #51	; 0x33
 8000bcc:	f200 81ce 	bhi.w	8000f6c <imd_status+0x45c>
 8000bd0:	a201      	add	r2, pc, #4	; (adr r2, 8000bd8 <imd_status+0xc8>)
 8000bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd6:	bf00      	nop
 8000bd8:	08000ca9 	.word	0x08000ca9
 8000bdc:	08000ca9 	.word	0x08000ca9
 8000be0:	08000f6d 	.word	0x08000f6d
 8000be4:	08000f6d 	.word	0x08000f6d
 8000be8:	08000f6d 	.word	0x08000f6d
 8000bec:	08000f6d 	.word	0x08000f6d
 8000bf0:	08000f6d 	.word	0x08000f6d
 8000bf4:	08000f6d 	.word	0x08000f6d
 8000bf8:	08000f6d 	.word	0x08000f6d
 8000bfc:	08000d0d 	.word	0x08000d0d
 8000c00:	08000d0d 	.word	0x08000d0d
 8000c04:	08000d0d 	.word	0x08000d0d
 8000c08:	08000f6d 	.word	0x08000f6d
 8000c0c:	08000f6d 	.word	0x08000f6d
 8000c10:	08000f6d 	.word	0x08000f6d
 8000c14:	08000f6d 	.word	0x08000f6d
 8000c18:	08000f6d 	.word	0x08000f6d
 8000c1c:	08000f6d 	.word	0x08000f6d
 8000c20:	08000f6d 	.word	0x08000f6d
 8000c24:	08000da1 	.word	0x08000da1
 8000c28:	08000da1 	.word	0x08000da1
 8000c2c:	08000da1 	.word	0x08000da1
 8000c30:	08000f6d 	.word	0x08000f6d
 8000c34:	08000f6d 	.word	0x08000f6d
 8000c38:	08000f6d 	.word	0x08000f6d
 8000c3c:	08000f6d 	.word	0x08000f6d
 8000c40:	08000f6d 	.word	0x08000f6d
 8000c44:	08000f6d 	.word	0x08000f6d
 8000c48:	08000f6d 	.word	0x08000f6d
 8000c4c:	08000e61 	.word	0x08000e61
 8000c50:	08000e61 	.word	0x08000e61
 8000c54:	08000e61 	.word	0x08000e61
 8000c58:	08000f6d 	.word	0x08000f6d
 8000c5c:	08000f6d 	.word	0x08000f6d
 8000c60:	08000f6d 	.word	0x08000f6d
 8000c64:	08000f6d 	.word	0x08000f6d
 8000c68:	08000f6d 	.word	0x08000f6d
 8000c6c:	08000f6d 	.word	0x08000f6d
 8000c70:	08000f6d 	.word	0x08000f6d
 8000c74:	08000ecd 	.word	0x08000ecd
 8000c78:	08000ecd 	.word	0x08000ecd
 8000c7c:	08000ecd 	.word	0x08000ecd
 8000c80:	08000f6d 	.word	0x08000f6d
 8000c84:	08000f6d 	.word	0x08000f6d
 8000c88:	08000f6d 	.word	0x08000f6d
 8000c8c:	08000f6d 	.word	0x08000f6d
 8000c90:	08000f6d 	.word	0x08000f6d
 8000c94:	08000f6d 	.word	0x08000f6d
 8000c98:	08000f6d 	.word	0x08000f6d
 8000c9c:	08000f1d 	.word	0x08000f1d
 8000ca0:	08000f1d 	.word	0x08000f1d
 8000ca4:	08000f1d 	.word	0x08000f1d
	{
		case 1:
		case 0:																		// Case 0 Hz
			// PWM Pin einlesen
			system_in.IMD_PWM = HAL_GPIO_ReadPin(IMD_PWM_GPIO_Port, IMD_PWM_Pin);
 8000ca8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cac:	4861      	ldr	r0, [pc, #388]	; (8000e34 <imd_status+0x324>)
 8000cae:	f002 ff27 	bl	8003b00 <HAL_GPIO_ReadPin>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	f003 0301 	and.w	r3, r3, #1
 8000cb8:	b2d9      	uxtb	r1, r3
 8000cba:	4a66      	ldr	r2, [pc, #408]	; (8000e54 <imd_status+0x344>)
 8000cbc:	7813      	ldrb	r3, [r2, #0]
 8000cbe:	f361 1304 	bfi	r3, r1, #4, #1
 8000cc2:	7013      	strb	r3, [r2, #0]

			// IMD-Widerstand auf Null setzen
			imd.Resistanc = 0;
 8000cc4:	4a60      	ldr	r2, [pc, #384]	; (8000e48 <imd_status+0x338>)
 8000cc6:	6813      	ldr	r3, [r2, #0]
 8000cc8:	f36f 1397 	bfc	r3, #6, #18
 8000ccc:	6013      	str	r3, [r2, #0]

			// Wenn IMD 1 ist
			if (system_in.IMD_PWM == 1)
 8000cce:	4b61      	ldr	r3, [pc, #388]	; (8000e54 <imd_status+0x344>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	f003 0310 	and.w	r3, r3, #16
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d00c      	beq.n	8000cf6 <imd_status+0x1e6>
			{
				// IMD Status speichern
				system_in.IMD_PWM_STATUS = IMD_KURZSCHLUSS_KL15;					// Kurzschluss von HV nach Pluspol
 8000cdc:	4a5d      	ldr	r2, [pc, #372]	; (8000e54 <imd_status+0x344>)
 8000cde:	7813      	ldrb	r3, [r2, #0]
 8000ce0:	2106      	movs	r1, #6
 8000ce2:	f361 0303 	bfi	r3, r1, #0, #4
 8000ce6:	7013      	strb	r3, [r2, #0]
				imd.PWM_STATUS = IMD_KURZSCHLUSS_KL15;								// Kurzschluss von HV nach Pluspol
 8000ce8:	4a57      	ldr	r2, [pc, #348]	; (8000e48 <imd_status+0x338>)
 8000cea:	78d3      	ldrb	r3, [r2, #3]
 8000cec:	2106      	movs	r1, #6
 8000cee:	f361 0303 	bfi	r3, r1, #0, #4
 8000cf2:	70d3      	strb	r3, [r2, #3]
			{
				// IMD Status speichern
				system_in.IMD_PWM_STATUS = IMD_KURZSCHLUSS_GND;						// Kurzschluss von HV nach Masse
				imd.PWM_STATUS = IMD_KURZSCHLUSS_GND;								// Kurzschluss von HV nach Masse
			}
			break;
 8000cf4:	e147      	b.n	8000f86 <imd_status+0x476>
				system_in.IMD_PWM_STATUS = IMD_KURZSCHLUSS_GND;						// Kurzschluss von HV nach Masse
 8000cf6:	4a57      	ldr	r2, [pc, #348]	; (8000e54 <imd_status+0x344>)
 8000cf8:	7813      	ldrb	r3, [r2, #0]
 8000cfa:	f36f 0303 	bfc	r3, #0, #4
 8000cfe:	7013      	strb	r3, [r2, #0]
				imd.PWM_STATUS = IMD_KURZSCHLUSS_GND;								// Kurzschluss von HV nach Masse
 8000d00:	4a51      	ldr	r2, [pc, #324]	; (8000e48 <imd_status+0x338>)
 8000d02:	78d3      	ldrb	r3, [r2, #3]
 8000d04:	f36f 0303 	bfc	r3, #0, #4
 8000d08:	70d3      	strb	r3, [r2, #3]
			break;
 8000d0a:	e13c      	b.n	8000f86 <imd_status+0x476>

		case 9:
		case 11:
		case 10:																	// Case 10 Hz
			// IMD Status speichern
			system_in.IMD_PWM_STATUS = IMD_NORMAL;									// IMD funktioniert normal
 8000d0c:	4a51      	ldr	r2, [pc, #324]	; (8000e54 <imd_status+0x344>)
 8000d0e:	7813      	ldrb	r3, [r2, #0]
 8000d10:	2101      	movs	r1, #1
 8000d12:	f361 0303 	bfi	r3, r1, #0, #4
 8000d16:	7013      	strb	r3, [r2, #0]
			imd.PWM_STATUS = IMD_NORMAL;											// IMD funktioniert normal
 8000d18:	4a4b      	ldr	r2, [pc, #300]	; (8000e48 <imd_status+0x338>)
 8000d1a:	78d3      	ldrb	r3, [r2, #3]
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	f361 0303 	bfi	r3, r1, #0, #4
 8000d22:	70d3      	strb	r3, [r2, #3]

			// DutyCycle abfragen
			if (imd.DutyCycle > 5 && imd.DutyCycle < 95)							// IMD PWM
 8000d24:	4b48      	ldr	r3, [pc, #288]	; (8000e48 <imd_status+0x338>)
 8000d26:	791b      	ldrb	r3, [r3, #4]
 8000d28:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	2b05      	cmp	r3, #5
 8000d30:	d929      	bls.n	8000d86 <imd_status+0x276>
 8000d32:	4b45      	ldr	r3, [pc, #276]	; (8000e48 <imd_status+0x338>)
 8000d34:	791b      	ldrb	r3, [r3, #4]
 8000d36:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	2b5e      	cmp	r3, #94	; 0x5e
 8000d3e:	d822      	bhi.n	8000d86 <imd_status+0x276>
			{
				// Widerstand berechnen
				imd.Resistanc = 90 * 1200 / (imd.DutyCycle - 5) - 1200;				// Angabe in kOhm
 8000d40:	4b41      	ldr	r3, [pc, #260]	; (8000e48 <imd_status+0x338>)
 8000d42:	791b      	ldrb	r3, [r3, #4]
 8000d44:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	3b05      	subs	r3, #5
 8000d4c:	4a42      	ldr	r2, [pc, #264]	; (8000e58 <imd_status+0x348>)
 8000d4e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d52:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8000d56:	f3c3 0111 	ubfx	r1, r3, #0, #18
 8000d5a:	4a3b      	ldr	r2, [pc, #236]	; (8000e48 <imd_status+0x338>)
 8000d5c:	6813      	ldr	r3, [r2, #0]
 8000d5e:	f361 1397 	bfi	r3, r1, #6, #18
 8000d62:	6013      	str	r3, [r2, #0]

#ifdef DEBUG_IMD
				// Ausgabe Widerstandswert
				uartTransmit("Widerstand: \t", 13);
 8000d64:	210d      	movs	r1, #13
 8000d66:	483d      	ldr	r0, [pc, #244]	; (8000e5c <imd_status+0x34c>)
 8000d68:	f7ff fbea 	bl	8000540 <uartTransmit>
				uartTransmitNumber(imd.Resistanc, 10);
 8000d6c:	4b36      	ldr	r3, [pc, #216]	; (8000e48 <imd_status+0x338>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f3c3 1391 	ubfx	r3, r3, #6, #18
 8000d74:	210a      	movs	r1, #10
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fbf6 	bl	8000568 <uartTransmitNumber>
				uartTransmit("\n", 1);
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	4833      	ldr	r0, [pc, #204]	; (8000e4c <imd_status+0x33c>)
 8000d80:	f7ff fbde 	bl	8000540 <uartTransmit>
			{
				// IMD Status speichern
				system_in.IMD_PWM_STATUS = IMD_DUTY_ERROR;							// Fehlerausgabe
				imd.PWM_STATUS = IMD_DUTY_ERROR;									// Fehlerausgabe
			}
			break;
 8000d84:	e0ff      	b.n	8000f86 <imd_status+0x476>
				system_in.IMD_PWM_STATUS = IMD_DUTY_ERROR;							// Fehlerausgabe
 8000d86:	4a33      	ldr	r2, [pc, #204]	; (8000e54 <imd_status+0x344>)
 8000d88:	7813      	ldrb	r3, [r2, #0]
 8000d8a:	2108      	movs	r1, #8
 8000d8c:	f361 0303 	bfi	r3, r1, #0, #4
 8000d90:	7013      	strb	r3, [r2, #0]
				imd.PWM_STATUS = IMD_DUTY_ERROR;									// Fehlerausgabe
 8000d92:	4a2d      	ldr	r2, [pc, #180]	; (8000e48 <imd_status+0x338>)
 8000d94:	78d3      	ldrb	r3, [r2, #3]
 8000d96:	2108      	movs	r1, #8
 8000d98:	f361 0303 	bfi	r3, r1, #0, #4
 8000d9c:	70d3      	strb	r3, [r2, #3]
			break;
 8000d9e:	e0f2      	b.n	8000f86 <imd_status+0x476>

		case 19:
		case 21:
		case 20:																	// Case 20 Hz
			// IMD Status speichern
			system_in.IMD_PWM_STATUS = IMD_UNTERSPANNUNG;							// Unterspannung an HV erkannt
 8000da0:	4a2c      	ldr	r2, [pc, #176]	; (8000e54 <imd_status+0x344>)
 8000da2:	7813      	ldrb	r3, [r2, #0]
 8000da4:	2102      	movs	r1, #2
 8000da6:	f361 0303 	bfi	r3, r1, #0, #4
 8000daa:	7013      	strb	r3, [r2, #0]
			imd.PWM_STATUS = IMD_UNTERSPANNUNG;										// Unterspannung an HV erkannt
 8000dac:	4a26      	ldr	r2, [pc, #152]	; (8000e48 <imd_status+0x338>)
 8000dae:	78d3      	ldrb	r3, [r2, #3]
 8000db0:	2102      	movs	r1, #2
 8000db2:	f361 0303 	bfi	r3, r1, #0, #4
 8000db6:	70d3      	strb	r3, [r2, #3]

			// DutyCycle abfragen
			if (imd.DutyCycle > 5 && imd.DutyCycle < 95)							// IMD PWM
 8000db8:	4b23      	ldr	r3, [pc, #140]	; (8000e48 <imd_status+0x338>)
 8000dba:	791b      	ldrb	r3, [r3, #4]
 8000dbc:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	2b05      	cmp	r3, #5
 8000dc4:	d929      	bls.n	8000e1a <imd_status+0x30a>
 8000dc6:	4b20      	ldr	r3, [pc, #128]	; (8000e48 <imd_status+0x338>)
 8000dc8:	791b      	ldrb	r3, [r3, #4]
 8000dca:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	2b5e      	cmp	r3, #94	; 0x5e
 8000dd2:	d822      	bhi.n	8000e1a <imd_status+0x30a>
			{
				// Widerstand berechnen
				imd.Resistanc = 90 * 1200 / (imd.DutyCycle - 5) - 1200;				// Angabe in kOhm
 8000dd4:	4b1c      	ldr	r3, [pc, #112]	; (8000e48 <imd_status+0x338>)
 8000dd6:	791b      	ldrb	r3, [r3, #4]
 8000dd8:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	3b05      	subs	r3, #5
 8000de0:	4a1d      	ldr	r2, [pc, #116]	; (8000e58 <imd_status+0x348>)
 8000de2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000de6:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8000dea:	f3c3 0111 	ubfx	r1, r3, #0, #18
 8000dee:	4a16      	ldr	r2, [pc, #88]	; (8000e48 <imd_status+0x338>)
 8000df0:	6813      	ldr	r3, [r2, #0]
 8000df2:	f361 1397 	bfi	r3, r1, #6, #18
 8000df6:	6013      	str	r3, [r2, #0]

#ifdef DEBUG_IMD
				// Ausgabe Widerstandswert
				uartTransmit("Widerstand: \t", 13);
 8000df8:	210d      	movs	r1, #13
 8000dfa:	4818      	ldr	r0, [pc, #96]	; (8000e5c <imd_status+0x34c>)
 8000dfc:	f7ff fba0 	bl	8000540 <uartTransmit>
				uartTransmitNumber(imd.Resistanc, 10);
 8000e00:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <imd_status+0x338>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f3c3 1391 	ubfx	r3, r3, #6, #18
 8000e08:	210a      	movs	r1, #10
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fbac 	bl	8000568 <uartTransmitNumber>
				uartTransmit("\n", 1);
 8000e10:	2101      	movs	r1, #1
 8000e12:	480e      	ldr	r0, [pc, #56]	; (8000e4c <imd_status+0x33c>)
 8000e14:	f7ff fb94 	bl	8000540 <uartTransmit>
			{
				// IMD Status speichern
				system_in.IMD_PWM_STATUS = IMD_DUTY_ERROR;							// Fehlerausgabe
				imd.PWM_STATUS = IMD_DUTY_ERROR;									// Fehlerausgabe
			}
			break;
 8000e18:	e0b5      	b.n	8000f86 <imd_status+0x476>
				system_in.IMD_PWM_STATUS = IMD_DUTY_ERROR;							// Fehlerausgabe
 8000e1a:	4a0e      	ldr	r2, [pc, #56]	; (8000e54 <imd_status+0x344>)
 8000e1c:	7813      	ldrb	r3, [r2, #0]
 8000e1e:	2108      	movs	r1, #8
 8000e20:	f361 0303 	bfi	r3, r1, #0, #4
 8000e24:	7013      	strb	r3, [r2, #0]
				imd.PWM_STATUS = IMD_DUTY_ERROR;									// Fehlerausgabe
 8000e26:	4a08      	ldr	r2, [pc, #32]	; (8000e48 <imd_status+0x338>)
 8000e28:	78d3      	ldrb	r3, [r2, #3]
 8000e2a:	2108      	movs	r1, #8
 8000e2c:	f361 0303 	bfi	r3, r1, #0, #4
 8000e30:	70d3      	strb	r3, [r2, #3]
			break;
 8000e32:	e0a8      	b.n	8000f86 <imd_status+0x476>
 8000e34:	40021000 	.word	0x40021000
 8000e38:	20000054 	.word	0x20000054
 8000e3c:	20000040 	.word	0x20000040
 8000e40:	40020000 	.word	0x40020000
 8000e44:	080078c0 	.word	0x080078c0
 8000e48:	20000038 	.word	0x20000038
 8000e4c:	080078cc 	.word	0x080078cc
 8000e50:	080078d0 	.word	0x080078d0
 8000e54:	20000044 	.word	0x20000044
 8000e58:	0001a5e0 	.word	0x0001a5e0
 8000e5c:	080078e0 	.word	0x080078e0

		case 29:
		case 31:
		case 30:																	// Case 30 Hz
			// IMD Status speichern
			system_in.IMD_PWM_STATUS = IMD_SCHNELLSTART;							// Schnellstartmessung
 8000e60:	4a5c      	ldr	r2, [pc, #368]	; (8000fd4 <imd_status+0x4c4>)
 8000e62:	7813      	ldrb	r3, [r2, #0]
 8000e64:	2103      	movs	r1, #3
 8000e66:	f361 0303 	bfi	r3, r1, #0, #4
 8000e6a:	7013      	strb	r3, [r2, #0]
			imd.PWM_STATUS = IMD_SCHNELLSTART;										// Schnellstartmessung
 8000e6c:	4a5a      	ldr	r2, [pc, #360]	; (8000fd8 <imd_status+0x4c8>)
 8000e6e:	78d3      	ldrb	r3, [r2, #3]
 8000e70:	2103      	movs	r1, #3
 8000e72:	f361 0303 	bfi	r3, r1, #0, #4
 8000e76:	70d3      	strb	r3, [r2, #3]

			// DutyCycle abfragen
			if (imd.DutyCycle > 5 && imd.DutyCycle < 11)							// IMD Gut
 8000e78:	4b57      	ldr	r3, [pc, #348]	; (8000fd8 <imd_status+0x4c8>)
 8000e7a:	791b      	ldrb	r3, [r3, #4]
 8000e7c:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	2b05      	cmp	r3, #5
 8000e84:	d906      	bls.n	8000e94 <imd_status+0x384>
 8000e86:	4b54      	ldr	r3, [pc, #336]	; (8000fd8 <imd_status+0x4c8>)
 8000e88:	791b      	ldrb	r3, [r3, #4]
 8000e8a:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	2b0a      	cmp	r3, #10
 8000e92:	d91a      	bls.n	8000eca <imd_status+0x3ba>
			{

			}
			else if (imd.DutyCycle > 89 && imd.DutyCycle < 95)						// IMD Schlecht
 8000e94:	4b50      	ldr	r3, [pc, #320]	; (8000fd8 <imd_status+0x4c8>)
 8000e96:	791b      	ldrb	r3, [r3, #4]
 8000e98:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	2b59      	cmp	r3, #89	; 0x59
 8000ea0:	d906      	bls.n	8000eb0 <imd_status+0x3a0>
 8000ea2:	4b4d      	ldr	r3, [pc, #308]	; (8000fd8 <imd_status+0x4c8>)
 8000ea4:	791b      	ldrb	r3, [r3, #4]
 8000ea6:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	2b5e      	cmp	r3, #94	; 0x5e
 8000eae:	d90c      	bls.n	8000eca <imd_status+0x3ba>
			}
			// Falls DutyCycle nicht im Wertebereich ist
			else																	// IMD Invalid
			{
				// IMD Status speichern
				system_in.IMD_PWM_STATUS = IMD_DUTY_ERROR;							// Fehlerausgabe
 8000eb0:	4a48      	ldr	r2, [pc, #288]	; (8000fd4 <imd_status+0x4c4>)
 8000eb2:	7813      	ldrb	r3, [r2, #0]
 8000eb4:	2108      	movs	r1, #8
 8000eb6:	f361 0303 	bfi	r3, r1, #0, #4
 8000eba:	7013      	strb	r3, [r2, #0]
				imd.PWM_STATUS = IMD_DUTY_ERROR;									// Fehlerausgabe
 8000ebc:	4a46      	ldr	r2, [pc, #280]	; (8000fd8 <imd_status+0x4c8>)
 8000ebe:	78d3      	ldrb	r3, [r2, #3]
 8000ec0:	2108      	movs	r1, #8
 8000ec2:	f361 0303 	bfi	r3, r1, #0, #4
 8000ec6:	70d3      	strb	r3, [r2, #3]
			}
			break;
 8000ec8:	e05d      	b.n	8000f86 <imd_status+0x476>
 8000eca:	e05c      	b.n	8000f86 <imd_status+0x476>

		case 39:
		case 41:
		case 40:																	// Case 40 Hz
			// IMD Status speichern
			system_in.IMD_PWM_STATUS = IMD_GERAETEFEHLER;							// Geraetefehler
 8000ecc:	4a41      	ldr	r2, [pc, #260]	; (8000fd4 <imd_status+0x4c4>)
 8000ece:	7813      	ldrb	r3, [r2, #0]
 8000ed0:	2104      	movs	r1, #4
 8000ed2:	f361 0303 	bfi	r3, r1, #0, #4
 8000ed6:	7013      	strb	r3, [r2, #0]
			imd.PWM_STATUS = IMD_GERAETEFEHLER;										// Geraetefehler
 8000ed8:	4a3f      	ldr	r2, [pc, #252]	; (8000fd8 <imd_status+0x4c8>)
 8000eda:	78d3      	ldrb	r3, [r2, #3]
 8000edc:	2104      	movs	r1, #4
 8000ede:	f361 0303 	bfi	r3, r1, #0, #4
 8000ee2:	70d3      	strb	r3, [r2, #3]

			// DutyCyle abfragen
			if (imd.DutyCycle > 47 && imd.DutyCycle < 53)							// IMD PWM
 8000ee4:	4b3c      	ldr	r3, [pc, #240]	; (8000fd8 <imd_status+0x4c8>)
 8000ee6:	791b      	ldrb	r3, [r3, #4]
 8000ee8:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	2b2f      	cmp	r3, #47	; 0x2f
 8000ef0:	d906      	bls.n	8000f00 <imd_status+0x3f0>
 8000ef2:	4b39      	ldr	r3, [pc, #228]	; (8000fd8 <imd_status+0x4c8>)
 8000ef4:	791b      	ldrb	r3, [r3, #4]
 8000ef6:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	2b34      	cmp	r3, #52	; 0x34
 8000efe:	d90c      	bls.n	8000f1a <imd_status+0x40a>
			}
			// Falls DutyCycle nicht im Wertebereich ist
			else																	// IMD Invalid
			{
				// IMD Status speichern
				system_in.IMD_PWM_STATUS = IMD_DUTY_ERROR;							// Fehlerausgabe
 8000f00:	4a34      	ldr	r2, [pc, #208]	; (8000fd4 <imd_status+0x4c4>)
 8000f02:	7813      	ldrb	r3, [r2, #0]
 8000f04:	2108      	movs	r1, #8
 8000f06:	f361 0303 	bfi	r3, r1, #0, #4
 8000f0a:	7013      	strb	r3, [r2, #0]
				imd.PWM_STATUS = IMD_DUTY_ERROR;									// Fehlerausgabe
 8000f0c:	4a32      	ldr	r2, [pc, #200]	; (8000fd8 <imd_status+0x4c8>)
 8000f0e:	78d3      	ldrb	r3, [r2, #3]
 8000f10:	2108      	movs	r1, #8
 8000f12:	f361 0303 	bfi	r3, r1, #0, #4
 8000f16:	70d3      	strb	r3, [r2, #3]
			}
			break;
 8000f18:	e035      	b.n	8000f86 <imd_status+0x476>
 8000f1a:	e034      	b.n	8000f86 <imd_status+0x476>

		case 49:
		case 51:
		case 50:																	// Case 50 Hz
			// IMD Status speichern
			system_in.IMD_PWM_STATUS = IMD_ANSCHLUSSFEHLER_ERDE;					// Anschluss an Erde festgestellt
 8000f1c:	4a2d      	ldr	r2, [pc, #180]	; (8000fd4 <imd_status+0x4c4>)
 8000f1e:	7813      	ldrb	r3, [r2, #0]
 8000f20:	2105      	movs	r1, #5
 8000f22:	f361 0303 	bfi	r3, r1, #0, #4
 8000f26:	7013      	strb	r3, [r2, #0]
			imd.PWM_STATUS = IMD_ANSCHLUSSFEHLER_ERDE;								// Anschluss an Erde festgestellt
 8000f28:	4a2b      	ldr	r2, [pc, #172]	; (8000fd8 <imd_status+0x4c8>)
 8000f2a:	78d3      	ldrb	r3, [r2, #3]
 8000f2c:	2105      	movs	r1, #5
 8000f2e:	f361 0303 	bfi	r3, r1, #0, #4
 8000f32:	70d3      	strb	r3, [r2, #3]

			// DutyCycle abfragen
			if (imd.DutyCycle > 47 && imd.DutyCycle < 53)							// IMD PWM
 8000f34:	4b28      	ldr	r3, [pc, #160]	; (8000fd8 <imd_status+0x4c8>)
 8000f36:	791b      	ldrb	r3, [r3, #4]
 8000f38:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	2b2f      	cmp	r3, #47	; 0x2f
 8000f40:	d906      	bls.n	8000f50 <imd_status+0x440>
 8000f42:	4b25      	ldr	r3, [pc, #148]	; (8000fd8 <imd_status+0x4c8>)
 8000f44:	791b      	ldrb	r3, [r3, #4]
 8000f46:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	2b34      	cmp	r3, #52	; 0x34
 8000f4e:	d90c      	bls.n	8000f6a <imd_status+0x45a>
			}
			// Fall DutyCycle nicht im Wertebereich ist
			else																	// IMD Invalid
			{
				// IMD Status speichern
				system_in.IMD_PWM_STATUS = IMD_DUTY_ERROR;							// Fehlerausgabe
 8000f50:	4a20      	ldr	r2, [pc, #128]	; (8000fd4 <imd_status+0x4c4>)
 8000f52:	7813      	ldrb	r3, [r2, #0]
 8000f54:	2108      	movs	r1, #8
 8000f56:	f361 0303 	bfi	r3, r1, #0, #4
 8000f5a:	7013      	strb	r3, [r2, #0]
				imd.PWM_STATUS = IMD_DUTY_ERROR;									// Fehlerausgabe
 8000f5c:	4a1e      	ldr	r2, [pc, #120]	; (8000fd8 <imd_status+0x4c8>)
 8000f5e:	78d3      	ldrb	r3, [r2, #3]
 8000f60:	2108      	movs	r1, #8
 8000f62:	f361 0303 	bfi	r3, r1, #0, #4
 8000f66:	70d3      	strb	r3, [r2, #3]
			}
			break;
 8000f68:	e00d      	b.n	8000f86 <imd_status+0x476>
 8000f6a:	e00c      	b.n	8000f86 <imd_status+0x476>

		default:																	// Case Default Fehler
			// IMD Status speichern
			system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;								// Fehlerausgabe
 8000f6c:	4a19      	ldr	r2, [pc, #100]	; (8000fd4 <imd_status+0x4c4>)
 8000f6e:	7813      	ldrb	r3, [r2, #0]
 8000f70:	2107      	movs	r1, #7
 8000f72:	f361 0303 	bfi	r3, r1, #0, #4
 8000f76:	7013      	strb	r3, [r2, #0]
			imd.PWM_STATUS = IMD_FREQ_ERROR;										// Fehlerausgabe
 8000f78:	4a17      	ldr	r2, [pc, #92]	; (8000fd8 <imd_status+0x4c8>)
 8000f7a:	78d3      	ldrb	r3, [r2, #3]
 8000f7c:	2107      	movs	r1, #7
 8000f7e:	f361 0303 	bfi	r3, r1, #0, #4
 8000f82:	70d3      	strb	r3, [r2, #3]
			break;
 8000f84:	bf00      	nop
	}

	// Abfrage Plausibilitaet am IMD
	if ((sdc_in.IMD_OK_IN == 1) && (imd.PWM_STATUS != 10))
 8000f86:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <imd_status+0x4cc>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d00c      	beq.n	8000fae <imd_status+0x49e>
 8000f94:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <imd_status+0x4c8>)
 8000f96:	78db      	ldrb	r3, [r3, #3]
 8000f98:	f003 030f 	and.w	r3, r3, #15
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2b0a      	cmp	r3, #10
 8000fa0:	d005      	beq.n	8000fae <imd_status+0x49e>
	{
		system_in.IMD_PWM_STATUS = IMD_PLAUS_ERROR;									// Plausibilitaetsfehler be IMD ok und falschem Status
 8000fa2:	4a0c      	ldr	r2, [pc, #48]	; (8000fd4 <imd_status+0x4c4>)
 8000fa4:	7813      	ldrb	r3, [r2, #0]
 8000fa6:	2109      	movs	r1, #9
 8000fa8:	f361 0303 	bfi	r3, r1, #0, #4
 8000fac:	7013      	strb	r3, [r2, #0]
	}

#ifdef DEBUG_IMD
	// Ausgabe Status
	uartTransmit("Status: \t", 9);
 8000fae:	2109      	movs	r1, #9
 8000fb0:	480b      	ldr	r0, [pc, #44]	; (8000fe0 <imd_status+0x4d0>)
 8000fb2:	f7ff fac5 	bl	8000540 <uartTransmit>
	uartTransmitNumber(imd.PWM_STATUS, 10);
 8000fb6:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <imd_status+0x4c8>)
 8000fb8:	78db      	ldrb	r3, [r3, #3]
 8000fba:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	210a      	movs	r1, #10
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fad0 	bl	8000568 <uartTransmitNumber>
	uartTransmit("\n", 1);
 8000fc8:	2101      	movs	r1, #1
 8000fca:	4806      	ldr	r0, [pc, #24]	; (8000fe4 <imd_status+0x4d4>)
 8000fcc:	f7ff fab8 	bl	8000540 <uartTransmit>
#endif
}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000044 	.word	0x20000044
 8000fd8:	20000038 	.word	0x20000038
 8000fdc:	20000054 	.word	0x20000054
 8000fe0:	080078f0 	.word	0x080078f0
 8000fe4:	080078cc 	.word	0x080078cc

08000fe8 <readall_inputs>:
//----------------------------------------------------------------------

// Lese alle Eingaenge
//----------------------------------------------------------------------
void readall_inputs(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
	// Systemeingaenge einlesen
	system_in.IMD_PWM = HAL_GPIO_ReadPin(IMD_PWM_GPIO_Port, IMD_PWM_Pin);						// Eingang IMD PWM
 8000fec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ff0:	4850      	ldr	r0, [pc, #320]	; (8001134 <readall_inputs+0x14c>)
 8000ff2:	f002 fd85 	bl	8003b00 <HAL_GPIO_ReadPin>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	b2d9      	uxtb	r1, r3
 8000ffe:	4a4e      	ldr	r2, [pc, #312]	; (8001138 <readall_inputs+0x150>)
 8001000:	7813      	ldrb	r3, [r2, #0]
 8001002:	f361 1304 	bfi	r3, r1, #4, #1
 8001006:	7013      	strb	r3, [r2, #0]
	system_in.KL15 = HAL_GPIO_ReadPin(KL15_GPIO_Port, KL15_Pin);								// Eingang Auto an
 8001008:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800100c:	484b      	ldr	r0, [pc, #300]	; (800113c <readall_inputs+0x154>)
 800100e:	f002 fd77 	bl	8003b00 <HAL_GPIO_ReadPin>
 8001012:	4603      	mov	r3, r0
 8001014:	f003 0301 	and.w	r3, r3, #1
 8001018:	b2d9      	uxtb	r1, r3
 800101a:	4a47      	ldr	r2, [pc, #284]	; (8001138 <readall_inputs+0x150>)
 800101c:	7813      	ldrb	r3, [r2, #0]
 800101e:	f361 1345 	bfi	r3, r1, #5, #1
 8001022:	7013      	strb	r3, [r2, #0]
	system_in.Crash = HAL_GPIO_ReadPin(CRASH_GPIO_Port, CRASH_Pin);								// Crash Eingang
 8001024:	2101      	movs	r1, #1
 8001026:	4846      	ldr	r0, [pc, #280]	; (8001140 <readall_inputs+0x158>)
 8001028:	f002 fd6a 	bl	8003b00 <HAL_GPIO_ReadPin>
 800102c:	4603      	mov	r3, r0
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	b2d9      	uxtb	r1, r3
 8001034:	4a40      	ldr	r2, [pc, #256]	; (8001138 <readall_inputs+0x150>)
 8001036:	7813      	ldrb	r3, [r2, #0]
 8001038:	f361 1386 	bfi	r3, r1, #6, #1
 800103c:	7013      	strb	r3, [r2, #0]
	system_in.Wakeup = HAL_GPIO_ReadPin(HW_WAKE_GPIO_Port, HW_WAKE_Pin);						// Eingang Hardware Wakeup
 800103e:	2104      	movs	r1, #4
 8001040:	483f      	ldr	r0, [pc, #252]	; (8001140 <readall_inputs+0x158>)
 8001042:	f002 fd5d 	bl	8003b00 <HAL_GPIO_ReadPin>
 8001046:	4603      	mov	r3, r0
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	b2d9      	uxtb	r1, r3
 800104e:	4a3a      	ldr	r2, [pc, #232]	; (8001138 <readall_inputs+0x150>)
 8001050:	7813      	ldrb	r3, [r2, #0]
 8001052:	f361 13c7 	bfi	r3, r1, #7, #1
 8001056:	7013      	strb	r3, [r2, #0]

	// SDC-Eingaenge einlesen
	sdc_in.IMD_OK_IN = HAL_GPIO_ReadPin(IMD_OK_IN_GPIO_Port, IMD_OK_IN_Pin);					// IMD OK, Akku
 8001058:	f44f 7180 	mov.w	r1, #256	; 0x100
 800105c:	4835      	ldr	r0, [pc, #212]	; (8001134 <readall_inputs+0x14c>)
 800105e:	f002 fd4f 	bl	8003b00 <HAL_GPIO_ReadPin>
 8001062:	4603      	mov	r3, r0
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	b2d9      	uxtb	r1, r3
 800106a:	4a36      	ldr	r2, [pc, #216]	; (8001144 <readall_inputs+0x15c>)
 800106c:	7813      	ldrb	r3, [r2, #0]
 800106e:	f361 0300 	bfi	r3, r1, #0, #1
 8001072:	7013      	strb	r3, [r2, #0]
	sdc_in.HVIL = HAL_GPIO_ReadPin(SENSE_SDC_HVIL_GPIO_Port, SENSE_SDC_HVIL_Pin);				// Shutdown-Circuit HVIL, OK
 8001074:	2108      	movs	r1, #8
 8001076:	482f      	ldr	r0, [pc, #188]	; (8001134 <readall_inputs+0x14c>)
 8001078:	f002 fd42 	bl	8003b00 <HAL_GPIO_ReadPin>
 800107c:	4603      	mov	r3, r0
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	b2d9      	uxtb	r1, r3
 8001084:	4a2f      	ldr	r2, [pc, #188]	; (8001144 <readall_inputs+0x15c>)
 8001086:	7813      	ldrb	r3, [r2, #0]
 8001088:	f361 0341 	bfi	r3, r1, #1, #1
 800108c:	7013      	strb	r3, [r2, #0]
	sdc_in.MotorSDC = HAL_GPIO_ReadPin(SENSE_SDC_MOTOR_GPIO_Port, SENSE_SDC_MOTOR_Pin);			// Shutdown-Circuit Akku, OK
 800108e:	2120      	movs	r1, #32
 8001090:	4828      	ldr	r0, [pc, #160]	; (8001134 <readall_inputs+0x14c>)
 8001092:	f002 fd35 	bl	8003b00 <HAL_GPIO_ReadPin>
 8001096:	4603      	mov	r3, r0
 8001098:	f003 0301 	and.w	r3, r3, #1
 800109c:	b2d9      	uxtb	r1, r3
 800109e:	4a29      	ldr	r2, [pc, #164]	; (8001144 <readall_inputs+0x15c>)
 80010a0:	7813      	ldrb	r3, [r2, #0]
 80010a2:	f361 0382 	bfi	r3, r1, #2, #1
 80010a6:	7013      	strb	r3, [r2, #0]
	sdc_in.BTB_SDC = HAL_GPIO_ReadPin(SENSE_SDC_BTB_GPIO_Port, SENSE_SDC_BTB_Pin);				// Shutdown-Circuit Bamocar, OK
 80010a8:	2110      	movs	r1, #16
 80010aa:	4822      	ldr	r0, [pc, #136]	; (8001134 <readall_inputs+0x14c>)
 80010ac:	f002 fd28 	bl	8003b00 <HAL_GPIO_ReadPin>
 80010b0:	4603      	mov	r3, r0
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	b2d9      	uxtb	r1, r3
 80010b8:	4a22      	ldr	r2, [pc, #136]	; (8001144 <readall_inputs+0x15c>)
 80010ba:	7813      	ldrb	r3, [r2, #0]
 80010bc:	f361 03c3 	bfi	r3, r1, #3, #1
 80010c0:	7013      	strb	r3, [r2, #0]
	sdc_in.PrechargeIn = HAL_GPIO_ReadPin(PRECHARGE_IN_GPIO_Port, PRECHARGE_IN_Pin);			// Eingang Precharge abgeschlossen
 80010c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010c6:	4820      	ldr	r0, [pc, #128]	; (8001148 <readall_inputs+0x160>)
 80010c8:	f002 fd1a 	bl	8003b00 <HAL_GPIO_ReadPin>
 80010cc:	4603      	mov	r3, r0
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	b2d9      	uxtb	r1, r3
 80010d4:	4a1b      	ldr	r2, [pc, #108]	; (8001144 <readall_inputs+0x15c>)
 80010d6:	7813      	ldrb	r3, [r2, #0]
 80010d8:	f361 1304 	bfi	r3, r1, #4, #1
 80010dc:	7013      	strb	r3, [r2, #0]

	// Komforteingaenge einlesen
	komfort_in.OVC = HAL_GPIO_ReadPin(OVC_SENSE_GPIO_Port, OVC_SENSE_Pin);						// Eingang Overcurrent erkannt
 80010de:	2104      	movs	r1, #4
 80010e0:	4819      	ldr	r0, [pc, #100]	; (8001148 <readall_inputs+0x160>)
 80010e2:	f002 fd0d 	bl	8003b00 <HAL_GPIO_ReadPin>
 80010e6:	4603      	mov	r3, r0
 80010e8:	f003 0301 	and.w	r3, r3, #1
 80010ec:	b2d9      	uxtb	r1, r3
 80010ee:	4a17      	ldr	r2, [pc, #92]	; (800114c <readall_inputs+0x164>)
 80010f0:	7813      	ldrb	r3, [r2, #0]
 80010f2:	f361 0300 	bfi	r3, r1, #0, #1
 80010f6:	7013      	strb	r3, [r2, #0]
	komfort_in.Button1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);						// Zusatzeingang Taster 1
 80010f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010fc:	4810      	ldr	r0, [pc, #64]	; (8001140 <readall_inputs+0x158>)
 80010fe:	f002 fcff 	bl	8003b00 <HAL_GPIO_ReadPin>
 8001102:	4603      	mov	r3, r0
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	b2d9      	uxtb	r1, r3
 800110a:	4a10      	ldr	r2, [pc, #64]	; (800114c <readall_inputs+0x164>)
 800110c:	7813      	ldrb	r3, [r2, #0]
 800110e:	f361 0341 	bfi	r3, r1, #1, #1
 8001112:	7013      	strb	r3, [r2, #0]
	komfort_in.Button2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);						// Zusatzeingang Taster 2
 8001114:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001118:	4809      	ldr	r0, [pc, #36]	; (8001140 <readall_inputs+0x158>)
 800111a:	f002 fcf1 	bl	8003b00 <HAL_GPIO_ReadPin>
 800111e:	4603      	mov	r3, r0
 8001120:	f003 0301 	and.w	r3, r3, #1
 8001124:	b2d9      	uxtb	r1, r3
 8001126:	4a09      	ldr	r2, [pc, #36]	; (800114c <readall_inputs+0x164>)
 8001128:	7813      	ldrb	r3, [r2, #0]
 800112a:	f361 0382 	bfi	r3, r1, #2, #1
 800112e:	7013      	strb	r3, [r2, #0]
}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40021000 	.word	0x40021000
 8001138:	20000044 	.word	0x20000044
 800113c:	40020c00 	.word	0x40020c00
 8001140:	40020000 	.word	0x40020000
 8001144:	20000054 	.word	0x20000054
 8001148:	40021400 	.word	0x40021400
 800114c:	2000004c 	.word	0x2000004c

08001150 <testPCB_Leds>:
//----------------------------------------------------------------------

// Teste Platinen LEDs
//----------------------------------------------------------------------
void testPCB_Leds(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
	// Leds Testen
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);								// Blaue LED Platine setzen
 8001154:	2201      	movs	r2, #1
 8001156:	2180      	movs	r1, #128	; 0x80
 8001158:	481b      	ldr	r0, [pc, #108]	; (80011c8 <testPCB_Leds+0x78>)
 800115a:	f002 fce9 	bl	8003b30 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 800115e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001162:	f001 fbe1 	bl	8002928 <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);							// Blaue LED Platine zuruecksetzen
 8001166:	2200      	movs	r2, #0
 8001168:	2180      	movs	r1, #128	; 0x80
 800116a:	4817      	ldr	r0, [pc, #92]	; (80011c8 <testPCB_Leds+0x78>)
 800116c:	f002 fce0 	bl	8003b30 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001170:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001174:	f001 fbd8 	bl	8002928 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);							// Gruene LED Platine setzen
 8001178:	2201      	movs	r2, #1
 800117a:	2104      	movs	r1, #4
 800117c:	4812      	ldr	r0, [pc, #72]	; (80011c8 <testPCB_Leds+0x78>)
 800117e:	f002 fcd7 	bl	8003b30 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8001182:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001186:	f001 fbcf 	bl	8002928 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);							// Gruene LED Platine zuruecksetzen
 800118a:	2200      	movs	r2, #0
 800118c:	2104      	movs	r1, #4
 800118e:	480e      	ldr	r0, [pc, #56]	; (80011c8 <testPCB_Leds+0x78>)
 8001190:	f002 fcce 	bl	8003b30 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001194:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001198:	f001 fbc6 	bl	8002928 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);								// Rote LED Platine setzen
 800119c:	2201      	movs	r2, #1
 800119e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011a2:	4809      	ldr	r0, [pc, #36]	; (80011c8 <testPCB_Leds+0x78>)
 80011a4:	f002 fcc4 	bl	8003b30 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80011a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011ac:	f001 fbbc 	bl	8002928 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);								// Rote LED Platine zuruecksetzen
 80011b0:	2200      	movs	r2, #0
 80011b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011b6:	4804      	ldr	r0, [pc, #16]	; (80011c8 <testPCB_Leds+0x78>)
 80011b8:	f002 fcba 	bl	8003b30 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 80011bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011c0:	f001 fbb2 	bl	8002928 <HAL_Delay>
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40020400 	.word	0x40020400

080011cc <testLeds>:
//----------------------------------------------------------------------

// Teste alle externen LEDs
//----------------------------------------------------------------------
void testLeds(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
	// Leds Testen
	HAL_GPIO_WritePin(AKKU_LED_GPIO_Port, AKKU_LED_Pin, GPIO_PIN_SET);								// Akku LED Kombiinstrument setzen
 80011d0:	2201      	movs	r2, #1
 80011d2:	2180      	movs	r1, #128	; 0x80
 80011d4:	481a      	ldr	r0, [pc, #104]	; (8001240 <testLeds+0x74>)
 80011d6:	f002 fcab 	bl	8003b30 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80011da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011de:	f001 fba3 	bl	8002928 <HAL_Delay>
	HAL_GPIO_WritePin(AKKU_LED_GPIO_Port, AKKU_LED_Pin, GPIO_PIN_RESET);							// Akku LED Kombiinstrument zuruecksetzen
 80011e2:	2200      	movs	r2, #0
 80011e4:	2180      	movs	r1, #128	; 0x80
 80011e6:	4816      	ldr	r0, [pc, #88]	; (8001240 <testLeds+0x74>)
 80011e8:	f002 fca2 	bl	8003b30 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80011ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011f0:	f001 fb9a 	bl	8002928 <HAL_Delay>
	HAL_GPIO_WritePin(INLET_RED_GPIO_Port, INLET_RED_Pin, GPIO_PIN_SET);							// Red Inlet LED setzen
 80011f4:	2201      	movs	r2, #1
 80011f6:	2104      	movs	r1, #4
 80011f8:	4812      	ldr	r0, [pc, #72]	; (8001244 <testLeds+0x78>)
 80011fa:	f002 fc99 	bl	8003b30 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80011fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001202:	f001 fb91 	bl	8002928 <HAL_Delay>
	HAL_GPIO_WritePin(INLET_RED_GPIO_Port, INLET_RED_Pin, GPIO_PIN_RESET);							// Red Inlet LED zuruecksetzen
 8001206:	2200      	movs	r2, #0
 8001208:	2104      	movs	r1, #4
 800120a:	480e      	ldr	r0, [pc, #56]	; (8001244 <testLeds+0x78>)
 800120c:	f002 fc90 	bl	8003b30 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001210:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001214:	f001 fb88 	bl	8002928 <HAL_Delay>
	HAL_GPIO_WritePin(INLET_GREEN_GPIO_Port, INLET_GREEN_Pin, GPIO_PIN_SET);						// Green Inlet LED setzen
 8001218:	2201      	movs	r2, #1
 800121a:	2102      	movs	r1, #2
 800121c:	4809      	ldr	r0, [pc, #36]	; (8001244 <testLeds+0x78>)
 800121e:	f002 fc87 	bl	8003b30 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8001222:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001226:	f001 fb7f 	bl	8002928 <HAL_Delay>
	HAL_GPIO_WritePin(INLET_GREEN_GPIO_Port, INLET_GREEN_Pin, GPIO_PIN_RESET);						// Green Inlet LED zuruecksetzen
 800122a:	2200      	movs	r2, #0
 800122c:	2102      	movs	r1, #2
 800122e:	4805      	ldr	r0, [pc, #20]	; (8001244 <testLeds+0x78>)
 8001230:	f002 fc7e 	bl	8003b30 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001234:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001238:	f001 fb76 	bl	8002928 <HAL_Delay>
}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40021800 	.word	0x40021800
 8001244:	40021000 	.word	0x40021000

08001248 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800124e:	463b      	mov	r3, r7
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800125a:	4b44      	ldr	r3, [pc, #272]	; (800136c <MX_ADC1_Init+0x124>)
 800125c:	4a44      	ldr	r2, [pc, #272]	; (8001370 <MX_ADC1_Init+0x128>)
 800125e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001260:	4b42      	ldr	r3, [pc, #264]	; (800136c <MX_ADC1_Init+0x124>)
 8001262:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001266:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001268:	4b40      	ldr	r3, [pc, #256]	; (800136c <MX_ADC1_Init+0x124>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800126e:	4b3f      	ldr	r3, [pc, #252]	; (800136c <MX_ADC1_Init+0x124>)
 8001270:	2201      	movs	r2, #1
 8001272:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001274:	4b3d      	ldr	r3, [pc, #244]	; (800136c <MX_ADC1_Init+0x124>)
 8001276:	2200      	movs	r2, #0
 8001278:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800127a:	4b3c      	ldr	r3, [pc, #240]	; (800136c <MX_ADC1_Init+0x124>)
 800127c:	2200      	movs	r2, #0
 800127e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001282:	4b3a      	ldr	r3, [pc, #232]	; (800136c <MX_ADC1_Init+0x124>)
 8001284:	2200      	movs	r2, #0
 8001286:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001288:	4b38      	ldr	r3, [pc, #224]	; (800136c <MX_ADC1_Init+0x124>)
 800128a:	4a3a      	ldr	r2, [pc, #232]	; (8001374 <MX_ADC1_Init+0x12c>)
 800128c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800128e:	4b37      	ldr	r3, [pc, #220]	; (800136c <MX_ADC1_Init+0x124>)
 8001290:	2200      	movs	r2, #0
 8001292:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8001294:	4b35      	ldr	r3, [pc, #212]	; (800136c <MX_ADC1_Init+0x124>)
 8001296:	2206      	movs	r2, #6
 8001298:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800129a:	4b34      	ldr	r3, [pc, #208]	; (800136c <MX_ADC1_Init+0x124>)
 800129c:	2200      	movs	r2, #0
 800129e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012a2:	4b32      	ldr	r3, [pc, #200]	; (800136c <MX_ADC1_Init+0x124>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012a8:	4830      	ldr	r0, [pc, #192]	; (800136c <MX_ADC1_Init+0x124>)
 80012aa:	f001 fba9 	bl	8002a00 <HAL_ADC_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80012b4:	f000 fe78 	bl	8001fa8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80012b8:	2307      	movs	r3, #7
 80012ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012bc:	2301      	movs	r3, #1
 80012be:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80012c0:	2301      	movs	r3, #1
 80012c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012c4:	463b      	mov	r3, r7
 80012c6:	4619      	mov	r1, r3
 80012c8:	4828      	ldr	r0, [pc, #160]	; (800136c <MX_ADC1_Init+0x124>)
 80012ca:	f001 fbdd 	bl	8002a88 <HAL_ADC_ConfigChannel>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80012d4:	f000 fe68 	bl	8001fa8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80012d8:	2303      	movs	r3, #3
 80012da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80012dc:	2302      	movs	r3, #2
 80012de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e0:	463b      	mov	r3, r7
 80012e2:	4619      	mov	r1, r3
 80012e4:	4821      	ldr	r0, [pc, #132]	; (800136c <MX_ADC1_Init+0x124>)
 80012e6:	f001 fbcf 	bl	8002a88 <HAL_ADC_ConfigChannel>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80012f0:	f000 fe5a 	bl	8001fa8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80012f4:	2304      	movs	r3, #4
 80012f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80012f8:	2303      	movs	r3, #3
 80012fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012fc:	463b      	mov	r3, r7
 80012fe:	4619      	mov	r1, r3
 8001300:	481a      	ldr	r0, [pc, #104]	; (800136c <MX_ADC1_Init+0x124>)
 8001302:	f001 fbc1 	bl	8002a88 <HAL_ADC_ConfigChannel>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800130c:	f000 fe4c 	bl	8001fa8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001310:	2305      	movs	r3, #5
 8001312:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001314:	2304      	movs	r3, #4
 8001316:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001318:	463b      	mov	r3, r7
 800131a:	4619      	mov	r1, r3
 800131c:	4813      	ldr	r0, [pc, #76]	; (800136c <MX_ADC1_Init+0x124>)
 800131e:	f001 fbb3 	bl	8002a88 <HAL_ADC_ConfigChannel>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001328:	f000 fe3e 	bl	8001fa8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800132c:	2306      	movs	r3, #6
 800132e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001330:	2305      	movs	r3, #5
 8001332:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001334:	463b      	mov	r3, r7
 8001336:	4619      	mov	r1, r3
 8001338:	480c      	ldr	r0, [pc, #48]	; (800136c <MX_ADC1_Init+0x124>)
 800133a:	f001 fba5 	bl	8002a88 <HAL_ADC_ConfigChannel>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001344:	f000 fe30 	bl	8001fa8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001348:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <MX_ADC1_Init+0x130>)
 800134a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800134c:	2306      	movs	r3, #6
 800134e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001350:	463b      	mov	r3, r7
 8001352:	4619      	mov	r1, r3
 8001354:	4805      	ldr	r0, [pc, #20]	; (800136c <MX_ADC1_Init+0x124>)
 8001356:	f001 fb97 	bl	8002a88 <HAL_ADC_ConfigChannel>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001360:	f000 fe22 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001364:	bf00      	nop
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000058 	.word	0x20000058
 8001370:	40012000 	.word	0x40012000
 8001374:	0f000001 	.word	0x0f000001
 8001378:	10000012 	.word	0x10000012

0800137c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	; 0x28
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a15      	ldr	r2, [pc, #84]	; (80013f0 <HAL_ADC_MspInit+0x74>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d123      	bne.n	80013e6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800139e:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <HAL_ADC_MspInit+0x78>)
 80013a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a2:	4a14      	ldr	r2, [pc, #80]	; (80013f4 <HAL_ADC_MspInit+0x78>)
 80013a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a8:	6453      	str	r3, [r2, #68]	; 0x44
 80013aa:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <HAL_ADC_MspInit+0x78>)
 80013ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b6:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <HAL_ADC_MspInit+0x78>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a0e      	ldr	r2, [pc, #56]	; (80013f4 <HAL_ADC_MspInit+0x78>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <HAL_ADC_MspInit+0x78>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = SENSE_TEMP1_Pin|SENSE_TEMP2_Pin|SENSE_TEMP3_Pin|SENSE_TEMP4_Pin
 80013ce:	23f8      	movs	r3, #248	; 0xf8
 80013d0:	617b      	str	r3, [r7, #20]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013d2:	2303      	movs	r3, #3
 80013d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013da:	f107 0314 	add.w	r3, r7, #20
 80013de:	4619      	mov	r1, r3
 80013e0:	4805      	ldr	r0, [pc, #20]	; (80013f8 <HAL_ADC_MspInit+0x7c>)
 80013e2:	f002 f9e1 	bl	80037a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80013e6:	bf00      	nop
 80013e8:	3728      	adds	r7, #40	; 0x28
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40012000 	.word	0x40012000
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40020000 	.word	0x40020000

080013fc <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan3;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001400:	4b17      	ldr	r3, [pc, #92]	; (8001460 <MX_CAN1_Init+0x64>)
 8001402:	4a18      	ldr	r2, [pc, #96]	; (8001464 <MX_CAN1_Init+0x68>)
 8001404:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001406:	4b16      	ldr	r3, [pc, #88]	; (8001460 <MX_CAN1_Init+0x64>)
 8001408:	2210      	movs	r2, #16
 800140a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800140c:	4b14      	ldr	r3, [pc, #80]	; (8001460 <MX_CAN1_Init+0x64>)
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001412:	4b13      	ldr	r3, [pc, #76]	; (8001460 <MX_CAN1_Init+0x64>)
 8001414:	2200      	movs	r2, #0
 8001416:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001418:	4b11      	ldr	r3, [pc, #68]	; (8001460 <MX_CAN1_Init+0x64>)
 800141a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800141e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001420:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <MX_CAN1_Init+0x64>)
 8001422:	2200      	movs	r2, #0
 8001424:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001426:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <MX_CAN1_Init+0x64>)
 8001428:	2200      	movs	r2, #0
 800142a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <MX_CAN1_Init+0x64>)
 800142e:	2200      	movs	r2, #0
 8001430:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001432:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <MX_CAN1_Init+0x64>)
 8001434:	2200      	movs	r2, #0
 8001436:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001438:	4b09      	ldr	r3, [pc, #36]	; (8001460 <MX_CAN1_Init+0x64>)
 800143a:	2200      	movs	r2, #0
 800143c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800143e:	4b08      	ldr	r3, [pc, #32]	; (8001460 <MX_CAN1_Init+0x64>)
 8001440:	2200      	movs	r2, #0
 8001442:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <MX_CAN1_Init+0x64>)
 8001446:	2200      	movs	r2, #0
 8001448:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800144a:	4805      	ldr	r0, [pc, #20]	; (8001460 <MX_CAN1_Init+0x64>)
 800144c:	f001 fd6c 	bl	8002f28 <HAL_CAN_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001456:	f000 fda7 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	200000c8 	.word	0x200000c8
 8001464:	40006400 	.word	0x40006400

08001468 <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 800146c:	4b17      	ldr	r3, [pc, #92]	; (80014cc <MX_CAN3_Init+0x64>)
 800146e:	4a18      	ldr	r2, [pc, #96]	; (80014d0 <MX_CAN3_Init+0x68>)
 8001470:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 8001472:	4b16      	ldr	r3, [pc, #88]	; (80014cc <MX_CAN3_Init+0x64>)
 8001474:	2206      	movs	r2, #6
 8001476:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8001478:	4b14      	ldr	r3, [pc, #80]	; (80014cc <MX_CAN3_Init+0x64>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800147e:	4b13      	ldr	r3, [pc, #76]	; (80014cc <MX_CAN3_Init+0x64>)
 8001480:	2200      	movs	r2, #0
 8001482:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001484:	4b11      	ldr	r3, [pc, #68]	; (80014cc <MX_CAN3_Init+0x64>)
 8001486:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800148a:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 800148c:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <MX_CAN3_Init+0x64>)
 800148e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001492:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8001494:	4b0d      	ldr	r3, [pc, #52]	; (80014cc <MX_CAN3_Init+0x64>)
 8001496:	2200      	movs	r2, #0
 8001498:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 800149a:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <MX_CAN3_Init+0x64>)
 800149c:	2200      	movs	r2, #0
 800149e:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 80014a0:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <MX_CAN3_Init+0x64>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 80014a6:	4b09      	ldr	r3, [pc, #36]	; (80014cc <MX_CAN3_Init+0x64>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 80014ac:	4b07      	ldr	r3, [pc, #28]	; (80014cc <MX_CAN3_Init+0x64>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <MX_CAN3_Init+0x64>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 80014b8:	4804      	ldr	r0, [pc, #16]	; (80014cc <MX_CAN3_Init+0x64>)
 80014ba:	f001 fd35 	bl	8002f28 <HAL_CAN_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 80014c4:	f000 fd70 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	200000a0 	.word	0x200000a0
 80014d0:	40003400 	.word	0x40003400

080014d4 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08e      	sub	sp, #56	; 0x38
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a43      	ldr	r2, [pc, #268]	; (8001600 <HAL_CAN_MspInit+0x12c>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d131      	bne.n	800155a <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80014f6:	4b43      	ldr	r3, [pc, #268]	; (8001604 <HAL_CAN_MspInit+0x130>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	3301      	adds	r3, #1
 80014fc:	4a41      	ldr	r2, [pc, #260]	; (8001604 <HAL_CAN_MspInit+0x130>)
 80014fe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001500:	4b40      	ldr	r3, [pc, #256]	; (8001604 <HAL_CAN_MspInit+0x130>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d10b      	bne.n	8001520 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001508:	4b3f      	ldr	r3, [pc, #252]	; (8001608 <HAL_CAN_MspInit+0x134>)
 800150a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150c:	4a3e      	ldr	r2, [pc, #248]	; (8001608 <HAL_CAN_MspInit+0x134>)
 800150e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001512:	6413      	str	r3, [r2, #64]	; 0x40
 8001514:	4b3c      	ldr	r3, [pc, #240]	; (8001608 <HAL_CAN_MspInit+0x134>)
 8001516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800151c:	623b      	str	r3, [r7, #32]
 800151e:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001520:	4b39      	ldr	r3, [pc, #228]	; (8001608 <HAL_CAN_MspInit+0x134>)
 8001522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001524:	4a38      	ldr	r2, [pc, #224]	; (8001608 <HAL_CAN_MspInit+0x134>)
 8001526:	f043 0308 	orr.w	r3, r3, #8
 800152a:	6313      	str	r3, [r2, #48]	; 0x30
 800152c:	4b36      	ldr	r3, [pc, #216]	; (8001608 <HAL_CAN_MspInit+0x134>)
 800152e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001530:	f003 0308 	and.w	r3, r3, #8
 8001534:	61fb      	str	r3, [r7, #28]
 8001536:	69fb      	ldr	r3, [r7, #28]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001538:	2303      	movs	r3, #3
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153c:	2302      	movs	r3, #2
 800153e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001544:	2303      	movs	r3, #3
 8001546:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001548:	2309      	movs	r3, #9
 800154a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800154c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001550:	4619      	mov	r1, r3
 8001552:	482e      	ldr	r0, [pc, #184]	; (800160c <HAL_CAN_MspInit+0x138>)
 8001554:	f002 f928 	bl	80037a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 8001558:	e04e      	b.n	80015f8 <HAL_CAN_MspInit+0x124>
  else if(canHandle->Instance==CAN3)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a2c      	ldr	r2, [pc, #176]	; (8001610 <HAL_CAN_MspInit+0x13c>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d149      	bne.n	80015f8 <HAL_CAN_MspInit+0x124>
    __HAL_RCC_CAN3_CLK_ENABLE();
 8001564:	4b28      	ldr	r3, [pc, #160]	; (8001608 <HAL_CAN_MspInit+0x134>)
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	4a27      	ldr	r2, [pc, #156]	; (8001608 <HAL_CAN_MspInit+0x134>)
 800156a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800156e:	6413      	str	r3, [r2, #64]	; 0x40
 8001570:	4b25      	ldr	r3, [pc, #148]	; (8001608 <HAL_CAN_MspInit+0x134>)
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001578:	61bb      	str	r3, [r7, #24]
 800157a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 800157c:	4b22      	ldr	r3, [pc, #136]	; (8001608 <HAL_CAN_MspInit+0x134>)
 800157e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001580:	4a21      	ldr	r2, [pc, #132]	; (8001608 <HAL_CAN_MspInit+0x134>)
 8001582:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001586:	6413      	str	r3, [r2, #64]	; 0x40
 8001588:	4b1f      	ldr	r3, [pc, #124]	; (8001608 <HAL_CAN_MspInit+0x134>)
 800158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001590:	617b      	str	r3, [r7, #20]
 8001592:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001594:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <HAL_CAN_MspInit+0x130>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	3301      	adds	r3, #1
 800159a:	4a1a      	ldr	r2, [pc, #104]	; (8001604 <HAL_CAN_MspInit+0x130>)
 800159c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800159e:	4b19      	ldr	r3, [pc, #100]	; (8001604 <HAL_CAN_MspInit+0x130>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d10b      	bne.n	80015be <HAL_CAN_MspInit+0xea>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80015a6:	4b18      	ldr	r3, [pc, #96]	; (8001608 <HAL_CAN_MspInit+0x134>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	4a17      	ldr	r2, [pc, #92]	; (8001608 <HAL_CAN_MspInit+0x134>)
 80015ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015b0:	6413      	str	r3, [r2, #64]	; 0x40
 80015b2:	4b15      	ldr	r3, [pc, #84]	; (8001608 <HAL_CAN_MspInit+0x134>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ba:	613b      	str	r3, [r7, #16]
 80015bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015be:	4b12      	ldr	r3, [pc, #72]	; (8001608 <HAL_CAN_MspInit+0x134>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	4a11      	ldr	r2, [pc, #68]	; (8001608 <HAL_CAN_MspInit+0x134>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ca:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <HAL_CAN_MspInit+0x134>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 80015d6:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015dc:	2302      	movs	r3, #2
 80015de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e4:	2303      	movs	r3, #3
 80015e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 80015e8:	230b      	movs	r3, #11
 80015ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f0:	4619      	mov	r1, r3
 80015f2:	4808      	ldr	r0, [pc, #32]	; (8001614 <HAL_CAN_MspInit+0x140>)
 80015f4:	f002 f8d8 	bl	80037a8 <HAL_GPIO_Init>
}
 80015f8:	bf00      	nop
 80015fa:	3738      	adds	r7, #56	; 0x38
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40006400 	.word	0x40006400
 8001604:	20000028 	.word	0x20000028
 8001608:	40023800 	.word	0x40023800
 800160c:	40020c00 	.word	0x40020c00
 8001610:	40003400 	.word	0x40003400
 8001614:	40020000 	.word	0x40020000

08001618 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08e      	sub	sp, #56	; 0x38
 800161c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]
 8001628:	609a      	str	r2, [r3, #8]
 800162a:	60da      	str	r2, [r3, #12]
 800162c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800162e:	4bb6      	ldr	r3, [pc, #728]	; (8001908 <MX_GPIO_Init+0x2f0>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	4ab5      	ldr	r2, [pc, #724]	; (8001908 <MX_GPIO_Init+0x2f0>)
 8001634:	f043 0310 	orr.w	r3, r3, #16
 8001638:	6313      	str	r3, [r2, #48]	; 0x30
 800163a:	4bb3      	ldr	r3, [pc, #716]	; (8001908 <MX_GPIO_Init+0x2f0>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	f003 0310 	and.w	r3, r3, #16
 8001642:	623b      	str	r3, [r7, #32]
 8001644:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001646:	4bb0      	ldr	r3, [pc, #704]	; (8001908 <MX_GPIO_Init+0x2f0>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	4aaf      	ldr	r2, [pc, #700]	; (8001908 <MX_GPIO_Init+0x2f0>)
 800164c:	f043 0304 	orr.w	r3, r3, #4
 8001650:	6313      	str	r3, [r2, #48]	; 0x30
 8001652:	4bad      	ldr	r3, [pc, #692]	; (8001908 <MX_GPIO_Init+0x2f0>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	f003 0304 	and.w	r3, r3, #4
 800165a:	61fb      	str	r3, [r7, #28]
 800165c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800165e:	4baa      	ldr	r3, [pc, #680]	; (8001908 <MX_GPIO_Init+0x2f0>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4aa9      	ldr	r2, [pc, #676]	; (8001908 <MX_GPIO_Init+0x2f0>)
 8001664:	f043 0320 	orr.w	r3, r3, #32
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
 800166a:	4ba7      	ldr	r3, [pc, #668]	; (8001908 <MX_GPIO_Init+0x2f0>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f003 0320 	and.w	r3, r3, #32
 8001672:	61bb      	str	r3, [r7, #24]
 8001674:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001676:	4ba4      	ldr	r3, [pc, #656]	; (8001908 <MX_GPIO_Init+0x2f0>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4aa3      	ldr	r2, [pc, #652]	; (8001908 <MX_GPIO_Init+0x2f0>)
 800167c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4ba1      	ldr	r3, [pc, #644]	; (8001908 <MX_GPIO_Init+0x2f0>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800168a:	617b      	str	r3, [r7, #20]
 800168c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800168e:	4b9e      	ldr	r3, [pc, #632]	; (8001908 <MX_GPIO_Init+0x2f0>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	4a9d      	ldr	r2, [pc, #628]	; (8001908 <MX_GPIO_Init+0x2f0>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6313      	str	r3, [r2, #48]	; 0x30
 800169a:	4b9b      	ldr	r3, [pc, #620]	; (8001908 <MX_GPIO_Init+0x2f0>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a6:	4b98      	ldr	r3, [pc, #608]	; (8001908 <MX_GPIO_Init+0x2f0>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a97      	ldr	r2, [pc, #604]	; (8001908 <MX_GPIO_Init+0x2f0>)
 80016ac:	f043 0302 	orr.w	r3, r3, #2
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b95      	ldr	r3, [pc, #596]	; (8001908 <MX_GPIO_Init+0x2f0>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016be:	4b92      	ldr	r3, [pc, #584]	; (8001908 <MX_GPIO_Init+0x2f0>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a91      	ldr	r2, [pc, #580]	; (8001908 <MX_GPIO_Init+0x2f0>)
 80016c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b8f      	ldr	r3, [pc, #572]	; (8001908 <MX_GPIO_Init+0x2f0>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016d6:	4b8c      	ldr	r3, [pc, #560]	; (8001908 <MX_GPIO_Init+0x2f0>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	4a8b      	ldr	r2, [pc, #556]	; (8001908 <MX_GPIO_Init+0x2f0>)
 80016dc:	f043 0308 	orr.w	r3, r3, #8
 80016e0:	6313      	str	r3, [r2, #48]	; 0x30
 80016e2:	4b89      	ldr	r3, [pc, #548]	; (8001908 <MX_GPIO_Init+0x2f0>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	f003 0308 	and.w	r3, r3, #8
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, INLET_RED_Pin|AMS_OK_Pin|ISOSPI_EN_Pin|FREIGABE_Pin
 80016ee:	2200      	movs	r2, #0
 80016f0:	f248 0187 	movw	r1, #32903	; 0x8087
 80016f4:	4885      	ldr	r0, [pc, #532]	; (800190c <MX_GPIO_Init+0x2f4>)
 80016f6:	f002 fa1b 	bl	8003b30 <HAL_GPIO_WritePin>
                          |INLET_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POWER_ON_GPIO_Port, POWER_ON_Pin, GPIO_PIN_RESET);
 80016fa:	2200      	movs	r2, #0
 80016fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001700:	4883      	ldr	r0, [pc, #524]	; (8001910 <MX_GPIO_Init+0x2f8>)
 8001702:	f002 fa15 	bl	8003b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin, GPIO_PIN_RESET);
 8001706:	2200      	movs	r2, #0
 8001708:	f242 0102 	movw	r1, #8194	; 0x2002
 800170c:	4881      	ldr	r0, [pc, #516]	; (8001914 <MX_GPIO_Init+0x2fc>)
 800170e:	f002 fa0f 	bl	8003b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin, GPIO_PIN_RESET);
 8001712:	2200      	movs	r2, #0
 8001714:	f240 6102 	movw	r1, #1538	; 0x602
 8001718:	487f      	ldr	r0, [pc, #508]	; (8001918 <MX_GPIO_Init+0x300>)
 800171a:	f002 fa09 	bl	8003b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 800171e:	2200      	movs	r2, #0
 8001720:	f244 0184 	movw	r1, #16516	; 0x4084
 8001724:	487d      	ldr	r0, [pc, #500]	; (800191c <MX_GPIO_Init+0x304>)
 8001726:	f002 fa03 	bl	8003b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 800172a:	2200      	movs	r2, #0
 800172c:	f24f 01bc 	movw	r1, #61628	; 0xf0bc
 8001730:	487b      	ldr	r0, [pc, #492]	; (8001920 <MX_GPIO_Init+0x308>)
 8001732:	f002 f9fd 	bl	8003b30 <HAL_GPIO_WritePin>
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DIGITAL1_Pin|DIGITAL2_Pin, GPIO_PIN_RESET);
 8001736:	2200      	movs	r2, #0
 8001738:	2118      	movs	r1, #24
 800173a:	487a      	ldr	r0, [pc, #488]	; (8001924 <MX_GPIO_Init+0x30c>)
 800173c:	f002 f9f8 	bl	8003b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = INLET_RED_Pin|AMS_OK_Pin|ISOSPI_EN_Pin|FREIGABE_Pin
 8001740:	f248 0387 	movw	r3, #32903	; 0x8087
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
                          |INLET_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001746:	2301      	movs	r3, #1
 8001748:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174e:	2300      	movs	r3, #0
 8001750:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001756:	4619      	mov	r1, r3
 8001758:	486c      	ldr	r0, [pc, #432]	; (800190c <MX_GPIO_Init+0x2f4>)
 800175a:	f002 f825 	bl	80037a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SENSE_SDC_HVIL_Pin|SENSE_SDC_BTB_Pin|SENSE_SDC_MOTOR_Pin|IMD_OK_IN_Pin;
 800175e:	f44f 739c 	mov.w	r3, #312	; 0x138
 8001762:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001764:	2300      	movs	r3, #0
 8001766:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800176c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001770:	4619      	mov	r1, r3
 8001772:	4866      	ldr	r0, [pc, #408]	; (800190c <MX_GPIO_Init+0x2f4>)
 8001774:	f002 f818 	bl	80037a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 8001778:	f44f 6388 	mov.w	r3, #1088	; 0x440
 800177c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800177e:	2303      	movs	r3, #3
 8001780:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800178a:	4619      	mov	r1, r3
 800178c:	485f      	ldr	r0, [pc, #380]	; (800190c <MX_GPIO_Init+0x2f4>)
 800178e:	f002 f80b 	bl	80037a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 8001792:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001796:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001798:	2301      	movs	r3, #1
 800179a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a0:	2300      	movs	r3, #0
 80017a2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 80017a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a8:	4619      	mov	r1, r3
 80017aa:	4859      	ldr	r0, [pc, #356]	; (8001910 <MX_GPIO_Init+0x2f8>)
 80017ac:	f001 fffc 	bl	80037a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PC3 PC4 PC5
                           PCPin PC7 PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 80017b0:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |SD_SW_Pin|GPIO_PIN_7|SD_D0_Pin|SD_D1_Pin
                          |SD_D2_Pin|SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017b6:	2303      	movs	r3, #3
 80017b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c2:	4619      	mov	r1, r3
 80017c4:	4852      	ldr	r0, [pc, #328]	; (8001910 <MX_GPIO_Init+0x2f8>)
 80017c6:	f001 ffef 	bl	80037a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF3 PF4 PF5
                           PFPin PFPin PFPin PFPin
                           PF10 PF11 PF12 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80017ca:	f645 73f9 	movw	r3, #24569	; 0x5ff9
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPI_CS_Pin|SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017d0:	2303      	movs	r3, #3
 80017d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017dc:	4619      	mov	r1, r3
 80017de:	484d      	ldr	r0, [pc, #308]	; (8001914 <MX_GPIO_Init+0x2fc>)
 80017e0:	f001 ffe2 	bl	80037a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin;
 80017e4:	f242 0302 	movw	r3, #8194	; 0x2002
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ea:	2301      	movs	r3, #1
 80017ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f2:	2300      	movs	r3, #0
 80017f4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017fa:	4619      	mov	r1, r3
 80017fc:	4845      	ldr	r0, [pc, #276]	; (8001914 <MX_GPIO_Init+0x2fc>)
 80017fe:	f001 ffd3 	bl	80037a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OVC_SENSE_Pin|PRECHARGE_IN_Pin;
 8001802:	f248 0304 	movw	r3, #32772	; 0x8004
 8001806:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001808:	2300      	movs	r3, #0
 800180a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001814:	4619      	mov	r1, r3
 8001816:	483f      	ldr	r0, [pc, #252]	; (8001914 <MX_GPIO_Init+0x2fc>)
 8001818:	f001 ffc6 	bl	80037a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|HW_WAKE_Pin|BUTTON2_Pin|BUTTON1_Pin;
 800181c:	f641 0305 	movw	r3, #6149	; 0x1805
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001822:	2300      	movs	r3, #0
 8001824:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800182e:	4619      	mov	r1, r3
 8001830:	4839      	ldr	r0, [pc, #228]	; (8001918 <MX_GPIO_Init+0x300>)
 8001832:	f001 ffb9 	bl	80037a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin;
 8001836:	f240 6302 	movw	r3, #1538	; 0x602
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183c:	2301      	movs	r3, #1
 800183e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001844:	2300      	movs	r3, #0
 8001846:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800184c:	4619      	mov	r1, r3
 800184e:	4832      	ldr	r0, [pc, #200]	; (8001918 <MX_GPIO_Init+0x300>)
 8001850:	f001 ffaa 	bl	80037a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB15 PB4
                           PB5 PB6 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8001854:	f64b 7373 	movw	r3, #49011	; 0xbf73
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|I2C_SCL_Pin|I2C_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800185a:	2303      	movs	r3, #3
 800185c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001866:	4619      	mov	r1, r3
 8001868:	482c      	ldr	r0, [pc, #176]	; (800191c <MX_GPIO_Init+0x304>)
 800186a:	f001 ff9d 	bl	80037a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin;
 800186e:	f244 0384 	movw	r3, #16516	; 0x4084
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001874:	2301      	movs	r3, #1
 8001876:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187c:	2300      	movs	r3, #0
 800187e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001880:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001884:	4619      	mov	r1, r3
 8001886:	4825      	ldr	r0, [pc, #148]	; (800191c <MX_GPIO_Init+0x304>)
 8001888:	f001 ff8e 	bl	80037a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG6 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_8;
 800188c:	f240 1343 	movw	r3, #323	; 0x143
 8001890:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001892:	2303      	movs	r3, #3
 8001894:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800189a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800189e:	4619      	mov	r1, r3
 80018a0:	481f      	ldr	r0, [pc, #124]	; (8001920 <MX_GPIO_Init+0x308>)
 80018a2:	f001 ff81 	bl	80037a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|SD_CMD_Pin;
 80018a6:	f240 7304 	movw	r3, #1796	; 0x704
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ac:	2303      	movs	r3, #3
 80018ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b8:	4619      	mov	r1, r3
 80018ba:	481a      	ldr	r0, [pc, #104]	; (8001924 <MX_GPIO_Init+0x30c>)
 80018bc:	f001 ff74 	bl	80037a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KL15_Pin;
 80018c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c6:	2300      	movs	r3, #0
 80018c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KL15_GPIO_Port, &GPIO_InitStruct);
 80018ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d2:	4619      	mov	r1, r3
 80018d4:	4813      	ldr	r0, [pc, #76]	; (8001924 <MX_GPIO_Init+0x30c>)
 80018d6:	f001 ff67 	bl	80037a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 80018da:	f24f 03bc 	movw	r3, #61628	; 0xf0bc
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e0:	2301      	movs	r3, #1
 80018e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e8:	2300      	movs	r3, #0
 80018ea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f0:	4619      	mov	r1, r3
 80018f2:	480b      	ldr	r0, [pc, #44]	; (8001920 <MX_GPIO_Init+0x308>)
 80018f4:	f001 ff58 	bl	80037a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|DIGITAL2_Pin;
 80018f8:	2318      	movs	r3, #24
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fc:	2301      	movs	r3, #1
 80018fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001904:	2300      	movs	r3, #0
 8001906:	e00f      	b.n	8001928 <MX_GPIO_Init+0x310>
 8001908:	40023800 	.word	0x40023800
 800190c:	40021000 	.word	0x40021000
 8001910:	40020800 	.word	0x40020800
 8001914:	40021400 	.word	0x40021400
 8001918:	40020000 	.word	0x40020000
 800191c:	40020400 	.word	0x40020400
 8001920:	40021800 	.word	0x40021800
 8001924:	40020c00 	.word	0x40020c00
 8001928:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800192a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800192e:	4619      	mov	r1, r3
 8001930:	4803      	ldr	r0, [pc, #12]	; (8001940 <MX_GPIO_Init+0x328>)
 8001932:	f001 ff39 	bl	80037a8 <HAL_GPIO_Init>

}
 8001936:	bf00      	nop
 8001938:	3738      	adds	r7, #56	; 0x38
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40020c00 	.word	0x40020c00

08001944 <calculateMovingAverage>:
static uint16_t getDifference(uint16_t a, uint16_t b);

// Gleitenden Mittelwert berechnen, sehr Speicher arm
//----------------------------------------------------------------------
static int calculateMovingAverage(int oldValue, int newValue, int n)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
	return (oldValue + ((newValue - oldValue) / n));						// MovingAverage Calculation x_n  = x_{n-1} + ((x_n+x_{n-1})/n)
 8001950:	68ba      	ldr	r2, [r7, #8]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	1ad2      	subs	r2, r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	fb92 f2f3 	sdiv	r2, r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	4413      	add	r3, r2
}
 8001960:	4618      	mov	r0, r3
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <getDifference>:
//----------------------------------------------------------------------

// Differenz Berechnen, Betrag
//----------------------------------------------------------------------
static uint16_t getDifference(uint16_t a, uint16_t b)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	460a      	mov	r2, r1
 8001976:	80fb      	strh	r3, [r7, #6]
 8001978:	4613      	mov	r3, r2
 800197a:	80bb      	strh	r3, [r7, #4]
	// A ist groesser B
	if (a > b)
 800197c:	88fa      	ldrh	r2, [r7, #6]
 800197e:	88bb      	ldrh	r3, [r7, #4]
 8001980:	429a      	cmp	r2, r3
 8001982:	d904      	bls.n	800198e <getDifference+0x22>
	{
		// B von A abziehen
		return (a - b);
 8001984:	88fa      	ldrh	r2, [r7, #6]
 8001986:	88bb      	ldrh	r3, [r7, #4]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	b29b      	uxth	r3, r3
 800198c:	e009      	b.n	80019a2 <getDifference+0x36>
	}
	// B ist groesser A
	else if (a < b)
 800198e:	88fa      	ldrh	r2, [r7, #6]
 8001990:	88bb      	ldrh	r3, [r7, #4]
 8001992:	429a      	cmp	r2, r3
 8001994:	d204      	bcs.n	80019a0 <getDifference+0x34>
	{
		// A von B abziehen
		return (b - a);
 8001996:	88ba      	ldrh	r2, [r7, #4]
 8001998:	88fb      	ldrh	r3, [r7, #6]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	b29b      	uxth	r3, r3
 800199e:	e000      	b.n	80019a2 <getDifference+0x36>
	}
	// A ist gleich B
	else
	{
		// Differenz ist 0
		return 0;
 80019a0:	2300      	movs	r3, #0
	}
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
	...

080019b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019b0:	b5b0      	push	{r4, r5, r7, lr}
 80019b2:	b0ae      	sub	sp, #184	; 0xb8
 80019b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019b6:	f000 ff5a 	bl	800286e <HAL_Init>

  /* USER CODE BEGIN Init */
	// Definiere Variablen fuer Main-Funktion
	uint8_t pwm_count = 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
	uint16_t count = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
	uint32_t timerPeriod;

	// Definiere Variablen fuer Main-Funktion
	uint8_t TxData[8], OutData[4], InData[3], status, task_start = 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
  	CAN_FilterTypeDef sFilterConfig;

  	// Erstelle Can-Nachrichten
  	CAN_TxHeaderTypeDef TxMessage = {0x124, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 80019cc:	4b60      	ldr	r3, [pc, #384]	; (8001b50 <main+0x1a0>)
 80019ce:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80019d2:	461d      	mov	r5, r3
 80019d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019d8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80019dc:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxOutput = {BMS_CAN_DIGITAL_OUT, 0, CAN_RTR_DATA, CAN_ID_STD, 4, DISABLE};
 80019e0:	4b5c      	ldr	r3, [pc, #368]	; (8001b54 <main+0x1a4>)
 80019e2:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80019e6:	461d      	mov	r5, r3
 80019e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019ec:	e895 0003 	ldmia.w	r5, {r0, r1}
 80019f0:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxInput = {BMS_CAN_DIGITAL_IN, 0, CAN_RTR_DATA, CAN_ID_STD, 3, DISABLE};
 80019f4:	4b58      	ldr	r3, [pc, #352]	; (8001b58 <main+0x1a8>)
 80019f6:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80019fa:	461d      	mov	r5, r3
 80019fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a00:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a04:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxIMD = {BMS_CAN_SAFETY, 0, CAN_RTR_DATA, CAN_ID_STD, 5, DISABLE};
 8001a08:	4b54      	ldr	r3, [pc, #336]	; (8001b5c <main+0x1ac>)
 8001a0a:	f107 040c 	add.w	r4, r7, #12
 8001a0e:	461d      	mov	r5, r3
 8001a10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a14:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a18:	e884 0003 	stmia.w	r4, {r0, r1}
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a1c:	f000 f9fa 	bl	8001e14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a20:	f7ff fdfa 	bl	8001618 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001a24:	f7ff fcea 	bl	80013fc <MX_CAN1_Init>
  MX_SPI4_Init();
 8001a28:	f000 fb04 	bl	8002034 <MX_SPI4_Init>
  MX_USART2_UART_Init();
 8001a2c:	f000 fe68 	bl	8002700 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001a30:	f7ff fc0a 	bl	8001248 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001a34:	f000 fc4e 	bl	80022d4 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001a38:	f000 fcf0 	bl	800241c <MX_TIM4_Init>
  MX_SPI1_Init();
 8001a3c:	f000 fabc 	bl	8001fb8 <MX_SPI1_Init>
  MX_CAN3_Init();
 8001a40:	f7ff fd12 	bl	8001468 <MX_CAN3_Init>
  MX_TIM6_Init();
 8001a44:	f000 fd66 	bl	8002514 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

	/* Schreibe Resetquelle auf die Konsole */
#ifdef DEBUG
	printResetSource(readResetSource());
 8001a48:	f7fe ff70 	bl	800092c <readResetSource>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7fe ffbe 	bl	80009d0 <printResetSource>

	/* Teste serielle Schnittstelle*/
	#define TEST_STRING_UART		"\nUART2 Transmitting in polling mode, Hello Diveturtle93!\n"
	uartTransmit(TEST_STRING_UART, sizeof(TEST_STRING_UART));
 8001a54:	213a      	movs	r1, #58	; 0x3a
 8001a56:	4842      	ldr	r0, [pc, #264]	; (8001b60 <main+0x1b0>)
 8001a58:	f7fe fd72 	bl	8000540 <uartTransmit>

  	// Sammel Systeminformationen
  	collectSystemInfo();
 8001a5c:	f7fe ff3c 	bl	80008d8 <collectSystemInfo>
#endif

	timerPeriod = (HAL_RCC_GetPCLK2Freq() / (htim1.Init.Prescaler / 2));
 8001a60:	f002 fd40 	bl	80044e4 <HAL_RCC_GetPCLK2Freq>
 8001a64:	4602      	mov	r2, r0
 8001a66:	4b3f      	ldr	r3, [pc, #252]	; (8001b64 <main+0x1b4>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	085b      	lsrs	r3, r3, #1
 8001a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  	// Start timer
	if (HAL_TIM_Base_Start(&htim1) != HAL_OK);
 8001a74:	483b      	ldr	r0, [pc, #236]	; (8001b64 <main+0x1b4>)
 8001a76:	f003 fa73 	bl	8004f60 <HAL_TIM_Base_Start>
	if (HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1) != HAL_OK);
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4839      	ldr	r0, [pc, #228]	; (8001b64 <main+0x1b4>)
 8001a7e:	f003 fc0f 	bl	80052a0 <HAL_TIM_IC_Start_IT>
	if (HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2) != HAL_OK);
 8001a82:	2104      	movs	r1, #4
 8001a84:	4837      	ldr	r0, [pc, #220]	; (8001b64 <main+0x1b4>)
 8001a86:	f003 fc0b 	bl	80052a0 <HAL_TIM_IC_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim6);
 8001a8a:	4837      	ldr	r0, [pc, #220]	; (8001b68 <main+0x1b8>)
 8001a8c:	f003 fad8 	bl	8005040 <HAL_TIM_Base_Start_IT>

	// Leds Testen
	testPCB_Leds();
 8001a90:	f7ff fb5e 	bl	8001150 <testPCB_Leds>
	testLeds();
 8001a94:	f7ff fb9a 	bl	80011cc <testLeds>

	// Lese alle Eingaenge
	readall_inputs();
 8001a98:	f7ff faa6 	bl	8000fe8 <readall_inputs>

  	// Starte CAN Bus
  	if((status = HAL_CAN_Start(&hcan3)) != HAL_OK)
 8001a9c:	4833      	ldr	r0, [pc, #204]	; (8001b6c <main+0x1bc>)
 8001a9e:	f001 fc2b 	bl	80032f8 <HAL_CAN_Start>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 8001aa8:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d006      	beq.n	8001abe <main+0x10e>
  	{
  		/* Start Error */
  		hal_error(status);
 8001ab0:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7fe fffb 	bl	8000ab0 <hal_error>
  		Error_Handler();
 8001aba:	f000 fa75 	bl	8001fa8 <Error_Handler>
  	}
  	uartTransmit("CAN START\n", 10);
 8001abe:	210a      	movs	r1, #10
 8001ac0:	482b      	ldr	r0, [pc, #172]	; (8001b70 <main+0x1c0>)
 8001ac2:	f7fe fd3d 	bl	8000540 <uartTransmit>

  	// Aktiviere Interrupts für CAN Bus
  	if((status = HAL_CAN_ActivateNotification(&hcan3, CAN_IT_RX_FIFO0_MSG_PENDING)) != HAL_OK)
 8001ac6:	2102      	movs	r1, #2
 8001ac8:	4828      	ldr	r0, [pc, #160]	; (8001b6c <main+0x1bc>)
 8001aca:	f001 fd34 	bl	8003536 <HAL_CAN_ActivateNotification>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 8001ad4:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d006      	beq.n	8001aea <main+0x13a>
  	{
  		/* Notification Error */
  		hal_error(status);
 8001adc:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7fe ffe5 	bl	8000ab0 <hal_error>
  		Error_Handler();
 8001ae6:	f000 fa5f 	bl	8001fa8 <Error_Handler>
  	}
  	uartTransmit("Send Message\n", 13);
 8001aea:	210d      	movs	r1, #13
 8001aec:	4821      	ldr	r0, [pc, #132]	; (8001b74 <main+0x1c4>)
 8001aee:	f7fe fd27 	bl	8000540 <uartTransmit>

  	// Filter Bank initialisieren um Daten zu empfangen
    sFilterConfig.FilterBank = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001af8:	2300      	movs	r3, #0
 8001afa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001afe:	2301      	movs	r3, #1
 8001b00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    sFilterConfig.FilterIdHigh = 0x0000;
 8001b04:	2300      	movs	r3, #0
 8001b06:	66fb      	str	r3, [r7, #108]	; 0x6c
    sFilterConfig.FilterIdLow = 0x0000;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	673b      	str	r3, [r7, #112]	; 0x70
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	677b      	str	r3, [r7, #116]	; 0x74
    sFilterConfig.FilterMaskIdLow = 0x0000;
 8001b10:	2300      	movs	r3, #0
 8001b12:	67bb      	str	r3, [r7, #120]	; 0x78
    sFilterConfig.FilterFIFOAssignment = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	67fb      	str	r3, [r7, #124]	; 0x7c
    sFilterConfig.FilterActivation = ENABLE;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    // Filter Bank schreiben
    if((status = HAL_CAN_ConfigFilter(&hcan3, &sFilterConfig)) != HAL_OK)
 8001b1e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b22:	4619      	mov	r1, r3
 8001b24:	4811      	ldr	r0, [pc, #68]	; (8001b6c <main+0x1bc>)
 8001b26:	f001 fafb 	bl	8003120 <HAL_CAN_ConfigFilter>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 8001b30:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d006      	beq.n	8001b46 <main+0x196>
    {
    	/* Filter configuration Error */
  		hal_error(status);
 8001b38:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7fe ffb7 	bl	8000ab0 <hal_error>
  		Error_Handler();
 8001b42:	f000 fa31 	bl	8001fa8 <Error_Handler>
    }

    // Test CAN Nachricht beschreiben
    for (uint8_t j = 0; j < 8; j++)
 8001b46:	2300      	movs	r3, #0
 8001b48:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
 8001b4c:	e024      	b.n	8001b98 <main+0x1e8>
 8001b4e:	bf00      	nop
 8001b50:	08007958 	.word	0x08007958
 8001b54:	08007970 	.word	0x08007970
 8001b58:	08007988 	.word	0x08007988
 8001b5c:	080079a0 	.word	0x080079a0
 8001b60:	080078fc 	.word	0x080078fc
 8001b64:	20000250 	.word	0x20000250
 8001b68:	20000204 	.word	0x20000204
 8001b6c:	200000a0 	.word	0x200000a0
 8001b70:	08007938 	.word	0x08007938
 8001b74:	08007944 	.word	0x08007944
    {
    	TxData[j] = (j + 1);
 8001b78:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 8001b7c:	f897 20b2 	ldrb.w	r2, [r7, #178]	; 0xb2
 8001b80:	3201      	adds	r2, #1
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8001b88:	440b      	add	r3, r1
 8001b8a:	f803 2c1c 	strb.w	r2, [r3, #-28]
    for (uint8_t j = 0; j < 8; j++)
 8001b8e:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 8001b92:	3301      	adds	r3, #1
 8001b94:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
 8001b98:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 8001b9c:	2b07      	cmp	r3, #7
 8001b9e:	d9eb      	bls.n	8001b78 <main+0x1c8>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		// Task wird jede Millisekunde ausgefuehrt
		if (millisekunden_flag_1 == 1)
 8001ba0:	4b8d      	ldr	r3, [pc, #564]	; (8001dd8 <main+0x428>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d10a      	bne.n	8001bc0 <main+0x210>
		{
			count++;													// Zaehler count hochzaehlen
 8001baa:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8001bae:	3301      	adds	r3, #1
 8001bb0:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
			millisekunden_flag_1 = 0;									// Setze Millisekunden-Flag zurueck
 8001bb4:	4b88      	ldr	r3, [pc, #544]	; (8001dd8 <main+0x428>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	701a      	strb	r2, [r3, #0]

			task_start = 1;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
		}
		
		if (((count % 250) == 0) && (task_start == 1))
 8001bc0:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8001bc4:	4a85      	ldr	r2, [pc, #532]	; (8001ddc <main+0x42c>)
 8001bc6:	fba2 1203 	umull	r1, r2, r2, r3
 8001bca:	0912      	lsrs	r2, r2, #4
 8001bcc:	21fa      	movs	r1, #250	; 0xfa
 8001bce:	fb01 f202 	mul.w	r2, r1, r2
 8001bd2:	1a9b      	subs	r3, r3, r2
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d140      	bne.n	8001c5c <main+0x2ac>
 8001bda:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d13c      	bne.n	8001c5c <main+0x2ac>
		{
			// Daten fuer Ausgaenge zusammenfuehren
			OutData[0] = system_out.systemoutput;
 8001be2:	4b7f      	ldr	r3, [pc, #508]	; (8001de0 <main+0x430>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
			OutData[1] = highcurrent_out.high_out;
 8001bea:	4b7e      	ldr	r3, [pc, #504]	; (8001de4 <main+0x434>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
			OutData[2] = leuchten_out.ledoutput;
 8001bf2:	4b7d      	ldr	r3, [pc, #500]	; (8001de8 <main+0x438>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
			OutData[3] = komfort_out.komfortoutput;
 8001bfa:	4b7c      	ldr	r3, [pc, #496]	; (8001dec <main+0x43c>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
	
			// Sende Nachricht digitale Ausgaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxOutput, OutData, (uint32_t *)CAN_TX_MAILBOX0);
 8001c02:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001c06:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	4878      	ldr	r0, [pc, #480]	; (8001df0 <main+0x440>)
 8001c0e:	f001 fbb7 	bl	8003380 <HAL_CAN_AddTxMessage>
 8001c12:	4603      	mov	r3, r0
 8001c14:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
			//hal_error(status);

			// Daten fuer Eingaenge zusammenfuehren
			InData[0] = system_in.systeminput;
 8001c18:	4b76      	ldr	r3, [pc, #472]	; (8001df4 <main+0x444>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
			InData[1] = sdc_in.sdcinput;
 8001c20:	4b75      	ldr	r3, [pc, #468]	; (8001df8 <main+0x448>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
			InData[2] = komfort_in.komfortinput;
 8001c28:	4b74      	ldr	r3, [pc, #464]	; (8001dfc <main+0x44c>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
	
			// Sende Nachricht digitale Eingaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxInput, InData, (uint32_t *)CAN_TX_MAILBOX0);
 8001c30:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8001c34:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001c38:	2301      	movs	r3, #1
 8001c3a:	486d      	ldr	r0, [pc, #436]	; (8001df0 <main+0x440>)
 8001c3c:	f001 fba0 	bl	8003380 <HAL_CAN_AddTxMessage>
 8001c40:	4603      	mov	r3, r0
 8001c42:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
			//hal_error(status);
	
			// Sende Nachricht digitale Eingaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxMessage, TxData, (uint32_t *)CAN_TX_MAILBOX0);
 8001c46:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8001c4a:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8001c4e:	2301      	movs	r3, #1
 8001c50:	4867      	ldr	r0, [pc, #412]	; (8001df0 <main+0x440>)
 8001c52:	f001 fb95 	bl	8003380 <HAL_CAN_AddTxMessage>
 8001c56:	4603      	mov	r3, r0
 8001c58:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
			//hal_error(status);
		}

		// Task wird alle 500 Millisekunden ausgefuehrt
		if (((count % 500) == 0) && (task_start == 1))
 8001c5c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8001c60:	4a5e      	ldr	r2, [pc, #376]	; (8001ddc <main+0x42c>)
 8001c62:	fba2 1203 	umull	r1, r2, r2, r3
 8001c66:	0952      	lsrs	r2, r2, #5
 8001c68:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001c6c:	fb01 f202 	mul.w	r2, r1, r2
 8001c70:	1a9b      	subs	r3, r3, r2
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f040 80a6 	bne.w	8001dc6 <main+0x416>
 8001c7a:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	f040 80a1 	bne.w	8001dc6 <main+0x416>
		{
			if (pwm_change == 1)
 8001c84:	4b5e      	ldr	r3, [pc, #376]	; (8001e00 <main+0x450>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d153      	bne.n	8001d36 <main+0x386>
			{
				if (rising != 0 && falling != 0)
 8001c8e:	4b5d      	ldr	r3, [pc, #372]	; (8001e04 <main+0x454>)
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d04a      	beq.n	8001d2e <main+0x37e>
 8001c98:	4b5b      	ldr	r3, [pc, #364]	; (8001e08 <main+0x458>)
 8001c9a:	881b      	ldrh	r3, [r3, #0]
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d045      	beq.n	8001d2e <main+0x37e>
				{
					int diff = getDifference(rising, falling);
 8001ca2:	4b58      	ldr	r3, [pc, #352]	; (8001e04 <main+0x454>)
 8001ca4:	881b      	ldrh	r3, [r3, #0]
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	4a57      	ldr	r2, [pc, #348]	; (8001e08 <main+0x458>)
 8001caa:	8812      	ldrh	r2, [r2, #0]
 8001cac:	b292      	uxth	r2, r2
 8001cae:	4611      	mov	r1, r2
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff fe5b 	bl	800196c <getDifference>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
					imd.DutyCycle = 100 - round((float)(diff * 100) / (float)rising);	// (width / period ) * 100
 8001cbc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001cc0:	2264      	movs	r2, #100	; 0x64
 8001cc2:	fb02 f303 	mul.w	r3, r2, r3
 8001cc6:	ee07 3a90 	vmov	s15, r3
 8001cca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001cce:	4b4d      	ldr	r3, [pc, #308]	; (8001e04 <main+0x454>)
 8001cd0:	881b      	ldrh	r3, [r3, #0]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	ee07 3a90 	vmov	s15, r3
 8001cd8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001cdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ce0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ce4:	eeb0 0b47 	vmov.f64	d0, d7
 8001ce8:	f005 fbf4 	bl	80074d4 <round>
 8001cec:	eeb0 7b40 	vmov.f64	d7, d0
 8001cf0:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8001dd0 <main+0x420>
 8001cf4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001cf8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001cfc:	edc7 7a01 	vstr	s15, [r7, #4]
 8001d00:	793b      	ldrb	r3, [r7, #4]
 8001d02:	b2d9      	uxtb	r1, r3
 8001d04:	4a41      	ldr	r2, [pc, #260]	; (8001e0c <main+0x45c>)
 8001d06:	7913      	ldrb	r3, [r2, #4]
 8001d08:	f361 0306 	bfi	r3, r1, #0, #7
 8001d0c:	7113      	strb	r3, [r2, #4]
					imd.Frequency = timerPeriod / rising;				// timer restarts after rising edge so time between two rising edge is whatever is measured
 8001d0e:	4b3d      	ldr	r3, [pc, #244]	; (8001e04 <main+0x454>)
 8001d10:	881b      	ldrh	r3, [r3, #0]
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	461a      	mov	r2, r3
 8001d16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d22:	b2d9      	uxtb	r1, r3
 8001d24:	4a39      	ldr	r2, [pc, #228]	; (8001e0c <main+0x45c>)
 8001d26:	7813      	ldrb	r3, [r2, #0]
 8001d28:	f361 0305 	bfi	r3, r1, #0, #6
 8001d2c:	7013      	strb	r3, [r2, #0]
				}

				pwm_change = 0;
 8001d2e:	4b34      	ldr	r3, [pc, #208]	; (8001e00 <main+0x450>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	701a      	strb	r2, [r3, #0]
 8001d34:	e01c      	b.n	8001d70 <main+0x3c0>
			}
			else
			{
				if (pwm_count == 1)
 8001d36:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d113      	bne.n	8001d66 <main+0x3b6>
				{
					imd.DutyCycle = 0;
 8001d3e:	4a33      	ldr	r2, [pc, #204]	; (8001e0c <main+0x45c>)
 8001d40:	7913      	ldrb	r3, [r2, #4]
 8001d42:	f36f 0306 	bfc	r3, #0, #7
 8001d46:	7113      	strb	r3, [r2, #4]
					imd.Frequency = 0;
 8001d48:	4a30      	ldr	r2, [pc, #192]	; (8001e0c <main+0x45c>)
 8001d4a:	7813      	ldrb	r3, [r2, #0]
 8001d4c:	f36f 0305 	bfc	r3, #0, #6
 8001d50:	7013      	strb	r3, [r2, #0]
					rising = 0;
 8001d52:	4b2c      	ldr	r3, [pc, #176]	; (8001e04 <main+0x454>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	801a      	strh	r2, [r3, #0]
					falling = 0;
 8001d58:	4b2b      	ldr	r3, [pc, #172]	; (8001e08 <main+0x458>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	801a      	strh	r2, [r3, #0]
					pwm_count = 0;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 8001d64:	e004      	b.n	8001d70 <main+0x3c0>
				}
				else
				{
					pwm_count++;
 8001d66:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
				}
			}

			uartTransmitNumber(falling, 10);
 8001d70:	4b25      	ldr	r3, [pc, #148]	; (8001e08 <main+0x458>)
 8001d72:	881b      	ldrh	r3, [r3, #0]
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	210a      	movs	r1, #10
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7fe fbf5 	bl	8000568 <uartTransmitNumber>
			uartTransmit("\n", 1);
 8001d7e:	2101      	movs	r1, #1
 8001d80:	4823      	ldr	r0, [pc, #140]	; (8001e10 <main+0x460>)
 8001d82:	f7fe fbdd 	bl	8000540 <uartTransmit>
			uartTransmitNumber(rising, 10);
 8001d86:	4b1f      	ldr	r3, [pc, #124]	; (8001e04 <main+0x454>)
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	210a      	movs	r1, #10
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe fbea 	bl	8000568 <uartTransmitNumber>
			uartTransmit("\n", 1);
 8001d94:	2101      	movs	r1, #1
 8001d96:	481e      	ldr	r0, [pc, #120]	; (8001e10 <main+0x460>)
 8001d98:	f7fe fbd2 	bl	8000540 <uartTransmit>
			uartTransmitNumber(timerPeriod, 10);
 8001d9c:	210a      	movs	r1, #10
 8001d9e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8001da2:	f7fe fbe1 	bl	8000568 <uartTransmitNumber>
			uartTransmit("\n", 1);
 8001da6:	2101      	movs	r1, #1
 8001da8:	4819      	ldr	r0, [pc, #100]	; (8001e10 <main+0x460>)
 8001daa:	f7fe fbc9 	bl	8000540 <uartTransmit>

			imd_status();
 8001dae:	f7fe feaf 	bl	8000b10 <imd_status>

			HAL_CAN_AddTxMessage(&hcan3, &TxIMD, imd.status, (uint32_t *)CAN_TX_MAILBOX0);
 8001db2:	f107 010c 	add.w	r1, r7, #12
 8001db6:	2301      	movs	r3, #1
 8001db8:	4a14      	ldr	r2, [pc, #80]	; (8001e0c <main+0x45c>)
 8001dba:	480d      	ldr	r0, [pc, #52]	; (8001df0 <main+0x440>)
 8001dbc:	f001 fae0 	bl	8003380 <HAL_CAN_AddTxMessage>

			count = 0;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
		}

		task_start = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
		if (millisekunden_flag_1 == 1)
 8001dcc:	e6e8      	b.n	8001ba0 <main+0x1f0>
 8001dce:	bf00      	nop
 8001dd0:	00000000 	.word	0x00000000
 8001dd4:	40590000 	.word	0x40590000
 8001dd8:	20000030 	.word	0x20000030
 8001ddc:	10624dd3 	.word	0x10624dd3
 8001de0:	20000040 	.word	0x20000040
 8001de4:	20000048 	.word	0x20000048
 8001de8:	20000050 	.word	0x20000050
 8001dec:	20000034 	.word	0x20000034
 8001df0:	200000a0 	.word	0x200000a0
 8001df4:	20000044 	.word	0x20000044
 8001df8:	20000054 	.word	0x20000054
 8001dfc:	2000004c 	.word	0x2000004c
 8001e00:	20000031 	.word	0x20000031
 8001e04:	2000002c 	.word	0x2000002c
 8001e08:	2000002e 	.word	0x2000002e
 8001e0c:	20000038 	.word	0x20000038
 8001e10:	08007954 	.word	0x08007954

08001e14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b094      	sub	sp, #80	; 0x50
 8001e18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e1a:	f107 031c 	add.w	r3, r7, #28
 8001e1e:	2234      	movs	r2, #52	; 0x34
 8001e20:	2100      	movs	r1, #0
 8001e22:	4618      	mov	r0, r3
 8001e24:	f005 fb0a 	bl	800743c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e28:	f107 0308 	add.w	r3, r7, #8
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]
 8001e36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e38:	4b2c      	ldr	r3, [pc, #176]	; (8001eec <SystemClock_Config+0xd8>)
 8001e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3c:	4a2b      	ldr	r2, [pc, #172]	; (8001eec <SystemClock_Config+0xd8>)
 8001e3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e42:	6413      	str	r3, [r2, #64]	; 0x40
 8001e44:	4b29      	ldr	r3, [pc, #164]	; (8001eec <SystemClock_Config+0xd8>)
 8001e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4c:	607b      	str	r3, [r7, #4]
 8001e4e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e50:	4b27      	ldr	r3, [pc, #156]	; (8001ef0 <SystemClock_Config+0xdc>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a26      	ldr	r2, [pc, #152]	; (8001ef0 <SystemClock_Config+0xdc>)
 8001e56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e5a:	6013      	str	r3, [r2, #0]
 8001e5c:	4b24      	ldr	r3, [pc, #144]	; (8001ef0 <SystemClock_Config+0xdc>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e64:	603b      	str	r3, [r7, #0]
 8001e66:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e70:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e72:	2302      	movs	r3, #2
 8001e74:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e7a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001e7c:	2319      	movs	r3, #25
 8001e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001e80:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001e84:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e86:	2302      	movs	r3, #2
 8001e88:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001e8a:	2308      	movs	r3, #8
 8001e8c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e92:	f107 031c 	add.w	r3, r7, #28
 8001e96:	4618      	mov	r0, r3
 8001e98:	f001 feb4 	bl	8003c04 <HAL_RCC_OscConfig>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001ea2:	f000 f881 	bl	8001fa8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001ea6:	f001 fe5d 	bl	8003b64 <HAL_PWREx_EnableOverDrive>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001eb0:	f000 f87a 	bl	8001fa8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eb4:	230f      	movs	r3, #15
 8001eb6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ec0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ec4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ec6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eca:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001ecc:	f107 0308 	add.w	r3, r7, #8
 8001ed0:	2107      	movs	r1, #7
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f002 f944 	bl	8004160 <HAL_RCC_ClockConfig>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001ede:	f000 f863 	bl	8001fa8 <Error_Handler>
  }
}
 8001ee2:	bf00      	nop
 8001ee4:	3750      	adds	r7, #80	; 0x50
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	40007000 	.word	0x40007000

08001ef4 <HAL_TIM_PeriodElapsedCallback>:
	can_change = 1;
}

// Timer-Interrupt: Timer ist uebergelaufen
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
	// Kontrolliere welcher Timer den Ueberlauf ausgeloest hat
	if (htim == &htim6)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a06      	ldr	r2, [pc, #24]	; (8001f18 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d102      	bne.n	8001f0a <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		millisekunden_flag_1 = 1;
 8001f04:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001f06:	2201      	movs	r2, #1
 8001f08:	701a      	strb	r2, [r3, #0]
	}
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	20000204 	.word	0x20000204
 8001f1c:	20000030 	.word	0x20000030

08001f20 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f20:	b590      	push	{r4, r7, lr}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
	// Timer IMD
	if (htim == &htim1)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a1b      	ldr	r2, [pc, #108]	; (8001f98 <HAL_TIM_IC_CaptureCallback+0x78>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d12f      	bne.n	8001f90 <HAL_TIM_IC_CaptureCallback+0x70>
	{
		pwm_change = 1;
 8001f30:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <HAL_TIM_IC_CaptureCallback+0x7c>)
 8001f32:	2201      	movs	r2, #1
 8001f34:	701a      	strb	r2, [r3, #0]
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	7f1b      	ldrb	r3, [r3, #28]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d112      	bne.n	8001f64 <HAL_TIM_IC_CaptureCallback+0x44>
		{
			rising = calculateMovingAverage(rising, HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1), 10);
 8001f3e:	4b18      	ldr	r3, [pc, #96]	; (8001fa0 <HAL_TIM_IC_CaptureCallback+0x80>)
 8001f40:	881b      	ldrh	r3, [r3, #0]
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	461c      	mov	r4, r3
 8001f46:	2100      	movs	r1, #0
 8001f48:	4813      	ldr	r0, [pc, #76]	; (8001f98 <HAL_TIM_IC_CaptureCallback+0x78>)
 8001f4a:	f003 fed5 	bl	8005cf8 <HAL_TIM_ReadCapturedValue>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	220a      	movs	r2, #10
 8001f52:	4619      	mov	r1, r3
 8001f54:	4620      	mov	r0, r4
 8001f56:	f7ff fcf5 	bl	8001944 <calculateMovingAverage>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	4b10      	ldr	r3, [pc, #64]	; (8001fa0 <HAL_TIM_IC_CaptureCallback+0x80>)
 8001f60:	801a      	strh	r2, [r3, #0]
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
		{
			falling = calculateMovingAverage(falling, HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2), 10);
		}
	}
}
 8001f62:	e015      	b.n	8001f90 <HAL_TIM_IC_CaptureCallback+0x70>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	7f1b      	ldrb	r3, [r3, #28]
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d111      	bne.n	8001f90 <HAL_TIM_IC_CaptureCallback+0x70>
			falling = calculateMovingAverage(falling, HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2), 10);
 8001f6c:	4b0d      	ldr	r3, [pc, #52]	; (8001fa4 <HAL_TIM_IC_CaptureCallback+0x84>)
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	461c      	mov	r4, r3
 8001f74:	2104      	movs	r1, #4
 8001f76:	4808      	ldr	r0, [pc, #32]	; (8001f98 <HAL_TIM_IC_CaptureCallback+0x78>)
 8001f78:	f003 febe 	bl	8005cf8 <HAL_TIM_ReadCapturedValue>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	220a      	movs	r2, #10
 8001f80:	4619      	mov	r1, r3
 8001f82:	4620      	mov	r0, r4
 8001f84:	f7ff fcde 	bl	8001944 <calculateMovingAverage>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <HAL_TIM_IC_CaptureCallback+0x84>)
 8001f8e:	801a      	strh	r2, [r3, #0]
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd90      	pop	{r4, r7, pc}
 8001f98:	20000250 	.word	0x20000250
 8001f9c:	20000031 	.word	0x20000031
 8001fa0:	2000002c 	.word	0x2000002c
 8001fa4:	2000002e 	.word	0x2000002e

08001fa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001fac:	bf00      	nop
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
	...

08001fb8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001fbc:	4b1b      	ldr	r3, [pc, #108]	; (800202c <MX_SPI1_Init+0x74>)
 8001fbe:	4a1c      	ldr	r2, [pc, #112]	; (8002030 <MX_SPI1_Init+0x78>)
 8001fc0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001fc2:	4b1a      	ldr	r3, [pc, #104]	; (800202c <MX_SPI1_Init+0x74>)
 8001fc4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fc8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001fca:	4b18      	ldr	r3, [pc, #96]	; (800202c <MX_SPI1_Init+0x74>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001fd0:	4b16      	ldr	r3, [pc, #88]	; (800202c <MX_SPI1_Init+0x74>)
 8001fd2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001fd6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fd8:	4b14      	ldr	r3, [pc, #80]	; (800202c <MX_SPI1_Init+0x74>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fde:	4b13      	ldr	r3, [pc, #76]	; (800202c <MX_SPI1_Init+0x74>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001fe4:	4b11      	ldr	r3, [pc, #68]	; (800202c <MX_SPI1_Init+0x74>)
 8001fe6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001fea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fec:	4b0f      	ldr	r3, [pc, #60]	; (800202c <MX_SPI1_Init+0x74>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ff2:	4b0e      	ldr	r3, [pc, #56]	; (800202c <MX_SPI1_Init+0x74>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ff8:	4b0c      	ldr	r3, [pc, #48]	; (800202c <MX_SPI1_Init+0x74>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ffe:	4b0b      	ldr	r3, [pc, #44]	; (800202c <MX_SPI1_Init+0x74>)
 8002000:	2200      	movs	r2, #0
 8002002:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002004:	4b09      	ldr	r3, [pc, #36]	; (800202c <MX_SPI1_Init+0x74>)
 8002006:	2207      	movs	r2, #7
 8002008:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800200a:	4b08      	ldr	r3, [pc, #32]	; (800202c <MX_SPI1_Init+0x74>)
 800200c:	2200      	movs	r2, #0
 800200e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002010:	4b06      	ldr	r3, [pc, #24]	; (800202c <MX_SPI1_Init+0x74>)
 8002012:	2208      	movs	r2, #8
 8002014:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002016:	4805      	ldr	r0, [pc, #20]	; (800202c <MX_SPI1_Init+0x74>)
 8002018:	f002 fea0 	bl	8004d5c <HAL_SPI_Init>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002022:	f7ff ffc1 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000154 	.word	0x20000154
 8002030:	40013000 	.word	0x40013000

08002034 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002038:	4b1b      	ldr	r3, [pc, #108]	; (80020a8 <MX_SPI4_Init+0x74>)
 800203a:	4a1c      	ldr	r2, [pc, #112]	; (80020ac <MX_SPI4_Init+0x78>)
 800203c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800203e:	4b1a      	ldr	r3, [pc, #104]	; (80020a8 <MX_SPI4_Init+0x74>)
 8002040:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002044:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002046:	4b18      	ldr	r3, [pc, #96]	; (80020a8 <MX_SPI4_Init+0x74>)
 8002048:	2200      	movs	r2, #0
 800204a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 800204c:	4b16      	ldr	r3, [pc, #88]	; (80020a8 <MX_SPI4_Init+0x74>)
 800204e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002052:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002054:	4b14      	ldr	r3, [pc, #80]	; (80020a8 <MX_SPI4_Init+0x74>)
 8002056:	2200      	movs	r2, #0
 8002058:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800205a:	4b13      	ldr	r3, [pc, #76]	; (80020a8 <MX_SPI4_Init+0x74>)
 800205c:	2200      	movs	r2, #0
 800205e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002060:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <MX_SPI4_Init+0x74>)
 8002062:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002066:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002068:	4b0f      	ldr	r3, [pc, #60]	; (80020a8 <MX_SPI4_Init+0x74>)
 800206a:	2200      	movs	r2, #0
 800206c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800206e:	4b0e      	ldr	r3, [pc, #56]	; (80020a8 <MX_SPI4_Init+0x74>)
 8002070:	2200      	movs	r2, #0
 8002072:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002074:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <MX_SPI4_Init+0x74>)
 8002076:	2200      	movs	r2, #0
 8002078:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800207a:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <MX_SPI4_Init+0x74>)
 800207c:	2200      	movs	r2, #0
 800207e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8002080:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <MX_SPI4_Init+0x74>)
 8002082:	2207      	movs	r2, #7
 8002084:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002086:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <MX_SPI4_Init+0x74>)
 8002088:	2200      	movs	r2, #0
 800208a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800208c:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <MX_SPI4_Init+0x74>)
 800208e:	2208      	movs	r2, #8
 8002090:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002092:	4805      	ldr	r0, [pc, #20]	; (80020a8 <MX_SPI4_Init+0x74>)
 8002094:	f002 fe62 	bl	8004d5c <HAL_SPI_Init>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 800209e:	f7ff ff83 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	200000f0 	.word	0x200000f0
 80020ac:	40013400 	.word	0x40013400

080020b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b08c      	sub	sp, #48	; 0x30
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b8:	f107 031c 	add.w	r3, r7, #28
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	60da      	str	r2, [r3, #12]
 80020c6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a3d      	ldr	r2, [pc, #244]	; (80021c4 <HAL_SPI_MspInit+0x114>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d145      	bne.n	800215e <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020d2:	4b3d      	ldr	r3, [pc, #244]	; (80021c8 <HAL_SPI_MspInit+0x118>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	4a3c      	ldr	r2, [pc, #240]	; (80021c8 <HAL_SPI_MspInit+0x118>)
 80020d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020dc:	6453      	str	r3, [r2, #68]	; 0x44
 80020de:	4b3a      	ldr	r3, [pc, #232]	; (80021c8 <HAL_SPI_MspInit+0x118>)
 80020e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020e6:	61bb      	str	r3, [r7, #24]
 80020e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020ea:	4b37      	ldr	r3, [pc, #220]	; (80021c8 <HAL_SPI_MspInit+0x118>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	4a36      	ldr	r2, [pc, #216]	; (80021c8 <HAL_SPI_MspInit+0x118>)
 80020f0:	f043 0308 	orr.w	r3, r3, #8
 80020f4:	6313      	str	r3, [r2, #48]	; 0x30
 80020f6:	4b34      	ldr	r3, [pc, #208]	; (80021c8 <HAL_SPI_MspInit+0x118>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002102:	4b31      	ldr	r3, [pc, #196]	; (80021c8 <HAL_SPI_MspInit+0x118>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	4a30      	ldr	r2, [pc, #192]	; (80021c8 <HAL_SPI_MspInit+0x118>)
 8002108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800210c:	6313      	str	r3, [r2, #48]	; 0x30
 800210e:	4b2e      	ldr	r3, [pc, #184]	; (80021c8 <HAL_SPI_MspInit+0x118>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002116:	613b      	str	r3, [r7, #16]
 8002118:	693b      	ldr	r3, [r7, #16]
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG10     ------> SPI1_NSS
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = POTI_MOSI_Pin;
 800211a:	2380      	movs	r3, #128	; 0x80
 800211c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211e:	2302      	movs	r3, #2
 8002120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002122:	2300      	movs	r3, #0
 8002124:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002126:	2303      	movs	r3, #3
 8002128:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800212a:	2305      	movs	r3, #5
 800212c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(POTI_MOSI_GPIO_Port, &GPIO_InitStruct);
 800212e:	f107 031c 	add.w	r3, r7, #28
 8002132:	4619      	mov	r1, r3
 8002134:	4825      	ldr	r0, [pc, #148]	; (80021cc <HAL_SPI_MspInit+0x11c>)
 8002136:	f001 fb37 	bl	80037a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POTI_MISO_Pin|POTI_CS_Pin|POTI_SCK_Pin;
 800213a:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800213e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002140:	2302      	movs	r3, #2
 8002142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002144:	2300      	movs	r3, #0
 8002146:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002148:	2303      	movs	r3, #3
 800214a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800214c:	2305      	movs	r3, #5
 800214e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002150:	f107 031c 	add.w	r3, r7, #28
 8002154:	4619      	mov	r1, r3
 8002156:	481e      	ldr	r0, [pc, #120]	; (80021d0 <HAL_SPI_MspInit+0x120>)
 8002158:	f001 fb26 	bl	80037a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800215c:	e02d      	b.n	80021ba <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI4)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a1c      	ldr	r2, [pc, #112]	; (80021d4 <HAL_SPI_MspInit+0x124>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d128      	bne.n	80021ba <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002168:	4b17      	ldr	r3, [pc, #92]	; (80021c8 <HAL_SPI_MspInit+0x118>)
 800216a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216c:	4a16      	ldr	r2, [pc, #88]	; (80021c8 <HAL_SPI_MspInit+0x118>)
 800216e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002172:	6453      	str	r3, [r2, #68]	; 0x44
 8002174:	4b14      	ldr	r3, [pc, #80]	; (80021c8 <HAL_SPI_MspInit+0x118>)
 8002176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002178:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002180:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <HAL_SPI_MspInit+0x118>)
 8002182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002184:	4a10      	ldr	r2, [pc, #64]	; (80021c8 <HAL_SPI_MspInit+0x118>)
 8002186:	f043 0310 	orr.w	r3, r3, #16
 800218a:	6313      	str	r3, [r2, #48]	; 0x30
 800218c:	4b0e      	ldr	r3, [pc, #56]	; (80021c8 <HAL_SPI_MspInit+0x118>)
 800218e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002190:	f003 0310 	and.w	r3, r3, #16
 8002194:	60bb      	str	r3, [r7, #8]
 8002196:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ISOSPI_CS_Pin|ISOSPI_SCK_Pin|ISOSPI_MISO_Pin|ISOSPI_MOSI_Pin;
 8002198:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800219c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219e:	2302      	movs	r3, #2
 80021a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a6:	2303      	movs	r3, #3
 80021a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80021aa:	2305      	movs	r3, #5
 80021ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021ae:	f107 031c 	add.w	r3, r7, #28
 80021b2:	4619      	mov	r1, r3
 80021b4:	4808      	ldr	r0, [pc, #32]	; (80021d8 <HAL_SPI_MspInit+0x128>)
 80021b6:	f001 faf7 	bl	80037a8 <HAL_GPIO_Init>
}
 80021ba:	bf00      	nop
 80021bc:	3730      	adds	r7, #48	; 0x30
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40013000 	.word	0x40013000
 80021c8:	40023800 	.word	0x40023800
 80021cc:	40020c00 	.word	0x40020c00
 80021d0:	40021800 	.word	0x40021800
 80021d4:	40013400 	.word	0x40013400
 80021d8:	40021000 	.word	0x40021000

080021dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80021e2:	4b0f      	ldr	r3, [pc, #60]	; (8002220 <HAL_MspInit+0x44>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	4a0e      	ldr	r2, [pc, #56]	; (8002220 <HAL_MspInit+0x44>)
 80021e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ec:	6413      	str	r3, [r2, #64]	; 0x40
 80021ee:	4b0c      	ldr	r3, [pc, #48]	; (8002220 <HAL_MspInit+0x44>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f6:	607b      	str	r3, [r7, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021fa:	4b09      	ldr	r3, [pc, #36]	; (8002220 <HAL_MspInit+0x44>)
 80021fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fe:	4a08      	ldr	r2, [pc, #32]	; (8002220 <HAL_MspInit+0x44>)
 8002200:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002204:	6453      	str	r3, [r2, #68]	; 0x44
 8002206:	4b06      	ldr	r3, [pc, #24]	; (8002220 <HAL_MspInit+0x44>)
 8002208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800220e:	603b      	str	r3, [r7, #0]
 8002210:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	40023800 	.word	0x40023800

08002224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002232:	b480      	push	{r7}
 8002234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002236:	e7fe      	b.n	8002236 <HardFault_Handler+0x4>

08002238 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800223c:	e7fe      	b.n	800223c <MemManage_Handler+0x4>

0800223e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800223e:	b480      	push	{r7}
 8002240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002242:	e7fe      	b.n	8002242 <BusFault_Handler+0x4>

08002244 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002248:	e7fe      	b.n	8002248 <UsageFault_Handler+0x4>

0800224a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800224a:	b480      	push	{r7}
 800224c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800225c:	bf00      	nop
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002266:	b480      	push	{r7}
 8002268:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800226a:	bf00      	nop
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002278:	f000 fb36 	bl	80028e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800227c:	bf00      	nop
 800227e:	bd80      	pop	{r7, pc}

08002280 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002284:	4802      	ldr	r0, [pc, #8]	; (8002290 <TIM1_CC_IRQHandler+0x10>)
 8002286:	f003 f95b 	bl	8005540 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20000250 	.word	0x20000250

08002294 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002298:	4802      	ldr	r0, [pc, #8]	; (80022a4 <TIM6_DAC_IRQHandler+0x10>)
 800229a:	f003 f951 	bl	8005540 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20000204 	.word	0x20000204

080022a8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022ac:	4b08      	ldr	r3, [pc, #32]	; (80022d0 <SystemInit+0x28>)
 80022ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b2:	4a07      	ldr	r2, [pc, #28]	; (80022d0 <SystemInit+0x28>)
 80022b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80022bc:	4b04      	ldr	r3, [pc, #16]	; (80022d0 <SystemInit+0x28>)
 80022be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022c2:	609a      	str	r2, [r3, #8]
#endif
}
 80022c4:	bf00      	nop
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b090      	sub	sp, #64	; 0x40
 80022d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022de:	2200      	movs	r2, #0
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	605a      	str	r2, [r3, #4]
 80022e4:	609a      	str	r2, [r3, #8]
 80022e6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80022e8:	f107 031c 	add.w	r3, r7, #28
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	609a      	str	r2, [r3, #8]
 80022f4:	60da      	str	r2, [r3, #12]
 80022f6:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80022f8:	f107 030c 	add.w	r3, r7, #12
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002306:	463b      	mov	r3, r7
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002310:	4b40      	ldr	r3, [pc, #256]	; (8002414 <MX_TIM1_Init+0x140>)
 8002312:	4a41      	ldr	r2, [pc, #260]	; (8002418 <MX_TIM1_Init+0x144>)
 8002314:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 675 - 1;
 8002316:	4b3f      	ldr	r3, [pc, #252]	; (8002414 <MX_TIM1_Init+0x140>)
 8002318:	f240 22a2 	movw	r2, #674	; 0x2a2
 800231c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800231e:	4b3d      	ldr	r3, [pc, #244]	; (8002414 <MX_TIM1_Init+0x140>)
 8002320:	2200      	movs	r2, #0
 8002322:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002324:	4b3b      	ldr	r3, [pc, #236]	; (8002414 <MX_TIM1_Init+0x140>)
 8002326:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800232a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800232c:	4b39      	ldr	r3, [pc, #228]	; (8002414 <MX_TIM1_Init+0x140>)
 800232e:	2200      	movs	r2, #0
 8002330:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002332:	4b38      	ldr	r3, [pc, #224]	; (8002414 <MX_TIM1_Init+0x140>)
 8002334:	2200      	movs	r2, #0
 8002336:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002338:	4b36      	ldr	r3, [pc, #216]	; (8002414 <MX_TIM1_Init+0x140>)
 800233a:	2200      	movs	r2, #0
 800233c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800233e:	4835      	ldr	r0, [pc, #212]	; (8002414 <MX_TIM1_Init+0x140>)
 8002340:	f002 fdb7 	bl	8004eb2 <HAL_TIM_Base_Init>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800234a:	f7ff fe2d 	bl	8001fa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800234e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002352:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002354:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002358:	4619      	mov	r1, r3
 800235a:	482e      	ldr	r0, [pc, #184]	; (8002414 <MX_TIM1_Init+0x140>)
 800235c:	f003 fbc0 	bl	8005ae0 <HAL_TIM_ConfigClockSource>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002366:	f7ff fe1f 	bl	8001fa8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800236a:	482a      	ldr	r0, [pc, #168]	; (8002414 <MX_TIM1_Init+0x140>)
 800236c:	f002 ff37 	bl	80051de <HAL_TIM_IC_Init>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002376:	f7ff fe17 	bl	8001fa8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800237a:	2304      	movs	r3, #4
 800237c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800237e:	2350      	movs	r3, #80	; 0x50
 8002380:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002382:	2300      	movs	r3, #0
 8002384:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8002386:	2300      	movs	r3, #0
 8002388:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 800238a:	2300      	movs	r3, #0
 800238c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800238e:	f107 031c 	add.w	r3, r7, #28
 8002392:	4619      	mov	r1, r3
 8002394:	481f      	ldr	r0, [pc, #124]	; (8002414 <MX_TIM1_Init+0x140>)
 8002396:	f003 fc6d 	bl	8005c74 <HAL_TIM_SlaveConfigSynchro>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 80023a0:	f7ff fe02 	bl	8001fa8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80023a4:	2300      	movs	r3, #0
 80023a6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80023a8:	2301      	movs	r3, #1
 80023aa:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80023ac:	2300      	movs	r3, #0
 80023ae:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80023b4:	f107 030c 	add.w	r3, r7, #12
 80023b8:	2200      	movs	r2, #0
 80023ba:	4619      	mov	r1, r3
 80023bc:	4815      	ldr	r0, [pc, #84]	; (8002414 <MX_TIM1_Init+0x140>)
 80023be:	f003 f9de 	bl	800577e <HAL_TIM_IC_ConfigChannel>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80023c8:	f7ff fdee 	bl	8001fa8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80023cc:	2302      	movs	r3, #2
 80023ce:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80023d0:	2302      	movs	r3, #2
 80023d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80023d4:	f107 030c 	add.w	r3, r7, #12
 80023d8:	2204      	movs	r2, #4
 80023da:	4619      	mov	r1, r3
 80023dc:	480d      	ldr	r0, [pc, #52]	; (8002414 <MX_TIM1_Init+0x140>)
 80023de:	f003 f9ce 	bl	800577e <HAL_TIM_IC_ConfigChannel>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 80023e8:	f7ff fdde 	bl	8001fa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023ec:	2300      	movs	r3, #0
 80023ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80023f0:	2300      	movs	r3, #0
 80023f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023f4:	2300      	movs	r3, #0
 80023f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80023f8:	463b      	mov	r3, r7
 80023fa:	4619      	mov	r1, r3
 80023fc:	4805      	ldr	r0, [pc, #20]	; (8002414 <MX_TIM1_Init+0x140>)
 80023fe:	f004 fa59 	bl	80068b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8002408:	f7ff fdce 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800240c:	bf00      	nop
 800240e:	3740      	adds	r7, #64	; 0x40
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	20000250 	.word	0x20000250
 8002418:	40010000 	.word	0x40010000

0800241c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b08a      	sub	sp, #40	; 0x28
 8002420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002422:	f107 031c 	add.w	r3, r7, #28
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	605a      	str	r2, [r3, #4]
 800242c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800242e:	463b      	mov	r3, r7
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	605a      	str	r2, [r3, #4]
 8002436:	609a      	str	r2, [r3, #8]
 8002438:	60da      	str	r2, [r3, #12]
 800243a:	611a      	str	r2, [r3, #16]
 800243c:	615a      	str	r2, [r3, #20]
 800243e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002440:	4b32      	ldr	r3, [pc, #200]	; (800250c <MX_TIM4_Init+0xf0>)
 8002442:	4a33      	ldr	r2, [pc, #204]	; (8002510 <MX_TIM4_Init+0xf4>)
 8002444:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002446:	4b31      	ldr	r3, [pc, #196]	; (800250c <MX_TIM4_Init+0xf0>)
 8002448:	2200      	movs	r2, #0
 800244a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800244c:	4b2f      	ldr	r3, [pc, #188]	; (800250c <MX_TIM4_Init+0xf0>)
 800244e:	2200      	movs	r2, #0
 8002450:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002452:	4b2e      	ldr	r3, [pc, #184]	; (800250c <MX_TIM4_Init+0xf0>)
 8002454:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002458:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800245a:	4b2c      	ldr	r3, [pc, #176]	; (800250c <MX_TIM4_Init+0xf0>)
 800245c:	2200      	movs	r2, #0
 800245e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002460:	4b2a      	ldr	r3, [pc, #168]	; (800250c <MX_TIM4_Init+0xf0>)
 8002462:	2200      	movs	r2, #0
 8002464:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002466:	4829      	ldr	r0, [pc, #164]	; (800250c <MX_TIM4_Init+0xf0>)
 8002468:	f002 fe62 	bl	8005130 <HAL_TIM_PWM_Init>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8002472:	f7ff fd99 	bl	8001fa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002476:	2300      	movs	r3, #0
 8002478:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800247a:	2300      	movs	r3, #0
 800247c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800247e:	f107 031c 	add.w	r3, r7, #28
 8002482:	4619      	mov	r1, r3
 8002484:	4821      	ldr	r0, [pc, #132]	; (800250c <MX_TIM4_Init+0xf0>)
 8002486:	f004 fa15 	bl	80068b4 <HAL_TIMEx_MasterConfigSynchronization>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002490:	f7ff fd8a 	bl	8001fa8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002494:	2360      	movs	r3, #96	; 0x60
 8002496:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002498:	2300      	movs	r3, #0
 800249a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800249c:	2300      	movs	r3, #0
 800249e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024a0:	2300      	movs	r3, #0
 80024a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024a4:	463b      	mov	r3, r7
 80024a6:	2200      	movs	r2, #0
 80024a8:	4619      	mov	r1, r3
 80024aa:	4818      	ldr	r0, [pc, #96]	; (800250c <MX_TIM4_Init+0xf0>)
 80024ac:	f003 fa04 	bl	80058b8 <HAL_TIM_PWM_ConfigChannel>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80024b6:	f7ff fd77 	bl	8001fa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024ba:	463b      	mov	r3, r7
 80024bc:	2204      	movs	r2, #4
 80024be:	4619      	mov	r1, r3
 80024c0:	4812      	ldr	r0, [pc, #72]	; (800250c <MX_TIM4_Init+0xf0>)
 80024c2:	f003 f9f9 	bl	80058b8 <HAL_TIM_PWM_ConfigChannel>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80024cc:	f7ff fd6c 	bl	8001fa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80024d0:	463b      	mov	r3, r7
 80024d2:	2208      	movs	r2, #8
 80024d4:	4619      	mov	r1, r3
 80024d6:	480d      	ldr	r0, [pc, #52]	; (800250c <MX_TIM4_Init+0xf0>)
 80024d8:	f003 f9ee 	bl	80058b8 <HAL_TIM_PWM_ConfigChannel>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 80024e2:	f7ff fd61 	bl	8001fa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80024e6:	463b      	mov	r3, r7
 80024e8:	220c      	movs	r2, #12
 80024ea:	4619      	mov	r1, r3
 80024ec:	4807      	ldr	r0, [pc, #28]	; (800250c <MX_TIM4_Init+0xf0>)
 80024ee:	f003 f9e3 	bl	80058b8 <HAL_TIM_PWM_ConfigChannel>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 80024f8:	f7ff fd56 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80024fc:	4803      	ldr	r0, [pc, #12]	; (800250c <MX_TIM4_Init+0xf0>)
 80024fe:	f000 f8c7 	bl	8002690 <HAL_TIM_MspPostInit>

}
 8002502:	bf00      	nop
 8002504:	3728      	adds	r7, #40	; 0x28
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	200001b8 	.word	0x200001b8
 8002510:	40000800 	.word	0x40000800

08002514 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800251a:	1d3b      	adds	r3, r7, #4
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	605a      	str	r2, [r3, #4]
 8002522:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002524:	4b14      	ldr	r3, [pc, #80]	; (8002578 <MX_TIM6_Init+0x64>)
 8002526:	4a15      	ldr	r2, [pc, #84]	; (800257c <MX_TIM6_Init+0x68>)
 8002528:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 27;
 800252a:	4b13      	ldr	r3, [pc, #76]	; (8002578 <MX_TIM6_Init+0x64>)
 800252c:	221b      	movs	r2, #27
 800252e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002530:	4b11      	ldr	r3, [pc, #68]	; (8002578 <MX_TIM6_Init+0x64>)
 8002532:	2200      	movs	r2, #0
 8002534:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4000;
 8002536:	4b10      	ldr	r3, [pc, #64]	; (8002578 <MX_TIM6_Init+0x64>)
 8002538:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800253c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800253e:	4b0e      	ldr	r3, [pc, #56]	; (8002578 <MX_TIM6_Init+0x64>)
 8002540:	2200      	movs	r2, #0
 8002542:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002544:	480c      	ldr	r0, [pc, #48]	; (8002578 <MX_TIM6_Init+0x64>)
 8002546:	f002 fcb4 	bl	8004eb2 <HAL_TIM_Base_Init>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002550:	f7ff fd2a 	bl	8001fa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002554:	2300      	movs	r3, #0
 8002556:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002558:	2300      	movs	r3, #0
 800255a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800255c:	1d3b      	adds	r3, r7, #4
 800255e:	4619      	mov	r1, r3
 8002560:	4805      	ldr	r0, [pc, #20]	; (8002578 <MX_TIM6_Init+0x64>)
 8002562:	f004 f9a7 	bl	80068b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800256c:	f7ff fd1c 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002570:	bf00      	nop
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	20000204 	.word	0x20000204
 800257c:	40001000 	.word	0x40001000

08002580 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b08a      	sub	sp, #40	; 0x28
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002588:	f107 0314 	add.w	r3, r7, #20
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	605a      	str	r2, [r3, #4]
 8002592:	609a      	str	r2, [r3, #8]
 8002594:	60da      	str	r2, [r3, #12]
 8002596:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a28      	ldr	r2, [pc, #160]	; (8002640 <HAL_TIM_Base_MspInit+0xc0>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d131      	bne.n	8002606 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025a2:	4b28      	ldr	r3, [pc, #160]	; (8002644 <HAL_TIM_Base_MspInit+0xc4>)
 80025a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a6:	4a27      	ldr	r2, [pc, #156]	; (8002644 <HAL_TIM_Base_MspInit+0xc4>)
 80025a8:	f043 0301 	orr.w	r3, r3, #1
 80025ac:	6453      	str	r3, [r2, #68]	; 0x44
 80025ae:	4b25      	ldr	r3, [pc, #148]	; (8002644 <HAL_TIM_Base_MspInit+0xc4>)
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	613b      	str	r3, [r7, #16]
 80025b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025ba:	4b22      	ldr	r3, [pc, #136]	; (8002644 <HAL_TIM_Base_MspInit+0xc4>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	4a21      	ldr	r2, [pc, #132]	; (8002644 <HAL_TIM_Base_MspInit+0xc4>)
 80025c0:	f043 0310 	orr.w	r3, r3, #16
 80025c4:	6313      	str	r3, [r2, #48]	; 0x30
 80025c6:	4b1f      	ldr	r3, [pc, #124]	; (8002644 <HAL_TIM_Base_MspInit+0xc4>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	f003 0310 	and.w	r3, r3, #16
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = IMD_PWM_Pin;
 80025d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d8:	2302      	movs	r3, #2
 80025da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025dc:	2300      	movs	r3, #0
 80025de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e0:	2300      	movs	r3, #0
 80025e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80025e4:	2301      	movs	r3, #1
 80025e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(IMD_PWM_GPIO_Port, &GPIO_InitStruct);
 80025e8:	f107 0314 	add.w	r3, r7, #20
 80025ec:	4619      	mov	r1, r3
 80025ee:	4816      	ldr	r0, [pc, #88]	; (8002648 <HAL_TIM_Base_MspInit+0xc8>)
 80025f0:	f001 f8da 	bl	80037a8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80025f4:	2200      	movs	r2, #0
 80025f6:	2100      	movs	r1, #0
 80025f8:	201b      	movs	r0, #27
 80025fa:	f001 f89e 	bl	800373a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80025fe:	201b      	movs	r0, #27
 8002600:	f001 f8b7 	bl	8003772 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002604:	e018      	b.n	8002638 <HAL_TIM_Base_MspInit+0xb8>
  else if(tim_baseHandle->Instance==TIM6)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a10      	ldr	r2, [pc, #64]	; (800264c <HAL_TIM_Base_MspInit+0xcc>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d113      	bne.n	8002638 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002610:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <HAL_TIM_Base_MspInit+0xc4>)
 8002612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002614:	4a0b      	ldr	r2, [pc, #44]	; (8002644 <HAL_TIM_Base_MspInit+0xc4>)
 8002616:	f043 0310 	orr.w	r3, r3, #16
 800261a:	6413      	str	r3, [r2, #64]	; 0x40
 800261c:	4b09      	ldr	r3, [pc, #36]	; (8002644 <HAL_TIM_Base_MspInit+0xc4>)
 800261e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002620:	f003 0310 	and.w	r3, r3, #16
 8002624:	60bb      	str	r3, [r7, #8]
 8002626:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002628:	2200      	movs	r2, #0
 800262a:	2100      	movs	r1, #0
 800262c:	2036      	movs	r0, #54	; 0x36
 800262e:	f001 f884 	bl	800373a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002632:	2036      	movs	r0, #54	; 0x36
 8002634:	f001 f89d 	bl	8003772 <HAL_NVIC_EnableIRQ>
}
 8002638:	bf00      	nop
 800263a:	3728      	adds	r7, #40	; 0x28
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40010000 	.word	0x40010000
 8002644:	40023800 	.word	0x40023800
 8002648:	40021000 	.word	0x40021000
 800264c:	40001000 	.word	0x40001000

08002650 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a0a      	ldr	r2, [pc, #40]	; (8002688 <HAL_TIM_PWM_MspInit+0x38>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d10b      	bne.n	800267a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002662:	4b0a      	ldr	r3, [pc, #40]	; (800268c <HAL_TIM_PWM_MspInit+0x3c>)
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	4a09      	ldr	r2, [pc, #36]	; (800268c <HAL_TIM_PWM_MspInit+0x3c>)
 8002668:	f043 0304 	orr.w	r3, r3, #4
 800266c:	6413      	str	r3, [r2, #64]	; 0x40
 800266e:	4b07      	ldr	r3, [pc, #28]	; (800268c <HAL_TIM_PWM_MspInit+0x3c>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	f003 0304 	and.w	r3, r3, #4
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800267a:	bf00      	nop
 800267c:	3714      	adds	r7, #20
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	40000800 	.word	0x40000800
 800268c:	40023800 	.word	0x40023800

08002690 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b088      	sub	sp, #32
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002698:	f107 030c 	add.w	r3, r7, #12
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	605a      	str	r2, [r3, #4]
 80026a2:	609a      	str	r2, [r3, #8]
 80026a4:	60da      	str	r2, [r3, #12]
 80026a6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a11      	ldr	r2, [pc, #68]	; (80026f4 <HAL_TIM_MspPostInit+0x64>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d11c      	bne.n	80026ec <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026b2:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <HAL_TIM_MspPostInit+0x68>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	4a10      	ldr	r2, [pc, #64]	; (80026f8 <HAL_TIM_MspPostInit+0x68>)
 80026b8:	f043 0308 	orr.w	r3, r3, #8
 80026bc:	6313      	str	r3, [r2, #48]	; 0x30
 80026be:	4b0e      	ldr	r3, [pc, #56]	; (80026f8 <HAL_TIM_MspPostInit+0x68>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	f003 0308 	and.w	r3, r3, #8
 80026c6:	60bb      	str	r3, [r7, #8]
 80026c8:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PWM_HV_N_Pin|PWM_HV_P_Pin|PWM_HV_M_Pin|PWM_HV_Charger_Pin;
 80026ca:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80026ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d0:	2302      	movs	r3, #2
 80026d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d4:	2300      	movs	r3, #0
 80026d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d8:	2300      	movs	r3, #0
 80026da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80026dc:	2302      	movs	r3, #2
 80026de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026e0:	f107 030c 	add.w	r3, r7, #12
 80026e4:	4619      	mov	r1, r3
 80026e6:	4805      	ldr	r0, [pc, #20]	; (80026fc <HAL_TIM_MspPostInit+0x6c>)
 80026e8:	f001 f85e 	bl	80037a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80026ec:	bf00      	nop
 80026ee:	3720      	adds	r7, #32
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40000800 	.word	0x40000800
 80026f8:	40023800 	.word	0x40023800
 80026fc:	40020c00 	.word	0x40020c00

08002700 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002704:	4b14      	ldr	r3, [pc, #80]	; (8002758 <MX_USART2_UART_Init+0x58>)
 8002706:	4a15      	ldr	r2, [pc, #84]	; (800275c <MX_USART2_UART_Init+0x5c>)
 8002708:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800270a:	4b13      	ldr	r3, [pc, #76]	; (8002758 <MX_USART2_UART_Init+0x58>)
 800270c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002710:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002712:	4b11      	ldr	r3, [pc, #68]	; (8002758 <MX_USART2_UART_Init+0x58>)
 8002714:	2200      	movs	r2, #0
 8002716:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002718:	4b0f      	ldr	r3, [pc, #60]	; (8002758 <MX_USART2_UART_Init+0x58>)
 800271a:	2200      	movs	r2, #0
 800271c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800271e:	4b0e      	ldr	r3, [pc, #56]	; (8002758 <MX_USART2_UART_Init+0x58>)
 8002720:	2200      	movs	r2, #0
 8002722:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002724:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <MX_USART2_UART_Init+0x58>)
 8002726:	220c      	movs	r2, #12
 8002728:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800272a:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <MX_USART2_UART_Init+0x58>)
 800272c:	2200      	movs	r2, #0
 800272e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002730:	4b09      	ldr	r3, [pc, #36]	; (8002758 <MX_USART2_UART_Init+0x58>)
 8002732:	2200      	movs	r2, #0
 8002734:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002736:	4b08      	ldr	r3, [pc, #32]	; (8002758 <MX_USART2_UART_Init+0x58>)
 8002738:	2200      	movs	r2, #0
 800273a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800273c:	4b06      	ldr	r3, [pc, #24]	; (8002758 <MX_USART2_UART_Init+0x58>)
 800273e:	2200      	movs	r2, #0
 8002740:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002742:	4805      	ldr	r0, [pc, #20]	; (8002758 <MX_USART2_UART_Init+0x58>)
 8002744:	f004 f962 	bl	8006a0c <HAL_UART_Init>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800274e:	f7ff fc2b 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002752:	bf00      	nop
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	2000029c 	.word	0x2000029c
 800275c:	40004400 	.word	0x40004400

08002760 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b0ae      	sub	sp, #184	; 0xb8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002768:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	605a      	str	r2, [r3, #4]
 8002772:	609a      	str	r2, [r3, #8]
 8002774:	60da      	str	r2, [r3, #12]
 8002776:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002778:	f107 0314 	add.w	r3, r7, #20
 800277c:	2290      	movs	r2, #144	; 0x90
 800277e:	2100      	movs	r1, #0
 8002780:	4618      	mov	r0, r3
 8002782:	f004 fe5b 	bl	800743c <memset>
  if(uartHandle->Instance==USART2)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a21      	ldr	r2, [pc, #132]	; (8002810 <HAL_UART_MspInit+0xb0>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d13a      	bne.n	8002806 <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002790:	2380      	movs	r3, #128	; 0x80
 8002792:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002794:	2300      	movs	r3, #0
 8002796:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002798:	f107 0314 	add.w	r3, r7, #20
 800279c:	4618      	mov	r0, r3
 800279e:	f001 feb5 	bl	800450c <HAL_RCCEx_PeriphCLKConfig>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80027a8:	f7ff fbfe 	bl	8001fa8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027ac:	4b19      	ldr	r3, [pc, #100]	; (8002814 <HAL_UART_MspInit+0xb4>)
 80027ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b0:	4a18      	ldr	r2, [pc, #96]	; (8002814 <HAL_UART_MspInit+0xb4>)
 80027b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027b6:	6413      	str	r3, [r2, #64]	; 0x40
 80027b8:	4b16      	ldr	r3, [pc, #88]	; (8002814 <HAL_UART_MspInit+0xb4>)
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c0:	613b      	str	r3, [r7, #16]
 80027c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027c4:	4b13      	ldr	r3, [pc, #76]	; (8002814 <HAL_UART_MspInit+0xb4>)
 80027c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c8:	4a12      	ldr	r2, [pc, #72]	; (8002814 <HAL_UART_MspInit+0xb4>)
 80027ca:	f043 0308 	orr.w	r3, r3, #8
 80027ce:	6313      	str	r3, [r2, #48]	; 0x30
 80027d0:	4b10      	ldr	r3, [pc, #64]	; (8002814 <HAL_UART_MspInit+0xb4>)
 80027d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d4:	f003 0308 	and.w	r3, r3, #8
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80027dc:	2360      	movs	r3, #96	; 0x60
 80027de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e2:	2302      	movs	r3, #2
 80027e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e8:	2300      	movs	r3, #0
 80027ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ee:	2303      	movs	r3, #3
 80027f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027f4:	2307      	movs	r3, #7
 80027f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027fa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80027fe:	4619      	mov	r1, r3
 8002800:	4805      	ldr	r0, [pc, #20]	; (8002818 <HAL_UART_MspInit+0xb8>)
 8002802:	f000 ffd1 	bl	80037a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002806:	bf00      	nop
 8002808:	37b8      	adds	r7, #184	; 0xb8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40004400 	.word	0x40004400
 8002814:	40023800 	.word	0x40023800
 8002818:	40020c00 	.word	0x40020c00

0800281c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800281c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002854 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002820:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002822:	e003      	b.n	800282c <LoopCopyDataInit>

08002824 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002824:	4b0c      	ldr	r3, [pc, #48]	; (8002858 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002826:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002828:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800282a:	3104      	adds	r1, #4

0800282c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800282c:	480b      	ldr	r0, [pc, #44]	; (800285c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800282e:	4b0c      	ldr	r3, [pc, #48]	; (8002860 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002830:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002832:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002834:	d3f6      	bcc.n	8002824 <CopyDataInit>
  ldr  r2, =_sbss
 8002836:	4a0b      	ldr	r2, [pc, #44]	; (8002864 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002838:	e002      	b.n	8002840 <LoopFillZerobss>

0800283a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800283a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800283c:	f842 3b04 	str.w	r3, [r2], #4

08002840 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002840:	4b09      	ldr	r3, [pc, #36]	; (8002868 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002842:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002844:	d3f9      	bcc.n	800283a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002846:	f7ff fd2f 	bl	80022a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800284a:	f004 fdd3 	bl	80073f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800284e:	f7ff f8af 	bl	80019b0 <main>
  bx  lr    
 8002852:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002854:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002858:	08007a08 	.word	0x08007a08
  ldr  r0, =_sdata
 800285c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002860:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002864:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002868:	20000324 	.word	0x20000324

0800286c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800286c:	e7fe      	b.n	800286c <ADC_IRQHandler>

0800286e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002872:	2003      	movs	r0, #3
 8002874:	f000 ff56 	bl	8003724 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002878:	2000      	movs	r0, #0
 800287a:	f000 f805 	bl	8002888 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800287e:	f7ff fcad 	bl	80021dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	bd80      	pop	{r7, pc}

08002888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002890:	4b12      	ldr	r3, [pc, #72]	; (80028dc <HAL_InitTick+0x54>)
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	4b12      	ldr	r3, [pc, #72]	; (80028e0 <HAL_InitTick+0x58>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	4619      	mov	r1, r3
 800289a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800289e:	fbb3 f3f1 	udiv	r3, r3, r1
 80028a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 ff71 	bl	800378e <HAL_SYSTICK_Config>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e00e      	b.n	80028d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2b0f      	cmp	r3, #15
 80028ba:	d80a      	bhi.n	80028d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028bc:	2200      	movs	r2, #0
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	f04f 30ff 	mov.w	r0, #4294967295
 80028c4:	f000 ff39 	bl	800373a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028c8:	4a06      	ldr	r2, [pc, #24]	; (80028e4 <HAL_InitTick+0x5c>)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
 80028d0:	e000      	b.n	80028d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	20000000 	.word	0x20000000
 80028e0:	20000008 	.word	0x20000008
 80028e4:	20000004 	.word	0x20000004

080028e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028ec:	4b06      	ldr	r3, [pc, #24]	; (8002908 <HAL_IncTick+0x20>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	461a      	mov	r2, r3
 80028f2:	4b06      	ldr	r3, [pc, #24]	; (800290c <HAL_IncTick+0x24>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4413      	add	r3, r2
 80028f8:	4a04      	ldr	r2, [pc, #16]	; (800290c <HAL_IncTick+0x24>)
 80028fa:	6013      	str	r3, [r2, #0]
}
 80028fc:	bf00      	nop
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	20000008 	.word	0x20000008
 800290c:	20000320 	.word	0x20000320

08002910 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  return uwTick;
 8002914:	4b03      	ldr	r3, [pc, #12]	; (8002924 <HAL_GetTick+0x14>)
 8002916:	681b      	ldr	r3, [r3, #0]
}
 8002918:	4618      	mov	r0, r3
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	20000320 	.word	0x20000320

08002928 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002930:	f7ff ffee 	bl	8002910 <HAL_GetTick>
 8002934:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002940:	d005      	beq.n	800294e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002942:	4b0a      	ldr	r3, [pc, #40]	; (800296c <HAL_Delay+0x44>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	461a      	mov	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4413      	add	r3, r2
 800294c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800294e:	bf00      	nop
 8002950:	f7ff ffde 	bl	8002910 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	429a      	cmp	r2, r3
 800295e:	d8f7      	bhi.n	8002950 <HAL_Delay+0x28>
  {
  }
}
 8002960:	bf00      	nop
 8002962:	bf00      	nop
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	20000008 	.word	0x20000008

08002970 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  return __STM32F7xx_HAL_VERSION;
 8002974:	4b02      	ldr	r3, [pc, #8]	; (8002980 <HAL_GetHalVersion+0x10>)
}
 8002976:	4618      	mov	r0, r3
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	01020a00 	.word	0x01020a00

08002984 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8002988:	4b03      	ldr	r3, [pc, #12]	; (8002998 <HAL_GetREVID+0x14>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	0c1b      	lsrs	r3, r3, #16
}
 800298e:	4618      	mov	r0, r3
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	e0042000 	.word	0xe0042000

0800299c <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 80029a0:	4b04      	ldr	r3, [pc, #16]	; (80029b4 <HAL_GetDEVID+0x18>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	e0042000 	.word	0xe0042000

080029b8 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 80029bc:	4b03      	ldr	r3, [pc, #12]	; (80029cc <HAL_GetUIDw0+0x14>)
 80029be:	681b      	ldr	r3, [r3, #0]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	1ff0f420 	.word	0x1ff0f420

080029d0 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80029d4:	4b03      	ldr	r3, [pc, #12]	; (80029e4 <HAL_GetUIDw1+0x14>)
 80029d6:	681b      	ldr	r3, [r3, #0]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	1ff0f424 	.word	0x1ff0f424

080029e8 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80029ec:	4b03      	ldr	r3, [pc, #12]	; (80029fc <HAL_GetUIDw2+0x14>)
 80029ee:	681b      	ldr	r3, [r3, #0]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	1ff0f428 	.word	0x1ff0f428

08002a00 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e031      	b.n	8002a7a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d109      	bne.n	8002a32 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7fe fcac 	bl	800137c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	f003 0310 	and.w	r3, r3, #16
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d116      	bne.n	8002a6c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a42:	4b10      	ldr	r3, [pc, #64]	; (8002a84 <HAL_ADC_Init+0x84>)
 8002a44:	4013      	ands	r3, r2
 8002a46:	f043 0202 	orr.w	r2, r3, #2
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 f970 	bl	8002d34 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	f023 0303 	bic.w	r3, r3, #3
 8002a62:	f043 0201 	orr.w	r2, r3, #1
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	641a      	str	r2, [r3, #64]	; 0x40
 8002a6a:	e001      	b.n	8002a70 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	ffffeefd 	.word	0xffffeefd

08002a88 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002a92:	2300      	movs	r3, #0
 8002a94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d101      	bne.n	8002aa4 <HAL_ADC_ConfigChannel+0x1c>
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	e136      	b.n	8002d12 <HAL_ADC_ConfigChannel+0x28a>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2b09      	cmp	r3, #9
 8002ab2:	d93a      	bls.n	8002b2a <HAL_ADC_ConfigChannel+0xa2>
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002abc:	d035      	beq.n	8002b2a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68d9      	ldr	r1, [r3, #12]
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	461a      	mov	r2, r3
 8002acc:	4613      	mov	r3, r2
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	4413      	add	r3, r2
 8002ad2:	3b1e      	subs	r3, #30
 8002ad4:	2207      	movs	r2, #7
 8002ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ada:	43da      	mvns	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	400a      	ands	r2, r1
 8002ae2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a8d      	ldr	r2, [pc, #564]	; (8002d20 <HAL_ADC_ConfigChannel+0x298>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d10a      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68d9      	ldr	r1, [r3, #12]
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	061a      	lsls	r2, r3, #24
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b02:	e035      	b.n	8002b70 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68d9      	ldr	r1, [r3, #12]
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	689a      	ldr	r2, [r3, #8]
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	4618      	mov	r0, r3
 8002b16:	4603      	mov	r3, r0
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	4403      	add	r3, r0
 8002b1c:	3b1e      	subs	r3, #30
 8002b1e:	409a      	lsls	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b28:	e022      	b.n	8002b70 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6919      	ldr	r1, [r3, #16]
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	461a      	mov	r2, r3
 8002b38:	4613      	mov	r3, r2
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	4413      	add	r3, r2
 8002b3e:	2207      	movs	r2, #7
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	43da      	mvns	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	400a      	ands	r2, r1
 8002b4c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6919      	ldr	r1, [r3, #16]
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	4618      	mov	r0, r3
 8002b60:	4603      	mov	r3, r0
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	4403      	add	r3, r0
 8002b66:	409a      	lsls	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	2b06      	cmp	r3, #6
 8002b76:	d824      	bhi.n	8002bc2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	4613      	mov	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	3b05      	subs	r3, #5
 8002b8a:	221f      	movs	r2, #31
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	43da      	mvns	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	400a      	ands	r2, r1
 8002b98:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685a      	ldr	r2, [r3, #4]
 8002bac:	4613      	mov	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	3b05      	subs	r3, #5
 8002bb4:	fa00 f203 	lsl.w	r2, r0, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	635a      	str	r2, [r3, #52]	; 0x34
 8002bc0:	e04c      	b.n	8002c5c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2b0c      	cmp	r3, #12
 8002bc8:	d824      	bhi.n	8002c14 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685a      	ldr	r2, [r3, #4]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4413      	add	r3, r2
 8002bda:	3b23      	subs	r3, #35	; 0x23
 8002bdc:	221f      	movs	r2, #31
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	43da      	mvns	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	400a      	ands	r2, r1
 8002bea:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	4413      	add	r3, r2
 8002c04:	3b23      	subs	r3, #35	; 0x23
 8002c06:	fa00 f203 	lsl.w	r2, r0, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	631a      	str	r2, [r3, #48]	; 0x30
 8002c12:	e023      	b.n	8002c5c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4413      	add	r3, r2
 8002c24:	3b41      	subs	r3, #65	; 0x41
 8002c26:	221f      	movs	r2, #31
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	43da      	mvns	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	400a      	ands	r2, r1
 8002c34:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	4618      	mov	r0, r3
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4413      	add	r3, r2
 8002c4e:	3b41      	subs	r3, #65	; 0x41
 8002c50:	fa00 f203 	lsl.w	r2, r0, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a30      	ldr	r2, [pc, #192]	; (8002d24 <HAL_ADC_ConfigChannel+0x29c>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d10a      	bne.n	8002c7c <HAL_ADC_ConfigChannel+0x1f4>
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c6e:	d105      	bne.n	8002c7c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002c70:	4b2d      	ldr	r3, [pc, #180]	; (8002d28 <HAL_ADC_ConfigChannel+0x2a0>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	4a2c      	ldr	r2, [pc, #176]	; (8002d28 <HAL_ADC_ConfigChannel+0x2a0>)
 8002c76:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002c7a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a28      	ldr	r2, [pc, #160]	; (8002d24 <HAL_ADC_ConfigChannel+0x29c>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d10f      	bne.n	8002ca6 <HAL_ADC_ConfigChannel+0x21e>
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2b12      	cmp	r3, #18
 8002c8c:	d10b      	bne.n	8002ca6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002c8e:	4b26      	ldr	r3, [pc, #152]	; (8002d28 <HAL_ADC_ConfigChannel+0x2a0>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	4a25      	ldr	r2, [pc, #148]	; (8002d28 <HAL_ADC_ConfigChannel+0x2a0>)
 8002c94:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002c98:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002c9a:	4b23      	ldr	r3, [pc, #140]	; (8002d28 <HAL_ADC_ConfigChannel+0x2a0>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	4a22      	ldr	r2, [pc, #136]	; (8002d28 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ca0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ca4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a1e      	ldr	r2, [pc, #120]	; (8002d24 <HAL_ADC_ConfigChannel+0x29c>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d12b      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x280>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a1a      	ldr	r2, [pc, #104]	; (8002d20 <HAL_ADC_ConfigChannel+0x298>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d003      	beq.n	8002cc2 <HAL_ADC_ConfigChannel+0x23a>
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2b11      	cmp	r3, #17
 8002cc0:	d122      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002cc2:	4b19      	ldr	r3, [pc, #100]	; (8002d28 <HAL_ADC_ConfigChannel+0x2a0>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	4a18      	ldr	r2, [pc, #96]	; (8002d28 <HAL_ADC_ConfigChannel+0x2a0>)
 8002cc8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002ccc:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002cce:	4b16      	ldr	r3, [pc, #88]	; (8002d28 <HAL_ADC_ConfigChannel+0x2a0>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	4a15      	ldr	r2, [pc, #84]	; (8002d28 <HAL_ADC_ConfigChannel+0x2a0>)
 8002cd4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cd8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a10      	ldr	r2, [pc, #64]	; (8002d20 <HAL_ADC_ConfigChannel+0x298>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d111      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002ce4:	4b11      	ldr	r3, [pc, #68]	; (8002d2c <HAL_ADC_ConfigChannel+0x2a4>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a11      	ldr	r2, [pc, #68]	; (8002d30 <HAL_ADC_ConfigChannel+0x2a8>)
 8002cea:	fba2 2303 	umull	r2, r3, r2, r3
 8002cee:	0c9a      	lsrs	r2, r3, #18
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4413      	add	r3, r2
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002cfa:	e002      	b.n	8002d02 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1f9      	bne.n	8002cfc <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3714      	adds	r7, #20
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	10000012 	.word	0x10000012
 8002d24:	40012000 	.word	0x40012000
 8002d28:	40012300 	.word	0x40012300
 8002d2c:	20000000 	.word	0x20000000
 8002d30:	431bde83 	.word	0x431bde83

08002d34 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002d3c:	4b78      	ldr	r3, [pc, #480]	; (8002f20 <ADC_Init+0x1ec>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	4a77      	ldr	r2, [pc, #476]	; (8002f20 <ADC_Init+0x1ec>)
 8002d42:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002d46:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002d48:	4b75      	ldr	r3, [pc, #468]	; (8002f20 <ADC_Init+0x1ec>)
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	4973      	ldr	r1, [pc, #460]	; (8002f20 <ADC_Init+0x1ec>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	6859      	ldr	r1, [r3, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	021a      	lsls	r2, r3, #8
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002d88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	6859      	ldr	r1, [r3, #4]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	689a      	ldr	r2, [r3, #8]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002daa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6899      	ldr	r1, [r3, #8]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68da      	ldr	r2, [r3, #12]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc2:	4a58      	ldr	r2, [pc, #352]	; (8002f24 <ADC_Init+0x1f0>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d022      	beq.n	8002e0e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002dd6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6899      	ldr	r1, [r3, #8]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002df8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6899      	ldr	r1, [r3, #8]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	609a      	str	r2, [r3, #8]
 8002e0c:	e00f      	b.n	8002e2e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e2c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 0202 	bic.w	r2, r2, #2
 8002e3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6899      	ldr	r1, [r3, #8]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	005a      	lsls	r2, r3, #1
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d01b      	beq.n	8002e94 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e6a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002e7a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6859      	ldr	r1, [r3, #4]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	3b01      	subs	r3, #1
 8002e88:	035a      	lsls	r2, r3, #13
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	605a      	str	r2, [r3, #4]
 8002e92:	e007      	b.n	8002ea4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685a      	ldr	r2, [r3, #4]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ea2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002eb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	051a      	lsls	r2, r3, #20
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ed8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6899      	ldr	r1, [r3, #8]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ee6:	025a      	lsls	r2, r3, #9
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689a      	ldr	r2, [r3, #8]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002efe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6899      	ldr	r1, [r3, #8]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	029a      	lsls	r2, r3, #10
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	609a      	str	r2, [r3, #8]
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	40012300 	.word	0x40012300
 8002f24:	0f000001 	.word	0x0f000001

08002f28 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e0ed      	b.n	8003116 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d102      	bne.n	8002f4c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7fe fac4 	bl	80014d4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f042 0201 	orr.w	r2, r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f5c:	f7ff fcd8 	bl	8002910 <HAL_GetTick>
 8002f60:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f62:	e012      	b.n	8002f8a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f64:	f7ff fcd4 	bl	8002910 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b0a      	cmp	r3, #10
 8002f70:	d90b      	bls.n	8002f8a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2205      	movs	r2, #5
 8002f82:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e0c5      	b.n	8003116 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0e5      	beq.n	8002f64 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 0202 	bic.w	r2, r2, #2
 8002fa6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fa8:	f7ff fcb2 	bl	8002910 <HAL_GetTick>
 8002fac:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002fae:	e012      	b.n	8002fd6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002fb0:	f7ff fcae 	bl	8002910 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b0a      	cmp	r3, #10
 8002fbc:	d90b      	bls.n	8002fd6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2205      	movs	r2, #5
 8002fce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e09f      	b.n	8003116 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1e5      	bne.n	8002fb0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	7e1b      	ldrb	r3, [r3, #24]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d108      	bne.n	8002ffe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	e007      	b.n	800300e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800300c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	7e5b      	ldrb	r3, [r3, #25]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d108      	bne.n	8003028 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	e007      	b.n	8003038 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003036:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	7e9b      	ldrb	r3, [r3, #26]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d108      	bne.n	8003052 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f042 0220 	orr.w	r2, r2, #32
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	e007      	b.n	8003062 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 0220 	bic.w	r2, r2, #32
 8003060:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	7edb      	ldrb	r3, [r3, #27]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d108      	bne.n	800307c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 0210 	bic.w	r2, r2, #16
 8003078:	601a      	str	r2, [r3, #0]
 800307a:	e007      	b.n	800308c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0210 	orr.w	r2, r2, #16
 800308a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	7f1b      	ldrb	r3, [r3, #28]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d108      	bne.n	80030a6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f042 0208 	orr.w	r2, r2, #8
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	e007      	b.n	80030b6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 0208 	bic.w	r2, r2, #8
 80030b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	7f5b      	ldrb	r3, [r3, #29]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d108      	bne.n	80030d0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f042 0204 	orr.w	r2, r2, #4
 80030cc:	601a      	str	r2, [r3, #0]
 80030ce:	e007      	b.n	80030e0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0204 	bic.w	r2, r2, #4
 80030de:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	431a      	orrs	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	431a      	orrs	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	ea42 0103 	orr.w	r1, r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	1e5a      	subs	r2, r3, #1
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
	...

08003120 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003120:	b480      	push	{r7}
 8003122:	b087      	sub	sp, #28
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003136:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003138:	7cfb      	ldrb	r3, [r7, #19]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d003      	beq.n	8003146 <HAL_CAN_ConfigFilter+0x26>
 800313e:	7cfb      	ldrb	r3, [r7, #19]
 8003140:	2b02      	cmp	r3, #2
 8003142:	f040 80c7 	bne.w	80032d4 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a69      	ldr	r2, [pc, #420]	; (80032f0 <HAL_CAN_ConfigFilter+0x1d0>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d001      	beq.n	8003154 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8003150:	4b68      	ldr	r3, [pc, #416]	; (80032f4 <HAL_CAN_ConfigFilter+0x1d4>)
 8003152:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800315a:	f043 0201 	orr.w	r2, r3, #1
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	4a63      	ldr	r2, [pc, #396]	; (80032f4 <HAL_CAN_ConfigFilter+0x1d4>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d111      	bne.n	8003190 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003172:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003186:	021b      	lsls	r3, r3, #8
 8003188:	431a      	orrs	r2, r3
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	f003 031f 	and.w	r3, r3, #31
 8003198:	2201      	movs	r2, #1
 800319a:	fa02 f303 	lsl.w	r3, r2, r3
 800319e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	43db      	mvns	r3, r3
 80031aa:	401a      	ands	r2, r3
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d123      	bne.n	8003202 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	43db      	mvns	r3, r3
 80031c4:	401a      	ands	r2, r3
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80031dc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	3248      	adds	r2, #72	; 0x48
 80031e2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031f6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031f8:	6979      	ldr	r1, [r7, #20]
 80031fa:	3348      	adds	r3, #72	; 0x48
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	440b      	add	r3, r1
 8003200:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d122      	bne.n	8003250 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	431a      	orrs	r2, r3
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800322a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	3248      	adds	r2, #72	; 0x48
 8003230:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003244:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003246:	6979      	ldr	r1, [r7, #20]
 8003248:	3348      	adds	r3, #72	; 0x48
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	440b      	add	r3, r1
 800324e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d109      	bne.n	800326c <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	43db      	mvns	r3, r3
 8003262:	401a      	ands	r2, r3
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800326a:	e007      	b.n	800327c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	431a      	orrs	r2, r3
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d109      	bne.n	8003298 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	43db      	mvns	r3, r3
 800328e:	401a      	ands	r2, r3
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003296:	e007      	b.n	80032a8 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	431a      	orrs	r2, r3
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d107      	bne.n	80032c0 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	431a      	orrs	r2, r3
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80032c6:	f023 0201 	bic.w	r2, r3, #1
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80032d0:	2300      	movs	r3, #0
 80032d2:	e006      	b.n	80032e2 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
  }
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	371c      	adds	r7, #28
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	40003400 	.word	0x40003400
 80032f4:	40006400 	.word	0x40006400

080032f8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b01      	cmp	r3, #1
 800330a:	d12e      	bne.n	800336a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2202      	movs	r2, #2
 8003310:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 0201 	bic.w	r2, r2, #1
 8003322:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003324:	f7ff faf4 	bl	8002910 <HAL_GetTick>
 8003328:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800332a:	e012      	b.n	8003352 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800332c:	f7ff faf0 	bl	8002910 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b0a      	cmp	r3, #10
 8003338:	d90b      	bls.n	8003352 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2205      	movs	r2, #5
 800334a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e012      	b.n	8003378 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1e5      	bne.n	800332c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003366:	2300      	movs	r3, #0
 8003368:	e006      	b.n	8003378 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
  }
}
 8003378:	4618      	mov	r0, r3
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003380:	b480      	push	{r7}
 8003382:	b089      	sub	sp, #36	; 0x24
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
 800338c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003394:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800339e:	7ffb      	ldrb	r3, [r7, #31]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d003      	beq.n	80033ac <HAL_CAN_AddTxMessage+0x2c>
 80033a4:	7ffb      	ldrb	r3, [r7, #31]
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	f040 80b8 	bne.w	800351c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10a      	bne.n	80033cc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d105      	bne.n	80033cc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f000 80a0 	beq.w	800350c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	0e1b      	lsrs	r3, r3, #24
 80033d0:	f003 0303 	and.w	r3, r3, #3
 80033d4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d907      	bls.n	80033ec <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e09e      	b.n	800352a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80033ec:	2201      	movs	r2, #1
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	409a      	lsls	r2, r3
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10d      	bne.n	800341a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003408:	68f9      	ldr	r1, [r7, #12]
 800340a:	6809      	ldr	r1, [r1, #0]
 800340c:	431a      	orrs	r2, r3
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	3318      	adds	r3, #24
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	440b      	add	r3, r1
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	e00f      	b.n	800343a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003424:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800342a:	68f9      	ldr	r1, [r7, #12]
 800342c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800342e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	3318      	adds	r3, #24
 8003434:	011b      	lsls	r3, r3, #4
 8003436:	440b      	add	r3, r1
 8003438:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6819      	ldr	r1, [r3, #0]
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	691a      	ldr	r2, [r3, #16]
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	3318      	adds	r3, #24
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	440b      	add	r3, r1
 800344a:	3304      	adds	r3, #4
 800344c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	7d1b      	ldrb	r3, [r3, #20]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d111      	bne.n	800347a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	3318      	adds	r3, #24
 800345e:	011b      	lsls	r3, r3, #4
 8003460:	4413      	add	r3, r2
 8003462:	3304      	adds	r3, #4
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	6811      	ldr	r1, [r2, #0]
 800346a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	3318      	adds	r3, #24
 8003472:	011b      	lsls	r3, r3, #4
 8003474:	440b      	add	r3, r1
 8003476:	3304      	adds	r3, #4
 8003478:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	3307      	adds	r3, #7
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	061a      	lsls	r2, r3, #24
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	3306      	adds	r3, #6
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	041b      	lsls	r3, r3, #16
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3305      	adds	r3, #5
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	021b      	lsls	r3, r3, #8
 8003494:	4313      	orrs	r3, r2
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	3204      	adds	r2, #4
 800349a:	7812      	ldrb	r2, [r2, #0]
 800349c:	4610      	mov	r0, r2
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	6811      	ldr	r1, [r2, #0]
 80034a2:	ea43 0200 	orr.w	r2, r3, r0
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	011b      	lsls	r3, r3, #4
 80034aa:	440b      	add	r3, r1
 80034ac:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80034b0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	3303      	adds	r3, #3
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	061a      	lsls	r2, r3, #24
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3302      	adds	r3, #2
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	041b      	lsls	r3, r3, #16
 80034c2:	431a      	orrs	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3301      	adds	r3, #1
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	021b      	lsls	r3, r3, #8
 80034cc:	4313      	orrs	r3, r2
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	7812      	ldrb	r2, [r2, #0]
 80034d2:	4610      	mov	r0, r2
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	6811      	ldr	r1, [r2, #0]
 80034d8:	ea43 0200 	orr.w	r2, r3, r0
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	011b      	lsls	r3, r3, #4
 80034e0:	440b      	add	r3, r1
 80034e2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80034e6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	3318      	adds	r3, #24
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	4413      	add	r3, r2
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	6811      	ldr	r1, [r2, #0]
 80034fa:	f043 0201 	orr.w	r2, r3, #1
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	3318      	adds	r3, #24
 8003502:	011b      	lsls	r3, r3, #4
 8003504:	440b      	add	r3, r1
 8003506:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003508:	2300      	movs	r3, #0
 800350a:	e00e      	b.n	800352a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e006      	b.n	800352a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003520:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
  }
}
 800352a:	4618      	mov	r0, r3
 800352c:	3724      	adds	r7, #36	; 0x24
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003536:	b480      	push	{r7}
 8003538:	b085      	sub	sp, #20
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
 800353e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003546:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003548:	7bfb      	ldrb	r3, [r7, #15]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d002      	beq.n	8003554 <HAL_CAN_ActivateNotification+0x1e>
 800354e:	7bfb      	ldrb	r3, [r7, #15]
 8003550:	2b02      	cmp	r3, #2
 8003552:	d109      	bne.n	8003568 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6959      	ldr	r1, [r3, #20]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003564:	2300      	movs	r3, #0
 8003566:	e006      	b.n	8003576 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
  }
}
 8003576:	4618      	mov	r0, r3
 8003578:	3714      	adds	r7, #20
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
	...

08003584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f003 0307 	and.w	r3, r3, #7
 8003592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003594:	4b0b      	ldr	r3, [pc, #44]	; (80035c4 <__NVIC_SetPriorityGrouping+0x40>)
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800359a:	68ba      	ldr	r2, [r7, #8]
 800359c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035a0:	4013      	ands	r3, r2
 80035a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80035ac:	4b06      	ldr	r3, [pc, #24]	; (80035c8 <__NVIC_SetPriorityGrouping+0x44>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035b2:	4a04      	ldr	r2, [pc, #16]	; (80035c4 <__NVIC_SetPriorityGrouping+0x40>)
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	60d3      	str	r3, [r2, #12]
}
 80035b8:	bf00      	nop
 80035ba:	3714      	adds	r7, #20
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	e000ed00 	.word	0xe000ed00
 80035c8:	05fa0000 	.word	0x05fa0000

080035cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035d0:	4b04      	ldr	r3, [pc, #16]	; (80035e4 <__NVIC_GetPriorityGrouping+0x18>)
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	0a1b      	lsrs	r3, r3, #8
 80035d6:	f003 0307 	and.w	r3, r3, #7
}
 80035da:	4618      	mov	r0, r3
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr
 80035e4:	e000ed00 	.word	0xe000ed00

080035e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	4603      	mov	r3, r0
 80035f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	db0b      	blt.n	8003612 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035fa:	79fb      	ldrb	r3, [r7, #7]
 80035fc:	f003 021f 	and.w	r2, r3, #31
 8003600:	4907      	ldr	r1, [pc, #28]	; (8003620 <__NVIC_EnableIRQ+0x38>)
 8003602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003606:	095b      	lsrs	r3, r3, #5
 8003608:	2001      	movs	r0, #1
 800360a:	fa00 f202 	lsl.w	r2, r0, r2
 800360e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	e000e100 	.word	0xe000e100

08003624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	4603      	mov	r3, r0
 800362c:	6039      	str	r1, [r7, #0]
 800362e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003634:	2b00      	cmp	r3, #0
 8003636:	db0a      	blt.n	800364e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	b2da      	uxtb	r2, r3
 800363c:	490c      	ldr	r1, [pc, #48]	; (8003670 <__NVIC_SetPriority+0x4c>)
 800363e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003642:	0112      	lsls	r2, r2, #4
 8003644:	b2d2      	uxtb	r2, r2
 8003646:	440b      	add	r3, r1
 8003648:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800364c:	e00a      	b.n	8003664 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	b2da      	uxtb	r2, r3
 8003652:	4908      	ldr	r1, [pc, #32]	; (8003674 <__NVIC_SetPriority+0x50>)
 8003654:	79fb      	ldrb	r3, [r7, #7]
 8003656:	f003 030f 	and.w	r3, r3, #15
 800365a:	3b04      	subs	r3, #4
 800365c:	0112      	lsls	r2, r2, #4
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	440b      	add	r3, r1
 8003662:	761a      	strb	r2, [r3, #24]
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr
 8003670:	e000e100 	.word	0xe000e100
 8003674:	e000ed00 	.word	0xe000ed00

08003678 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003678:	b480      	push	{r7}
 800367a:	b089      	sub	sp, #36	; 0x24
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f003 0307 	and.w	r3, r3, #7
 800368a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	f1c3 0307 	rsb	r3, r3, #7
 8003692:	2b04      	cmp	r3, #4
 8003694:	bf28      	it	cs
 8003696:	2304      	movcs	r3, #4
 8003698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	3304      	adds	r3, #4
 800369e:	2b06      	cmp	r3, #6
 80036a0:	d902      	bls.n	80036a8 <NVIC_EncodePriority+0x30>
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	3b03      	subs	r3, #3
 80036a6:	e000      	b.n	80036aa <NVIC_EncodePriority+0x32>
 80036a8:	2300      	movs	r3, #0
 80036aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036ac:	f04f 32ff 	mov.w	r2, #4294967295
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	fa02 f303 	lsl.w	r3, r2, r3
 80036b6:	43da      	mvns	r2, r3
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	401a      	ands	r2, r3
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036c0:	f04f 31ff 	mov.w	r1, #4294967295
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ca:	43d9      	mvns	r1, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036d0:	4313      	orrs	r3, r2
         );
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3724      	adds	r7, #36	; 0x24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
	...

080036e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	3b01      	subs	r3, #1
 80036ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036f0:	d301      	bcc.n	80036f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036f2:	2301      	movs	r3, #1
 80036f4:	e00f      	b.n	8003716 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036f6:	4a0a      	ldr	r2, [pc, #40]	; (8003720 <SysTick_Config+0x40>)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	3b01      	subs	r3, #1
 80036fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036fe:	210f      	movs	r1, #15
 8003700:	f04f 30ff 	mov.w	r0, #4294967295
 8003704:	f7ff ff8e 	bl	8003624 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003708:	4b05      	ldr	r3, [pc, #20]	; (8003720 <SysTick_Config+0x40>)
 800370a:	2200      	movs	r2, #0
 800370c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800370e:	4b04      	ldr	r3, [pc, #16]	; (8003720 <SysTick_Config+0x40>)
 8003710:	2207      	movs	r2, #7
 8003712:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	e000e010 	.word	0xe000e010

08003724 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f7ff ff29 	bl	8003584 <__NVIC_SetPriorityGrouping>
}
 8003732:	bf00      	nop
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800373a:	b580      	push	{r7, lr}
 800373c:	b086      	sub	sp, #24
 800373e:	af00      	add	r7, sp, #0
 8003740:	4603      	mov	r3, r0
 8003742:	60b9      	str	r1, [r7, #8]
 8003744:	607a      	str	r2, [r7, #4]
 8003746:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003748:	2300      	movs	r3, #0
 800374a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800374c:	f7ff ff3e 	bl	80035cc <__NVIC_GetPriorityGrouping>
 8003750:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	68b9      	ldr	r1, [r7, #8]
 8003756:	6978      	ldr	r0, [r7, #20]
 8003758:	f7ff ff8e 	bl	8003678 <NVIC_EncodePriority>
 800375c:	4602      	mov	r2, r0
 800375e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003762:	4611      	mov	r1, r2
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff ff5d 	bl	8003624 <__NVIC_SetPriority>
}
 800376a:	bf00      	nop
 800376c:	3718      	adds	r7, #24
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b082      	sub	sp, #8
 8003776:	af00      	add	r7, sp, #0
 8003778:	4603      	mov	r3, r0
 800377a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800377c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003780:	4618      	mov	r0, r3
 8003782:	f7ff ff31 	bl	80035e8 <__NVIC_EnableIRQ>
}
 8003786:	bf00      	nop
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b082      	sub	sp, #8
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7ff ffa2 	bl	80036e0 <SysTick_Config>
 800379c:	4603      	mov	r3, r0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
	...

080037a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b089      	sub	sp, #36	; 0x24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80037b2:	2300      	movs	r3, #0
 80037b4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80037b6:	2300      	movs	r3, #0
 80037b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80037ba:	2300      	movs	r3, #0
 80037bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80037be:	2300      	movs	r3, #0
 80037c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80037c2:	2300      	movs	r3, #0
 80037c4:	61fb      	str	r3, [r7, #28]
 80037c6:	e175      	b.n	8003ab4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80037c8:	2201      	movs	r2, #1
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	fa02 f303 	lsl.w	r3, r2, r3
 80037d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	4013      	ands	r3, r2
 80037da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	f040 8164 	bne.w	8003aae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f003 0303 	and.w	r3, r3, #3
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d005      	beq.n	80037fe <HAL_GPIO_Init+0x56>
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f003 0303 	and.w	r3, r3, #3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d130      	bne.n	8003860 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	2203      	movs	r2, #3
 800380a:	fa02 f303 	lsl.w	r3, r2, r3
 800380e:	43db      	mvns	r3, r3
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	4013      	ands	r3, r2
 8003814:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	68da      	ldr	r2, [r3, #12]
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	4313      	orrs	r3, r2
 8003826:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003834:	2201      	movs	r2, #1
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	43db      	mvns	r3, r3
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	4013      	ands	r3, r2
 8003842:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	091b      	lsrs	r3, r3, #4
 800384a:	f003 0201 	and.w	r2, r3, #1
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	4313      	orrs	r3, r2
 8003858:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f003 0303 	and.w	r3, r3, #3
 8003868:	2b03      	cmp	r3, #3
 800386a:	d017      	beq.n	800389c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	2203      	movs	r2, #3
 8003878:	fa02 f303 	lsl.w	r3, r2, r3
 800387c:	43db      	mvns	r3, r3
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	4013      	ands	r3, r2
 8003882:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	689a      	ldr	r2, [r3, #8]
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	4313      	orrs	r3, r2
 8003894:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f003 0303 	and.w	r3, r3, #3
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d123      	bne.n	80038f0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	08da      	lsrs	r2, r3, #3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	3208      	adds	r2, #8
 80038b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	220f      	movs	r2, #15
 80038c0:	fa02 f303 	lsl.w	r3, r2, r3
 80038c4:	43db      	mvns	r3, r3
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	4013      	ands	r3, r2
 80038ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	691a      	ldr	r2, [r3, #16]
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	4313      	orrs	r3, r2
 80038e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	08da      	lsrs	r2, r3, #3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	3208      	adds	r2, #8
 80038ea:	69b9      	ldr	r1, [r7, #24]
 80038ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	2203      	movs	r2, #3
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	43db      	mvns	r3, r3
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	4013      	ands	r3, r2
 8003906:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f003 0203 	and.w	r2, r3, #3
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	4313      	orrs	r3, r2
 800391c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 80be 	beq.w	8003aae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003932:	4b66      	ldr	r3, [pc, #408]	; (8003acc <HAL_GPIO_Init+0x324>)
 8003934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003936:	4a65      	ldr	r2, [pc, #404]	; (8003acc <HAL_GPIO_Init+0x324>)
 8003938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800393c:	6453      	str	r3, [r2, #68]	; 0x44
 800393e:	4b63      	ldr	r3, [pc, #396]	; (8003acc <HAL_GPIO_Init+0x324>)
 8003940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003946:	60fb      	str	r3, [r7, #12]
 8003948:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800394a:	4a61      	ldr	r2, [pc, #388]	; (8003ad0 <HAL_GPIO_Init+0x328>)
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	089b      	lsrs	r3, r3, #2
 8003950:	3302      	adds	r3, #2
 8003952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003956:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	f003 0303 	and.w	r3, r3, #3
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	220f      	movs	r2, #15
 8003962:	fa02 f303 	lsl.w	r3, r2, r3
 8003966:	43db      	mvns	r3, r3
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	4013      	ands	r3, r2
 800396c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a58      	ldr	r2, [pc, #352]	; (8003ad4 <HAL_GPIO_Init+0x32c>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d037      	beq.n	80039e6 <HAL_GPIO_Init+0x23e>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a57      	ldr	r2, [pc, #348]	; (8003ad8 <HAL_GPIO_Init+0x330>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d031      	beq.n	80039e2 <HAL_GPIO_Init+0x23a>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a56      	ldr	r2, [pc, #344]	; (8003adc <HAL_GPIO_Init+0x334>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d02b      	beq.n	80039de <HAL_GPIO_Init+0x236>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a55      	ldr	r2, [pc, #340]	; (8003ae0 <HAL_GPIO_Init+0x338>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d025      	beq.n	80039da <HAL_GPIO_Init+0x232>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a54      	ldr	r2, [pc, #336]	; (8003ae4 <HAL_GPIO_Init+0x33c>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d01f      	beq.n	80039d6 <HAL_GPIO_Init+0x22e>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a53      	ldr	r2, [pc, #332]	; (8003ae8 <HAL_GPIO_Init+0x340>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d019      	beq.n	80039d2 <HAL_GPIO_Init+0x22a>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a52      	ldr	r2, [pc, #328]	; (8003aec <HAL_GPIO_Init+0x344>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d013      	beq.n	80039ce <HAL_GPIO_Init+0x226>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a51      	ldr	r2, [pc, #324]	; (8003af0 <HAL_GPIO_Init+0x348>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d00d      	beq.n	80039ca <HAL_GPIO_Init+0x222>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a50      	ldr	r2, [pc, #320]	; (8003af4 <HAL_GPIO_Init+0x34c>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d007      	beq.n	80039c6 <HAL_GPIO_Init+0x21e>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a4f      	ldr	r2, [pc, #316]	; (8003af8 <HAL_GPIO_Init+0x350>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d101      	bne.n	80039c2 <HAL_GPIO_Init+0x21a>
 80039be:	2309      	movs	r3, #9
 80039c0:	e012      	b.n	80039e8 <HAL_GPIO_Init+0x240>
 80039c2:	230a      	movs	r3, #10
 80039c4:	e010      	b.n	80039e8 <HAL_GPIO_Init+0x240>
 80039c6:	2308      	movs	r3, #8
 80039c8:	e00e      	b.n	80039e8 <HAL_GPIO_Init+0x240>
 80039ca:	2307      	movs	r3, #7
 80039cc:	e00c      	b.n	80039e8 <HAL_GPIO_Init+0x240>
 80039ce:	2306      	movs	r3, #6
 80039d0:	e00a      	b.n	80039e8 <HAL_GPIO_Init+0x240>
 80039d2:	2305      	movs	r3, #5
 80039d4:	e008      	b.n	80039e8 <HAL_GPIO_Init+0x240>
 80039d6:	2304      	movs	r3, #4
 80039d8:	e006      	b.n	80039e8 <HAL_GPIO_Init+0x240>
 80039da:	2303      	movs	r3, #3
 80039dc:	e004      	b.n	80039e8 <HAL_GPIO_Init+0x240>
 80039de:	2302      	movs	r3, #2
 80039e0:	e002      	b.n	80039e8 <HAL_GPIO_Init+0x240>
 80039e2:	2301      	movs	r3, #1
 80039e4:	e000      	b.n	80039e8 <HAL_GPIO_Init+0x240>
 80039e6:	2300      	movs	r3, #0
 80039e8:	69fa      	ldr	r2, [r7, #28]
 80039ea:	f002 0203 	and.w	r2, r2, #3
 80039ee:	0092      	lsls	r2, r2, #2
 80039f0:	4093      	lsls	r3, r2
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80039f8:	4935      	ldr	r1, [pc, #212]	; (8003ad0 <HAL_GPIO_Init+0x328>)
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	089b      	lsrs	r3, r3, #2
 80039fe:	3302      	adds	r3, #2
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a06:	4b3d      	ldr	r3, [pc, #244]	; (8003afc <HAL_GPIO_Init+0x354>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	43db      	mvns	r3, r3
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	4013      	ands	r3, r2
 8003a14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a2a:	4a34      	ldr	r2, [pc, #208]	; (8003afc <HAL_GPIO_Init+0x354>)
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a30:	4b32      	ldr	r3, [pc, #200]	; (8003afc <HAL_GPIO_Init+0x354>)
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	43db      	mvns	r3, r3
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d003      	beq.n	8003a54 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a54:	4a29      	ldr	r2, [pc, #164]	; (8003afc <HAL_GPIO_Init+0x354>)
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a5a:	4b28      	ldr	r3, [pc, #160]	; (8003afc <HAL_GPIO_Init+0x354>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	43db      	mvns	r3, r3
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	4013      	ands	r3, r2
 8003a68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a7e:	4a1f      	ldr	r2, [pc, #124]	; (8003afc <HAL_GPIO_Init+0x354>)
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a84:	4b1d      	ldr	r3, [pc, #116]	; (8003afc <HAL_GPIO_Init+0x354>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	43db      	mvns	r3, r3
 8003a8e:	69ba      	ldr	r2, [r7, #24]
 8003a90:	4013      	ands	r3, r2
 8003a92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d003      	beq.n	8003aa8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003aa8:	4a14      	ldr	r2, [pc, #80]	; (8003afc <HAL_GPIO_Init+0x354>)
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	61fb      	str	r3, [r7, #28]
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	2b0f      	cmp	r3, #15
 8003ab8:	f67f ae86 	bls.w	80037c8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003abc:	bf00      	nop
 8003abe:	bf00      	nop
 8003ac0:	3724      	adds	r7, #36	; 0x24
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	40023800 	.word	0x40023800
 8003ad0:	40013800 	.word	0x40013800
 8003ad4:	40020000 	.word	0x40020000
 8003ad8:	40020400 	.word	0x40020400
 8003adc:	40020800 	.word	0x40020800
 8003ae0:	40020c00 	.word	0x40020c00
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	40021400 	.word	0x40021400
 8003aec:	40021800 	.word	0x40021800
 8003af0:	40021c00 	.word	0x40021c00
 8003af4:	40022000 	.word	0x40022000
 8003af8:	40022400 	.word	0x40022400
 8003afc:	40013c00 	.word	0x40013c00

08003b00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	460b      	mov	r3, r1
 8003b0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	691a      	ldr	r2, [r3, #16]
 8003b10:	887b      	ldrh	r3, [r7, #2]
 8003b12:	4013      	ands	r3, r2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d002      	beq.n	8003b1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	73fb      	strb	r3, [r7, #15]
 8003b1c:	e001      	b.n	8003b22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3714      	adds	r7, #20
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	460b      	mov	r3, r1
 8003b3a:	807b      	strh	r3, [r7, #2]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b40:	787b      	ldrb	r3, [r7, #1]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b46:	887a      	ldrh	r2, [r7, #2]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003b4c:	e003      	b.n	8003b56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003b4e:	887b      	ldrh	r3, [r7, #2]
 8003b50:	041a      	lsls	r2, r3, #16
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	619a      	str	r2, [r3, #24]
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
	...

08003b64 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b6e:	4b23      	ldr	r3, [pc, #140]	; (8003bfc <HAL_PWREx_EnableOverDrive+0x98>)
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	4a22      	ldr	r2, [pc, #136]	; (8003bfc <HAL_PWREx_EnableOverDrive+0x98>)
 8003b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b78:	6413      	str	r3, [r2, #64]	; 0x40
 8003b7a:	4b20      	ldr	r3, [pc, #128]	; (8003bfc <HAL_PWREx_EnableOverDrive+0x98>)
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b82:	603b      	str	r3, [r7, #0]
 8003b84:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003b86:	4b1e      	ldr	r3, [pc, #120]	; (8003c00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a1d      	ldr	r2, [pc, #116]	; (8003c00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b90:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b92:	f7fe febd 	bl	8002910 <HAL_GetTick>
 8003b96:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b98:	e009      	b.n	8003bae <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b9a:	f7fe feb9 	bl	8002910 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ba8:	d901      	bls.n	8003bae <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e022      	b.n	8003bf4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003bae:	4b14      	ldr	r3, [pc, #80]	; (8003c00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bba:	d1ee      	bne.n	8003b9a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003bbc:	4b10      	ldr	r3, [pc, #64]	; (8003c00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a0f      	ldr	r2, [pc, #60]	; (8003c00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bc6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bc8:	f7fe fea2 	bl	8002910 <HAL_GetTick>
 8003bcc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003bce:	e009      	b.n	8003be4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003bd0:	f7fe fe9e 	bl	8002910 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bde:	d901      	bls.n	8003be4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e007      	b.n	8003bf4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003be4:	4b06      	ldr	r3, [pc, #24]	; (8003c00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bf0:	d1ee      	bne.n	8003bd0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3708      	adds	r7, #8
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	40007000 	.word	0x40007000

08003c04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e29b      	b.n	8004152 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f000 8087 	beq.w	8003d36 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c28:	4b96      	ldr	r3, [pc, #600]	; (8003e84 <HAL_RCC_OscConfig+0x280>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f003 030c 	and.w	r3, r3, #12
 8003c30:	2b04      	cmp	r3, #4
 8003c32:	d00c      	beq.n	8003c4e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c34:	4b93      	ldr	r3, [pc, #588]	; (8003e84 <HAL_RCC_OscConfig+0x280>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f003 030c 	and.w	r3, r3, #12
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	d112      	bne.n	8003c66 <HAL_RCC_OscConfig+0x62>
 8003c40:	4b90      	ldr	r3, [pc, #576]	; (8003e84 <HAL_RCC_OscConfig+0x280>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c4c:	d10b      	bne.n	8003c66 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c4e:	4b8d      	ldr	r3, [pc, #564]	; (8003e84 <HAL_RCC_OscConfig+0x280>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d06c      	beq.n	8003d34 <HAL_RCC_OscConfig+0x130>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d168      	bne.n	8003d34 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e275      	b.n	8004152 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c6e:	d106      	bne.n	8003c7e <HAL_RCC_OscConfig+0x7a>
 8003c70:	4b84      	ldr	r3, [pc, #528]	; (8003e84 <HAL_RCC_OscConfig+0x280>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a83      	ldr	r2, [pc, #524]	; (8003e84 <HAL_RCC_OscConfig+0x280>)
 8003c76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c7a:	6013      	str	r3, [r2, #0]
 8003c7c:	e02e      	b.n	8003cdc <HAL_RCC_OscConfig+0xd8>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10c      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x9c>
 8003c86:	4b7f      	ldr	r3, [pc, #508]	; (8003e84 <HAL_RCC_OscConfig+0x280>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a7e      	ldr	r2, [pc, #504]	; (8003e84 <HAL_RCC_OscConfig+0x280>)
 8003c8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c90:	6013      	str	r3, [r2, #0]
 8003c92:	4b7c      	ldr	r3, [pc, #496]	; (8003e84 <HAL_RCC_OscConfig+0x280>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a7b      	ldr	r2, [pc, #492]	; (8003e84 <HAL_RCC_OscConfig+0x280>)
 8003c98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c9c:	6013      	str	r3, [r2, #0]
 8003c9e:	e01d      	b.n	8003cdc <HAL_RCC_OscConfig+0xd8>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ca8:	d10c      	bne.n	8003cc4 <HAL_RCC_OscConfig+0xc0>
 8003caa:	4b76      	ldr	r3, [pc, #472]	; (8003e84 <HAL_RCC_OscConfig+0x280>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a75      	ldr	r2, [pc, #468]	; (8003e84 <HAL_RCC_OscConfig+0x280>)
 8003cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cb4:	6013      	str	r3, [r2, #0]
 8003cb6:	4b73      	ldr	r3, [pc, #460]	; (8003e84 <HAL_RCC_OscConfig+0x280>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a72      	ldr	r2, [pc, #456]	; (8003e84 <HAL_RCC_OscConfig+0x280>)
 8003cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	e00b      	b.n	8003cdc <HAL_RCC_OscConfig+0xd8>
 8003cc4:	4b6f      	ldr	r3, [pc, #444]	; (8003e84 <HAL_RCC_OscConfig+0x280>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a6e      	ldr	r2, [pc, #440]	; (8003e84 <HAL_RCC_OscConfig+0x280>)
 8003cca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cce:	6013      	str	r3, [r2, #0]
 8003cd0:	4b6c      	ldr	r3, [pc, #432]	; (8003e84 <HAL_RCC_OscConfig+0x280>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a6b      	ldr	r2, [pc, #428]	; (8003e84 <HAL_RCC_OscConfig+0x280>)
 8003cd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d013      	beq.n	8003d0c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce4:	f7fe fe14 	bl	8002910 <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cec:	f7fe fe10 	bl	8002910 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b64      	cmp	r3, #100	; 0x64
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e229      	b.n	8004152 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cfe:	4b61      	ldr	r3, [pc, #388]	; (8003e84 <HAL_RCC_OscConfig+0x280>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d0f0      	beq.n	8003cec <HAL_RCC_OscConfig+0xe8>
 8003d0a:	e014      	b.n	8003d36 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0c:	f7fe fe00 	bl	8002910 <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d14:	f7fe fdfc 	bl	8002910 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b64      	cmp	r3, #100	; 0x64
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e215      	b.n	8004152 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d26:	4b57      	ldr	r3, [pc, #348]	; (8003e84 <HAL_RCC_OscConfig+0x280>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1f0      	bne.n	8003d14 <HAL_RCC_OscConfig+0x110>
 8003d32:	e000      	b.n	8003d36 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d069      	beq.n	8003e16 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d42:	4b50      	ldr	r3, [pc, #320]	; (8003e84 <HAL_RCC_OscConfig+0x280>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f003 030c 	and.w	r3, r3, #12
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00b      	beq.n	8003d66 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d4e:	4b4d      	ldr	r3, [pc, #308]	; (8003e84 <HAL_RCC_OscConfig+0x280>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f003 030c 	and.w	r3, r3, #12
 8003d56:	2b08      	cmp	r3, #8
 8003d58:	d11c      	bne.n	8003d94 <HAL_RCC_OscConfig+0x190>
 8003d5a:	4b4a      	ldr	r3, [pc, #296]	; (8003e84 <HAL_RCC_OscConfig+0x280>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d116      	bne.n	8003d94 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d66:	4b47      	ldr	r3, [pc, #284]	; (8003e84 <HAL_RCC_OscConfig+0x280>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d005      	beq.n	8003d7e <HAL_RCC_OscConfig+0x17a>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d001      	beq.n	8003d7e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e1e9      	b.n	8004152 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d7e:	4b41      	ldr	r3, [pc, #260]	; (8003e84 <HAL_RCC_OscConfig+0x280>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	493d      	ldr	r1, [pc, #244]	; (8003e84 <HAL_RCC_OscConfig+0x280>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d92:	e040      	b.n	8003e16 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d023      	beq.n	8003de4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d9c:	4b39      	ldr	r3, [pc, #228]	; (8003e84 <HAL_RCC_OscConfig+0x280>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a38      	ldr	r2, [pc, #224]	; (8003e84 <HAL_RCC_OscConfig+0x280>)
 8003da2:	f043 0301 	orr.w	r3, r3, #1
 8003da6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da8:	f7fe fdb2 	bl	8002910 <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dae:	e008      	b.n	8003dc2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003db0:	f7fe fdae 	bl	8002910 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e1c7      	b.n	8004152 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dc2:	4b30      	ldr	r3, [pc, #192]	; (8003e84 <HAL_RCC_OscConfig+0x280>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d0f0      	beq.n	8003db0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dce:	4b2d      	ldr	r3, [pc, #180]	; (8003e84 <HAL_RCC_OscConfig+0x280>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	4929      	ldr	r1, [pc, #164]	; (8003e84 <HAL_RCC_OscConfig+0x280>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	600b      	str	r3, [r1, #0]
 8003de2:	e018      	b.n	8003e16 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003de4:	4b27      	ldr	r3, [pc, #156]	; (8003e84 <HAL_RCC_OscConfig+0x280>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a26      	ldr	r2, [pc, #152]	; (8003e84 <HAL_RCC_OscConfig+0x280>)
 8003dea:	f023 0301 	bic.w	r3, r3, #1
 8003dee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df0:	f7fe fd8e 	bl	8002910 <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003df8:	f7fe fd8a 	bl	8002910 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e1a3      	b.n	8004152 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e0a:	4b1e      	ldr	r3, [pc, #120]	; (8003e84 <HAL_RCC_OscConfig+0x280>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1f0      	bne.n	8003df8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0308 	and.w	r3, r3, #8
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d038      	beq.n	8003e94 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d019      	beq.n	8003e5e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e2a:	4b16      	ldr	r3, [pc, #88]	; (8003e84 <HAL_RCC_OscConfig+0x280>)
 8003e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e2e:	4a15      	ldr	r2, [pc, #84]	; (8003e84 <HAL_RCC_OscConfig+0x280>)
 8003e30:	f043 0301 	orr.w	r3, r3, #1
 8003e34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e36:	f7fe fd6b 	bl	8002910 <HAL_GetTick>
 8003e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e3c:	e008      	b.n	8003e50 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e3e:	f7fe fd67 	bl	8002910 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d901      	bls.n	8003e50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e180      	b.n	8004152 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e50:	4b0c      	ldr	r3, [pc, #48]	; (8003e84 <HAL_RCC_OscConfig+0x280>)
 8003e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d0f0      	beq.n	8003e3e <HAL_RCC_OscConfig+0x23a>
 8003e5c:	e01a      	b.n	8003e94 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e5e:	4b09      	ldr	r3, [pc, #36]	; (8003e84 <HAL_RCC_OscConfig+0x280>)
 8003e60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e62:	4a08      	ldr	r2, [pc, #32]	; (8003e84 <HAL_RCC_OscConfig+0x280>)
 8003e64:	f023 0301 	bic.w	r3, r3, #1
 8003e68:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e6a:	f7fe fd51 	bl	8002910 <HAL_GetTick>
 8003e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e70:	e00a      	b.n	8003e88 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e72:	f7fe fd4d 	bl	8002910 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d903      	bls.n	8003e88 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e166      	b.n	8004152 <HAL_RCC_OscConfig+0x54e>
 8003e84:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e88:	4b92      	ldr	r3, [pc, #584]	; (80040d4 <HAL_RCC_OscConfig+0x4d0>)
 8003e8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1ee      	bne.n	8003e72 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0304 	and.w	r3, r3, #4
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f000 80a4 	beq.w	8003fea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ea2:	4b8c      	ldr	r3, [pc, #560]	; (80040d4 <HAL_RCC_OscConfig+0x4d0>)
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10d      	bne.n	8003eca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eae:	4b89      	ldr	r3, [pc, #548]	; (80040d4 <HAL_RCC_OscConfig+0x4d0>)
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	4a88      	ldr	r2, [pc, #544]	; (80040d4 <HAL_RCC_OscConfig+0x4d0>)
 8003eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8003eba:	4b86      	ldr	r3, [pc, #536]	; (80040d4 <HAL_RCC_OscConfig+0x4d0>)
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec2:	60bb      	str	r3, [r7, #8]
 8003ec4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003eca:	4b83      	ldr	r3, [pc, #524]	; (80040d8 <HAL_RCC_OscConfig+0x4d4>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d118      	bne.n	8003f08 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003ed6:	4b80      	ldr	r3, [pc, #512]	; (80040d8 <HAL_RCC_OscConfig+0x4d4>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a7f      	ldr	r2, [pc, #508]	; (80040d8 <HAL_RCC_OscConfig+0x4d4>)
 8003edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ee0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ee2:	f7fe fd15 	bl	8002910 <HAL_GetTick>
 8003ee6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ee8:	e008      	b.n	8003efc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eea:	f7fe fd11 	bl	8002910 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	2b64      	cmp	r3, #100	; 0x64
 8003ef6:	d901      	bls.n	8003efc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e12a      	b.n	8004152 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003efc:	4b76      	ldr	r3, [pc, #472]	; (80040d8 <HAL_RCC_OscConfig+0x4d4>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d0f0      	beq.n	8003eea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d106      	bne.n	8003f1e <HAL_RCC_OscConfig+0x31a>
 8003f10:	4b70      	ldr	r3, [pc, #448]	; (80040d4 <HAL_RCC_OscConfig+0x4d0>)
 8003f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f14:	4a6f      	ldr	r2, [pc, #444]	; (80040d4 <HAL_RCC_OscConfig+0x4d0>)
 8003f16:	f043 0301 	orr.w	r3, r3, #1
 8003f1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f1c:	e02d      	b.n	8003f7a <HAL_RCC_OscConfig+0x376>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10c      	bne.n	8003f40 <HAL_RCC_OscConfig+0x33c>
 8003f26:	4b6b      	ldr	r3, [pc, #428]	; (80040d4 <HAL_RCC_OscConfig+0x4d0>)
 8003f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2a:	4a6a      	ldr	r2, [pc, #424]	; (80040d4 <HAL_RCC_OscConfig+0x4d0>)
 8003f2c:	f023 0301 	bic.w	r3, r3, #1
 8003f30:	6713      	str	r3, [r2, #112]	; 0x70
 8003f32:	4b68      	ldr	r3, [pc, #416]	; (80040d4 <HAL_RCC_OscConfig+0x4d0>)
 8003f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f36:	4a67      	ldr	r2, [pc, #412]	; (80040d4 <HAL_RCC_OscConfig+0x4d0>)
 8003f38:	f023 0304 	bic.w	r3, r3, #4
 8003f3c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f3e:	e01c      	b.n	8003f7a <HAL_RCC_OscConfig+0x376>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	2b05      	cmp	r3, #5
 8003f46:	d10c      	bne.n	8003f62 <HAL_RCC_OscConfig+0x35e>
 8003f48:	4b62      	ldr	r3, [pc, #392]	; (80040d4 <HAL_RCC_OscConfig+0x4d0>)
 8003f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4c:	4a61      	ldr	r2, [pc, #388]	; (80040d4 <HAL_RCC_OscConfig+0x4d0>)
 8003f4e:	f043 0304 	orr.w	r3, r3, #4
 8003f52:	6713      	str	r3, [r2, #112]	; 0x70
 8003f54:	4b5f      	ldr	r3, [pc, #380]	; (80040d4 <HAL_RCC_OscConfig+0x4d0>)
 8003f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f58:	4a5e      	ldr	r2, [pc, #376]	; (80040d4 <HAL_RCC_OscConfig+0x4d0>)
 8003f5a:	f043 0301 	orr.w	r3, r3, #1
 8003f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f60:	e00b      	b.n	8003f7a <HAL_RCC_OscConfig+0x376>
 8003f62:	4b5c      	ldr	r3, [pc, #368]	; (80040d4 <HAL_RCC_OscConfig+0x4d0>)
 8003f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f66:	4a5b      	ldr	r2, [pc, #364]	; (80040d4 <HAL_RCC_OscConfig+0x4d0>)
 8003f68:	f023 0301 	bic.w	r3, r3, #1
 8003f6c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f6e:	4b59      	ldr	r3, [pc, #356]	; (80040d4 <HAL_RCC_OscConfig+0x4d0>)
 8003f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f72:	4a58      	ldr	r2, [pc, #352]	; (80040d4 <HAL_RCC_OscConfig+0x4d0>)
 8003f74:	f023 0304 	bic.w	r3, r3, #4
 8003f78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d015      	beq.n	8003fae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f82:	f7fe fcc5 	bl	8002910 <HAL_GetTick>
 8003f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f88:	e00a      	b.n	8003fa0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f8a:	f7fe fcc1 	bl	8002910 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d901      	bls.n	8003fa0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e0d8      	b.n	8004152 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fa0:	4b4c      	ldr	r3, [pc, #304]	; (80040d4 <HAL_RCC_OscConfig+0x4d0>)
 8003fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa4:	f003 0302 	and.w	r3, r3, #2
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d0ee      	beq.n	8003f8a <HAL_RCC_OscConfig+0x386>
 8003fac:	e014      	b.n	8003fd8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fae:	f7fe fcaf 	bl	8002910 <HAL_GetTick>
 8003fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fb4:	e00a      	b.n	8003fcc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fb6:	f7fe fcab 	bl	8002910 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d901      	bls.n	8003fcc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e0c2      	b.n	8004152 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fcc:	4b41      	ldr	r3, [pc, #260]	; (80040d4 <HAL_RCC_OscConfig+0x4d0>)
 8003fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd0:	f003 0302 	and.w	r3, r3, #2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1ee      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fd8:	7dfb      	ldrb	r3, [r7, #23]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d105      	bne.n	8003fea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fde:	4b3d      	ldr	r3, [pc, #244]	; (80040d4 <HAL_RCC_OscConfig+0x4d0>)
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe2:	4a3c      	ldr	r2, [pc, #240]	; (80040d4 <HAL_RCC_OscConfig+0x4d0>)
 8003fe4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fe8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	f000 80ae 	beq.w	8004150 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ff4:	4b37      	ldr	r3, [pc, #220]	; (80040d4 <HAL_RCC_OscConfig+0x4d0>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f003 030c 	and.w	r3, r3, #12
 8003ffc:	2b08      	cmp	r3, #8
 8003ffe:	d06d      	beq.n	80040dc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	2b02      	cmp	r3, #2
 8004006:	d14b      	bne.n	80040a0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004008:	4b32      	ldr	r3, [pc, #200]	; (80040d4 <HAL_RCC_OscConfig+0x4d0>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a31      	ldr	r2, [pc, #196]	; (80040d4 <HAL_RCC_OscConfig+0x4d0>)
 800400e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004012:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004014:	f7fe fc7c 	bl	8002910 <HAL_GetTick>
 8004018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800401a:	e008      	b.n	800402e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800401c:	f7fe fc78 	bl	8002910 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b02      	cmp	r3, #2
 8004028:	d901      	bls.n	800402e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e091      	b.n	8004152 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800402e:	4b29      	ldr	r3, [pc, #164]	; (80040d4 <HAL_RCC_OscConfig+0x4d0>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1f0      	bne.n	800401c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	69da      	ldr	r2, [r3, #28]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	431a      	orrs	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004048:	019b      	lsls	r3, r3, #6
 800404a:	431a      	orrs	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004050:	085b      	lsrs	r3, r3, #1
 8004052:	3b01      	subs	r3, #1
 8004054:	041b      	lsls	r3, r3, #16
 8004056:	431a      	orrs	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405c:	061b      	lsls	r3, r3, #24
 800405e:	431a      	orrs	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004064:	071b      	lsls	r3, r3, #28
 8004066:	491b      	ldr	r1, [pc, #108]	; (80040d4 <HAL_RCC_OscConfig+0x4d0>)
 8004068:	4313      	orrs	r3, r2
 800406a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800406c:	4b19      	ldr	r3, [pc, #100]	; (80040d4 <HAL_RCC_OscConfig+0x4d0>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a18      	ldr	r2, [pc, #96]	; (80040d4 <HAL_RCC_OscConfig+0x4d0>)
 8004072:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004076:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004078:	f7fe fc4a 	bl	8002910 <HAL_GetTick>
 800407c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800407e:	e008      	b.n	8004092 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004080:	f7fe fc46 	bl	8002910 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e05f      	b.n	8004152 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004092:	4b10      	ldr	r3, [pc, #64]	; (80040d4 <HAL_RCC_OscConfig+0x4d0>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d0f0      	beq.n	8004080 <HAL_RCC_OscConfig+0x47c>
 800409e:	e057      	b.n	8004150 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040a0:	4b0c      	ldr	r3, [pc, #48]	; (80040d4 <HAL_RCC_OscConfig+0x4d0>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a0b      	ldr	r2, [pc, #44]	; (80040d4 <HAL_RCC_OscConfig+0x4d0>)
 80040a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ac:	f7fe fc30 	bl	8002910 <HAL_GetTick>
 80040b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040b2:	e008      	b.n	80040c6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040b4:	f7fe fc2c 	bl	8002910 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e045      	b.n	8004152 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040c6:	4b03      	ldr	r3, [pc, #12]	; (80040d4 <HAL_RCC_OscConfig+0x4d0>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1f0      	bne.n	80040b4 <HAL_RCC_OscConfig+0x4b0>
 80040d2:	e03d      	b.n	8004150 <HAL_RCC_OscConfig+0x54c>
 80040d4:	40023800 	.word	0x40023800
 80040d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80040dc:	4b1f      	ldr	r3, [pc, #124]	; (800415c <HAL_RCC_OscConfig+0x558>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d030      	beq.n	800414c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d129      	bne.n	800414c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004102:	429a      	cmp	r2, r3
 8004104:	d122      	bne.n	800414c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800410c:	4013      	ands	r3, r2
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004112:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004114:	4293      	cmp	r3, r2
 8004116:	d119      	bne.n	800414c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004122:	085b      	lsrs	r3, r3, #1
 8004124:	3b01      	subs	r3, #1
 8004126:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004128:	429a      	cmp	r2, r3
 800412a:	d10f      	bne.n	800414c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004136:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004138:	429a      	cmp	r2, r3
 800413a:	d107      	bne.n	800414c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004146:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004148:	429a      	cmp	r2, r3
 800414a:	d001      	beq.n	8004150 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e000      	b.n	8004152 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3718      	adds	r7, #24
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	40023800 	.word	0x40023800

08004160 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800416a:	2300      	movs	r3, #0
 800416c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e0d0      	b.n	800431a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004178:	4b6a      	ldr	r3, [pc, #424]	; (8004324 <HAL_RCC_ClockConfig+0x1c4>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 030f 	and.w	r3, r3, #15
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	429a      	cmp	r2, r3
 8004184:	d910      	bls.n	80041a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004186:	4b67      	ldr	r3, [pc, #412]	; (8004324 <HAL_RCC_ClockConfig+0x1c4>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f023 020f 	bic.w	r2, r3, #15
 800418e:	4965      	ldr	r1, [pc, #404]	; (8004324 <HAL_RCC_ClockConfig+0x1c4>)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	4313      	orrs	r3, r2
 8004194:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004196:	4b63      	ldr	r3, [pc, #396]	; (8004324 <HAL_RCC_ClockConfig+0x1c4>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 030f 	and.w	r3, r3, #15
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d001      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e0b8      	b.n	800431a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d020      	beq.n	80041f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0304 	and.w	r3, r3, #4
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d005      	beq.n	80041cc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041c0:	4b59      	ldr	r3, [pc, #356]	; (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	4a58      	ldr	r2, [pc, #352]	; (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 80041c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0308 	and.w	r3, r3, #8
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d005      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041d8:	4b53      	ldr	r3, [pc, #332]	; (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	4a52      	ldr	r2, [pc, #328]	; (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 80041de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041e4:	4b50      	ldr	r3, [pc, #320]	; (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	494d      	ldr	r1, [pc, #308]	; (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d040      	beq.n	8004284 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d107      	bne.n	800421a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800420a:	4b47      	ldr	r3, [pc, #284]	; (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d115      	bne.n	8004242 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e07f      	b.n	800431a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	2b02      	cmp	r3, #2
 8004220:	d107      	bne.n	8004232 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004222:	4b41      	ldr	r3, [pc, #260]	; (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d109      	bne.n	8004242 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e073      	b.n	800431a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004232:	4b3d      	ldr	r3, [pc, #244]	; (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e06b      	b.n	800431a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004242:	4b39      	ldr	r3, [pc, #228]	; (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f023 0203 	bic.w	r2, r3, #3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	4936      	ldr	r1, [pc, #216]	; (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 8004250:	4313      	orrs	r3, r2
 8004252:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004254:	f7fe fb5c 	bl	8002910 <HAL_GetTick>
 8004258:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800425a:	e00a      	b.n	8004272 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800425c:	f7fe fb58 	bl	8002910 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	f241 3288 	movw	r2, #5000	; 0x1388
 800426a:	4293      	cmp	r3, r2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e053      	b.n	800431a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004272:	4b2d      	ldr	r3, [pc, #180]	; (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f003 020c 	and.w	r2, r3, #12
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	429a      	cmp	r2, r3
 8004282:	d1eb      	bne.n	800425c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004284:	4b27      	ldr	r3, [pc, #156]	; (8004324 <HAL_RCC_ClockConfig+0x1c4>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 030f 	and.w	r3, r3, #15
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	429a      	cmp	r2, r3
 8004290:	d210      	bcs.n	80042b4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004292:	4b24      	ldr	r3, [pc, #144]	; (8004324 <HAL_RCC_ClockConfig+0x1c4>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f023 020f 	bic.w	r2, r3, #15
 800429a:	4922      	ldr	r1, [pc, #136]	; (8004324 <HAL_RCC_ClockConfig+0x1c4>)
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	4313      	orrs	r3, r2
 80042a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042a2:	4b20      	ldr	r3, [pc, #128]	; (8004324 <HAL_RCC_ClockConfig+0x1c4>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 030f 	and.w	r3, r3, #15
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d001      	beq.n	80042b4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e032      	b.n	800431a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0304 	and.w	r3, r3, #4
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d008      	beq.n	80042d2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042c0:	4b19      	ldr	r3, [pc, #100]	; (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	4916      	ldr	r1, [pc, #88]	; (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0308 	and.w	r3, r3, #8
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d009      	beq.n	80042f2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80042de:	4b12      	ldr	r3, [pc, #72]	; (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	490e      	ldr	r1, [pc, #56]	; (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042f2:	f000 f821 	bl	8004338 <HAL_RCC_GetSysClockFreq>
 80042f6:	4602      	mov	r2, r0
 80042f8:	4b0b      	ldr	r3, [pc, #44]	; (8004328 <HAL_RCC_ClockConfig+0x1c8>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	091b      	lsrs	r3, r3, #4
 80042fe:	f003 030f 	and.w	r3, r3, #15
 8004302:	490a      	ldr	r1, [pc, #40]	; (800432c <HAL_RCC_ClockConfig+0x1cc>)
 8004304:	5ccb      	ldrb	r3, [r1, r3]
 8004306:	fa22 f303 	lsr.w	r3, r2, r3
 800430a:	4a09      	ldr	r2, [pc, #36]	; (8004330 <HAL_RCC_ClockConfig+0x1d0>)
 800430c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800430e:	4b09      	ldr	r3, [pc, #36]	; (8004334 <HAL_RCC_ClockConfig+0x1d4>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4618      	mov	r0, r3
 8004314:	f7fe fab8 	bl	8002888 <HAL_InitTick>

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	40023c00 	.word	0x40023c00
 8004328:	40023800 	.word	0x40023800
 800432c:	080079b8 	.word	0x080079b8
 8004330:	20000000 	.word	0x20000000
 8004334:	20000004 	.word	0x20000004

08004338 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004338:	b5b0      	push	{r4, r5, r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800433e:	2100      	movs	r1, #0
 8004340:	6079      	str	r1, [r7, #4]
 8004342:	2100      	movs	r1, #0
 8004344:	60f9      	str	r1, [r7, #12]
 8004346:	2100      	movs	r1, #0
 8004348:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800434a:	2100      	movs	r1, #0
 800434c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800434e:	4952      	ldr	r1, [pc, #328]	; (8004498 <HAL_RCC_GetSysClockFreq+0x160>)
 8004350:	6889      	ldr	r1, [r1, #8]
 8004352:	f001 010c 	and.w	r1, r1, #12
 8004356:	2908      	cmp	r1, #8
 8004358:	d00d      	beq.n	8004376 <HAL_RCC_GetSysClockFreq+0x3e>
 800435a:	2908      	cmp	r1, #8
 800435c:	f200 8094 	bhi.w	8004488 <HAL_RCC_GetSysClockFreq+0x150>
 8004360:	2900      	cmp	r1, #0
 8004362:	d002      	beq.n	800436a <HAL_RCC_GetSysClockFreq+0x32>
 8004364:	2904      	cmp	r1, #4
 8004366:	d003      	beq.n	8004370 <HAL_RCC_GetSysClockFreq+0x38>
 8004368:	e08e      	b.n	8004488 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800436a:	4b4c      	ldr	r3, [pc, #304]	; (800449c <HAL_RCC_GetSysClockFreq+0x164>)
 800436c:	60bb      	str	r3, [r7, #8]
      break;
 800436e:	e08e      	b.n	800448e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004370:	4b4b      	ldr	r3, [pc, #300]	; (80044a0 <HAL_RCC_GetSysClockFreq+0x168>)
 8004372:	60bb      	str	r3, [r7, #8]
      break;
 8004374:	e08b      	b.n	800448e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004376:	4948      	ldr	r1, [pc, #288]	; (8004498 <HAL_RCC_GetSysClockFreq+0x160>)
 8004378:	6849      	ldr	r1, [r1, #4]
 800437a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800437e:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004380:	4945      	ldr	r1, [pc, #276]	; (8004498 <HAL_RCC_GetSysClockFreq+0x160>)
 8004382:	6849      	ldr	r1, [r1, #4]
 8004384:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004388:	2900      	cmp	r1, #0
 800438a:	d024      	beq.n	80043d6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800438c:	4942      	ldr	r1, [pc, #264]	; (8004498 <HAL_RCC_GetSysClockFreq+0x160>)
 800438e:	6849      	ldr	r1, [r1, #4]
 8004390:	0989      	lsrs	r1, r1, #6
 8004392:	4608      	mov	r0, r1
 8004394:	f04f 0100 	mov.w	r1, #0
 8004398:	f240 14ff 	movw	r4, #511	; 0x1ff
 800439c:	f04f 0500 	mov.w	r5, #0
 80043a0:	ea00 0204 	and.w	r2, r0, r4
 80043a4:	ea01 0305 	and.w	r3, r1, r5
 80043a8:	493d      	ldr	r1, [pc, #244]	; (80044a0 <HAL_RCC_GetSysClockFreq+0x168>)
 80043aa:	fb01 f003 	mul.w	r0, r1, r3
 80043ae:	2100      	movs	r1, #0
 80043b0:	fb01 f102 	mul.w	r1, r1, r2
 80043b4:	1844      	adds	r4, r0, r1
 80043b6:	493a      	ldr	r1, [pc, #232]	; (80044a0 <HAL_RCC_GetSysClockFreq+0x168>)
 80043b8:	fba2 0101 	umull	r0, r1, r2, r1
 80043bc:	1863      	adds	r3, r4, r1
 80043be:	4619      	mov	r1, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	461a      	mov	r2, r3
 80043c4:	f04f 0300 	mov.w	r3, #0
 80043c8:	f7fb ff3e 	bl	8000248 <__aeabi_uldivmod>
 80043cc:	4602      	mov	r2, r0
 80043ce:	460b      	mov	r3, r1
 80043d0:	4613      	mov	r3, r2
 80043d2:	60fb      	str	r3, [r7, #12]
 80043d4:	e04a      	b.n	800446c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043d6:	4b30      	ldr	r3, [pc, #192]	; (8004498 <HAL_RCC_GetSysClockFreq+0x160>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	099b      	lsrs	r3, r3, #6
 80043dc:	461a      	mov	r2, r3
 80043de:	f04f 0300 	mov.w	r3, #0
 80043e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80043e6:	f04f 0100 	mov.w	r1, #0
 80043ea:	ea02 0400 	and.w	r4, r2, r0
 80043ee:	ea03 0501 	and.w	r5, r3, r1
 80043f2:	4620      	mov	r0, r4
 80043f4:	4629      	mov	r1, r5
 80043f6:	f04f 0200 	mov.w	r2, #0
 80043fa:	f04f 0300 	mov.w	r3, #0
 80043fe:	014b      	lsls	r3, r1, #5
 8004400:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004404:	0142      	lsls	r2, r0, #5
 8004406:	4610      	mov	r0, r2
 8004408:	4619      	mov	r1, r3
 800440a:	1b00      	subs	r0, r0, r4
 800440c:	eb61 0105 	sbc.w	r1, r1, r5
 8004410:	f04f 0200 	mov.w	r2, #0
 8004414:	f04f 0300 	mov.w	r3, #0
 8004418:	018b      	lsls	r3, r1, #6
 800441a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800441e:	0182      	lsls	r2, r0, #6
 8004420:	1a12      	subs	r2, r2, r0
 8004422:	eb63 0301 	sbc.w	r3, r3, r1
 8004426:	f04f 0000 	mov.w	r0, #0
 800442a:	f04f 0100 	mov.w	r1, #0
 800442e:	00d9      	lsls	r1, r3, #3
 8004430:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004434:	00d0      	lsls	r0, r2, #3
 8004436:	4602      	mov	r2, r0
 8004438:	460b      	mov	r3, r1
 800443a:	1912      	adds	r2, r2, r4
 800443c:	eb45 0303 	adc.w	r3, r5, r3
 8004440:	f04f 0000 	mov.w	r0, #0
 8004444:	f04f 0100 	mov.w	r1, #0
 8004448:	0299      	lsls	r1, r3, #10
 800444a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800444e:	0290      	lsls	r0, r2, #10
 8004450:	4602      	mov	r2, r0
 8004452:	460b      	mov	r3, r1
 8004454:	4610      	mov	r0, r2
 8004456:	4619      	mov	r1, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	461a      	mov	r2, r3
 800445c:	f04f 0300 	mov.w	r3, #0
 8004460:	f7fb fef2 	bl	8000248 <__aeabi_uldivmod>
 8004464:	4602      	mov	r2, r0
 8004466:	460b      	mov	r3, r1
 8004468:	4613      	mov	r3, r2
 800446a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800446c:	4b0a      	ldr	r3, [pc, #40]	; (8004498 <HAL_RCC_GetSysClockFreq+0x160>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	0c1b      	lsrs	r3, r3, #16
 8004472:	f003 0303 	and.w	r3, r3, #3
 8004476:	3301      	adds	r3, #1
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	fbb2 f3f3 	udiv	r3, r2, r3
 8004484:	60bb      	str	r3, [r7, #8]
      break;
 8004486:	e002      	b.n	800448e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004488:	4b04      	ldr	r3, [pc, #16]	; (800449c <HAL_RCC_GetSysClockFreq+0x164>)
 800448a:	60bb      	str	r3, [r7, #8]
      break;
 800448c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800448e:	68bb      	ldr	r3, [r7, #8]
}
 8004490:	4618      	mov	r0, r3
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bdb0      	pop	{r4, r5, r7, pc}
 8004498:	40023800 	.word	0x40023800
 800449c:	00f42400 	.word	0x00f42400
 80044a0:	017d7840 	.word	0x017d7840

080044a4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044a8:	4b03      	ldr	r3, [pc, #12]	; (80044b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80044aa:	681b      	ldr	r3, [r3, #0]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	20000000 	.word	0x20000000

080044bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044c0:	f7ff fff0 	bl	80044a4 <HAL_RCC_GetHCLKFreq>
 80044c4:	4602      	mov	r2, r0
 80044c6:	4b05      	ldr	r3, [pc, #20]	; (80044dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	0a9b      	lsrs	r3, r3, #10
 80044cc:	f003 0307 	and.w	r3, r3, #7
 80044d0:	4903      	ldr	r1, [pc, #12]	; (80044e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044d2:	5ccb      	ldrb	r3, [r1, r3]
 80044d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044d8:	4618      	mov	r0, r3
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	40023800 	.word	0x40023800
 80044e0:	080079c8 	.word	0x080079c8

080044e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044e8:	f7ff ffdc 	bl	80044a4 <HAL_RCC_GetHCLKFreq>
 80044ec:	4602      	mov	r2, r0
 80044ee:	4b05      	ldr	r3, [pc, #20]	; (8004504 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	0b5b      	lsrs	r3, r3, #13
 80044f4:	f003 0307 	and.w	r3, r3, #7
 80044f8:	4903      	ldr	r1, [pc, #12]	; (8004508 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044fa:	5ccb      	ldrb	r3, [r1, r3]
 80044fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004500:	4618      	mov	r0, r3
 8004502:	bd80      	pop	{r7, pc}
 8004504:	40023800 	.word	0x40023800
 8004508:	080079c8 	.word	0x080079c8

0800450c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b088      	sub	sp, #32
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004514:	2300      	movs	r3, #0
 8004516:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004518:	2300      	movs	r3, #0
 800451a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800451c:	2300      	movs	r3, #0
 800451e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004520:	2300      	movs	r3, #0
 8004522:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004524:	2300      	movs	r3, #0
 8004526:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b00      	cmp	r3, #0
 8004532:	d012      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004534:	4b69      	ldr	r3, [pc, #420]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	4a68      	ldr	r2, [pc, #416]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800453a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800453e:	6093      	str	r3, [r2, #8]
 8004540:	4b66      	ldr	r3, [pc, #408]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004542:	689a      	ldr	r2, [r3, #8]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004548:	4964      	ldr	r1, [pc, #400]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800454a:	4313      	orrs	r3, r2
 800454c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004556:	2301      	movs	r3, #1
 8004558:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d017      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004566:	4b5d      	ldr	r3, [pc, #372]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004568:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800456c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004574:	4959      	ldr	r1, [pc, #356]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004576:	4313      	orrs	r3, r2
 8004578:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004580:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004584:	d101      	bne.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004586:	2301      	movs	r3, #1
 8004588:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004592:	2301      	movs	r3, #1
 8004594:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d017      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80045a2:	4b4e      	ldr	r3, [pc, #312]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b0:	494a      	ldr	r1, [pc, #296]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045c0:	d101      	bne.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80045c2:	2301      	movs	r3, #1
 80045c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80045ce:	2301      	movs	r3, #1
 80045d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80045de:	2301      	movs	r3, #1
 80045e0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0320 	and.w	r3, r3, #32
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f000 808b 	beq.w	8004706 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80045f0:	4b3a      	ldr	r3, [pc, #232]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f4:	4a39      	ldr	r2, [pc, #228]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045fa:	6413      	str	r3, [r2, #64]	; 0x40
 80045fc:	4b37      	ldr	r3, [pc, #220]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004604:	60bb      	str	r3, [r7, #8]
 8004606:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004608:	4b35      	ldr	r3, [pc, #212]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a34      	ldr	r2, [pc, #208]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800460e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004612:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004614:	f7fe f97c 	bl	8002910 <HAL_GetTick>
 8004618:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800461a:	e008      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800461c:	f7fe f978 	bl	8002910 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b64      	cmp	r3, #100	; 0x64
 8004628:	d901      	bls.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e38f      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800462e:	4b2c      	ldr	r3, [pc, #176]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004636:	2b00      	cmp	r3, #0
 8004638:	d0f0      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800463a:	4b28      	ldr	r3, [pc, #160]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800463c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004642:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d035      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	429a      	cmp	r2, r3
 8004656:	d02e      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004658:	4b20      	ldr	r3, [pc, #128]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800465a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004660:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004662:	4b1e      	ldr	r3, [pc, #120]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004666:	4a1d      	ldr	r2, [pc, #116]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800466c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800466e:	4b1b      	ldr	r3, [pc, #108]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004672:	4a1a      	ldr	r2, [pc, #104]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004674:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004678:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800467a:	4a18      	ldr	r2, [pc, #96]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004680:	4b16      	ldr	r3, [pc, #88]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	2b01      	cmp	r3, #1
 800468a:	d114      	bne.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468c:	f7fe f940 	bl	8002910 <HAL_GetTick>
 8004690:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004692:	e00a      	b.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004694:	f7fe f93c 	bl	8002910 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d901      	bls.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e351      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046aa:	4b0c      	ldr	r3, [pc, #48]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d0ee      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046c2:	d111      	bne.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80046c4:	4b05      	ldr	r3, [pc, #20]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80046d0:	4b04      	ldr	r3, [pc, #16]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80046d2:	400b      	ands	r3, r1
 80046d4:	4901      	ldr	r1, [pc, #4]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	608b      	str	r3, [r1, #8]
 80046da:	e00b      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80046dc:	40023800 	.word	0x40023800
 80046e0:	40007000 	.word	0x40007000
 80046e4:	0ffffcff 	.word	0x0ffffcff
 80046e8:	4bb3      	ldr	r3, [pc, #716]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	4ab2      	ldr	r2, [pc, #712]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046ee:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80046f2:	6093      	str	r3, [r2, #8]
 80046f4:	4bb0      	ldr	r3, [pc, #704]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004700:	49ad      	ldr	r1, [pc, #692]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004702:	4313      	orrs	r3, r2
 8004704:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0310 	and.w	r3, r3, #16
 800470e:	2b00      	cmp	r3, #0
 8004710:	d010      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004712:	4ba9      	ldr	r3, [pc, #676]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004714:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004718:	4aa7      	ldr	r2, [pc, #668]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800471a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800471e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004722:	4ba5      	ldr	r3, [pc, #660]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004724:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472c:	49a2      	ldr	r1, [pc, #648]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800472e:	4313      	orrs	r3, r2
 8004730:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00a      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004740:	4b9d      	ldr	r3, [pc, #628]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004746:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800474e:	499a      	ldr	r1, [pc, #616]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004750:	4313      	orrs	r3, r2
 8004752:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00a      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004762:	4b95      	ldr	r3, [pc, #596]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004768:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004770:	4991      	ldr	r1, [pc, #580]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004772:	4313      	orrs	r3, r2
 8004774:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00a      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004784:	4b8c      	ldr	r3, [pc, #560]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800478a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004792:	4989      	ldr	r1, [pc, #548]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004794:	4313      	orrs	r3, r2
 8004796:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00a      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80047a6:	4b84      	ldr	r3, [pc, #528]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b4:	4980      	ldr	r1, [pc, #512]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00a      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047c8:	4b7b      	ldr	r3, [pc, #492]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ce:	f023 0203 	bic.w	r2, r3, #3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d6:	4978      	ldr	r1, [pc, #480]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00a      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047ea:	4b73      	ldr	r3, [pc, #460]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f0:	f023 020c 	bic.w	r2, r3, #12
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047f8:	496f      	ldr	r1, [pc, #444]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00a      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800480c:	4b6a      	ldr	r3, [pc, #424]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800480e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004812:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800481a:	4967      	ldr	r1, [pc, #412]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800481c:	4313      	orrs	r3, r2
 800481e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00a      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800482e:	4b62      	ldr	r3, [pc, #392]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004834:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800483c:	495e      	ldr	r1, [pc, #376]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800483e:	4313      	orrs	r3, r2
 8004840:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00a      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004850:	4b59      	ldr	r3, [pc, #356]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004856:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485e:	4956      	ldr	r1, [pc, #344]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004860:	4313      	orrs	r3, r2
 8004862:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00a      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004872:	4b51      	ldr	r3, [pc, #324]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004878:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004880:	494d      	ldr	r1, [pc, #308]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004882:	4313      	orrs	r3, r2
 8004884:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00a      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004894:	4b48      	ldr	r3, [pc, #288]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800489a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a2:	4945      	ldr	r1, [pc, #276]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00a      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80048b6:	4b40      	ldr	r3, [pc, #256]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048c4:	493c      	ldr	r1, [pc, #240]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00a      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80048d8:	4b37      	ldr	r3, [pc, #220]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048de:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048e6:	4934      	ldr	r1, [pc, #208]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d011      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80048fa:	4b2f      	ldr	r3, [pc, #188]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004900:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004908:	492b      	ldr	r1, [pc, #172]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800490a:	4313      	orrs	r3, r2
 800490c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004914:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004918:	d101      	bne.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800491a:	2301      	movs	r3, #1
 800491c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0308 	and.w	r3, r3, #8
 8004926:	2b00      	cmp	r3, #0
 8004928:	d001      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800492a:	2301      	movs	r3, #1
 800492c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00a      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800493a:	4b1f      	ldr	r3, [pc, #124]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800493c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004940:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004948:	491b      	ldr	r1, [pc, #108]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800494a:	4313      	orrs	r3, r2
 800494c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00b      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800495c:	4b16      	ldr	r3, [pc, #88]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800495e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004962:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800496c:	4912      	ldr	r1, [pc, #72]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800496e:	4313      	orrs	r3, r2
 8004970:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00b      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004980:	4b0d      	ldr	r3, [pc, #52]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004986:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004990:	4909      	ldr	r1, [pc, #36]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004992:	4313      	orrs	r3, r2
 8004994:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00f      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80049a4:	4b04      	ldr	r3, [pc, #16]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049aa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b4:	e002      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80049b6:	bf00      	nop
 80049b8:	40023800 	.word	0x40023800
 80049bc:	4986      	ldr	r1, [pc, #536]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00b      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80049d0:	4b81      	ldr	r3, [pc, #516]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049d6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049e0:	497d      	ldr	r1, [pc, #500]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d006      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f000 80d6 	beq.w	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80049fc:	4b76      	ldr	r3, [pc, #472]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a75      	ldr	r2, [pc, #468]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a02:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a08:	f7fd ff82 	bl	8002910 <HAL_GetTick>
 8004a0c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a0e:	e008      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a10:	f7fd ff7e 	bl	8002910 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b64      	cmp	r3, #100	; 0x64
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e195      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a22:	4b6d      	ldr	r3, [pc, #436]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1f0      	bne.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d021      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d11d      	bne.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a42:	4b65      	ldr	r3, [pc, #404]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a48:	0c1b      	lsrs	r3, r3, #16
 8004a4a:	f003 0303 	and.w	r3, r3, #3
 8004a4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a50:	4b61      	ldr	r3, [pc, #388]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a56:	0e1b      	lsrs	r3, r3, #24
 8004a58:	f003 030f 	and.w	r3, r3, #15
 8004a5c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	019a      	lsls	r2, r3, #6
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	041b      	lsls	r3, r3, #16
 8004a68:	431a      	orrs	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	061b      	lsls	r3, r3, #24
 8004a6e:	431a      	orrs	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	071b      	lsls	r3, r3, #28
 8004a76:	4958      	ldr	r1, [pc, #352]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d004      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a92:	d00a      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d02e      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004aa8:	d129      	bne.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004aaa:	4b4b      	ldr	r3, [pc, #300]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004aac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ab0:	0c1b      	lsrs	r3, r3, #16
 8004ab2:	f003 0303 	and.w	r3, r3, #3
 8004ab6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ab8:	4b47      	ldr	r3, [pc, #284]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004aba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004abe:	0f1b      	lsrs	r3, r3, #28
 8004ac0:	f003 0307 	and.w	r3, r3, #7
 8004ac4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	019a      	lsls	r2, r3, #6
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	041b      	lsls	r3, r3, #16
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	061b      	lsls	r3, r3, #24
 8004ad8:	431a      	orrs	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	071b      	lsls	r3, r3, #28
 8004ade:	493e      	ldr	r1, [pc, #248]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004ae6:	4b3c      	ldr	r3, [pc, #240]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ae8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004aec:	f023 021f 	bic.w	r2, r3, #31
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af4:	3b01      	subs	r3, #1
 8004af6:	4938      	ldr	r1, [pc, #224]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d01d      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b0a:	4b33      	ldr	r3, [pc, #204]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b10:	0e1b      	lsrs	r3, r3, #24
 8004b12:	f003 030f 	and.w	r3, r3, #15
 8004b16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b18:	4b2f      	ldr	r3, [pc, #188]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b1e:	0f1b      	lsrs	r3, r3, #28
 8004b20:	f003 0307 	and.w	r3, r3, #7
 8004b24:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	019a      	lsls	r2, r3, #6
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	041b      	lsls	r3, r3, #16
 8004b32:	431a      	orrs	r2, r3
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	061b      	lsls	r3, r3, #24
 8004b38:	431a      	orrs	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	071b      	lsls	r3, r3, #28
 8004b3e:	4926      	ldr	r1, [pc, #152]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d011      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	019a      	lsls	r2, r3, #6
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	041b      	lsls	r3, r3, #16
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	061b      	lsls	r3, r3, #24
 8004b66:	431a      	orrs	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	071b      	lsls	r3, r3, #28
 8004b6e:	491a      	ldr	r1, [pc, #104]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b76:	4b18      	ldr	r3, [pc, #96]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a17      	ldr	r2, [pc, #92]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b82:	f7fd fec5 	bl	8002910 <HAL_GetTick>
 8004b86:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b88:	e008      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b8a:	f7fd fec1 	bl	8002910 <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	2b64      	cmp	r3, #100	; 0x64
 8004b96:	d901      	bls.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e0d8      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b9c:	4b0e      	ldr	r3, [pc, #56]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d0f0      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	f040 80ce 	bne.w	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004bb0:	4b09      	ldr	r3, [pc, #36]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a08      	ldr	r2, [pc, #32]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bbc:	f7fd fea8 	bl	8002910 <HAL_GetTick>
 8004bc0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004bc2:	e00b      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004bc4:	f7fd fea4 	bl	8002910 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b64      	cmp	r3, #100	; 0x64
 8004bd0:	d904      	bls.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e0bb      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004bd6:	bf00      	nop
 8004bd8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004bdc:	4b5e      	ldr	r3, [pc, #376]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004be4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004be8:	d0ec      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d003      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d009      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d02e      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d12a      	bne.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c12:	4b51      	ldr	r3, [pc, #324]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c18:	0c1b      	lsrs	r3, r3, #16
 8004c1a:	f003 0303 	and.w	r3, r3, #3
 8004c1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c20:	4b4d      	ldr	r3, [pc, #308]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c26:	0f1b      	lsrs	r3, r3, #28
 8004c28:	f003 0307 	and.w	r3, r3, #7
 8004c2c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	019a      	lsls	r2, r3, #6
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	041b      	lsls	r3, r3, #16
 8004c38:	431a      	orrs	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	061b      	lsls	r3, r3, #24
 8004c40:	431a      	orrs	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	071b      	lsls	r3, r3, #28
 8004c46:	4944      	ldr	r1, [pc, #272]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004c4e:	4b42      	ldr	r3, [pc, #264]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c54:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	021b      	lsls	r3, r3, #8
 8004c60:	493d      	ldr	r1, [pc, #244]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d022      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c7c:	d11d      	bne.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c7e:	4b36      	ldr	r3, [pc, #216]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c84:	0e1b      	lsrs	r3, r3, #24
 8004c86:	f003 030f 	and.w	r3, r3, #15
 8004c8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c8c:	4b32      	ldr	r3, [pc, #200]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c92:	0f1b      	lsrs	r3, r3, #28
 8004c94:	f003 0307 	and.w	r3, r3, #7
 8004c98:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	019a      	lsls	r2, r3, #6
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a1b      	ldr	r3, [r3, #32]
 8004ca4:	041b      	lsls	r3, r3, #16
 8004ca6:	431a      	orrs	r2, r3
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	061b      	lsls	r3, r3, #24
 8004cac:	431a      	orrs	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	071b      	lsls	r3, r3, #28
 8004cb2:	4929      	ldr	r1, [pc, #164]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0308 	and.w	r3, r3, #8
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d028      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004cc6:	4b24      	ldr	r3, [pc, #144]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ccc:	0e1b      	lsrs	r3, r3, #24
 8004cce:	f003 030f 	and.w	r3, r3, #15
 8004cd2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004cd4:	4b20      	ldr	r3, [pc, #128]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cda:	0c1b      	lsrs	r3, r3, #16
 8004cdc:	f003 0303 	and.w	r3, r3, #3
 8004ce0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	019a      	lsls	r2, r3, #6
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	041b      	lsls	r3, r3, #16
 8004cec:	431a      	orrs	r2, r3
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	061b      	lsls	r3, r3, #24
 8004cf2:	431a      	orrs	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	69db      	ldr	r3, [r3, #28]
 8004cf8:	071b      	lsls	r3, r3, #28
 8004cfa:	4917      	ldr	r1, [pc, #92]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004d02:	4b15      	ldr	r3, [pc, #84]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d10:	4911      	ldr	r1, [pc, #68]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004d18:	4b0f      	ldr	r3, [pc, #60]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a0e      	ldr	r2, [pc, #56]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d24:	f7fd fdf4 	bl	8002910 <HAL_GetTick>
 8004d28:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d2c:	f7fd fdf0 	bl	8002910 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b64      	cmp	r3, #100	; 0x64
 8004d38:	d901      	bls.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e007      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d3e:	4b06      	ldr	r3, [pc, #24]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d4a:	d1ef      	bne.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3720      	adds	r7, #32
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	40023800 	.word	0x40023800

08004d5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e09d      	b.n	8004eaa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d108      	bne.n	8004d88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d7e:	d009      	beq.n	8004d94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	61da      	str	r2, [r3, #28]
 8004d86:	e005      	b.n	8004d94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d106      	bne.n	8004db4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f7fd f97e 	bl	80020b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2202      	movs	r2, #2
 8004db8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004dd4:	d902      	bls.n	8004ddc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	60fb      	str	r3, [r7, #12]
 8004dda:	e002      	b.n	8004de2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004ddc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004de0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004dea:	d007      	beq.n	8004dfc <HAL_SPI_Init+0xa0>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004df4:	d002      	beq.n	8004dfc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	431a      	orrs	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	695b      	ldr	r3, [r3, #20]
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	431a      	orrs	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	69db      	ldr	r3, [r3, #28]
 8004e30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e34:	431a      	orrs	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e3e:	ea42 0103 	orr.w	r1, r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e46:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	699b      	ldr	r3, [r3, #24]
 8004e56:	0c1b      	lsrs	r3, r3, #16
 8004e58:	f003 0204 	and.w	r2, r3, #4
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e60:	f003 0310 	and.w	r3, r3, #16
 8004e64:	431a      	orrs	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e6a:	f003 0308 	and.w	r3, r3, #8
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004e78:	ea42 0103 	orr.w	r1, r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	430a      	orrs	r2, r1
 8004e88:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	69da      	ldr	r2, [r3, #28]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e98:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3710      	adds	r7, #16
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b082      	sub	sp, #8
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d101      	bne.n	8004ec4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e049      	b.n	8004f58 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d106      	bne.n	8004ede <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f7fd fb51 	bl	8002580 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2202      	movs	r2, #2
 8004ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	3304      	adds	r3, #4
 8004eee:	4619      	mov	r1, r3
 8004ef0:	4610      	mov	r0, r2
 8004ef2:	f000 ff63 	bl	8005dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2201      	movs	r2, #1
 8004f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3708      	adds	r7, #8
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d001      	beq.n	8004f78 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e04c      	b.n	8005012 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a26      	ldr	r2, [pc, #152]	; (8005020 <HAL_TIM_Base_Start+0xc0>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d022      	beq.n	8004fd0 <HAL_TIM_Base_Start+0x70>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f92:	d01d      	beq.n	8004fd0 <HAL_TIM_Base_Start+0x70>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a22      	ldr	r2, [pc, #136]	; (8005024 <HAL_TIM_Base_Start+0xc4>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d018      	beq.n	8004fd0 <HAL_TIM_Base_Start+0x70>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a21      	ldr	r2, [pc, #132]	; (8005028 <HAL_TIM_Base_Start+0xc8>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d013      	beq.n	8004fd0 <HAL_TIM_Base_Start+0x70>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a1f      	ldr	r2, [pc, #124]	; (800502c <HAL_TIM_Base_Start+0xcc>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d00e      	beq.n	8004fd0 <HAL_TIM_Base_Start+0x70>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a1e      	ldr	r2, [pc, #120]	; (8005030 <HAL_TIM_Base_Start+0xd0>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d009      	beq.n	8004fd0 <HAL_TIM_Base_Start+0x70>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a1c      	ldr	r2, [pc, #112]	; (8005034 <HAL_TIM_Base_Start+0xd4>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d004      	beq.n	8004fd0 <HAL_TIM_Base_Start+0x70>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a1b      	ldr	r2, [pc, #108]	; (8005038 <HAL_TIM_Base_Start+0xd8>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d115      	bne.n	8004ffc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	689a      	ldr	r2, [r3, #8]
 8004fd6:	4b19      	ldr	r3, [pc, #100]	; (800503c <HAL_TIM_Base_Start+0xdc>)
 8004fd8:	4013      	ands	r3, r2
 8004fda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2b06      	cmp	r3, #6
 8004fe0:	d015      	beq.n	800500e <HAL_TIM_Base_Start+0xae>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fe8:	d011      	beq.n	800500e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f042 0201 	orr.w	r2, r2, #1
 8004ff8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ffa:	e008      	b.n	800500e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f042 0201 	orr.w	r2, r2, #1
 800500a:	601a      	str	r2, [r3, #0]
 800500c:	e000      	b.n	8005010 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800500e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3714      	adds	r7, #20
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	40010000 	.word	0x40010000
 8005024:	40000400 	.word	0x40000400
 8005028:	40000800 	.word	0x40000800
 800502c:	40000c00 	.word	0x40000c00
 8005030:	40010400 	.word	0x40010400
 8005034:	40014000 	.word	0x40014000
 8005038:	40001800 	.word	0x40001800
 800503c:	00010007 	.word	0x00010007

08005040 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800504e:	b2db      	uxtb	r3, r3
 8005050:	2b01      	cmp	r3, #1
 8005052:	d001      	beq.n	8005058 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e054      	b.n	8005102 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2202      	movs	r2, #2
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68da      	ldr	r2, [r3, #12]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f042 0201 	orr.w	r2, r2, #1
 800506e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a26      	ldr	r2, [pc, #152]	; (8005110 <HAL_TIM_Base_Start_IT+0xd0>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d022      	beq.n	80050c0 <HAL_TIM_Base_Start_IT+0x80>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005082:	d01d      	beq.n	80050c0 <HAL_TIM_Base_Start_IT+0x80>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a22      	ldr	r2, [pc, #136]	; (8005114 <HAL_TIM_Base_Start_IT+0xd4>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d018      	beq.n	80050c0 <HAL_TIM_Base_Start_IT+0x80>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a21      	ldr	r2, [pc, #132]	; (8005118 <HAL_TIM_Base_Start_IT+0xd8>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d013      	beq.n	80050c0 <HAL_TIM_Base_Start_IT+0x80>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a1f      	ldr	r2, [pc, #124]	; (800511c <HAL_TIM_Base_Start_IT+0xdc>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d00e      	beq.n	80050c0 <HAL_TIM_Base_Start_IT+0x80>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a1e      	ldr	r2, [pc, #120]	; (8005120 <HAL_TIM_Base_Start_IT+0xe0>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d009      	beq.n	80050c0 <HAL_TIM_Base_Start_IT+0x80>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a1c      	ldr	r2, [pc, #112]	; (8005124 <HAL_TIM_Base_Start_IT+0xe4>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d004      	beq.n	80050c0 <HAL_TIM_Base_Start_IT+0x80>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a1b      	ldr	r2, [pc, #108]	; (8005128 <HAL_TIM_Base_Start_IT+0xe8>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d115      	bne.n	80050ec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	689a      	ldr	r2, [r3, #8]
 80050c6:	4b19      	ldr	r3, [pc, #100]	; (800512c <HAL_TIM_Base_Start_IT+0xec>)
 80050c8:	4013      	ands	r3, r2
 80050ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2b06      	cmp	r3, #6
 80050d0:	d015      	beq.n	80050fe <HAL_TIM_Base_Start_IT+0xbe>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050d8:	d011      	beq.n	80050fe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f042 0201 	orr.w	r2, r2, #1
 80050e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ea:	e008      	b.n	80050fe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f042 0201 	orr.w	r2, r2, #1
 80050fa:	601a      	str	r2, [r3, #0]
 80050fc:	e000      	b.n	8005100 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3714      	adds	r7, #20
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	40010000 	.word	0x40010000
 8005114:	40000400 	.word	0x40000400
 8005118:	40000800 	.word	0x40000800
 800511c:	40000c00 	.word	0x40000c00
 8005120:	40010400 	.word	0x40010400
 8005124:	40014000 	.word	0x40014000
 8005128:	40001800 	.word	0x40001800
 800512c:	00010007 	.word	0x00010007

08005130 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e049      	b.n	80051d6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2b00      	cmp	r3, #0
 800514c:	d106      	bne.n	800515c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7fd fa7a 	bl	8002650 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2202      	movs	r2, #2
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	3304      	adds	r3, #4
 800516c:	4619      	mov	r1, r3
 800516e:	4610      	mov	r0, r2
 8005170:	f000 fe24 	bl	8005dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3708      	adds	r7, #8
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b082      	sub	sp, #8
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d101      	bne.n	80051f0 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e049      	b.n	8005284 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d106      	bne.n	800520a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f841 	bl	800528c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2202      	movs	r2, #2
 800520e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	3304      	adds	r3, #4
 800521a:	4619      	mov	r1, r3
 800521c:	4610      	mov	r0, r2
 800521e:	f000 fdcd 	bl	8005dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3708      	adds	r7, #8
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005294:	bf00      	nop
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052aa:	2300      	movs	r3, #0
 80052ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d104      	bne.n	80052be <HAL_TIM_IC_Start_IT+0x1e>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	e023      	b.n	8005306 <HAL_TIM_IC_Start_IT+0x66>
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	2b04      	cmp	r3, #4
 80052c2:	d104      	bne.n	80052ce <HAL_TIM_IC_Start_IT+0x2e>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	e01b      	b.n	8005306 <HAL_TIM_IC_Start_IT+0x66>
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	2b08      	cmp	r3, #8
 80052d2:	d104      	bne.n	80052de <HAL_TIM_IC_Start_IT+0x3e>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	e013      	b.n	8005306 <HAL_TIM_IC_Start_IT+0x66>
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	2b0c      	cmp	r3, #12
 80052e2:	d104      	bne.n	80052ee <HAL_TIM_IC_Start_IT+0x4e>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	e00b      	b.n	8005306 <HAL_TIM_IC_Start_IT+0x66>
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	2b10      	cmp	r3, #16
 80052f2:	d104      	bne.n	80052fe <HAL_TIM_IC_Start_IT+0x5e>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	e003      	b.n	8005306 <HAL_TIM_IC_Start_IT+0x66>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005304:	b2db      	uxtb	r3, r3
 8005306:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d104      	bne.n	8005318 <HAL_TIM_IC_Start_IT+0x78>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005314:	b2db      	uxtb	r3, r3
 8005316:	e013      	b.n	8005340 <HAL_TIM_IC_Start_IT+0xa0>
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	2b04      	cmp	r3, #4
 800531c:	d104      	bne.n	8005328 <HAL_TIM_IC_Start_IT+0x88>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005324:	b2db      	uxtb	r3, r3
 8005326:	e00b      	b.n	8005340 <HAL_TIM_IC_Start_IT+0xa0>
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	2b08      	cmp	r3, #8
 800532c:	d104      	bne.n	8005338 <HAL_TIM_IC_Start_IT+0x98>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005334:	b2db      	uxtb	r3, r3
 8005336:	e003      	b.n	8005340 <HAL_TIM_IC_Start_IT+0xa0>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800533e:	b2db      	uxtb	r3, r3
 8005340:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005342:	7bbb      	ldrb	r3, [r7, #14]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d102      	bne.n	800534e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005348:	7b7b      	ldrb	r3, [r7, #13]
 800534a:	2b01      	cmp	r3, #1
 800534c:	d001      	beq.n	8005352 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e0e2      	b.n	8005518 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d104      	bne.n	8005362 <HAL_TIM_IC_Start_IT+0xc2>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2202      	movs	r2, #2
 800535c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005360:	e023      	b.n	80053aa <HAL_TIM_IC_Start_IT+0x10a>
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2b04      	cmp	r3, #4
 8005366:	d104      	bne.n	8005372 <HAL_TIM_IC_Start_IT+0xd2>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005370:	e01b      	b.n	80053aa <HAL_TIM_IC_Start_IT+0x10a>
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2b08      	cmp	r3, #8
 8005376:	d104      	bne.n	8005382 <HAL_TIM_IC_Start_IT+0xe2>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2202      	movs	r2, #2
 800537c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005380:	e013      	b.n	80053aa <HAL_TIM_IC_Start_IT+0x10a>
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	2b0c      	cmp	r3, #12
 8005386:	d104      	bne.n	8005392 <HAL_TIM_IC_Start_IT+0xf2>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2202      	movs	r2, #2
 800538c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005390:	e00b      	b.n	80053aa <HAL_TIM_IC_Start_IT+0x10a>
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	2b10      	cmp	r3, #16
 8005396:	d104      	bne.n	80053a2 <HAL_TIM_IC_Start_IT+0x102>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2202      	movs	r2, #2
 800539c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053a0:	e003      	b.n	80053aa <HAL_TIM_IC_Start_IT+0x10a>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2202      	movs	r2, #2
 80053a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d104      	bne.n	80053ba <HAL_TIM_IC_Start_IT+0x11a>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2202      	movs	r2, #2
 80053b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053b8:	e013      	b.n	80053e2 <HAL_TIM_IC_Start_IT+0x142>
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	2b04      	cmp	r3, #4
 80053be:	d104      	bne.n	80053ca <HAL_TIM_IC_Start_IT+0x12a>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2202      	movs	r2, #2
 80053c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053c8:	e00b      	b.n	80053e2 <HAL_TIM_IC_Start_IT+0x142>
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	2b08      	cmp	r3, #8
 80053ce:	d104      	bne.n	80053da <HAL_TIM_IC_Start_IT+0x13a>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2202      	movs	r2, #2
 80053d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053d8:	e003      	b.n	80053e2 <HAL_TIM_IC_Start_IT+0x142>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2202      	movs	r2, #2
 80053de:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	2b0c      	cmp	r3, #12
 80053e6:	d841      	bhi.n	800546c <HAL_TIM_IC_Start_IT+0x1cc>
 80053e8:	a201      	add	r2, pc, #4	; (adr r2, 80053f0 <HAL_TIM_IC_Start_IT+0x150>)
 80053ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ee:	bf00      	nop
 80053f0:	08005425 	.word	0x08005425
 80053f4:	0800546d 	.word	0x0800546d
 80053f8:	0800546d 	.word	0x0800546d
 80053fc:	0800546d 	.word	0x0800546d
 8005400:	08005437 	.word	0x08005437
 8005404:	0800546d 	.word	0x0800546d
 8005408:	0800546d 	.word	0x0800546d
 800540c:	0800546d 	.word	0x0800546d
 8005410:	08005449 	.word	0x08005449
 8005414:	0800546d 	.word	0x0800546d
 8005418:	0800546d 	.word	0x0800546d
 800541c:	0800546d 	.word	0x0800546d
 8005420:	0800545b 	.word	0x0800545b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68da      	ldr	r2, [r3, #12]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f042 0202 	orr.w	r2, r2, #2
 8005432:	60da      	str	r2, [r3, #12]
      break;
 8005434:	e01d      	b.n	8005472 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68da      	ldr	r2, [r3, #12]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f042 0204 	orr.w	r2, r2, #4
 8005444:	60da      	str	r2, [r3, #12]
      break;
 8005446:	e014      	b.n	8005472 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68da      	ldr	r2, [r3, #12]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f042 0208 	orr.w	r2, r2, #8
 8005456:	60da      	str	r2, [r3, #12]
      break;
 8005458:	e00b      	b.n	8005472 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68da      	ldr	r2, [r3, #12]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f042 0210 	orr.w	r2, r2, #16
 8005468:	60da      	str	r2, [r3, #12]
      break;
 800546a:	e002      	b.n	8005472 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	73fb      	strb	r3, [r7, #15]
      break;
 8005470:	bf00      	nop
  }

  if (status == HAL_OK)
 8005472:	7bfb      	ldrb	r3, [r7, #15]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d14e      	bne.n	8005516 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2201      	movs	r2, #1
 800547e:	6839      	ldr	r1, [r7, #0]
 8005480:	4618      	mov	r0, r3
 8005482:	f001 f9f1 	bl	8006868 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a25      	ldr	r2, [pc, #148]	; (8005520 <HAL_TIM_IC_Start_IT+0x280>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d022      	beq.n	80054d6 <HAL_TIM_IC_Start_IT+0x236>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005498:	d01d      	beq.n	80054d6 <HAL_TIM_IC_Start_IT+0x236>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a21      	ldr	r2, [pc, #132]	; (8005524 <HAL_TIM_IC_Start_IT+0x284>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d018      	beq.n	80054d6 <HAL_TIM_IC_Start_IT+0x236>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a1f      	ldr	r2, [pc, #124]	; (8005528 <HAL_TIM_IC_Start_IT+0x288>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d013      	beq.n	80054d6 <HAL_TIM_IC_Start_IT+0x236>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a1e      	ldr	r2, [pc, #120]	; (800552c <HAL_TIM_IC_Start_IT+0x28c>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d00e      	beq.n	80054d6 <HAL_TIM_IC_Start_IT+0x236>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a1c      	ldr	r2, [pc, #112]	; (8005530 <HAL_TIM_IC_Start_IT+0x290>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d009      	beq.n	80054d6 <HAL_TIM_IC_Start_IT+0x236>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a1b      	ldr	r2, [pc, #108]	; (8005534 <HAL_TIM_IC_Start_IT+0x294>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d004      	beq.n	80054d6 <HAL_TIM_IC_Start_IT+0x236>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a19      	ldr	r2, [pc, #100]	; (8005538 <HAL_TIM_IC_Start_IT+0x298>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d115      	bne.n	8005502 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	689a      	ldr	r2, [r3, #8]
 80054dc:	4b17      	ldr	r3, [pc, #92]	; (800553c <HAL_TIM_IC_Start_IT+0x29c>)
 80054de:	4013      	ands	r3, r2
 80054e0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2b06      	cmp	r3, #6
 80054e6:	d015      	beq.n	8005514 <HAL_TIM_IC_Start_IT+0x274>
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054ee:	d011      	beq.n	8005514 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f042 0201 	orr.w	r2, r2, #1
 80054fe:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005500:	e008      	b.n	8005514 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f042 0201 	orr.w	r2, r2, #1
 8005510:	601a      	str	r2, [r3, #0]
 8005512:	e000      	b.n	8005516 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005514:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005516:	7bfb      	ldrb	r3, [r7, #15]
}
 8005518:	4618      	mov	r0, r3
 800551a:	3710      	adds	r7, #16
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	40010000 	.word	0x40010000
 8005524:	40000400 	.word	0x40000400
 8005528:	40000800 	.word	0x40000800
 800552c:	40000c00 	.word	0x40000c00
 8005530:	40010400 	.word	0x40010400
 8005534:	40014000 	.word	0x40014000
 8005538:	40001800 	.word	0x40001800
 800553c:	00010007 	.word	0x00010007

08005540 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	f003 0302 	and.w	r3, r3, #2
 8005552:	2b02      	cmp	r3, #2
 8005554:	d122      	bne.n	800559c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	f003 0302 	and.w	r3, r3, #2
 8005560:	2b02      	cmp	r3, #2
 8005562:	d11b      	bne.n	800559c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f06f 0202 	mvn.w	r2, #2
 800556c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2201      	movs	r2, #1
 8005572:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	f003 0303 	and.w	r3, r3, #3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d003      	beq.n	800558a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f7fc fccc 	bl	8001f20 <HAL_TIM_IC_CaptureCallback>
 8005588:	e005      	b.n	8005596 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 fbf8 	bl	8005d80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 fbff 	bl	8005d94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	f003 0304 	and.w	r3, r3, #4
 80055a6:	2b04      	cmp	r3, #4
 80055a8:	d122      	bne.n	80055f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	f003 0304 	and.w	r3, r3, #4
 80055b4:	2b04      	cmp	r3, #4
 80055b6:	d11b      	bne.n	80055f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f06f 0204 	mvn.w	r2, #4
 80055c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2202      	movs	r2, #2
 80055c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d003      	beq.n	80055de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f7fc fca2 	bl	8001f20 <HAL_TIM_IC_CaptureCallback>
 80055dc:	e005      	b.n	80055ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 fbce 	bl	8005d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 fbd5 	bl	8005d94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	f003 0308 	and.w	r3, r3, #8
 80055fa:	2b08      	cmp	r3, #8
 80055fc:	d122      	bne.n	8005644 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	f003 0308 	and.w	r3, r3, #8
 8005608:	2b08      	cmp	r3, #8
 800560a:	d11b      	bne.n	8005644 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f06f 0208 	mvn.w	r2, #8
 8005614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2204      	movs	r2, #4
 800561a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	f003 0303 	and.w	r3, r3, #3
 8005626:	2b00      	cmp	r3, #0
 8005628:	d003      	beq.n	8005632 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f7fc fc78 	bl	8001f20 <HAL_TIM_IC_CaptureCallback>
 8005630:	e005      	b.n	800563e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 fba4 	bl	8005d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 fbab 	bl	8005d94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	f003 0310 	and.w	r3, r3, #16
 800564e:	2b10      	cmp	r3, #16
 8005650:	d122      	bne.n	8005698 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	f003 0310 	and.w	r3, r3, #16
 800565c:	2b10      	cmp	r3, #16
 800565e:	d11b      	bne.n	8005698 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f06f 0210 	mvn.w	r2, #16
 8005668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2208      	movs	r2, #8
 800566e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	69db      	ldr	r3, [r3, #28]
 8005676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800567a:	2b00      	cmp	r3, #0
 800567c:	d003      	beq.n	8005686 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f7fc fc4e 	bl	8001f20 <HAL_TIM_IC_CaptureCallback>
 8005684:	e005      	b.n	8005692 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 fb7a 	bl	8005d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 fb81 	bl	8005d94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	f003 0301 	and.w	r3, r3, #1
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d10e      	bne.n	80056c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	f003 0301 	and.w	r3, r3, #1
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d107      	bne.n	80056c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f06f 0201 	mvn.w	r2, #1
 80056bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7fc fc18 	bl	8001ef4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ce:	2b80      	cmp	r3, #128	; 0x80
 80056d0:	d10e      	bne.n	80056f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056dc:	2b80      	cmp	r3, #128	; 0x80
 80056de:	d107      	bne.n	80056f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f001 f97a 	bl	80069e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056fe:	d10e      	bne.n	800571e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800570a:	2b80      	cmp	r3, #128	; 0x80
 800570c:	d107      	bne.n	800571e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005716:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f001 f96d 	bl	80069f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005728:	2b40      	cmp	r3, #64	; 0x40
 800572a:	d10e      	bne.n	800574a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005736:	2b40      	cmp	r3, #64	; 0x40
 8005738:	d107      	bne.n	800574a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005742:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 fb2f 	bl	8005da8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	f003 0320 	and.w	r3, r3, #32
 8005754:	2b20      	cmp	r3, #32
 8005756:	d10e      	bne.n	8005776 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	f003 0320 	and.w	r3, r3, #32
 8005762:	2b20      	cmp	r3, #32
 8005764:	d107      	bne.n	8005776 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f06f 0220 	mvn.w	r2, #32
 800576e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f001 f92d 	bl	80069d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005776:	bf00      	nop
 8005778:	3708      	adds	r7, #8
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800577e:	b580      	push	{r7, lr}
 8005780:	b086      	sub	sp, #24
 8005782:	af00      	add	r7, sp, #0
 8005784:	60f8      	str	r0, [r7, #12]
 8005786:	60b9      	str	r1, [r7, #8]
 8005788:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800578a:	2300      	movs	r3, #0
 800578c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005794:	2b01      	cmp	r3, #1
 8005796:	d101      	bne.n	800579c <HAL_TIM_IC_ConfigChannel+0x1e>
 8005798:	2302      	movs	r3, #2
 800579a:	e088      	b.n	80058ae <HAL_TIM_IC_ConfigChannel+0x130>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d11b      	bne.n	80057e2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6818      	ldr	r0, [r3, #0]
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	6819      	ldr	r1, [r3, #0]
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	685a      	ldr	r2, [r3, #4]
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	f000 fe91 	bl	80064e0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	699a      	ldr	r2, [r3, #24]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f022 020c 	bic.w	r2, r2, #12
 80057cc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	6999      	ldr	r1, [r3, #24]
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	689a      	ldr	r2, [r3, #8]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	430a      	orrs	r2, r1
 80057de:	619a      	str	r2, [r3, #24]
 80057e0:	e060      	b.n	80058a4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2b04      	cmp	r3, #4
 80057e6:	d11c      	bne.n	8005822 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6818      	ldr	r0, [r3, #0]
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	6819      	ldr	r1, [r3, #0]
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	685a      	ldr	r2, [r3, #4]
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	f000 ff15 	bl	8006626 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	699a      	ldr	r2, [r3, #24]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800580a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6999      	ldr	r1, [r3, #24]
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	021a      	lsls	r2, r3, #8
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	430a      	orrs	r2, r1
 800581e:	619a      	str	r2, [r3, #24]
 8005820:	e040      	b.n	80058a4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2b08      	cmp	r3, #8
 8005826:	d11b      	bne.n	8005860 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6818      	ldr	r0, [r3, #0]
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	6819      	ldr	r1, [r3, #0]
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	685a      	ldr	r2, [r3, #4]
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f000 ff62 	bl	8006700 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	69da      	ldr	r2, [r3, #28]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f022 020c 	bic.w	r2, r2, #12
 800584a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	69d9      	ldr	r1, [r3, #28]
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	689a      	ldr	r2, [r3, #8]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	430a      	orrs	r2, r1
 800585c:	61da      	str	r2, [r3, #28]
 800585e:	e021      	b.n	80058a4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b0c      	cmp	r3, #12
 8005864:	d11c      	bne.n	80058a0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6818      	ldr	r0, [r3, #0]
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	6819      	ldr	r1, [r3, #0]
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	685a      	ldr	r2, [r3, #4]
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	f000 ff7f 	bl	8006778 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	69da      	ldr	r2, [r3, #28]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005888:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	69d9      	ldr	r1, [r3, #28]
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	021a      	lsls	r2, r3, #8
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	430a      	orrs	r2, r1
 800589c:	61da      	str	r2, [r3, #28]
 800589e:	e001      	b.n	80058a4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3718      	adds	r7, #24
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
	...

080058b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b086      	sub	sp, #24
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058c4:	2300      	movs	r3, #0
 80058c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d101      	bne.n	80058d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80058d2:	2302      	movs	r3, #2
 80058d4:	e0ff      	b.n	8005ad6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2201      	movs	r2, #1
 80058da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2b14      	cmp	r3, #20
 80058e2:	f200 80f0 	bhi.w	8005ac6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80058e6:	a201      	add	r2, pc, #4	; (adr r2, 80058ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80058e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ec:	08005941 	.word	0x08005941
 80058f0:	08005ac7 	.word	0x08005ac7
 80058f4:	08005ac7 	.word	0x08005ac7
 80058f8:	08005ac7 	.word	0x08005ac7
 80058fc:	08005981 	.word	0x08005981
 8005900:	08005ac7 	.word	0x08005ac7
 8005904:	08005ac7 	.word	0x08005ac7
 8005908:	08005ac7 	.word	0x08005ac7
 800590c:	080059c3 	.word	0x080059c3
 8005910:	08005ac7 	.word	0x08005ac7
 8005914:	08005ac7 	.word	0x08005ac7
 8005918:	08005ac7 	.word	0x08005ac7
 800591c:	08005a03 	.word	0x08005a03
 8005920:	08005ac7 	.word	0x08005ac7
 8005924:	08005ac7 	.word	0x08005ac7
 8005928:	08005ac7 	.word	0x08005ac7
 800592c:	08005a45 	.word	0x08005a45
 8005930:	08005ac7 	.word	0x08005ac7
 8005934:	08005ac7 	.word	0x08005ac7
 8005938:	08005ac7 	.word	0x08005ac7
 800593c:	08005a85 	.word	0x08005a85
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68b9      	ldr	r1, [r7, #8]
 8005946:	4618      	mov	r0, r3
 8005948:	f000 fad8 	bl	8005efc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	699a      	ldr	r2, [r3, #24]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f042 0208 	orr.w	r2, r2, #8
 800595a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	699a      	ldr	r2, [r3, #24]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f022 0204 	bic.w	r2, r2, #4
 800596a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6999      	ldr	r1, [r3, #24]
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	691a      	ldr	r2, [r3, #16]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	430a      	orrs	r2, r1
 800597c:	619a      	str	r2, [r3, #24]
      break;
 800597e:	e0a5      	b.n	8005acc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68b9      	ldr	r1, [r7, #8]
 8005986:	4618      	mov	r0, r3
 8005988:	f000 fb2a 	bl	8005fe0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	699a      	ldr	r2, [r3, #24]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800599a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	699a      	ldr	r2, [r3, #24]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	6999      	ldr	r1, [r3, #24]
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	021a      	lsls	r2, r3, #8
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	430a      	orrs	r2, r1
 80059be:	619a      	str	r2, [r3, #24]
      break;
 80059c0:	e084      	b.n	8005acc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68b9      	ldr	r1, [r7, #8]
 80059c8:	4618      	mov	r0, r3
 80059ca:	f000 fb81 	bl	80060d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	69da      	ldr	r2, [r3, #28]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f042 0208 	orr.w	r2, r2, #8
 80059dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	69da      	ldr	r2, [r3, #28]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f022 0204 	bic.w	r2, r2, #4
 80059ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	69d9      	ldr	r1, [r3, #28]
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	691a      	ldr	r2, [r3, #16]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	430a      	orrs	r2, r1
 80059fe:	61da      	str	r2, [r3, #28]
      break;
 8005a00:	e064      	b.n	8005acc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68b9      	ldr	r1, [r7, #8]
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f000 fbd7 	bl	80061bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	69da      	ldr	r2, [r3, #28]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	69da      	ldr	r2, [r3, #28]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	69d9      	ldr	r1, [r3, #28]
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	021a      	lsls	r2, r3, #8
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	61da      	str	r2, [r3, #28]
      break;
 8005a42:	e043      	b.n	8005acc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68b9      	ldr	r1, [r7, #8]
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f000 fc0e 	bl	800626c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f042 0208 	orr.w	r2, r2, #8
 8005a5e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f022 0204 	bic.w	r2, r2, #4
 8005a6e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	691a      	ldr	r2, [r3, #16]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005a82:	e023      	b.n	8005acc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68b9      	ldr	r1, [r7, #8]
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f000 fc40 	bl	8006310 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a9e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	021a      	lsls	r2, r3, #8
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	430a      	orrs	r2, r1
 8005ac2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005ac4:	e002      	b.n	8005acc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	75fb      	strb	r3, [r7, #23]
      break;
 8005aca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3718      	adds	r7, #24
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop

08005ae0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005aea:	2300      	movs	r3, #0
 8005aec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d101      	bne.n	8005afc <HAL_TIM_ConfigClockSource+0x1c>
 8005af8:	2302      	movs	r3, #2
 8005afa:	e0b4      	b.n	8005c66 <HAL_TIM_ConfigClockSource+0x186>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2202      	movs	r2, #2
 8005b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b14:	68ba      	ldr	r2, [r7, #8]
 8005b16:	4b56      	ldr	r3, [pc, #344]	; (8005c70 <HAL_TIM_ConfigClockSource+0x190>)
 8005b18:	4013      	ands	r3, r2
 8005b1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68ba      	ldr	r2, [r7, #8]
 8005b2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b34:	d03e      	beq.n	8005bb4 <HAL_TIM_ConfigClockSource+0xd4>
 8005b36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b3a:	f200 8087 	bhi.w	8005c4c <HAL_TIM_ConfigClockSource+0x16c>
 8005b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b42:	f000 8086 	beq.w	8005c52 <HAL_TIM_ConfigClockSource+0x172>
 8005b46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b4a:	d87f      	bhi.n	8005c4c <HAL_TIM_ConfigClockSource+0x16c>
 8005b4c:	2b70      	cmp	r3, #112	; 0x70
 8005b4e:	d01a      	beq.n	8005b86 <HAL_TIM_ConfigClockSource+0xa6>
 8005b50:	2b70      	cmp	r3, #112	; 0x70
 8005b52:	d87b      	bhi.n	8005c4c <HAL_TIM_ConfigClockSource+0x16c>
 8005b54:	2b60      	cmp	r3, #96	; 0x60
 8005b56:	d050      	beq.n	8005bfa <HAL_TIM_ConfigClockSource+0x11a>
 8005b58:	2b60      	cmp	r3, #96	; 0x60
 8005b5a:	d877      	bhi.n	8005c4c <HAL_TIM_ConfigClockSource+0x16c>
 8005b5c:	2b50      	cmp	r3, #80	; 0x50
 8005b5e:	d03c      	beq.n	8005bda <HAL_TIM_ConfigClockSource+0xfa>
 8005b60:	2b50      	cmp	r3, #80	; 0x50
 8005b62:	d873      	bhi.n	8005c4c <HAL_TIM_ConfigClockSource+0x16c>
 8005b64:	2b40      	cmp	r3, #64	; 0x40
 8005b66:	d058      	beq.n	8005c1a <HAL_TIM_ConfigClockSource+0x13a>
 8005b68:	2b40      	cmp	r3, #64	; 0x40
 8005b6a:	d86f      	bhi.n	8005c4c <HAL_TIM_ConfigClockSource+0x16c>
 8005b6c:	2b30      	cmp	r3, #48	; 0x30
 8005b6e:	d064      	beq.n	8005c3a <HAL_TIM_ConfigClockSource+0x15a>
 8005b70:	2b30      	cmp	r3, #48	; 0x30
 8005b72:	d86b      	bhi.n	8005c4c <HAL_TIM_ConfigClockSource+0x16c>
 8005b74:	2b20      	cmp	r3, #32
 8005b76:	d060      	beq.n	8005c3a <HAL_TIM_ConfigClockSource+0x15a>
 8005b78:	2b20      	cmp	r3, #32
 8005b7a:	d867      	bhi.n	8005c4c <HAL_TIM_ConfigClockSource+0x16c>
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d05c      	beq.n	8005c3a <HAL_TIM_ConfigClockSource+0x15a>
 8005b80:	2b10      	cmp	r3, #16
 8005b82:	d05a      	beq.n	8005c3a <HAL_TIM_ConfigClockSource+0x15a>
 8005b84:	e062      	b.n	8005c4c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6818      	ldr	r0, [r3, #0]
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	6899      	ldr	r1, [r3, #8]
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	685a      	ldr	r2, [r3, #4]
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	f000 fe47 	bl	8006828 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ba8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68ba      	ldr	r2, [r7, #8]
 8005bb0:	609a      	str	r2, [r3, #8]
      break;
 8005bb2:	e04f      	b.n	8005c54 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6818      	ldr	r0, [r3, #0]
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	6899      	ldr	r1, [r3, #8]
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	685a      	ldr	r2, [r3, #4]
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	f000 fe30 	bl	8006828 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	689a      	ldr	r2, [r3, #8]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bd6:	609a      	str	r2, [r3, #8]
      break;
 8005bd8:	e03c      	b.n	8005c54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6818      	ldr	r0, [r3, #0]
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	6859      	ldr	r1, [r3, #4]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	461a      	mov	r2, r3
 8005be8:	f000 fcee 	bl	80065c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2150      	movs	r1, #80	; 0x50
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f000 fdfd 	bl	80067f2 <TIM_ITRx_SetConfig>
      break;
 8005bf8:	e02c      	b.n	8005c54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6818      	ldr	r0, [r3, #0]
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	6859      	ldr	r1, [r3, #4]
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	461a      	mov	r2, r3
 8005c08:	f000 fd4a 	bl	80066a0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2160      	movs	r1, #96	; 0x60
 8005c12:	4618      	mov	r0, r3
 8005c14:	f000 fded 	bl	80067f2 <TIM_ITRx_SetConfig>
      break;
 8005c18:	e01c      	b.n	8005c54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6818      	ldr	r0, [r3, #0]
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	6859      	ldr	r1, [r3, #4]
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	461a      	mov	r2, r3
 8005c28:	f000 fcce 	bl	80065c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2140      	movs	r1, #64	; 0x40
 8005c32:	4618      	mov	r0, r3
 8005c34:	f000 fddd 	bl	80067f2 <TIM_ITRx_SetConfig>
      break;
 8005c38:	e00c      	b.n	8005c54 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4619      	mov	r1, r3
 8005c44:	4610      	mov	r0, r2
 8005c46:	f000 fdd4 	bl	80067f2 <TIM_ITRx_SetConfig>
      break;
 8005c4a:	e003      	b.n	8005c54 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c50:	e000      	b.n	8005c54 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	fffeff88 	.word	0xfffeff88

08005c74 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d101      	bne.n	8005c8c <HAL_TIM_SlaveConfigSynchro+0x18>
 8005c88:	2302      	movs	r3, #2
 8005c8a:	e031      	b.n	8005cf0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2202      	movs	r2, #2
 8005c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005c9c:	6839      	ldr	r1, [r7, #0]
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 fb8a 	bl	80063b8 <TIM_SlaveTimer_SetConfig>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d009      	beq.n	8005cbe <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2201      	movs	r2, #1
 8005cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e018      	b.n	8005cf0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68da      	ldr	r2, [r3, #12]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ccc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68da      	ldr	r2, [r3, #12]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005cdc:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3708      	adds	r7, #8
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005d02:	2300      	movs	r3, #0
 8005d04:	60fb      	str	r3, [r7, #12]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	2b0c      	cmp	r3, #12
 8005d0a:	d831      	bhi.n	8005d70 <HAL_TIM_ReadCapturedValue+0x78>
 8005d0c:	a201      	add	r2, pc, #4	; (adr r2, 8005d14 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d12:	bf00      	nop
 8005d14:	08005d49 	.word	0x08005d49
 8005d18:	08005d71 	.word	0x08005d71
 8005d1c:	08005d71 	.word	0x08005d71
 8005d20:	08005d71 	.word	0x08005d71
 8005d24:	08005d53 	.word	0x08005d53
 8005d28:	08005d71 	.word	0x08005d71
 8005d2c:	08005d71 	.word	0x08005d71
 8005d30:	08005d71 	.word	0x08005d71
 8005d34:	08005d5d 	.word	0x08005d5d
 8005d38:	08005d71 	.word	0x08005d71
 8005d3c:	08005d71 	.word	0x08005d71
 8005d40:	08005d71 	.word	0x08005d71
 8005d44:	08005d67 	.word	0x08005d67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d4e:	60fb      	str	r3, [r7, #12]

      break;
 8005d50:	e00f      	b.n	8005d72 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d58:	60fb      	str	r3, [r7, #12]

      break;
 8005d5a:	e00a      	b.n	8005d72 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d62:	60fb      	str	r3, [r7, #12]

      break;
 8005d64:	e005      	b.n	8005d72 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6c:	60fb      	str	r3, [r7, #12]

      break;
 8005d6e:	e000      	b.n	8005d72 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005d70:	bf00      	nop
  }

  return tmpreg;
 8005d72:	68fb      	ldr	r3, [r7, #12]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3714      	adds	r7, #20
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d88:	bf00      	nop
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d9c:	bf00      	nop
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a40      	ldr	r2, [pc, #256]	; (8005ed0 <TIM_Base_SetConfig+0x114>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d013      	beq.n	8005dfc <TIM_Base_SetConfig+0x40>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dda:	d00f      	beq.n	8005dfc <TIM_Base_SetConfig+0x40>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a3d      	ldr	r2, [pc, #244]	; (8005ed4 <TIM_Base_SetConfig+0x118>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d00b      	beq.n	8005dfc <TIM_Base_SetConfig+0x40>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a3c      	ldr	r2, [pc, #240]	; (8005ed8 <TIM_Base_SetConfig+0x11c>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d007      	beq.n	8005dfc <TIM_Base_SetConfig+0x40>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a3b      	ldr	r2, [pc, #236]	; (8005edc <TIM_Base_SetConfig+0x120>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d003      	beq.n	8005dfc <TIM_Base_SetConfig+0x40>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a3a      	ldr	r2, [pc, #232]	; (8005ee0 <TIM_Base_SetConfig+0x124>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d108      	bne.n	8005e0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a2f      	ldr	r2, [pc, #188]	; (8005ed0 <TIM_Base_SetConfig+0x114>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d02b      	beq.n	8005e6e <TIM_Base_SetConfig+0xb2>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e1c:	d027      	beq.n	8005e6e <TIM_Base_SetConfig+0xb2>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a2c      	ldr	r2, [pc, #176]	; (8005ed4 <TIM_Base_SetConfig+0x118>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d023      	beq.n	8005e6e <TIM_Base_SetConfig+0xb2>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a2b      	ldr	r2, [pc, #172]	; (8005ed8 <TIM_Base_SetConfig+0x11c>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d01f      	beq.n	8005e6e <TIM_Base_SetConfig+0xb2>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a2a      	ldr	r2, [pc, #168]	; (8005edc <TIM_Base_SetConfig+0x120>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d01b      	beq.n	8005e6e <TIM_Base_SetConfig+0xb2>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a29      	ldr	r2, [pc, #164]	; (8005ee0 <TIM_Base_SetConfig+0x124>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d017      	beq.n	8005e6e <TIM_Base_SetConfig+0xb2>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a28      	ldr	r2, [pc, #160]	; (8005ee4 <TIM_Base_SetConfig+0x128>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d013      	beq.n	8005e6e <TIM_Base_SetConfig+0xb2>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a27      	ldr	r2, [pc, #156]	; (8005ee8 <TIM_Base_SetConfig+0x12c>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d00f      	beq.n	8005e6e <TIM_Base_SetConfig+0xb2>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a26      	ldr	r2, [pc, #152]	; (8005eec <TIM_Base_SetConfig+0x130>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d00b      	beq.n	8005e6e <TIM_Base_SetConfig+0xb2>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a25      	ldr	r2, [pc, #148]	; (8005ef0 <TIM_Base_SetConfig+0x134>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d007      	beq.n	8005e6e <TIM_Base_SetConfig+0xb2>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a24      	ldr	r2, [pc, #144]	; (8005ef4 <TIM_Base_SetConfig+0x138>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d003      	beq.n	8005e6e <TIM_Base_SetConfig+0xb2>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a23      	ldr	r2, [pc, #140]	; (8005ef8 <TIM_Base_SetConfig+0x13c>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d108      	bne.n	8005e80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	695b      	ldr	r3, [r3, #20]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	689a      	ldr	r2, [r3, #8]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a0a      	ldr	r2, [pc, #40]	; (8005ed0 <TIM_Base_SetConfig+0x114>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d003      	beq.n	8005eb4 <TIM_Base_SetConfig+0xf8>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a0c      	ldr	r2, [pc, #48]	; (8005ee0 <TIM_Base_SetConfig+0x124>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d103      	bne.n	8005ebc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	691a      	ldr	r2, [r3, #16]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	615a      	str	r2, [r3, #20]
}
 8005ec2:	bf00      	nop
 8005ec4:	3714      	adds	r7, #20
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop
 8005ed0:	40010000 	.word	0x40010000
 8005ed4:	40000400 	.word	0x40000400
 8005ed8:	40000800 	.word	0x40000800
 8005edc:	40000c00 	.word	0x40000c00
 8005ee0:	40010400 	.word	0x40010400
 8005ee4:	40014000 	.word	0x40014000
 8005ee8:	40014400 	.word	0x40014400
 8005eec:	40014800 	.word	0x40014800
 8005ef0:	40001800 	.word	0x40001800
 8005ef4:	40001c00 	.word	0x40001c00
 8005ef8:	40002000 	.word	0x40002000

08005efc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b087      	sub	sp, #28
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a1b      	ldr	r3, [r3, #32]
 8005f0a:	f023 0201 	bic.w	r2, r3, #1
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	4b2b      	ldr	r3, [pc, #172]	; (8005fd4 <TIM_OC1_SetConfig+0xd8>)
 8005f28:	4013      	ands	r3, r2
 8005f2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f023 0303 	bic.w	r3, r3, #3
 8005f32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	f023 0302 	bic.w	r3, r3, #2
 8005f44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a21      	ldr	r2, [pc, #132]	; (8005fd8 <TIM_OC1_SetConfig+0xdc>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d003      	beq.n	8005f60 <TIM_OC1_SetConfig+0x64>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a20      	ldr	r2, [pc, #128]	; (8005fdc <TIM_OC1_SetConfig+0xe0>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d10c      	bne.n	8005f7a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	f023 0308 	bic.w	r3, r3, #8
 8005f66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	f023 0304 	bic.w	r3, r3, #4
 8005f78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a16      	ldr	r2, [pc, #88]	; (8005fd8 <TIM_OC1_SetConfig+0xdc>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d003      	beq.n	8005f8a <TIM_OC1_SetConfig+0x8e>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a15      	ldr	r2, [pc, #84]	; (8005fdc <TIM_OC1_SetConfig+0xe0>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d111      	bne.n	8005fae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	695b      	ldr	r3, [r3, #20]
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	699b      	ldr	r3, [r3, #24]
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	621a      	str	r2, [r3, #32]
}
 8005fc8:	bf00      	nop
 8005fca:	371c      	adds	r7, #28
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr
 8005fd4:	fffeff8f 	.word	0xfffeff8f
 8005fd8:	40010000 	.word	0x40010000
 8005fdc:	40010400 	.word	0x40010400

08005fe0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b087      	sub	sp, #28
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a1b      	ldr	r3, [r3, #32]
 8005fee:	f023 0210 	bic.w	r2, r3, #16
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a1b      	ldr	r3, [r3, #32]
 8005ffa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	4b2e      	ldr	r3, [pc, #184]	; (80060c4 <TIM_OC2_SetConfig+0xe4>)
 800600c:	4013      	ands	r3, r2
 800600e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006016:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	021b      	lsls	r3, r3, #8
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	4313      	orrs	r3, r2
 8006022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	f023 0320 	bic.w	r3, r3, #32
 800602a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	011b      	lsls	r3, r3, #4
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	4313      	orrs	r3, r2
 8006036:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a23      	ldr	r2, [pc, #140]	; (80060c8 <TIM_OC2_SetConfig+0xe8>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d003      	beq.n	8006048 <TIM_OC2_SetConfig+0x68>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a22      	ldr	r2, [pc, #136]	; (80060cc <TIM_OC2_SetConfig+0xec>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d10d      	bne.n	8006064 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800604e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	011b      	lsls	r3, r3, #4
 8006056:	697a      	ldr	r2, [r7, #20]
 8006058:	4313      	orrs	r3, r2
 800605a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006062:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a18      	ldr	r2, [pc, #96]	; (80060c8 <TIM_OC2_SetConfig+0xe8>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d003      	beq.n	8006074 <TIM_OC2_SetConfig+0x94>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a17      	ldr	r2, [pc, #92]	; (80060cc <TIM_OC2_SetConfig+0xec>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d113      	bne.n	800609c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800607a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006082:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	695b      	ldr	r3, [r3, #20]
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	693a      	ldr	r2, [r7, #16]
 800608c:	4313      	orrs	r3, r2
 800608e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	4313      	orrs	r3, r2
 800609a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	685a      	ldr	r2, [r3, #4]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	621a      	str	r2, [r3, #32]
}
 80060b6:	bf00      	nop
 80060b8:	371c      	adds	r7, #28
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	feff8fff 	.word	0xfeff8fff
 80060c8:	40010000 	.word	0x40010000
 80060cc:	40010400 	.word	0x40010400

080060d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b087      	sub	sp, #28
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a1b      	ldr	r3, [r3, #32]
 80060de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	69db      	ldr	r3, [r3, #28]
 80060f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	4b2d      	ldr	r3, [pc, #180]	; (80061b0 <TIM_OC3_SetConfig+0xe0>)
 80060fc:	4013      	ands	r3, r2
 80060fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f023 0303 	bic.w	r3, r3, #3
 8006106:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	4313      	orrs	r3, r2
 8006110:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006118:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	021b      	lsls	r3, r3, #8
 8006120:	697a      	ldr	r2, [r7, #20]
 8006122:	4313      	orrs	r3, r2
 8006124:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a22      	ldr	r2, [pc, #136]	; (80061b4 <TIM_OC3_SetConfig+0xe4>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d003      	beq.n	8006136 <TIM_OC3_SetConfig+0x66>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a21      	ldr	r2, [pc, #132]	; (80061b8 <TIM_OC3_SetConfig+0xe8>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d10d      	bne.n	8006152 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800613c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	021b      	lsls	r3, r3, #8
 8006144:	697a      	ldr	r2, [r7, #20]
 8006146:	4313      	orrs	r3, r2
 8006148:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006150:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a17      	ldr	r2, [pc, #92]	; (80061b4 <TIM_OC3_SetConfig+0xe4>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d003      	beq.n	8006162 <TIM_OC3_SetConfig+0x92>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a16      	ldr	r2, [pc, #88]	; (80061b8 <TIM_OC3_SetConfig+0xe8>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d113      	bne.n	800618a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006168:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006170:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	011b      	lsls	r3, r3, #4
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	4313      	orrs	r3, r2
 800617c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	011b      	lsls	r3, r3, #4
 8006184:	693a      	ldr	r2, [r7, #16]
 8006186:	4313      	orrs	r3, r2
 8006188:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	685a      	ldr	r2, [r3, #4]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	697a      	ldr	r2, [r7, #20]
 80061a2:	621a      	str	r2, [r3, #32]
}
 80061a4:	bf00      	nop
 80061a6:	371c      	adds	r7, #28
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr
 80061b0:	fffeff8f 	.word	0xfffeff8f
 80061b4:	40010000 	.word	0x40010000
 80061b8:	40010400 	.word	0x40010400

080061bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061bc:	b480      	push	{r7}
 80061be:	b087      	sub	sp, #28
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a1b      	ldr	r3, [r3, #32]
 80061ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a1b      	ldr	r3, [r3, #32]
 80061d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	69db      	ldr	r3, [r3, #28]
 80061e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	4b1e      	ldr	r3, [pc, #120]	; (8006260 <TIM_OC4_SetConfig+0xa4>)
 80061e8:	4013      	ands	r3, r2
 80061ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	021b      	lsls	r3, r3, #8
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006206:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	031b      	lsls	r3, r3, #12
 800620e:	693a      	ldr	r2, [r7, #16]
 8006210:	4313      	orrs	r3, r2
 8006212:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a13      	ldr	r2, [pc, #76]	; (8006264 <TIM_OC4_SetConfig+0xa8>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d003      	beq.n	8006224 <TIM_OC4_SetConfig+0x68>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a12      	ldr	r2, [pc, #72]	; (8006268 <TIM_OC4_SetConfig+0xac>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d109      	bne.n	8006238 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800622a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	695b      	ldr	r3, [r3, #20]
 8006230:	019b      	lsls	r3, r3, #6
 8006232:	697a      	ldr	r2, [r7, #20]
 8006234:	4313      	orrs	r3, r2
 8006236:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	697a      	ldr	r2, [r7, #20]
 800623c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	685a      	ldr	r2, [r3, #4]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	693a      	ldr	r2, [r7, #16]
 8006250:	621a      	str	r2, [r3, #32]
}
 8006252:	bf00      	nop
 8006254:	371c      	adds	r7, #28
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	feff8fff 	.word	0xfeff8fff
 8006264:	40010000 	.word	0x40010000
 8006268:	40010400 	.word	0x40010400

0800626c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800626c:	b480      	push	{r7}
 800626e:	b087      	sub	sp, #28
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a1b      	ldr	r3, [r3, #32]
 8006286:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	4b1b      	ldr	r3, [pc, #108]	; (8006304 <TIM_OC5_SetConfig+0x98>)
 8006298:	4013      	ands	r3, r2
 800629a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80062ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	041b      	lsls	r3, r3, #16
 80062b4:	693a      	ldr	r2, [r7, #16]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a12      	ldr	r2, [pc, #72]	; (8006308 <TIM_OC5_SetConfig+0x9c>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d003      	beq.n	80062ca <TIM_OC5_SetConfig+0x5e>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a11      	ldr	r2, [pc, #68]	; (800630c <TIM_OC5_SetConfig+0xa0>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d109      	bne.n	80062de <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	021b      	lsls	r3, r3, #8
 80062d8:	697a      	ldr	r2, [r7, #20]
 80062da:	4313      	orrs	r3, r2
 80062dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	697a      	ldr	r2, [r7, #20]
 80062e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	685a      	ldr	r2, [r3, #4]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	693a      	ldr	r2, [r7, #16]
 80062f6:	621a      	str	r2, [r3, #32]
}
 80062f8:	bf00      	nop
 80062fa:	371c      	adds	r7, #28
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr
 8006304:	fffeff8f 	.word	0xfffeff8f
 8006308:	40010000 	.word	0x40010000
 800630c:	40010400 	.word	0x40010400

08006310 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006310:	b480      	push	{r7}
 8006312:	b087      	sub	sp, #28
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a1b      	ldr	r3, [r3, #32]
 800632a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	4b1c      	ldr	r3, [pc, #112]	; (80063ac <TIM_OC6_SetConfig+0x9c>)
 800633c:	4013      	ands	r3, r2
 800633e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	021b      	lsls	r3, r3, #8
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	4313      	orrs	r3, r2
 800634a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006352:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	051b      	lsls	r3, r3, #20
 800635a:	693a      	ldr	r2, [r7, #16]
 800635c:	4313      	orrs	r3, r2
 800635e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a13      	ldr	r2, [pc, #76]	; (80063b0 <TIM_OC6_SetConfig+0xa0>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d003      	beq.n	8006370 <TIM_OC6_SetConfig+0x60>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a12      	ldr	r2, [pc, #72]	; (80063b4 <TIM_OC6_SetConfig+0xa4>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d109      	bne.n	8006384 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006376:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	695b      	ldr	r3, [r3, #20]
 800637c:	029b      	lsls	r3, r3, #10
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	4313      	orrs	r3, r2
 8006382:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	697a      	ldr	r2, [r7, #20]
 8006388:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	685a      	ldr	r2, [r3, #4]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	693a      	ldr	r2, [r7, #16]
 800639c:	621a      	str	r2, [r3, #32]
}
 800639e:	bf00      	nop
 80063a0:	371c      	adds	r7, #28
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	feff8fff 	.word	0xfeff8fff
 80063b0:	40010000 	.word	0x40010000
 80063b4:	40010400 	.word	0x40010400

080063b8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b086      	sub	sp, #24
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063c2:	2300      	movs	r3, #0
 80063c4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063d4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	693a      	ldr	r2, [r7, #16]
 80063dc:	4313      	orrs	r3, r2
 80063de:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	4b3e      	ldr	r3, [pc, #248]	; (80064dc <TIM_SlaveTimer_SetConfig+0x124>)
 80063e4:	4013      	ands	r3, r2
 80063e6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	693a      	ldr	r2, [r7, #16]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	693a      	ldr	r2, [r7, #16]
 80063f8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	2b70      	cmp	r3, #112	; 0x70
 8006400:	d01a      	beq.n	8006438 <TIM_SlaveTimer_SetConfig+0x80>
 8006402:	2b70      	cmp	r3, #112	; 0x70
 8006404:	d860      	bhi.n	80064c8 <TIM_SlaveTimer_SetConfig+0x110>
 8006406:	2b60      	cmp	r3, #96	; 0x60
 8006408:	d054      	beq.n	80064b4 <TIM_SlaveTimer_SetConfig+0xfc>
 800640a:	2b60      	cmp	r3, #96	; 0x60
 800640c:	d85c      	bhi.n	80064c8 <TIM_SlaveTimer_SetConfig+0x110>
 800640e:	2b50      	cmp	r3, #80	; 0x50
 8006410:	d046      	beq.n	80064a0 <TIM_SlaveTimer_SetConfig+0xe8>
 8006412:	2b50      	cmp	r3, #80	; 0x50
 8006414:	d858      	bhi.n	80064c8 <TIM_SlaveTimer_SetConfig+0x110>
 8006416:	2b40      	cmp	r3, #64	; 0x40
 8006418:	d019      	beq.n	800644e <TIM_SlaveTimer_SetConfig+0x96>
 800641a:	2b40      	cmp	r3, #64	; 0x40
 800641c:	d854      	bhi.n	80064c8 <TIM_SlaveTimer_SetConfig+0x110>
 800641e:	2b30      	cmp	r3, #48	; 0x30
 8006420:	d055      	beq.n	80064ce <TIM_SlaveTimer_SetConfig+0x116>
 8006422:	2b30      	cmp	r3, #48	; 0x30
 8006424:	d850      	bhi.n	80064c8 <TIM_SlaveTimer_SetConfig+0x110>
 8006426:	2b20      	cmp	r3, #32
 8006428:	d051      	beq.n	80064ce <TIM_SlaveTimer_SetConfig+0x116>
 800642a:	2b20      	cmp	r3, #32
 800642c:	d84c      	bhi.n	80064c8 <TIM_SlaveTimer_SetConfig+0x110>
 800642e:	2b00      	cmp	r3, #0
 8006430:	d04d      	beq.n	80064ce <TIM_SlaveTimer_SetConfig+0x116>
 8006432:	2b10      	cmp	r3, #16
 8006434:	d04b      	beq.n	80064ce <TIM_SlaveTimer_SetConfig+0x116>
 8006436:	e047      	b.n	80064c8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6818      	ldr	r0, [r3, #0]
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	68d9      	ldr	r1, [r3, #12]
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	689a      	ldr	r2, [r3, #8]
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	f000 f9ee 	bl	8006828 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800644c:	e040      	b.n	80064d0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2b05      	cmp	r3, #5
 8006454:	d101      	bne.n	800645a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e03b      	b.n	80064d2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	6a1b      	ldr	r3, [r3, #32]
 8006460:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	6a1a      	ldr	r2, [r3, #32]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f022 0201 	bic.w	r2, r2, #1
 8006470:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	699b      	ldr	r3, [r3, #24]
 8006478:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006480:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	011b      	lsls	r3, r3, #4
 8006488:	68ba      	ldr	r2, [r7, #8]
 800648a:	4313      	orrs	r3, r2
 800648c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68ba      	ldr	r2, [r7, #8]
 8006494:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	621a      	str	r2, [r3, #32]
      break;
 800649e:	e017      	b.n	80064d0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6818      	ldr	r0, [r3, #0]
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	6899      	ldr	r1, [r3, #8]
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	461a      	mov	r2, r3
 80064ae:	f000 f88b 	bl	80065c8 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80064b2:	e00d      	b.n	80064d0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6818      	ldr	r0, [r3, #0]
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	6899      	ldr	r1, [r3, #8]
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	461a      	mov	r2, r3
 80064c2:	f000 f8ed 	bl	80066a0 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80064c6:	e003      	b.n	80064d0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	75fb      	strb	r3, [r7, #23]
      break;
 80064cc:	e000      	b.n	80064d0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80064ce:	bf00      	nop
  }

  return status;
 80064d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3718      	adds	r7, #24
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	fffefff8 	.word	0xfffefff8

080064e0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b087      	sub	sp, #28
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	607a      	str	r2, [r7, #4]
 80064ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	f023 0201 	bic.w	r2, r3, #1
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6a1b      	ldr	r3, [r3, #32]
 8006504:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	4a28      	ldr	r2, [pc, #160]	; (80065ac <TIM_TI1_SetConfig+0xcc>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d01b      	beq.n	8006546 <TIM_TI1_SetConfig+0x66>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006514:	d017      	beq.n	8006546 <TIM_TI1_SetConfig+0x66>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	4a25      	ldr	r2, [pc, #148]	; (80065b0 <TIM_TI1_SetConfig+0xd0>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d013      	beq.n	8006546 <TIM_TI1_SetConfig+0x66>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	4a24      	ldr	r2, [pc, #144]	; (80065b4 <TIM_TI1_SetConfig+0xd4>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d00f      	beq.n	8006546 <TIM_TI1_SetConfig+0x66>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	4a23      	ldr	r2, [pc, #140]	; (80065b8 <TIM_TI1_SetConfig+0xd8>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d00b      	beq.n	8006546 <TIM_TI1_SetConfig+0x66>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	4a22      	ldr	r2, [pc, #136]	; (80065bc <TIM_TI1_SetConfig+0xdc>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d007      	beq.n	8006546 <TIM_TI1_SetConfig+0x66>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	4a21      	ldr	r2, [pc, #132]	; (80065c0 <TIM_TI1_SetConfig+0xe0>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d003      	beq.n	8006546 <TIM_TI1_SetConfig+0x66>
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	4a20      	ldr	r2, [pc, #128]	; (80065c4 <TIM_TI1_SetConfig+0xe4>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d101      	bne.n	800654a <TIM_TI1_SetConfig+0x6a>
 8006546:	2301      	movs	r3, #1
 8006548:	e000      	b.n	800654c <TIM_TI1_SetConfig+0x6c>
 800654a:	2300      	movs	r3, #0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d008      	beq.n	8006562 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	f023 0303 	bic.w	r3, r3, #3
 8006556:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006558:	697a      	ldr	r2, [r7, #20]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4313      	orrs	r3, r2
 800655e:	617b      	str	r3, [r7, #20]
 8006560:	e003      	b.n	800656a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	f043 0301 	orr.w	r3, r3, #1
 8006568:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006570:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	011b      	lsls	r3, r3, #4
 8006576:	b2db      	uxtb	r3, r3
 8006578:	697a      	ldr	r2, [r7, #20]
 800657a:	4313      	orrs	r3, r2
 800657c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	f023 030a 	bic.w	r3, r3, #10
 8006584:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	f003 030a 	and.w	r3, r3, #10
 800658c:	693a      	ldr	r2, [r7, #16]
 800658e:	4313      	orrs	r3, r2
 8006590:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	697a      	ldr	r2, [r7, #20]
 8006596:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	693a      	ldr	r2, [r7, #16]
 800659c:	621a      	str	r2, [r3, #32]
}
 800659e:	bf00      	nop
 80065a0:	371c      	adds	r7, #28
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	40010000 	.word	0x40010000
 80065b0:	40000400 	.word	0x40000400
 80065b4:	40000800 	.word	0x40000800
 80065b8:	40000c00 	.word	0x40000c00
 80065bc:	40010400 	.word	0x40010400
 80065c0:	40014000 	.word	0x40014000
 80065c4:	40001800 	.word	0x40001800

080065c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b087      	sub	sp, #28
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6a1b      	ldr	r3, [r3, #32]
 80065d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	f023 0201 	bic.w	r2, r3, #1
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	011b      	lsls	r3, r3, #4
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	f023 030a 	bic.w	r3, r3, #10
 8006604:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006606:	697a      	ldr	r2, [r7, #20]
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	4313      	orrs	r3, r2
 800660c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	621a      	str	r2, [r3, #32]
}
 800661a:	bf00      	nop
 800661c:	371c      	adds	r7, #28
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr

08006626 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006626:	b480      	push	{r7}
 8006628:	b087      	sub	sp, #28
 800662a:	af00      	add	r7, sp, #0
 800662c:	60f8      	str	r0, [r7, #12]
 800662e:	60b9      	str	r1, [r7, #8]
 8006630:	607a      	str	r2, [r7, #4]
 8006632:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6a1b      	ldr	r3, [r3, #32]
 8006638:	f023 0210 	bic.w	r2, r3, #16
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006652:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	021b      	lsls	r3, r3, #8
 8006658:	697a      	ldr	r2, [r7, #20]
 800665a:	4313      	orrs	r3, r2
 800665c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006664:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	031b      	lsls	r3, r3, #12
 800666a:	b29b      	uxth	r3, r3
 800666c:	697a      	ldr	r2, [r7, #20]
 800666e:	4313      	orrs	r3, r2
 8006670:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006678:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	011b      	lsls	r3, r3, #4
 800667e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	4313      	orrs	r3, r2
 8006686:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	697a      	ldr	r2, [r7, #20]
 800668c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	693a      	ldr	r2, [r7, #16]
 8006692:	621a      	str	r2, [r3, #32]
}
 8006694:	bf00      	nop
 8006696:	371c      	adds	r7, #28
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b087      	sub	sp, #28
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6a1b      	ldr	r3, [r3, #32]
 80066b0:	f023 0210 	bic.w	r2, r3, #16
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	699b      	ldr	r3, [r3, #24]
 80066bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6a1b      	ldr	r3, [r3, #32]
 80066c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	031b      	lsls	r3, r3, #12
 80066d0:	697a      	ldr	r2, [r7, #20]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	011b      	lsls	r3, r3, #4
 80066e2:	693a      	ldr	r2, [r7, #16]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	693a      	ldr	r2, [r7, #16]
 80066f2:	621a      	str	r2, [r3, #32]
}
 80066f4:	bf00      	nop
 80066f6:	371c      	adds	r7, #28
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006700:	b480      	push	{r7}
 8006702:	b087      	sub	sp, #28
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
 800670c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	69db      	ldr	r3, [r3, #28]
 800671e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6a1b      	ldr	r3, [r3, #32]
 8006724:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	f023 0303 	bic.w	r3, r3, #3
 800672c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800672e:	697a      	ldr	r2, [r7, #20]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4313      	orrs	r3, r2
 8006734:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800673c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	011b      	lsls	r3, r3, #4
 8006742:	b2db      	uxtb	r3, r3
 8006744:	697a      	ldr	r2, [r7, #20]
 8006746:	4313      	orrs	r3, r2
 8006748:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006750:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	021b      	lsls	r3, r3, #8
 8006756:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	4313      	orrs	r3, r2
 800675e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	697a      	ldr	r2, [r7, #20]
 8006764:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	693a      	ldr	r2, [r7, #16]
 800676a:	621a      	str	r2, [r3, #32]
}
 800676c:	bf00      	nop
 800676e:	371c      	adds	r7, #28
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006778:	b480      	push	{r7}
 800677a:	b087      	sub	sp, #28
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	607a      	str	r2, [r7, #4]
 8006784:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6a1b      	ldr	r3, [r3, #32]
 800678a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	69db      	ldr	r3, [r3, #28]
 8006796:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6a1b      	ldr	r3, [r3, #32]
 800679c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067a4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	021b      	lsls	r3, r3, #8
 80067aa:	697a      	ldr	r2, [r7, #20]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067b6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	031b      	lsls	r3, r3, #12
 80067bc:	b29b      	uxth	r3, r3
 80067be:	697a      	ldr	r2, [r7, #20]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80067ca:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	031b      	lsls	r3, r3, #12
 80067d0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	697a      	ldr	r2, [r7, #20]
 80067de:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	693a      	ldr	r2, [r7, #16]
 80067e4:	621a      	str	r2, [r3, #32]
}
 80067e6:	bf00      	nop
 80067e8:	371c      	adds	r7, #28
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr

080067f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067f2:	b480      	push	{r7}
 80067f4:	b085      	sub	sp, #20
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
 80067fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006808:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800680a:	683a      	ldr	r2, [r7, #0]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	4313      	orrs	r3, r2
 8006810:	f043 0307 	orr.w	r3, r3, #7
 8006814:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	609a      	str	r2, [r3, #8]
}
 800681c:	bf00      	nop
 800681e:	3714      	adds	r7, #20
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006828:	b480      	push	{r7}
 800682a:	b087      	sub	sp, #28
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	607a      	str	r2, [r7, #4]
 8006834:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006842:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	021a      	lsls	r2, r3, #8
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	431a      	orrs	r2, r3
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	4313      	orrs	r3, r2
 8006850:	697a      	ldr	r2, [r7, #20]
 8006852:	4313      	orrs	r3, r2
 8006854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	697a      	ldr	r2, [r7, #20]
 800685a:	609a      	str	r2, [r3, #8]
}
 800685c:	bf00      	nop
 800685e:	371c      	adds	r7, #28
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006868:	b480      	push	{r7}
 800686a:	b087      	sub	sp, #28
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	f003 031f 	and.w	r3, r3, #31
 800687a:	2201      	movs	r2, #1
 800687c:	fa02 f303 	lsl.w	r3, r2, r3
 8006880:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6a1a      	ldr	r2, [r3, #32]
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	43db      	mvns	r3, r3
 800688a:	401a      	ands	r2, r3
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6a1a      	ldr	r2, [r3, #32]
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	f003 031f 	and.w	r3, r3, #31
 800689a:	6879      	ldr	r1, [r7, #4]
 800689c:	fa01 f303 	lsl.w	r3, r1, r3
 80068a0:	431a      	orrs	r2, r3
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	621a      	str	r2, [r3, #32]
}
 80068a6:	bf00      	nop
 80068a8:	371c      	adds	r7, #28
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
	...

080068b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d101      	bne.n	80068cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068c8:	2302      	movs	r3, #2
 80068ca:	e06d      	b.n	80069a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2202      	movs	r2, #2
 80068d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a30      	ldr	r2, [pc, #192]	; (80069b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d004      	beq.n	8006900 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a2f      	ldr	r2, [pc, #188]	; (80069b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d108      	bne.n	8006912 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006906:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	4313      	orrs	r3, r2
 8006910:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006918:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68fa      	ldr	r2, [r7, #12]
 8006920:	4313      	orrs	r3, r2
 8006922:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a20      	ldr	r2, [pc, #128]	; (80069b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d022      	beq.n	800697c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800693e:	d01d      	beq.n	800697c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a1d      	ldr	r2, [pc, #116]	; (80069bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d018      	beq.n	800697c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a1c      	ldr	r2, [pc, #112]	; (80069c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d013      	beq.n	800697c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a1a      	ldr	r2, [pc, #104]	; (80069c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d00e      	beq.n	800697c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a15      	ldr	r2, [pc, #84]	; (80069b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d009      	beq.n	800697c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a16      	ldr	r2, [pc, #88]	; (80069c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d004      	beq.n	800697c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a15      	ldr	r2, [pc, #84]	; (80069cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d10c      	bne.n	8006996 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006982:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	68ba      	ldr	r2, [r7, #8]
 800698a:	4313      	orrs	r3, r2
 800698c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68ba      	ldr	r2, [r7, #8]
 8006994:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2201      	movs	r2, #1
 800699a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3714      	adds	r7, #20
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr
 80069b4:	40010000 	.word	0x40010000
 80069b8:	40010400 	.word	0x40010400
 80069bc:	40000400 	.word	0x40000400
 80069c0:	40000800 	.word	0x40000800
 80069c4:	40000c00 	.word	0x40000c00
 80069c8:	40014000 	.word	0x40014000
 80069cc:	40001800 	.word	0x40001800

080069d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069d8:	bf00      	nop
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069ec:	bf00      	nop
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a00:	bf00      	nop
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b082      	sub	sp, #8
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d101      	bne.n	8006a1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e040      	b.n	8006aa0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d106      	bne.n	8006a34 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f7fb fe96 	bl	8002760 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2224      	movs	r2, #36	; 0x24
 8006a38:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f022 0201 	bic.w	r2, r2, #1
 8006a48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 f8c0 	bl	8006bd0 <UART_SetConfig>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d101      	bne.n	8006a5a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e022      	b.n	8006aa0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d002      	beq.n	8006a68 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 fb16 	bl	8007094 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	685a      	ldr	r2, [r3, #4]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	689a      	ldr	r2, [r3, #8]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f042 0201 	orr.w	r2, r2, #1
 8006a96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 fb9d 	bl	80071d8 <UART_CheckIdleState>
 8006a9e:	4603      	mov	r3, r0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3708      	adds	r7, #8
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b08a      	sub	sp, #40	; 0x28
 8006aac:	af02      	add	r7, sp, #8
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	603b      	str	r3, [r7, #0]
 8006ab4:	4613      	mov	r3, r2
 8006ab6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006abc:	2b20      	cmp	r3, #32
 8006abe:	f040 8081 	bne.w	8006bc4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d002      	beq.n	8006ace <HAL_UART_Transmit+0x26>
 8006ac8:	88fb      	ldrh	r3, [r7, #6]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d101      	bne.n	8006ad2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e079      	b.n	8006bc6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d101      	bne.n	8006ae0 <HAL_UART_Transmit+0x38>
 8006adc:	2302      	movs	r3, #2
 8006ade:	e072      	b.n	8006bc6 <HAL_UART_Transmit+0x11e>
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2221      	movs	r2, #33	; 0x21
 8006af4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006af6:	f7fb ff0b 	bl	8002910 <HAL_GetTick>
 8006afa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	88fa      	ldrh	r2, [r7, #6]
 8006b00:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	88fa      	ldrh	r2, [r7, #6]
 8006b08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b14:	d108      	bne.n	8006b28 <HAL_UART_Transmit+0x80>
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d104      	bne.n	8006b28 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	61bb      	str	r3, [r7, #24]
 8006b26:	e003      	b.n	8006b30 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006b38:	e02c      	b.n	8006b94 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	9300      	str	r3, [sp, #0]
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	2200      	movs	r2, #0
 8006b42:	2180      	movs	r1, #128	; 0x80
 8006b44:	68f8      	ldr	r0, [r7, #12]
 8006b46:	f000 fb90 	bl	800726a <UART_WaitOnFlagUntilTimeout>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d001      	beq.n	8006b54 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e038      	b.n	8006bc6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d10b      	bne.n	8006b72 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	881b      	ldrh	r3, [r3, #0]
 8006b5e:	461a      	mov	r2, r3
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b68:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	3302      	adds	r3, #2
 8006b6e:	61bb      	str	r3, [r7, #24]
 8006b70:	e007      	b.n	8006b82 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	781a      	ldrb	r2, [r3, #0]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	3301      	adds	r3, #1
 8006b80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	3b01      	subs	r3, #1
 8006b8c:	b29a      	uxth	r2, r3
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1cc      	bne.n	8006b3a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	9300      	str	r3, [sp, #0]
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	2140      	movs	r1, #64	; 0x40
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	f000 fb5d 	bl	800726a <UART_WaitOnFlagUntilTimeout>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d001      	beq.n	8006bba <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	e005      	b.n	8006bc6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2220      	movs	r2, #32
 8006bbe:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	e000      	b.n	8006bc6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006bc4:	2302      	movs	r3, #2
  }
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3720      	adds	r7, #32
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
	...

08006bd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b088      	sub	sp, #32
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	689a      	ldr	r2, [r3, #8]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	691b      	ldr	r3, [r3, #16]
 8006be4:	431a      	orrs	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	695b      	ldr	r3, [r3, #20]
 8006bea:	431a      	orrs	r2, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	69db      	ldr	r3, [r3, #28]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	4ba7      	ldr	r3, [pc, #668]	; (8006e98 <UART_SetConfig+0x2c8>)
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	6812      	ldr	r2, [r2, #0]
 8006c02:	6979      	ldr	r1, [r7, #20]
 8006c04:	430b      	orrs	r3, r1
 8006c06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	68da      	ldr	r2, [r3, #12]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	430a      	orrs	r2, r1
 8006c1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	699b      	ldr	r3, [r3, #24]
 8006c22:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6a1b      	ldr	r3, [r3, #32]
 8006c28:	697a      	ldr	r2, [r7, #20]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	697a      	ldr	r2, [r7, #20]
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a95      	ldr	r2, [pc, #596]	; (8006e9c <UART_SetConfig+0x2cc>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d120      	bne.n	8006c8e <UART_SetConfig+0xbe>
 8006c4c:	4b94      	ldr	r3, [pc, #592]	; (8006ea0 <UART_SetConfig+0x2d0>)
 8006c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c52:	f003 0303 	and.w	r3, r3, #3
 8006c56:	2b03      	cmp	r3, #3
 8006c58:	d816      	bhi.n	8006c88 <UART_SetConfig+0xb8>
 8006c5a:	a201      	add	r2, pc, #4	; (adr r2, 8006c60 <UART_SetConfig+0x90>)
 8006c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c60:	08006c71 	.word	0x08006c71
 8006c64:	08006c7d 	.word	0x08006c7d
 8006c68:	08006c77 	.word	0x08006c77
 8006c6c:	08006c83 	.word	0x08006c83
 8006c70:	2301      	movs	r3, #1
 8006c72:	77fb      	strb	r3, [r7, #31]
 8006c74:	e14f      	b.n	8006f16 <UART_SetConfig+0x346>
 8006c76:	2302      	movs	r3, #2
 8006c78:	77fb      	strb	r3, [r7, #31]
 8006c7a:	e14c      	b.n	8006f16 <UART_SetConfig+0x346>
 8006c7c:	2304      	movs	r3, #4
 8006c7e:	77fb      	strb	r3, [r7, #31]
 8006c80:	e149      	b.n	8006f16 <UART_SetConfig+0x346>
 8006c82:	2308      	movs	r3, #8
 8006c84:	77fb      	strb	r3, [r7, #31]
 8006c86:	e146      	b.n	8006f16 <UART_SetConfig+0x346>
 8006c88:	2310      	movs	r3, #16
 8006c8a:	77fb      	strb	r3, [r7, #31]
 8006c8c:	e143      	b.n	8006f16 <UART_SetConfig+0x346>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a84      	ldr	r2, [pc, #528]	; (8006ea4 <UART_SetConfig+0x2d4>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d132      	bne.n	8006cfe <UART_SetConfig+0x12e>
 8006c98:	4b81      	ldr	r3, [pc, #516]	; (8006ea0 <UART_SetConfig+0x2d0>)
 8006c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c9e:	f003 030c 	and.w	r3, r3, #12
 8006ca2:	2b0c      	cmp	r3, #12
 8006ca4:	d828      	bhi.n	8006cf8 <UART_SetConfig+0x128>
 8006ca6:	a201      	add	r2, pc, #4	; (adr r2, 8006cac <UART_SetConfig+0xdc>)
 8006ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cac:	08006ce1 	.word	0x08006ce1
 8006cb0:	08006cf9 	.word	0x08006cf9
 8006cb4:	08006cf9 	.word	0x08006cf9
 8006cb8:	08006cf9 	.word	0x08006cf9
 8006cbc:	08006ced 	.word	0x08006ced
 8006cc0:	08006cf9 	.word	0x08006cf9
 8006cc4:	08006cf9 	.word	0x08006cf9
 8006cc8:	08006cf9 	.word	0x08006cf9
 8006ccc:	08006ce7 	.word	0x08006ce7
 8006cd0:	08006cf9 	.word	0x08006cf9
 8006cd4:	08006cf9 	.word	0x08006cf9
 8006cd8:	08006cf9 	.word	0x08006cf9
 8006cdc:	08006cf3 	.word	0x08006cf3
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	77fb      	strb	r3, [r7, #31]
 8006ce4:	e117      	b.n	8006f16 <UART_SetConfig+0x346>
 8006ce6:	2302      	movs	r3, #2
 8006ce8:	77fb      	strb	r3, [r7, #31]
 8006cea:	e114      	b.n	8006f16 <UART_SetConfig+0x346>
 8006cec:	2304      	movs	r3, #4
 8006cee:	77fb      	strb	r3, [r7, #31]
 8006cf0:	e111      	b.n	8006f16 <UART_SetConfig+0x346>
 8006cf2:	2308      	movs	r3, #8
 8006cf4:	77fb      	strb	r3, [r7, #31]
 8006cf6:	e10e      	b.n	8006f16 <UART_SetConfig+0x346>
 8006cf8:	2310      	movs	r3, #16
 8006cfa:	77fb      	strb	r3, [r7, #31]
 8006cfc:	e10b      	b.n	8006f16 <UART_SetConfig+0x346>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a69      	ldr	r2, [pc, #420]	; (8006ea8 <UART_SetConfig+0x2d8>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d120      	bne.n	8006d4a <UART_SetConfig+0x17a>
 8006d08:	4b65      	ldr	r3, [pc, #404]	; (8006ea0 <UART_SetConfig+0x2d0>)
 8006d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d0e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d12:	2b30      	cmp	r3, #48	; 0x30
 8006d14:	d013      	beq.n	8006d3e <UART_SetConfig+0x16e>
 8006d16:	2b30      	cmp	r3, #48	; 0x30
 8006d18:	d814      	bhi.n	8006d44 <UART_SetConfig+0x174>
 8006d1a:	2b20      	cmp	r3, #32
 8006d1c:	d009      	beq.n	8006d32 <UART_SetConfig+0x162>
 8006d1e:	2b20      	cmp	r3, #32
 8006d20:	d810      	bhi.n	8006d44 <UART_SetConfig+0x174>
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d002      	beq.n	8006d2c <UART_SetConfig+0x15c>
 8006d26:	2b10      	cmp	r3, #16
 8006d28:	d006      	beq.n	8006d38 <UART_SetConfig+0x168>
 8006d2a:	e00b      	b.n	8006d44 <UART_SetConfig+0x174>
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	77fb      	strb	r3, [r7, #31]
 8006d30:	e0f1      	b.n	8006f16 <UART_SetConfig+0x346>
 8006d32:	2302      	movs	r3, #2
 8006d34:	77fb      	strb	r3, [r7, #31]
 8006d36:	e0ee      	b.n	8006f16 <UART_SetConfig+0x346>
 8006d38:	2304      	movs	r3, #4
 8006d3a:	77fb      	strb	r3, [r7, #31]
 8006d3c:	e0eb      	b.n	8006f16 <UART_SetConfig+0x346>
 8006d3e:	2308      	movs	r3, #8
 8006d40:	77fb      	strb	r3, [r7, #31]
 8006d42:	e0e8      	b.n	8006f16 <UART_SetConfig+0x346>
 8006d44:	2310      	movs	r3, #16
 8006d46:	77fb      	strb	r3, [r7, #31]
 8006d48:	e0e5      	b.n	8006f16 <UART_SetConfig+0x346>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a57      	ldr	r2, [pc, #348]	; (8006eac <UART_SetConfig+0x2dc>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d120      	bne.n	8006d96 <UART_SetConfig+0x1c6>
 8006d54:	4b52      	ldr	r3, [pc, #328]	; (8006ea0 <UART_SetConfig+0x2d0>)
 8006d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d5a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006d5e:	2bc0      	cmp	r3, #192	; 0xc0
 8006d60:	d013      	beq.n	8006d8a <UART_SetConfig+0x1ba>
 8006d62:	2bc0      	cmp	r3, #192	; 0xc0
 8006d64:	d814      	bhi.n	8006d90 <UART_SetConfig+0x1c0>
 8006d66:	2b80      	cmp	r3, #128	; 0x80
 8006d68:	d009      	beq.n	8006d7e <UART_SetConfig+0x1ae>
 8006d6a:	2b80      	cmp	r3, #128	; 0x80
 8006d6c:	d810      	bhi.n	8006d90 <UART_SetConfig+0x1c0>
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d002      	beq.n	8006d78 <UART_SetConfig+0x1a8>
 8006d72:	2b40      	cmp	r3, #64	; 0x40
 8006d74:	d006      	beq.n	8006d84 <UART_SetConfig+0x1b4>
 8006d76:	e00b      	b.n	8006d90 <UART_SetConfig+0x1c0>
 8006d78:	2300      	movs	r3, #0
 8006d7a:	77fb      	strb	r3, [r7, #31]
 8006d7c:	e0cb      	b.n	8006f16 <UART_SetConfig+0x346>
 8006d7e:	2302      	movs	r3, #2
 8006d80:	77fb      	strb	r3, [r7, #31]
 8006d82:	e0c8      	b.n	8006f16 <UART_SetConfig+0x346>
 8006d84:	2304      	movs	r3, #4
 8006d86:	77fb      	strb	r3, [r7, #31]
 8006d88:	e0c5      	b.n	8006f16 <UART_SetConfig+0x346>
 8006d8a:	2308      	movs	r3, #8
 8006d8c:	77fb      	strb	r3, [r7, #31]
 8006d8e:	e0c2      	b.n	8006f16 <UART_SetConfig+0x346>
 8006d90:	2310      	movs	r3, #16
 8006d92:	77fb      	strb	r3, [r7, #31]
 8006d94:	e0bf      	b.n	8006f16 <UART_SetConfig+0x346>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a45      	ldr	r2, [pc, #276]	; (8006eb0 <UART_SetConfig+0x2e0>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d125      	bne.n	8006dec <UART_SetConfig+0x21c>
 8006da0:	4b3f      	ldr	r3, [pc, #252]	; (8006ea0 <UART_SetConfig+0x2d0>)
 8006da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006daa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dae:	d017      	beq.n	8006de0 <UART_SetConfig+0x210>
 8006db0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006db4:	d817      	bhi.n	8006de6 <UART_SetConfig+0x216>
 8006db6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dba:	d00b      	beq.n	8006dd4 <UART_SetConfig+0x204>
 8006dbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dc0:	d811      	bhi.n	8006de6 <UART_SetConfig+0x216>
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d003      	beq.n	8006dce <UART_SetConfig+0x1fe>
 8006dc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dca:	d006      	beq.n	8006dda <UART_SetConfig+0x20a>
 8006dcc:	e00b      	b.n	8006de6 <UART_SetConfig+0x216>
 8006dce:	2300      	movs	r3, #0
 8006dd0:	77fb      	strb	r3, [r7, #31]
 8006dd2:	e0a0      	b.n	8006f16 <UART_SetConfig+0x346>
 8006dd4:	2302      	movs	r3, #2
 8006dd6:	77fb      	strb	r3, [r7, #31]
 8006dd8:	e09d      	b.n	8006f16 <UART_SetConfig+0x346>
 8006dda:	2304      	movs	r3, #4
 8006ddc:	77fb      	strb	r3, [r7, #31]
 8006dde:	e09a      	b.n	8006f16 <UART_SetConfig+0x346>
 8006de0:	2308      	movs	r3, #8
 8006de2:	77fb      	strb	r3, [r7, #31]
 8006de4:	e097      	b.n	8006f16 <UART_SetConfig+0x346>
 8006de6:	2310      	movs	r3, #16
 8006de8:	77fb      	strb	r3, [r7, #31]
 8006dea:	e094      	b.n	8006f16 <UART_SetConfig+0x346>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a30      	ldr	r2, [pc, #192]	; (8006eb4 <UART_SetConfig+0x2e4>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d125      	bne.n	8006e42 <UART_SetConfig+0x272>
 8006df6:	4b2a      	ldr	r3, [pc, #168]	; (8006ea0 <UART_SetConfig+0x2d0>)
 8006df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dfc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e04:	d017      	beq.n	8006e36 <UART_SetConfig+0x266>
 8006e06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e0a:	d817      	bhi.n	8006e3c <UART_SetConfig+0x26c>
 8006e0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e10:	d00b      	beq.n	8006e2a <UART_SetConfig+0x25a>
 8006e12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e16:	d811      	bhi.n	8006e3c <UART_SetConfig+0x26c>
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d003      	beq.n	8006e24 <UART_SetConfig+0x254>
 8006e1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e20:	d006      	beq.n	8006e30 <UART_SetConfig+0x260>
 8006e22:	e00b      	b.n	8006e3c <UART_SetConfig+0x26c>
 8006e24:	2301      	movs	r3, #1
 8006e26:	77fb      	strb	r3, [r7, #31]
 8006e28:	e075      	b.n	8006f16 <UART_SetConfig+0x346>
 8006e2a:	2302      	movs	r3, #2
 8006e2c:	77fb      	strb	r3, [r7, #31]
 8006e2e:	e072      	b.n	8006f16 <UART_SetConfig+0x346>
 8006e30:	2304      	movs	r3, #4
 8006e32:	77fb      	strb	r3, [r7, #31]
 8006e34:	e06f      	b.n	8006f16 <UART_SetConfig+0x346>
 8006e36:	2308      	movs	r3, #8
 8006e38:	77fb      	strb	r3, [r7, #31]
 8006e3a:	e06c      	b.n	8006f16 <UART_SetConfig+0x346>
 8006e3c:	2310      	movs	r3, #16
 8006e3e:	77fb      	strb	r3, [r7, #31]
 8006e40:	e069      	b.n	8006f16 <UART_SetConfig+0x346>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a1c      	ldr	r2, [pc, #112]	; (8006eb8 <UART_SetConfig+0x2e8>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d137      	bne.n	8006ebc <UART_SetConfig+0x2ec>
 8006e4c:	4b14      	ldr	r3, [pc, #80]	; (8006ea0 <UART_SetConfig+0x2d0>)
 8006e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e52:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006e56:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e5a:	d017      	beq.n	8006e8c <UART_SetConfig+0x2bc>
 8006e5c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e60:	d817      	bhi.n	8006e92 <UART_SetConfig+0x2c2>
 8006e62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e66:	d00b      	beq.n	8006e80 <UART_SetConfig+0x2b0>
 8006e68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e6c:	d811      	bhi.n	8006e92 <UART_SetConfig+0x2c2>
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d003      	beq.n	8006e7a <UART_SetConfig+0x2aa>
 8006e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e76:	d006      	beq.n	8006e86 <UART_SetConfig+0x2b6>
 8006e78:	e00b      	b.n	8006e92 <UART_SetConfig+0x2c2>
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	77fb      	strb	r3, [r7, #31]
 8006e7e:	e04a      	b.n	8006f16 <UART_SetConfig+0x346>
 8006e80:	2302      	movs	r3, #2
 8006e82:	77fb      	strb	r3, [r7, #31]
 8006e84:	e047      	b.n	8006f16 <UART_SetConfig+0x346>
 8006e86:	2304      	movs	r3, #4
 8006e88:	77fb      	strb	r3, [r7, #31]
 8006e8a:	e044      	b.n	8006f16 <UART_SetConfig+0x346>
 8006e8c:	2308      	movs	r3, #8
 8006e8e:	77fb      	strb	r3, [r7, #31]
 8006e90:	e041      	b.n	8006f16 <UART_SetConfig+0x346>
 8006e92:	2310      	movs	r3, #16
 8006e94:	77fb      	strb	r3, [r7, #31]
 8006e96:	e03e      	b.n	8006f16 <UART_SetConfig+0x346>
 8006e98:	efff69f3 	.word	0xefff69f3
 8006e9c:	40011000 	.word	0x40011000
 8006ea0:	40023800 	.word	0x40023800
 8006ea4:	40004400 	.word	0x40004400
 8006ea8:	40004800 	.word	0x40004800
 8006eac:	40004c00 	.word	0x40004c00
 8006eb0:	40005000 	.word	0x40005000
 8006eb4:	40011400 	.word	0x40011400
 8006eb8:	40007800 	.word	0x40007800
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a71      	ldr	r2, [pc, #452]	; (8007088 <UART_SetConfig+0x4b8>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d125      	bne.n	8006f12 <UART_SetConfig+0x342>
 8006ec6:	4b71      	ldr	r3, [pc, #452]	; (800708c <UART_SetConfig+0x4bc>)
 8006ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ecc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006ed0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006ed4:	d017      	beq.n	8006f06 <UART_SetConfig+0x336>
 8006ed6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006eda:	d817      	bhi.n	8006f0c <UART_SetConfig+0x33c>
 8006edc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ee0:	d00b      	beq.n	8006efa <UART_SetConfig+0x32a>
 8006ee2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ee6:	d811      	bhi.n	8006f0c <UART_SetConfig+0x33c>
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d003      	beq.n	8006ef4 <UART_SetConfig+0x324>
 8006eec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ef0:	d006      	beq.n	8006f00 <UART_SetConfig+0x330>
 8006ef2:	e00b      	b.n	8006f0c <UART_SetConfig+0x33c>
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	77fb      	strb	r3, [r7, #31]
 8006ef8:	e00d      	b.n	8006f16 <UART_SetConfig+0x346>
 8006efa:	2302      	movs	r3, #2
 8006efc:	77fb      	strb	r3, [r7, #31]
 8006efe:	e00a      	b.n	8006f16 <UART_SetConfig+0x346>
 8006f00:	2304      	movs	r3, #4
 8006f02:	77fb      	strb	r3, [r7, #31]
 8006f04:	e007      	b.n	8006f16 <UART_SetConfig+0x346>
 8006f06:	2308      	movs	r3, #8
 8006f08:	77fb      	strb	r3, [r7, #31]
 8006f0a:	e004      	b.n	8006f16 <UART_SetConfig+0x346>
 8006f0c:	2310      	movs	r3, #16
 8006f0e:	77fb      	strb	r3, [r7, #31]
 8006f10:	e001      	b.n	8006f16 <UART_SetConfig+0x346>
 8006f12:	2310      	movs	r3, #16
 8006f14:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	69db      	ldr	r3, [r3, #28]
 8006f1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f1e:	d15a      	bne.n	8006fd6 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8006f20:	7ffb      	ldrb	r3, [r7, #31]
 8006f22:	2b08      	cmp	r3, #8
 8006f24:	d827      	bhi.n	8006f76 <UART_SetConfig+0x3a6>
 8006f26:	a201      	add	r2, pc, #4	; (adr r2, 8006f2c <UART_SetConfig+0x35c>)
 8006f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f2c:	08006f51 	.word	0x08006f51
 8006f30:	08006f59 	.word	0x08006f59
 8006f34:	08006f61 	.word	0x08006f61
 8006f38:	08006f77 	.word	0x08006f77
 8006f3c:	08006f67 	.word	0x08006f67
 8006f40:	08006f77 	.word	0x08006f77
 8006f44:	08006f77 	.word	0x08006f77
 8006f48:	08006f77 	.word	0x08006f77
 8006f4c:	08006f6f 	.word	0x08006f6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f50:	f7fd fab4 	bl	80044bc <HAL_RCC_GetPCLK1Freq>
 8006f54:	61b8      	str	r0, [r7, #24]
        break;
 8006f56:	e013      	b.n	8006f80 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f58:	f7fd fac4 	bl	80044e4 <HAL_RCC_GetPCLK2Freq>
 8006f5c:	61b8      	str	r0, [r7, #24]
        break;
 8006f5e:	e00f      	b.n	8006f80 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f60:	4b4b      	ldr	r3, [pc, #300]	; (8007090 <UART_SetConfig+0x4c0>)
 8006f62:	61bb      	str	r3, [r7, #24]
        break;
 8006f64:	e00c      	b.n	8006f80 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f66:	f7fd f9e7 	bl	8004338 <HAL_RCC_GetSysClockFreq>
 8006f6a:	61b8      	str	r0, [r7, #24]
        break;
 8006f6c:	e008      	b.n	8006f80 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f72:	61bb      	str	r3, [r7, #24]
        break;
 8006f74:	e004      	b.n	8006f80 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8006f76:	2300      	movs	r3, #0
 8006f78:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	77bb      	strb	r3, [r7, #30]
        break;
 8006f7e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d074      	beq.n	8007070 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	005a      	lsls	r2, r3, #1
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	085b      	lsrs	r3, r3, #1
 8006f90:	441a      	add	r2, r3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f9a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	2b0f      	cmp	r3, #15
 8006fa0:	d916      	bls.n	8006fd0 <UART_SetConfig+0x400>
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fa8:	d212      	bcs.n	8006fd0 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	f023 030f 	bic.w	r3, r3, #15
 8006fb2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	085b      	lsrs	r3, r3, #1
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	f003 0307 	and.w	r3, r3, #7
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	89fb      	ldrh	r3, [r7, #14]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	89fa      	ldrh	r2, [r7, #14]
 8006fcc:	60da      	str	r2, [r3, #12]
 8006fce:	e04f      	b.n	8007070 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	77bb      	strb	r3, [r7, #30]
 8006fd4:	e04c      	b.n	8007070 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006fd6:	7ffb      	ldrb	r3, [r7, #31]
 8006fd8:	2b08      	cmp	r3, #8
 8006fda:	d828      	bhi.n	800702e <UART_SetConfig+0x45e>
 8006fdc:	a201      	add	r2, pc, #4	; (adr r2, 8006fe4 <UART_SetConfig+0x414>)
 8006fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe2:	bf00      	nop
 8006fe4:	08007009 	.word	0x08007009
 8006fe8:	08007011 	.word	0x08007011
 8006fec:	08007019 	.word	0x08007019
 8006ff0:	0800702f 	.word	0x0800702f
 8006ff4:	0800701f 	.word	0x0800701f
 8006ff8:	0800702f 	.word	0x0800702f
 8006ffc:	0800702f 	.word	0x0800702f
 8007000:	0800702f 	.word	0x0800702f
 8007004:	08007027 	.word	0x08007027
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007008:	f7fd fa58 	bl	80044bc <HAL_RCC_GetPCLK1Freq>
 800700c:	61b8      	str	r0, [r7, #24]
        break;
 800700e:	e013      	b.n	8007038 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007010:	f7fd fa68 	bl	80044e4 <HAL_RCC_GetPCLK2Freq>
 8007014:	61b8      	str	r0, [r7, #24]
        break;
 8007016:	e00f      	b.n	8007038 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007018:	4b1d      	ldr	r3, [pc, #116]	; (8007090 <UART_SetConfig+0x4c0>)
 800701a:	61bb      	str	r3, [r7, #24]
        break;
 800701c:	e00c      	b.n	8007038 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800701e:	f7fd f98b 	bl	8004338 <HAL_RCC_GetSysClockFreq>
 8007022:	61b8      	str	r0, [r7, #24]
        break;
 8007024:	e008      	b.n	8007038 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007026:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800702a:	61bb      	str	r3, [r7, #24]
        break;
 800702c:	e004      	b.n	8007038 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800702e:	2300      	movs	r3, #0
 8007030:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	77bb      	strb	r3, [r7, #30]
        break;
 8007036:	bf00      	nop
    }

    if (pclk != 0U)
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d018      	beq.n	8007070 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	085a      	lsrs	r2, r3, #1
 8007044:	69bb      	ldr	r3, [r7, #24]
 8007046:	441a      	add	r2, r3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007050:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	2b0f      	cmp	r3, #15
 8007056:	d909      	bls.n	800706c <UART_SetConfig+0x49c>
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800705e:	d205      	bcs.n	800706c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	b29a      	uxth	r2, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	60da      	str	r2, [r3, #12]
 800706a:	e001      	b.n	8007070 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800707c:	7fbb      	ldrb	r3, [r7, #30]
}
 800707e:	4618      	mov	r0, r3
 8007080:	3720      	adds	r7, #32
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	40007c00 	.word	0x40007c00
 800708c:	40023800 	.word	0x40023800
 8007090:	00f42400 	.word	0x00f42400

08007094 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a0:	f003 0301 	and.w	r3, r3, #1
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00a      	beq.n	80070be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	430a      	orrs	r2, r1
 80070bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c2:	f003 0302 	and.w	r3, r3, #2
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00a      	beq.n	80070e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	430a      	orrs	r2, r1
 80070de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e4:	f003 0304 	and.w	r3, r3, #4
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00a      	beq.n	8007102 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	430a      	orrs	r2, r1
 8007100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007106:	f003 0308 	and.w	r3, r3, #8
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00a      	beq.n	8007124 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	430a      	orrs	r2, r1
 8007122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007128:	f003 0310 	and.w	r3, r3, #16
 800712c:	2b00      	cmp	r3, #0
 800712e:	d00a      	beq.n	8007146 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	430a      	orrs	r2, r1
 8007144:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714a:	f003 0320 	and.w	r3, r3, #32
 800714e:	2b00      	cmp	r3, #0
 8007150:	d00a      	beq.n	8007168 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	430a      	orrs	r2, r1
 8007166:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007170:	2b00      	cmp	r3, #0
 8007172:	d01a      	beq.n	80071aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	430a      	orrs	r2, r1
 8007188:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007192:	d10a      	bne.n	80071aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	430a      	orrs	r2, r1
 80071a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00a      	beq.n	80071cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	430a      	orrs	r2, r1
 80071ca:	605a      	str	r2, [r3, #4]
  }
}
 80071cc:	bf00      	nop
 80071ce:	370c      	adds	r7, #12
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b086      	sub	sp, #24
 80071dc:	af02      	add	r7, sp, #8
 80071de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80071e8:	f7fb fb92 	bl	8002910 <HAL_GetTick>
 80071ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f003 0308 	and.w	r3, r3, #8
 80071f8:	2b08      	cmp	r3, #8
 80071fa:	d10e      	bne.n	800721a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007200:	9300      	str	r3, [sp, #0]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2200      	movs	r2, #0
 8007206:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 f82d 	bl	800726a <UART_WaitOnFlagUntilTimeout>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d001      	beq.n	800721a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007216:	2303      	movs	r3, #3
 8007218:	e023      	b.n	8007262 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 0304 	and.w	r3, r3, #4
 8007224:	2b04      	cmp	r3, #4
 8007226:	d10e      	bne.n	8007246 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007228:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800722c:	9300      	str	r3, [sp, #0]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2200      	movs	r2, #0
 8007232:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 f817 	bl	800726a <UART_WaitOnFlagUntilTimeout>
 800723c:	4603      	mov	r3, r0
 800723e:	2b00      	cmp	r3, #0
 8007240:	d001      	beq.n	8007246 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007242:	2303      	movs	r3, #3
 8007244:	e00d      	b.n	8007262 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2220      	movs	r2, #32
 800724a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2220      	movs	r2, #32
 8007250:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800726a:	b580      	push	{r7, lr}
 800726c:	b09c      	sub	sp, #112	; 0x70
 800726e:	af00      	add	r7, sp, #0
 8007270:	60f8      	str	r0, [r7, #12]
 8007272:	60b9      	str	r1, [r7, #8]
 8007274:	603b      	str	r3, [r7, #0]
 8007276:	4613      	mov	r3, r2
 8007278:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800727a:	e0a5      	b.n	80073c8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800727c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800727e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007282:	f000 80a1 	beq.w	80073c8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007286:	f7fb fb43 	bl	8002910 <HAL_GetTick>
 800728a:	4602      	mov	r2, r0
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	1ad3      	subs	r3, r2, r3
 8007290:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007292:	429a      	cmp	r2, r3
 8007294:	d302      	bcc.n	800729c <UART_WaitOnFlagUntilTimeout+0x32>
 8007296:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007298:	2b00      	cmp	r3, #0
 800729a:	d13e      	bne.n	800731a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072a4:	e853 3f00 	ldrex	r3, [r3]
 80072a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80072aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80072b0:	667b      	str	r3, [r7, #100]	; 0x64
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	461a      	mov	r2, r3
 80072b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072bc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80072c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80072c2:	e841 2300 	strex	r3, r2, [r1]
 80072c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80072c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d1e6      	bne.n	800729c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	3308      	adds	r3, #8
 80072d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072d8:	e853 3f00 	ldrex	r3, [r3]
 80072dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e0:	f023 0301 	bic.w	r3, r3, #1
 80072e4:	663b      	str	r3, [r7, #96]	; 0x60
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	3308      	adds	r3, #8
 80072ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80072ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80072f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80072f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072f6:	e841 2300 	strex	r3, r2, [r1]
 80072fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80072fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d1e5      	bne.n	80072ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2220      	movs	r2, #32
 8007306:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2220      	movs	r2, #32
 800730c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007316:	2303      	movs	r3, #3
 8007318:	e067      	b.n	80073ea <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 0304 	and.w	r3, r3, #4
 8007324:	2b00      	cmp	r3, #0
 8007326:	d04f      	beq.n	80073c8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	69db      	ldr	r3, [r3, #28]
 800732e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007332:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007336:	d147      	bne.n	80073c8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007340:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734a:	e853 3f00 	ldrex	r3, [r3]
 800734e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007352:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007356:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	461a      	mov	r2, r3
 800735e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007360:	637b      	str	r3, [r7, #52]	; 0x34
 8007362:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007364:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007366:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007368:	e841 2300 	strex	r3, r2, [r1]
 800736c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800736e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007370:	2b00      	cmp	r3, #0
 8007372:	d1e6      	bne.n	8007342 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	3308      	adds	r3, #8
 800737a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	e853 3f00 	ldrex	r3, [r3]
 8007382:	613b      	str	r3, [r7, #16]
   return(result);
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	f023 0301 	bic.w	r3, r3, #1
 800738a:	66bb      	str	r3, [r7, #104]	; 0x68
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	3308      	adds	r3, #8
 8007392:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007394:	623a      	str	r2, [r7, #32]
 8007396:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007398:	69f9      	ldr	r1, [r7, #28]
 800739a:	6a3a      	ldr	r2, [r7, #32]
 800739c:	e841 2300 	strex	r3, r2, [r1]
 80073a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d1e5      	bne.n	8007374 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2220      	movs	r2, #32
 80073ac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2220      	movs	r2, #32
 80073b2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2220      	movs	r2, #32
 80073b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80073c4:	2303      	movs	r3, #3
 80073c6:	e010      	b.n	80073ea <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	69da      	ldr	r2, [r3, #28]
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	4013      	ands	r3, r2
 80073d2:	68ba      	ldr	r2, [r7, #8]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	bf0c      	ite	eq
 80073d8:	2301      	moveq	r3, #1
 80073da:	2300      	movne	r3, #0
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	461a      	mov	r2, r3
 80073e0:	79fb      	ldrb	r3, [r7, #7]
 80073e2:	429a      	cmp	r2, r3
 80073e4:	f43f af4a 	beq.w	800727c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073e8:	2300      	movs	r3, #0
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3770      	adds	r7, #112	; 0x70
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
	...

080073f4 <__libc_init_array>:
 80073f4:	b570      	push	{r4, r5, r6, lr}
 80073f6:	4d0d      	ldr	r5, [pc, #52]	; (800742c <__libc_init_array+0x38>)
 80073f8:	4c0d      	ldr	r4, [pc, #52]	; (8007430 <__libc_init_array+0x3c>)
 80073fa:	1b64      	subs	r4, r4, r5
 80073fc:	10a4      	asrs	r4, r4, #2
 80073fe:	2600      	movs	r6, #0
 8007400:	42a6      	cmp	r6, r4
 8007402:	d109      	bne.n	8007418 <__libc_init_array+0x24>
 8007404:	4d0b      	ldr	r5, [pc, #44]	; (8007434 <__libc_init_array+0x40>)
 8007406:	4c0c      	ldr	r4, [pc, #48]	; (8007438 <__libc_init_array+0x44>)
 8007408:	f000 f8aa 	bl	8007560 <_init>
 800740c:	1b64      	subs	r4, r4, r5
 800740e:	10a4      	asrs	r4, r4, #2
 8007410:	2600      	movs	r6, #0
 8007412:	42a6      	cmp	r6, r4
 8007414:	d105      	bne.n	8007422 <__libc_init_array+0x2e>
 8007416:	bd70      	pop	{r4, r5, r6, pc}
 8007418:	f855 3b04 	ldr.w	r3, [r5], #4
 800741c:	4798      	blx	r3
 800741e:	3601      	adds	r6, #1
 8007420:	e7ee      	b.n	8007400 <__libc_init_array+0xc>
 8007422:	f855 3b04 	ldr.w	r3, [r5], #4
 8007426:	4798      	blx	r3
 8007428:	3601      	adds	r6, #1
 800742a:	e7f2      	b.n	8007412 <__libc_init_array+0x1e>
 800742c:	08007a00 	.word	0x08007a00
 8007430:	08007a00 	.word	0x08007a00
 8007434:	08007a00 	.word	0x08007a00
 8007438:	08007a04 	.word	0x08007a04

0800743c <memset>:
 800743c:	4402      	add	r2, r0
 800743e:	4603      	mov	r3, r0
 8007440:	4293      	cmp	r3, r2
 8007442:	d100      	bne.n	8007446 <memset+0xa>
 8007444:	4770      	bx	lr
 8007446:	f803 1b01 	strb.w	r1, [r3], #1
 800744a:	e7f9      	b.n	8007440 <memset+0x4>

0800744c <__utoa>:
 800744c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800744e:	4c1f      	ldr	r4, [pc, #124]	; (80074cc <__utoa+0x80>)
 8007450:	b08b      	sub	sp, #44	; 0x2c
 8007452:	4605      	mov	r5, r0
 8007454:	460b      	mov	r3, r1
 8007456:	466e      	mov	r6, sp
 8007458:	f104 0c20 	add.w	ip, r4, #32
 800745c:	6820      	ldr	r0, [r4, #0]
 800745e:	6861      	ldr	r1, [r4, #4]
 8007460:	4637      	mov	r7, r6
 8007462:	c703      	stmia	r7!, {r0, r1}
 8007464:	3408      	adds	r4, #8
 8007466:	4564      	cmp	r4, ip
 8007468:	463e      	mov	r6, r7
 800746a:	d1f7      	bne.n	800745c <__utoa+0x10>
 800746c:	7921      	ldrb	r1, [r4, #4]
 800746e:	7139      	strb	r1, [r7, #4]
 8007470:	1e91      	subs	r1, r2, #2
 8007472:	6820      	ldr	r0, [r4, #0]
 8007474:	6038      	str	r0, [r7, #0]
 8007476:	2922      	cmp	r1, #34	; 0x22
 8007478:	f04f 0100 	mov.w	r1, #0
 800747c:	d904      	bls.n	8007488 <__utoa+0x3c>
 800747e:	7019      	strb	r1, [r3, #0]
 8007480:	460b      	mov	r3, r1
 8007482:	4618      	mov	r0, r3
 8007484:	b00b      	add	sp, #44	; 0x2c
 8007486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007488:	1e58      	subs	r0, r3, #1
 800748a:	4684      	mov	ip, r0
 800748c:	fbb5 f7f2 	udiv	r7, r5, r2
 8007490:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8007494:	fb02 5617 	mls	r6, r2, r7, r5
 8007498:	4476      	add	r6, lr
 800749a:	460c      	mov	r4, r1
 800749c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80074a0:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80074a4:	462e      	mov	r6, r5
 80074a6:	42b2      	cmp	r2, r6
 80074a8:	f101 0101 	add.w	r1, r1, #1
 80074ac:	463d      	mov	r5, r7
 80074ae:	d9ed      	bls.n	800748c <__utoa+0x40>
 80074b0:	2200      	movs	r2, #0
 80074b2:	545a      	strb	r2, [r3, r1]
 80074b4:	1919      	adds	r1, r3, r4
 80074b6:	1aa5      	subs	r5, r4, r2
 80074b8:	42aa      	cmp	r2, r5
 80074ba:	dae2      	bge.n	8007482 <__utoa+0x36>
 80074bc:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80074c0:	780e      	ldrb	r6, [r1, #0]
 80074c2:	7006      	strb	r6, [r0, #0]
 80074c4:	3201      	adds	r2, #1
 80074c6:	f801 5901 	strb.w	r5, [r1], #-1
 80074ca:	e7f4      	b.n	80074b6 <__utoa+0x6a>
 80074cc:	080079d0 	.word	0x080079d0

080074d0 <utoa>:
 80074d0:	f7ff bfbc 	b.w	800744c <__utoa>

080074d4 <round>:
 80074d4:	ee10 1a90 	vmov	r1, s1
 80074d8:	f3c1 500a 	ubfx	r0, r1, #20, #11
 80074dc:	f2a0 32ff 	subw	r2, r0, #1023	; 0x3ff
 80074e0:	2a13      	cmp	r2, #19
 80074e2:	b510      	push	{r4, lr}
 80074e4:	ee10 3a10 	vmov	r3, s0
 80074e8:	dc19      	bgt.n	800751e <round+0x4a>
 80074ea:	2a00      	cmp	r2, #0
 80074ec:	da09      	bge.n	8007502 <round+0x2e>
 80074ee:	3201      	adds	r2, #1
 80074f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80074f4:	d103      	bne.n	80074fe <round+0x2a>
 80074f6:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80074fa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80074fe:	2000      	movs	r0, #0
 8007500:	e027      	b.n	8007552 <round+0x7e>
 8007502:	4816      	ldr	r0, [pc, #88]	; (800755c <round+0x88>)
 8007504:	4110      	asrs	r0, r2
 8007506:	ea01 0400 	and.w	r4, r1, r0
 800750a:	4323      	orrs	r3, r4
 800750c:	d00e      	beq.n	800752c <round+0x58>
 800750e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007512:	fa43 f202 	asr.w	r2, r3, r2
 8007516:	4411      	add	r1, r2
 8007518:	ea21 0100 	bic.w	r1, r1, r0
 800751c:	e7ef      	b.n	80074fe <round+0x2a>
 800751e:	2a33      	cmp	r2, #51	; 0x33
 8007520:	dd05      	ble.n	800752e <round+0x5a>
 8007522:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8007526:	d101      	bne.n	800752c <round+0x58>
 8007528:	ee30 0b00 	vadd.f64	d0, d0, d0
 800752c:	bd10      	pop	{r4, pc}
 800752e:	f2a0 4413 	subw	r4, r0, #1043	; 0x413
 8007532:	f04f 30ff 	mov.w	r0, #4294967295
 8007536:	fa20 f404 	lsr.w	r4, r0, r4
 800753a:	4223      	tst	r3, r4
 800753c:	d0f6      	beq.n	800752c <round+0x58>
 800753e:	2001      	movs	r0, #1
 8007540:	f1c2 0233 	rsb	r2, r2, #51	; 0x33
 8007544:	fa00 f202 	lsl.w	r2, r0, r2
 8007548:	189b      	adds	r3, r3, r2
 800754a:	bf28      	it	cs
 800754c:	1809      	addcs	r1, r1, r0
 800754e:	ea23 0004 	bic.w	r0, r3, r4
 8007552:	460b      	mov	r3, r1
 8007554:	4602      	mov	r2, r0
 8007556:	ec43 2b10 	vmov	d0, r2, r3
 800755a:	e7e7      	b.n	800752c <round+0x58>
 800755c:	000fffff 	.word	0x000fffff

08007560 <_init>:
 8007560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007562:	bf00      	nop
 8007564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007566:	bc08      	pop	{r3}
 8007568:	469e      	mov	lr, r3
 800756a:	4770      	bx	lr

0800756c <_fini>:
 800756c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800756e:	bf00      	nop
 8007570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007572:	bc08      	pop	{r3}
 8007574:	469e      	mov	lr, r3
 8007576:	4770      	bx	lr
