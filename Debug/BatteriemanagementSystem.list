
BatteriemanagementSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e30  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007dc  08009028  08009028  00019028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009804  08009804  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08009804  08009804  00019804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800980c  0800980c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800980c  0800980c  0001980c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009810  08009810  00019810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08009814  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  2000000c  08009820  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  08009820  00020320  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000193ab  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a9b  00000000  00000000  000393e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e8  00000000  00000000  0003ce80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001240  00000000  00000000  0003e268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c8ad  00000000  00000000  0003f4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bf59  00000000  00000000  0006bd55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001090b5  00000000  00000000  00087cae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00190d63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005188  00000000  00000000  00190db4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08009010 	.word	0x08009010

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08009010 	.word	0x08009010

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b974 	b.w	8000548 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468e      	mov	lr, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	d14d      	bne.n	8000322 <__udivmoddi4+0xaa>
 8000286:	428a      	cmp	r2, r1
 8000288:	4694      	mov	ip, r2
 800028a:	d969      	bls.n	8000360 <__udivmoddi4+0xe8>
 800028c:	fab2 f282 	clz	r2, r2
 8000290:	b152      	cbz	r2, 80002a8 <__udivmoddi4+0x30>
 8000292:	fa01 f302 	lsl.w	r3, r1, r2
 8000296:	f1c2 0120 	rsb	r1, r2, #32
 800029a:	fa20 f101 	lsr.w	r1, r0, r1
 800029e:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a2:	ea41 0e03 	orr.w	lr, r1, r3
 80002a6:	4094      	lsls	r4, r2
 80002a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ac:	0c21      	lsrs	r1, r4, #16
 80002ae:	fbbe f6f8 	udiv	r6, lr, r8
 80002b2:	fa1f f78c 	uxth.w	r7, ip
 80002b6:	fb08 e316 	mls	r3, r8, r6, lr
 80002ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002be:	fb06 f107 	mul.w	r1, r6, r7
 80002c2:	4299      	cmp	r1, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x64>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ce:	f080 811f 	bcs.w	8000510 <__udivmoddi4+0x298>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 811c 	bls.w	8000510 <__udivmoddi4+0x298>
 80002d8:	3e02      	subs	r6, #2
 80002da:	4463      	add	r3, ip
 80002dc:	1a5b      	subs	r3, r3, r1
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e4:	fb08 3310 	mls	r3, r8, r0, r3
 80002e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ec:	fb00 f707 	mul.w	r7, r0, r7
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	d90a      	bls.n	800030a <__udivmoddi4+0x92>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fc:	f080 810a 	bcs.w	8000514 <__udivmoddi4+0x29c>
 8000300:	42a7      	cmp	r7, r4
 8000302:	f240 8107 	bls.w	8000514 <__udivmoddi4+0x29c>
 8000306:	4464      	add	r4, ip
 8000308:	3802      	subs	r0, #2
 800030a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030e:	1be4      	subs	r4, r4, r7
 8000310:	2600      	movs	r6, #0
 8000312:	b11d      	cbz	r5, 800031c <__udivmoddi4+0xa4>
 8000314:	40d4      	lsrs	r4, r2
 8000316:	2300      	movs	r3, #0
 8000318:	e9c5 4300 	strd	r4, r3, [r5]
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d909      	bls.n	800033a <__udivmoddi4+0xc2>
 8000326:	2d00      	cmp	r5, #0
 8000328:	f000 80ef 	beq.w	800050a <__udivmoddi4+0x292>
 800032c:	2600      	movs	r6, #0
 800032e:	e9c5 0100 	strd	r0, r1, [r5]
 8000332:	4630      	mov	r0, r6
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	fab3 f683 	clz	r6, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d14a      	bne.n	80003d8 <__udivmoddi4+0x160>
 8000342:	428b      	cmp	r3, r1
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xd4>
 8000346:	4282      	cmp	r2, r0
 8000348:	f200 80f9 	bhi.w	800053e <__udivmoddi4+0x2c6>
 800034c:	1a84      	subs	r4, r0, r2
 800034e:	eb61 0303 	sbc.w	r3, r1, r3
 8000352:	2001      	movs	r0, #1
 8000354:	469e      	mov	lr, r3
 8000356:	2d00      	cmp	r5, #0
 8000358:	d0e0      	beq.n	800031c <__udivmoddi4+0xa4>
 800035a:	e9c5 4e00 	strd	r4, lr, [r5]
 800035e:	e7dd      	b.n	800031c <__udivmoddi4+0xa4>
 8000360:	b902      	cbnz	r2, 8000364 <__udivmoddi4+0xec>
 8000362:	deff      	udf	#255	; 0xff
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	2a00      	cmp	r2, #0
 800036a:	f040 8092 	bne.w	8000492 <__udivmoddi4+0x21a>
 800036e:	eba1 010c 	sub.w	r1, r1, ip
 8000372:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	2601      	movs	r6, #1
 800037c:	0c20      	lsrs	r0, r4, #16
 800037e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000382:	fb07 1113 	mls	r1, r7, r3, r1
 8000386:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038a:	fb0e f003 	mul.w	r0, lr, r3
 800038e:	4288      	cmp	r0, r1
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x12c>
 8000392:	eb1c 0101 	adds.w	r1, ip, r1
 8000396:	f103 38ff 	add.w	r8, r3, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x12a>
 800039c:	4288      	cmp	r0, r1
 800039e:	f200 80cb 	bhi.w	8000538 <__udivmoddi4+0x2c0>
 80003a2:	4643      	mov	r3, r8
 80003a4:	1a09      	subs	r1, r1, r0
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ac:	fb07 1110 	mls	r1, r7, r0, r1
 80003b0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003b4:	fb0e fe00 	mul.w	lr, lr, r0
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x156>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x154>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	f200 80bb 	bhi.w	8000542 <__udivmoddi4+0x2ca>
 80003cc:	4608      	mov	r0, r1
 80003ce:	eba4 040e 	sub.w	r4, r4, lr
 80003d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003d6:	e79c      	b.n	8000312 <__udivmoddi4+0x9a>
 80003d8:	f1c6 0720 	rsb	r7, r6, #32
 80003dc:	40b3      	lsls	r3, r6
 80003de:	fa22 fc07 	lsr.w	ip, r2, r7
 80003e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003e6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ea:	fa01 f306 	lsl.w	r3, r1, r6
 80003ee:	431c      	orrs	r4, r3
 80003f0:	40f9      	lsrs	r1, r7
 80003f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003f6:	fa00 f306 	lsl.w	r3, r0, r6
 80003fa:	fbb1 f8f9 	udiv	r8, r1, r9
 80003fe:	0c20      	lsrs	r0, r4, #16
 8000400:	fa1f fe8c 	uxth.w	lr, ip
 8000404:	fb09 1118 	mls	r1, r9, r8, r1
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	fb08 f00e 	mul.w	r0, r8, lr
 8000410:	4288      	cmp	r0, r1
 8000412:	fa02 f206 	lsl.w	r2, r2, r6
 8000416:	d90b      	bls.n	8000430 <__udivmoddi4+0x1b8>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000420:	f080 8088 	bcs.w	8000534 <__udivmoddi4+0x2bc>
 8000424:	4288      	cmp	r0, r1
 8000426:	f240 8085 	bls.w	8000534 <__udivmoddi4+0x2bc>
 800042a:	f1a8 0802 	sub.w	r8, r8, #2
 800042e:	4461      	add	r1, ip
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f9 	udiv	r0, r1, r9
 8000438:	fb09 1110 	mls	r1, r9, r0, r1
 800043c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000440:	fb00 fe0e 	mul.w	lr, r0, lr
 8000444:	458e      	cmp	lr, r1
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x1e2>
 8000448:	eb1c 0101 	adds.w	r1, ip, r1
 800044c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000450:	d26c      	bcs.n	800052c <__udivmoddi4+0x2b4>
 8000452:	458e      	cmp	lr, r1
 8000454:	d96a      	bls.n	800052c <__udivmoddi4+0x2b4>
 8000456:	3802      	subs	r0, #2
 8000458:	4461      	add	r1, ip
 800045a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800045e:	fba0 9402 	umull	r9, r4, r0, r2
 8000462:	eba1 010e 	sub.w	r1, r1, lr
 8000466:	42a1      	cmp	r1, r4
 8000468:	46c8      	mov	r8, r9
 800046a:	46a6      	mov	lr, r4
 800046c:	d356      	bcc.n	800051c <__udivmoddi4+0x2a4>
 800046e:	d053      	beq.n	8000518 <__udivmoddi4+0x2a0>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x212>
 8000472:	ebb3 0208 	subs.w	r2, r3, r8
 8000476:	eb61 010e 	sbc.w	r1, r1, lr
 800047a:	fa01 f707 	lsl.w	r7, r1, r7
 800047e:	fa22 f306 	lsr.w	r3, r2, r6
 8000482:	40f1      	lsrs	r1, r6
 8000484:	431f      	orrs	r7, r3
 8000486:	e9c5 7100 	strd	r7, r1, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	f1c2 0320 	rsb	r3, r2, #32
 8000496:	40d8      	lsrs	r0, r3
 8000498:	fa0c fc02 	lsl.w	ip, ip, r2
 800049c:	fa21 f303 	lsr.w	r3, r1, r3
 80004a0:	4091      	lsls	r1, r2
 80004a2:	4301      	orrs	r1, r0
 80004a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b0:	fb07 3610 	mls	r6, r7, r0, r3
 80004b4:	0c0b      	lsrs	r3, r1, #16
 80004b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004ba:	fb00 f60e 	mul.w	r6, r0, lr
 80004be:	429e      	cmp	r6, r3
 80004c0:	fa04 f402 	lsl.w	r4, r4, r2
 80004c4:	d908      	bls.n	80004d8 <__udivmoddi4+0x260>
 80004c6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ce:	d22f      	bcs.n	8000530 <__udivmoddi4+0x2b8>
 80004d0:	429e      	cmp	r6, r3
 80004d2:	d92d      	bls.n	8000530 <__udivmoddi4+0x2b8>
 80004d4:	3802      	subs	r0, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	1b9b      	subs	r3, r3, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004e0:	fb07 3316 	mls	r3, r7, r6, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x28a>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d216      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d914      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004fe:	3e02      	subs	r6, #2
 8000500:	4461      	add	r1, ip
 8000502:	1ac9      	subs	r1, r1, r3
 8000504:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000508:	e738      	b.n	800037c <__udivmoddi4+0x104>
 800050a:	462e      	mov	r6, r5
 800050c:	4628      	mov	r0, r5
 800050e:	e705      	b.n	800031c <__udivmoddi4+0xa4>
 8000510:	4606      	mov	r6, r0
 8000512:	e6e3      	b.n	80002dc <__udivmoddi4+0x64>
 8000514:	4618      	mov	r0, r3
 8000516:	e6f8      	b.n	800030a <__udivmoddi4+0x92>
 8000518:	454b      	cmp	r3, r9
 800051a:	d2a9      	bcs.n	8000470 <__udivmoddi4+0x1f8>
 800051c:	ebb9 0802 	subs.w	r8, r9, r2
 8000520:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000524:	3801      	subs	r0, #1
 8000526:	e7a3      	b.n	8000470 <__udivmoddi4+0x1f8>
 8000528:	4646      	mov	r6, r8
 800052a:	e7ea      	b.n	8000502 <__udivmoddi4+0x28a>
 800052c:	4620      	mov	r0, r4
 800052e:	e794      	b.n	800045a <__udivmoddi4+0x1e2>
 8000530:	4640      	mov	r0, r8
 8000532:	e7d1      	b.n	80004d8 <__udivmoddi4+0x260>
 8000534:	46d0      	mov	r8, sl
 8000536:	e77b      	b.n	8000430 <__udivmoddi4+0x1b8>
 8000538:	3b02      	subs	r3, #2
 800053a:	4461      	add	r1, ip
 800053c:	e732      	b.n	80003a4 <__udivmoddi4+0x12c>
 800053e:	4630      	mov	r0, r6
 8000540:	e709      	b.n	8000356 <__udivmoddi4+0xde>
 8000542:	4464      	add	r4, ip
 8000544:	3802      	subs	r0, #2
 8000546:	e742      	b.n	80003ce <__udivmoddi4+0x156>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
	// Sende String mit Laenge "Size", "Size" muss bekannt sein
	HAL_UART_Transmit(&huart2, (uint8_t*) str, size, 1000);
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	b29a      	uxth	r2, r3
 800055a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055e:	6879      	ldr	r1, [r7, #4]
 8000560:	4803      	ldr	r0, [pc, #12]	; (8000570 <uartTransmit+0x24>)
 8000562:	f007 fff7 	bl	8008554 <HAL_UART_Transmit>
}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20000298 	.word	0x20000298

08000574 <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	6039      	str	r1, [r7, #0]
	char str[11];

	// Zahl umrechnen
	utoa(number, str, base);												// Zahl umrechnen anhand der Basis "base"
 800057e:	683a      	ldr	r2, [r7, #0]
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	4619      	mov	r1, r3
 8000586:	6878      	ldr	r0, [r7, #4]
 8000588:	f008 fcfa 	bl	8008f80 <utoa>
	HAL_UART_Transmit(&huart2, (uint8_t*) str, strlen(str), 1000);			// Sende Zahlen
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	4618      	mov	r0, r3
 8000592:	f7ff fe51 	bl	8000238 <strlen>
 8000596:	4603      	mov	r3, r0
 8000598:	b29a      	uxth	r2, r3
 800059a:	f107 010c 	add.w	r1, r7, #12
 800059e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a2:	4803      	ldr	r0, [pc, #12]	; (80005b0 <uartTransmitNumber+0x3c>)
 80005a4:	f007 ffd6 	bl	8008554 <HAL_UART_Transmit>
}
 80005a8:	bf00      	nop
 80005aa:	3718      	adds	r7, #24
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000298 	.word	0x20000298

080005b4 <ltc1380_write>:
//----------------------------------------------------------------------

// Kanal auswaehlen
//----------------------------------------------------------------------
void ltc1380_write(uint8_t Address, uint8_t Channel)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	460a      	mov	r2, r1
 80005be:	71fb      	strb	r3, [r7, #7]
 80005c0:	4613      	mov	r3, r2
 80005c2:	71bb      	strb	r3, [r7, #6]
	ITM_SendNumber(Channel);
	ITM_SendChar('\n');
#endif

	// Definiere Array fuer Channel auswaehlen
	uint8_t off[6] = {0x69, 0x08, 0x00, 0x89, 0x7F, 0xF9};					// Daten-Bytes fuer LTC6811 mit Daten fuer LTC1380
 80005c4:	4a14      	ldr	r2, [pc, #80]	; (8000618 <ltc1380_write+0x64>)
 80005c6:	f107 0308 	add.w	r3, r7, #8
 80005ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005ce:	6018      	str	r0, [r3, #0]
 80005d0:	3304      	adds	r3, #4
 80005d2:	8019      	strh	r1, [r3, #0]
	
	// Addresse und Channel waehlen
	off[1] |= ((Address & 0x0F) << 4);										// Address in Array uebertragen
 80005d4:	7a7b      	ldrb	r3, [r7, #9]
 80005d6:	b25a      	sxtb	r2, r3
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	011b      	lsls	r3, r3, #4
 80005dc:	b25b      	sxtb	r3, r3
 80005de:	4313      	orrs	r3, r2
 80005e0:	b25b      	sxtb	r3, r3
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	727b      	strb	r3, [r7, #9]
	off[3] |= ((Channel & 0x0F) << 4);										// Channel in Array uebertragen
 80005e6:	7afb      	ldrb	r3, [r7, #11]
 80005e8:	b25a      	sxtb	r2, r3
 80005ea:	79bb      	ldrb	r3, [r7, #6]
 80005ec:	011b      	lsls	r3, r3, #4
 80005ee:	b25b      	sxtb	r3, r3
 80005f0:	4313      	orrs	r3, r2
 80005f2:	b25b      	sxtb	r3, r3
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	72fb      	strb	r3, [r7, #11]
	
	// LTC6811 beschreiben und ueber I2C uebertragen
	ltc6811_write(WRCOMM, &off[0]);												// Daten in LTC6811 schreiben
 80005f8:	f107 0308 	add.w	r3, r7, #8
 80005fc:	4619      	mov	r1, r3
 80005fe:	f240 7021 	movw	r0, #1825	; 0x721
 8000602:	f000 f8a9 	bl	8000758 <ltc6811_write>
	ltc6811(STCOMM);														// Daten von LTC6811 an LTC1380 senden
 8000606:	f240 7023 	movw	r0, #1827	; 0x723
 800060a:	f000 f851 	bl	80006b0 <ltc6811>
		ITM_SendChar(' ');
		ITM_SendNumber(off[i]);
	}
	ITM_SendChar('\n');
#endif
}
 800060e:	bf00      	nop
 8000610:	3710      	adds	r7, #16
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	08009028 	.word	0x08009028

0800061c <getDifference>:
//----------------------------------------------------------------------

// Differenz Berechnen, Betrag
//----------------------------------------------------------------------
static uint16_t getDifference(uint16_t a, uint16_t b)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	460a      	mov	r2, r1
 8000626:	80fb      	strh	r3, [r7, #6]
 8000628:	4613      	mov	r3, r2
 800062a:	80bb      	strh	r3, [r7, #4]
	// A ist groesser B
	if (a > b)
 800062c:	88fa      	ldrh	r2, [r7, #6]
 800062e:	88bb      	ldrh	r3, [r7, #4]
 8000630:	429a      	cmp	r2, r3
 8000632:	d904      	bls.n	800063e <getDifference+0x22>
	{
		// B von A abziehen
		return (a - b);
 8000634:	88fa      	ldrh	r2, [r7, #6]
 8000636:	88bb      	ldrh	r3, [r7, #4]
 8000638:	1ad3      	subs	r3, r2, r3
 800063a:	b29b      	uxth	r3, r3
 800063c:	e009      	b.n	8000652 <getDifference+0x36>
	}
	// B ist groesser A
	else if (a < b)
 800063e:	88fa      	ldrh	r2, [r7, #6]
 8000640:	88bb      	ldrh	r3, [r7, #4]
 8000642:	429a      	cmp	r2, r3
 8000644:	d204      	bcs.n	8000650 <getDifference+0x34>
	{
		// A von B abziehen
		return (b - a);
 8000646:	88ba      	ldrh	r2, [r7, #4]
 8000648:	88fb      	ldrh	r3, [r7, #6]
 800064a:	1ad3      	subs	r3, r2, r3
 800064c:	b29b      	uxth	r3, r3
 800064e:	e000      	b.n	8000652 <getDifference+0x36>
	}
	// A ist gleich B
	else
	{
		// Differenz ist 0
		return 0;
 8000650:	2300      	movs	r3, #0
	}
}
 8000652:	4618      	mov	r0, r3
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
	...

08000660 <wakeup_ltc6811>:
//----------------------------------------------------------------------

// Wakeup LTC6811 idle
//----------------------------------------------------------------------
void wakeup_ltc6811(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
	// Debug Nachricht
#ifdef DEBUG_ISOSPI
	ITM_SendString("Chip wird geweckt.\n");
#endif

	for(uint8_t i = 0; i < LTC6811_DEVICES; i++)							// Wiederholen fuer Anzahl Slaves
 8000666:	2300      	movs	r3, #0
 8000668:	71fb      	strb	r3, [r7, #7]
 800066a:	e014      	b.n	8000696 <wakeup_ltc6811+0x36>
	{
		// ISOCS einschalten
		ISOCS_ENABLE();														// Chip-Select einschalten
 800066c:	2200      	movs	r2, #0
 800066e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000672:	480d      	ldr	r0, [pc, #52]	; (80006a8 <wakeup_ltc6811+0x48>)
 8000674:	f004 f9d2 	bl	8004a1c <HAL_GPIO_WritePin>

		// Dummy Paket senden
		HAL_SPI_Transmit(&hspi4, (uint8_t*) 0xAA, 1, 100);					// Chip wecken, isoSPI braucht Zeit bis ready
 8000678:	2364      	movs	r3, #100	; 0x64
 800067a:	2201      	movs	r2, #1
 800067c:	21aa      	movs	r1, #170	; 0xaa
 800067e:	480b      	ldr	r0, [pc, #44]	; (80006ac <wakeup_ltc6811+0x4c>)
 8000680:	f005 fb9d 	bl	8005dbe <HAL_SPI_Transmit>

		//HAL_Delay(2);														// isoSPI braucht Zeit bis ready

		// ISOCS ausschalten
		ISOCS_DISABLE();													// Chip-Select ausschalten
 8000684:	2201      	movs	r2, #1
 8000686:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800068a:	4807      	ldr	r0, [pc, #28]	; (80006a8 <wakeup_ltc6811+0x48>)
 800068c:	f004 f9c6 	bl	8004a1c <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < LTC6811_DEVICES; i++)							// Wiederholen fuer Anzahl Slaves
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	3301      	adds	r3, #1
 8000694:	71fb      	strb	r3, [r7, #7]
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d0e7      	beq.n	800066c <wakeup_ltc6811+0xc>
	}
}
 800069c:	bf00      	nop
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40021000 	.word	0x40021000
 80006ac:	20000150 	.word	0x20000150

080006b0 <ltc6811>:
//----------------------------------------------------------------------

// Broadcast Command
//----------------------------------------------------------------------
void ltc6811(uint16_t command)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	80fb      	strh	r3, [r7, #6]
#endif

	// PEC berechnen, Anhand Command
	uint16_t pec;															// pec = Zwischenspeicher 16-Bit Command
	uint8_t cmd[4];															// Zwischenspeicher Command + Pec CRC
	pec = peccommand(command);
 80006ba:	88fb      	ldrh	r3, [r7, #6]
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 f953 	bl	8000968 <peccommand>
 80006c2:	4603      	mov	r3, r0
 80006c4:	81bb      	strh	r3, [r7, #12]
	
	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 80006c6:	f7ff ffcb 	bl	8000660 <wakeup_ltc6811>

	// Command in cmd abspeichern
	cmd[0] = ((command >> 8) & 0x07);
 80006ca:	88fb      	ldrh	r3, [r7, #6]
 80006cc:	0a1b      	lsrs	r3, r3, #8
 80006ce:	b29b      	uxth	r3, r3
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	f003 0307 	and.w	r3, r3, #7
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	723b      	strb	r3, [r7, #8]
	cmd[1] = (command & 0xFF);
 80006da:	88fb      	ldrh	r3, [r7, #6]
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	727b      	strb	r3, [r7, #9]
	cmd[2] = ((pec >> 8) & 0xFF);
 80006e0:	89bb      	ldrh	r3, [r7, #12]
 80006e2:	0a1b      	lsrs	r3, r3, #8
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (pec & 0xFE);
 80006ea:	89bb      	ldrh	r3, [r7, #12]
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	f023 0301 	bic.w	r3, r3, #1
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	72fb      	strb	r3, [r7, #11]

	// ISOCS einschalten
	ISOCS_ENABLE();
 80006f6:	2200      	movs	r2, #0
 80006f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006fc:	4814      	ldr	r0, [pc, #80]	; (8000750 <ltc6811+0xa0>)
 80006fe:	f004 f98d 	bl	8004a1c <HAL_GPIO_WritePin>

	// Command uebertragen
	HAL_SPI_Transmit(&hspi4, cmd, 4, 100);
 8000702:	f107 0108 	add.w	r1, r7, #8
 8000706:	2364      	movs	r3, #100	; 0x64
 8000708:	2204      	movs	r2, #4
 800070a:	4812      	ldr	r0, [pc, #72]	; (8000754 <ltc6811+0xa4>)
 800070c:	f005 fb57 	bl	8005dbe <HAL_SPI_Transmit>

	// Wenn Command = STCOMM ist dann muessen noch 72 Takte uebertragen werden
	if (command == STCOMM)
 8000710:	88fb      	ldrh	r3, [r7, #6]
 8000712:	f240 7223 	movw	r2, #1827	; 0x723
 8000716:	4293      	cmp	r3, r2
 8000718:	d10f      	bne.n	800073a <ltc6811+0x8a>
	{
		// 72 = 9 * 8 Bit Daten
		for (uint8_t i = 0; i < 9; i++)
 800071a:	2300      	movs	r3, #0
 800071c:	73fb      	strb	r3, [r7, #15]
 800071e:	e009      	b.n	8000734 <ltc6811+0x84>
		{
			// Dummy-Byte uebertragen
			HAL_SPI_Transmit(&hspi4, (uint8_t*) 0xAA, 1, HAL_MAX_DELAY);
 8000720:	f04f 33ff 	mov.w	r3, #4294967295
 8000724:	2201      	movs	r2, #1
 8000726:	21aa      	movs	r1, #170	; 0xaa
 8000728:	480a      	ldr	r0, [pc, #40]	; (8000754 <ltc6811+0xa4>)
 800072a:	f005 fb48 	bl	8005dbe <HAL_SPI_Transmit>
		for (uint8_t i = 0; i < 9; i++)
 800072e:	7bfb      	ldrb	r3, [r7, #15]
 8000730:	3301      	adds	r3, #1
 8000732:	73fb      	strb	r3, [r7, #15]
 8000734:	7bfb      	ldrb	r3, [r7, #15]
 8000736:	2b08      	cmp	r3, #8
 8000738:	d9f2      	bls.n	8000720 <ltc6811+0x70>
		}
	}
	
	// ISOCS ausschalten
	ISOCS_DISABLE();
 800073a:	2201      	movs	r2, #1
 800073c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000740:	4803      	ldr	r0, [pc, #12]	; (8000750 <ltc6811+0xa0>)
 8000742:	f004 f96b 	bl	8004a1c <HAL_GPIO_WritePin>
		ITM_SendChar(' ');
		ITM_SendNumber(cmd[i]);
	}
	ITM_SendChar('\n');
#endif
}
 8000746:	bf00      	nop
 8000748:	3710      	adds	r7, #16
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40021000 	.word	0x40021000
 8000754:	20000150 	.word	0x20000150

08000758 <ltc6811_write>:


// Broadcast Write Command
//----------------------------------------------------------------------
void ltc6811_write(uint16_t command, uint8_t* data)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b088      	sub	sp, #32
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	6039      	str	r1, [r7, #0]
 8000762:	80fb      	strh	r3, [r7, #6]

	// PEC berechnen, fuer Data Funktion nur bei einem Device gegeben
	uint16_t pec_c, pec_d;													// pec_c = Zwischenspeicher 16-Bit Command, pec_d = Zwischenspeicher 16-Bit Data
	uint8_t cmd[4];															// Zwischenspeicher Command + Pec CRC
	uint8_t tmp_data[8*LTC6811_DEVICES];									// Zwischenspeicher Daten + Pec CRC
	pec_c = peccommand(command);											// Pec Command berechnen
 8000764:	88fb      	ldrh	r3, [r7, #6]
 8000766:	4618      	mov	r0, r3
 8000768:	f000 f8fe 	bl	8000968 <peccommand>
 800076c:	4603      	mov	r3, r0
 800076e:	83bb      	strh	r3, [r7, #28]

	// Command in cmd abspeichern
	cmd[0] = ((command  >> 8) & 0x07);
 8000770:	88fb      	ldrh	r3, [r7, #6]
 8000772:	0a1b      	lsrs	r3, r3, #8
 8000774:	b29b      	uxth	r3, r3
 8000776:	b2db      	uxtb	r3, r3
 8000778:	f003 0307 	and.w	r3, r3, #7
 800077c:	b2db      	uxtb	r3, r3
 800077e:	753b      	strb	r3, [r7, #20]
	cmd[1] = (command & 0xFF);
 8000780:	88fb      	ldrh	r3, [r7, #6]
 8000782:	b2db      	uxtb	r3, r3
 8000784:	757b      	strb	r3, [r7, #21]
	cmd[2] = ((pec_c >> 8) & 0xFF);
 8000786:	8bbb      	ldrh	r3, [r7, #28]
 8000788:	0a1b      	lsrs	r3, r3, #8
 800078a:	b29b      	uxth	r3, r3
 800078c:	b2db      	uxtb	r3, r3
 800078e:	75bb      	strb	r3, [r7, #22]
	cmd[3] = (pec_c & 0xFE);
 8000790:	8bbb      	ldrh	r3, [r7, #28]
 8000792:	b2db      	uxtb	r3, r3
 8000794:	f023 0301 	bic.w	r3, r3, #1
 8000798:	b2db      	uxtb	r3, r3
 800079a:	75fb      	strb	r3, [r7, #23]

	// Daten in tmp_data abspeichern zum Senden
	for (uint8_t j = 0; j < LTC6811_DEVICES; j++)
 800079c:	2300      	movs	r3, #0
 800079e:	77fb      	strb	r3, [r7, #31]
 80007a0:	e035      	b.n	800080e <ltc6811_write+0xb6>
	{
		// Schleife um Daten fuer einen IC abzuspeichern
		for (uint8_t i = 0; i < 6; i++)
 80007a2:	2300      	movs	r3, #0
 80007a4:	77bb      	strb	r3, [r7, #30]
 80007a6:	e016      	b.n	80007d6 <ltc6811_write+0x7e>
		{
			tmp_data[j*8+i] = data[j*6+i];
 80007a8:	7ffa      	ldrb	r2, [r7, #31]
 80007aa:	4613      	mov	r3, r2
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	4413      	add	r3, r2
 80007b0:	005b      	lsls	r3, r3, #1
 80007b2:	461a      	mov	r2, r3
 80007b4:	7fbb      	ldrb	r3, [r7, #30]
 80007b6:	4413      	add	r3, r2
 80007b8:	461a      	mov	r2, r3
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	441a      	add	r2, r3
 80007be:	7ffb      	ldrb	r3, [r7, #31]
 80007c0:	00d9      	lsls	r1, r3, #3
 80007c2:	7fbb      	ldrb	r3, [r7, #30]
 80007c4:	440b      	add	r3, r1
 80007c6:	7812      	ldrb	r2, [r2, #0]
 80007c8:	3320      	adds	r3, #32
 80007ca:	443b      	add	r3, r7
 80007cc:	f803 2c14 	strb.w	r2, [r3, #-20]
		for (uint8_t i = 0; i < 6; i++)
 80007d0:	7fbb      	ldrb	r3, [r7, #30]
 80007d2:	3301      	adds	r3, #1
 80007d4:	77bb      	strb	r3, [r7, #30]
 80007d6:	7fbb      	ldrb	r3, [r7, #30]
 80007d8:	2b05      	cmp	r3, #5
 80007da:	d9e5      	bls.n	80007a8 <ltc6811_write+0x50>
		}

		// Pec berechnen pro IC einmal
		pec_d = peclookup(6, &tmp_data[j*8]);								// Pec Daten berechnen
 80007dc:	7ffb      	ldrb	r3, [r7, #31]
 80007de:	00db      	lsls	r3, r3, #3
 80007e0:	f107 020c 	add.w	r2, r7, #12
 80007e4:	4413      	add	r3, r2
 80007e6:	4619      	mov	r1, r3
 80007e8:	2006      	movs	r0, #6
 80007ea:	f000 f8d9 	bl	80009a0 <peclookup>
 80007ee:	4603      	mov	r3, r0
 80007f0:	837b      	strh	r3, [r7, #26]

		// Pec abspeichern fuer einen IC
		tmp_data[6] = ((pec_d >> 8) & 0xFF);
 80007f2:	8b7b      	ldrh	r3, [r7, #26]
 80007f4:	0a1b      	lsrs	r3, r3, #8
 80007f6:	b29b      	uxth	r3, r3
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	74bb      	strb	r3, [r7, #18]
		tmp_data[7] = (pec_d & 0xFE);
 80007fc:	8b7b      	ldrh	r3, [r7, #26]
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	f023 0301 	bic.w	r3, r3, #1
 8000804:	b2db      	uxtb	r3, r3
 8000806:	74fb      	strb	r3, [r7, #19]
	for (uint8_t j = 0; j < LTC6811_DEVICES; j++)
 8000808:	7ffb      	ldrb	r3, [r7, #31]
 800080a:	3301      	adds	r3, #1
 800080c:	77fb      	strb	r3, [r7, #31]
 800080e:	7ffb      	ldrb	r3, [r7, #31]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d0c6      	beq.n	80007a2 <ltc6811_write+0x4a>
	}
	
	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8000814:	f7ff ff24 	bl	8000660 <wakeup_ltc6811>

	// ISOCS einschalten
	ISOCS_ENABLE();
 8000818:	2200      	movs	r2, #0
 800081a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800081e:	480d      	ldr	r0, [pc, #52]	; (8000854 <ltc6811_write+0xfc>)
 8000820:	f004 f8fc 	bl	8004a1c <HAL_GPIO_WritePin>

	// Command uebertragen
	HAL_SPI_Transmit(&hspi4, cmd, 4, 100);
 8000824:	f107 0114 	add.w	r1, r7, #20
 8000828:	2364      	movs	r3, #100	; 0x64
 800082a:	2204      	movs	r2, #4
 800082c:	480a      	ldr	r0, [pc, #40]	; (8000858 <ltc6811_write+0x100>)
 800082e:	f005 fac6 	bl	8005dbe <HAL_SPI_Transmit>
	
	// Data senden
//	for (uint8_t i = 0; i < 6; i++)
//	{
		// Sende Daten fuer einen IC
		HAL_SPI_Transmit(&hspi4, tmp_data, 8, 100);
 8000832:	f107 010c 	add.w	r1, r7, #12
 8000836:	2364      	movs	r3, #100	; 0x64
 8000838:	2208      	movs	r2, #8
 800083a:	4807      	ldr	r0, [pc, #28]	; (8000858 <ltc6811_write+0x100>)
 800083c:	f005 fabf 	bl	8005dbe <HAL_SPI_Transmit>
//	}
	
	// ISOCS ausschalten
	ISOCS_DISABLE();
 8000840:	2201      	movs	r2, #1
 8000842:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000846:	4803      	ldr	r0, [pc, #12]	; (8000854 <ltc6811_write+0xfc>)
 8000848:	f004 f8e8 	bl	8004a1c <HAL_GPIO_WritePin>
		ITM_SendChar(' ');
		ITM_SendNumber(data[i]);
	}
	ITM_SendChar('\n');
#endif
}
 800084c:	bf00      	nop
 800084e:	3720      	adds	r7, #32
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40021000 	.word	0x40021000
 8000858:	20000150 	.word	0x20000150

0800085c <ltc6811_read>:
//----------------------------------------------------------------------

// Broadcast Read Command
//----------------------------------------------------------------------
uint8_t ltc6811_read(uint16_t command, uint8_t* data)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	6039      	str	r1, [r7, #0]
 8000866:	80fb      	strh	r3, [r7, #6]

	// PEC berechnen, Anhand Command
	uint16_t pec;															// pec = Zwischenspeicher 16-Bit Command
	uint16_t tmp;															// Zwischenspeicher fuer Pruefung CRC
	uint8_t cmd[4];															// Zwischenspeicher Command + Pec CRC
	pec = peccommand(command);
 8000868:	88fb      	ldrh	r3, [r7, #6]
 800086a:	4618      	mov	r0, r3
 800086c:	f000 f87c 	bl	8000968 <peccommand>
 8000870:	4603      	mov	r3, r0
 8000872:	82bb      	strh	r3, [r7, #20]
	
	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8000874:	f7ff fef4 	bl	8000660 <wakeup_ltc6811>

	// Command in cmd abspeichern
	cmd[0] = ((command >> 8) & 0x07);
 8000878:	88fb      	ldrh	r3, [r7, #6]
 800087a:	0a1b      	lsrs	r3, r3, #8
 800087c:	b29b      	uxth	r3, r3
 800087e:	b2db      	uxtb	r3, r3
 8000880:	f003 0307 	and.w	r3, r3, #7
 8000884:	b2db      	uxtb	r3, r3
 8000886:	733b      	strb	r3, [r7, #12]
	cmd[1] = (command & 0xFF);
 8000888:	88fb      	ldrh	r3, [r7, #6]
 800088a:	b2db      	uxtb	r3, r3
 800088c:	737b      	strb	r3, [r7, #13]
	cmd[2] = ((pec >> 8) & 0xFF);
 800088e:	8abb      	ldrh	r3, [r7, #20]
 8000890:	0a1b      	lsrs	r3, r3, #8
 8000892:	b29b      	uxth	r3, r3
 8000894:	b2db      	uxtb	r3, r3
 8000896:	73bb      	strb	r3, [r7, #14]
	cmd[3] = (pec & 0xFE);
 8000898:	8abb      	ldrh	r3, [r7, #20]
 800089a:	b2db      	uxtb	r3, r3
 800089c:	f023 0301 	bic.w	r3, r3, #1
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	73fb      	strb	r3, [r7, #15]

	// ISOCS einschalten
	ISOCS_ENABLE();
 80008a4:	2200      	movs	r2, #0
 80008a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008aa:	482d      	ldr	r0, [pc, #180]	; (8000960 <ltc6811_read+0x104>)
 80008ac:	f004 f8b6 	bl	8004a1c <HAL_GPIO_WritePin>

	// Command uebertragen
	HAL_SPI_Transmit(&hspi4, cmd, 4, 100);
 80008b0:	f107 010c 	add.w	r1, r7, #12
 80008b4:	2364      	movs	r3, #100	; 0x64
 80008b6:	2204      	movs	r2, #4
 80008b8:	482a      	ldr	r0, [pc, #168]	; (8000964 <ltc6811_read+0x108>)
 80008ba:	f005 fa80 	bl	8005dbe <HAL_SPI_Transmit>
	
	// Data empfangen
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 80008be:	2300      	movs	r3, #0
 80008c0:	75fb      	strb	r3, [r7, #23]
 80008c2:	e00c      	b.n	80008de <ltc6811_read+0x82>
	{
		// Dummy Byte senden
		HAL_SPI_Receive(&hspi4, &data[i*8], 8, 100);
 80008c4:	7dfb      	ldrb	r3, [r7, #23]
 80008c6:	00db      	lsls	r3, r3, #3
 80008c8:	461a      	mov	r2, r3
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	1899      	adds	r1, r3, r2
 80008ce:	2364      	movs	r3, #100	; 0x64
 80008d0:	2208      	movs	r2, #8
 80008d2:	4824      	ldr	r0, [pc, #144]	; (8000964 <ltc6811_read+0x108>)
 80008d4:	f005 fbe1 	bl	800609a <HAL_SPI_Receive>
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 80008d8:	7dfb      	ldrb	r3, [r7, #23]
 80008da:	3301      	adds	r3, #1
 80008dc:	75fb      	strb	r3, [r7, #23]
 80008de:	7dfb      	ldrb	r3, [r7, #23]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d0ef      	beq.n	80008c4 <ltc6811_read+0x68>
	}

	// Pec zuruecksetzen
	pec = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	82bb      	strh	r3, [r7, #20]

	// Pec pruefen
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 80008e8:	2300      	movs	r3, #0
 80008ea:	75bb      	strb	r3, [r7, #22]
 80008ec:	e02a      	b.n	8000944 <ltc6811_read+0xe8>
	{
		// Variante 1, Pec berechnen und pruefen, ob richtiger Pec mitgesendet wurde
		tmp = ((data[i + 6] << 8) + data[i + 7]);
 80008ee:	7dbb      	ldrb	r3, [r7, #22]
 80008f0:	3306      	adds	r3, #6
 80008f2:	683a      	ldr	r2, [r7, #0]
 80008f4:	4413      	add	r3, r2
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	021b      	lsls	r3, r3, #8
 80008fc:	b29a      	uxth	r2, r3
 80008fe:	7dbb      	ldrb	r3, [r7, #22]
 8000900:	3307      	adds	r3, #7
 8000902:	6839      	ldr	r1, [r7, #0]
 8000904:	440b      	add	r3, r1
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	b29b      	uxth	r3, r3
 800090a:	4413      	add	r3, r2
 800090c:	827b      	strh	r3, [r7, #18]
		pec = peclookup(6, &data[i*8]);
 800090e:	7dbb      	ldrb	r3, [r7, #22]
 8000910:	00db      	lsls	r3, r3, #3
 8000912:	461a      	mov	r2, r3
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	4413      	add	r3, r2
 8000918:	4619      	mov	r1, r3
 800091a:	2006      	movs	r0, #6
 800091c:	f000 f840 	bl	80009a0 <peclookup>
 8000920:	4603      	mov	r3, r0
 8000922:	82bb      	strh	r3, [r7, #20]
			uartTransmit("\n", 1);
		}
#endif

		// Pec zuruecksetzen
		pec = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	82bb      	strh	r3, [r7, #20]

		// Variante 2, Daten inklusive Pec mit durch Peccheck pruefen, ob Ergebnis gleich 0 ist
		pec = peccheck(8, &data[i*8]);
 8000928:	7dbb      	ldrb	r3, [r7, #22]
 800092a:	00db      	lsls	r3, r3, #3
 800092c:	461a      	mov	r2, r3
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	4413      	add	r3, r2
 8000932:	4619      	mov	r1, r3
 8000934:	2008      	movs	r0, #8
 8000936:	f000 f867 	bl	8000a08 <peccheck>
 800093a:	4603      	mov	r3, r0
 800093c:	82bb      	strh	r3, [r7, #20]
	for (uint8_t i = 0; i < LTC6811_DEVICES; i++)
 800093e:	7dbb      	ldrb	r3, [r7, #22]
 8000940:	3301      	adds	r3, #1
 8000942:	75bb      	strb	r3, [r7, #22]
 8000944:	7dbb      	ldrb	r3, [r7, #22]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d0d1      	beq.n	80008ee <ltc6811_read+0x92>
#endif
	}


	// ISOCS ausschalten
	ISOCS_DISABLE();
 800094a:	2201      	movs	r2, #1
 800094c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000950:	4803      	ldr	r0, [pc, #12]	; (8000960 <ltc6811_read+0x104>)
 8000952:	f004 f863 	bl	8004a1c <HAL_GPIO_WritePin>
		ITM_SendNumber(data[i]);
	}
	ITM_SendChar('\n');
#endif

	return 0;
 8000956:	2300      	movs	r3, #0
}
 8000958:	4618      	mov	r0, r3
 800095a:	3718      	adds	r7, #24
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40021000 	.word	0x40021000
 8000964:	20000150 	.word	0x20000150

08000968 <peccommand>:
//----------------------------------------------------------------------

// Pec Command bauen
//----------------------------------------------------------------------
uint16_t peccommand(uint16_t command)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	80fb      	strh	r3, [r7, #6]
	// Variable definieren
	uint8_t pec[2];															// pec = Zwischenspeicher 16-Bit Command in 2x 8-Bit Bytes
	
	// 16 Bit Command in 8 Bit Array uebertragen
	pec[1] = (command & 0xFF);												// pec[1] = lower Command Byte
 8000972:	88fb      	ldrh	r3, [r7, #6]
 8000974:	b2db      	uxtb	r3, r3
 8000976:	737b      	strb	r3, [r7, #13]
	pec[0] = ((command >> 8) & 0x07);										// pec[0] = upper Command Byte
 8000978:	88fb      	ldrh	r3, [r7, #6]
 800097a:	0a1b      	lsrs	r3, r3, #8
 800097c:	b29b      	uxth	r3, r3
 800097e:	b2db      	uxtb	r3, r3
 8000980:	f003 0307 	and.w	r3, r3, #7
 8000984:	b2db      	uxtb	r3, r3
 8000986:	733b      	strb	r3, [r7, #12]
	
	// Pec zurueckgeben
	return peclookup(2, pec);
 8000988:	f107 030c 	add.w	r3, r7, #12
 800098c:	4619      	mov	r1, r3
 800098e:	2002      	movs	r0, #2
 8000990:	f000 f806 	bl	80009a0 <peclookup>
 8000994:	4603      	mov	r3, r0
}
 8000996:	4618      	mov	r0, r3
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
	...

080009a0 <peclookup>:
//----------------------------------------------------------------------

// Pec kalculieren (Datasheet ltc6811 Page 76, Datasheet ltc6811 Page 72)
//----------------------------------------------------------------------
uint16_t peclookup(uint8_t len,	uint8_t *data)								// len = Anzahl Byte, data = Daten fuer die Pec ausgewaehlt wird
{
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	6039      	str	r1, [r7, #0]
 80009aa:	71fb      	strb	r3, [r7, #7]
	// Variable definieren
	uint16_t remainder, addr;												// remainder = Zwischenspeicher Pec, addr = Zwischenspeicher Addresse
	remainder = 16;															// Initialisiere reminder mit 16 (0b0000000000010000)
 80009ac:	2310      	movs	r3, #16
 80009ae:	81fb      	strh	r3, [r7, #14]
	
	// Schleife fuer die Pec-Calculation
	for(uint8_t i = 0; i < len; i++)
 80009b0:	2300      	movs	r3, #0
 80009b2:	737b      	strb	r3, [r7, #13]
 80009b4:	e019      	b.n	80009ea <peclookup+0x4a>
	{
		// Kalkuliere Pec Anhand der Lookuptabelle
		addr = ((remainder >> 7) ^ data[i]) & 0xFF;							// Tabellenaddresse berechnen
 80009b6:	89fb      	ldrh	r3, [r7, #14]
 80009b8:	09db      	lsrs	r3, r3, #7
 80009ba:	b29a      	uxth	r2, r3
 80009bc:	7b7b      	ldrb	r3, [r7, #13]
 80009be:	6839      	ldr	r1, [r7, #0]
 80009c0:	440b      	add	r3, r1
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	4053      	eors	r3, r2
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ pec15Table[addr];					// Pec berechnen
 80009ce:	89fb      	ldrh	r3, [r7, #14]
 80009d0:	021b      	lsls	r3, r3, #8
 80009d2:	b21a      	sxth	r2, r3
 80009d4:	897b      	ldrh	r3, [r7, #10]
 80009d6:	490b      	ldr	r1, [pc, #44]	; (8000a04 <peclookup+0x64>)
 80009d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80009dc:	b21b      	sxth	r3, r3
 80009de:	4053      	eors	r3, r2
 80009e0:	b21b      	sxth	r3, r3
 80009e2:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i = 0; i < len; i++)
 80009e4:	7b7b      	ldrb	r3, [r7, #13]
 80009e6:	3301      	adds	r3, #1
 80009e8:	737b      	strb	r3, [r7, #13]
 80009ea:	7b7a      	ldrb	r2, [r7, #13]
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	429a      	cmp	r2, r3
 80009f0:	d3e1      	bcc.n	80009b6 <peclookup+0x16>
//		uartTransmitNumber(data[i], 16);
//		uartTransmit("\n", 1);
	}
	
	// Pec zurueckgeben
	return (remainder << 1);												// Der Pec hat eine 0 als LSB, remainder muss um 1 nach links geshiftet werden
 80009f2:	89fb      	ldrh	r3, [r7, #14]
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	b29b      	uxth	r3, r3
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3714      	adds	r7, #20
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	080095c4 	.word	0x080095c4

08000a08 <peccheck>:
//----------------------------------------------------------------------*/

// Validiere Pec von Daten
//----------------------------------------------------------------------
uint8_t peccheck(uint8_t len, uint8_t *data)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	6039      	str	r1, [r7, #0]
 8000a12:	71fb      	strb	r3, [r7, #7]
	// Variable definieren
	uint16_t pec = peclookup(len, data);
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	6839      	ldr	r1, [r7, #0]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff ffc1 	bl	80009a0 <peclookup>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	81fb      	strh	r3, [r7, #14]

	// Wenn Ergebnis 0, ist Pec OK
	if (pec == 0)
 8000a22:	89fb      	ldrh	r3, [r7, #14]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d101      	bne.n	8000a2c <peccheck+0x24>
	{
		return 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	e000      	b.n	8000a2e <peccheck+0x26>
	}
	// Wenn Ergebnis 1, ist Pec nicht OK
	else
	{
		return 1;
 8000a2c:	2301      	movs	r3, #1
	}
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <ltc6811_check>:
//----------------------------------------------------------------------

// LTC6811 Status auslesen und auswerten
//----------------------------------------------------------------------
uint8_t ltc6811_check(void)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b092      	sub	sp, #72	; 0x48
 8000a3a:	af00      	add	r7, sp, #0
#ifdef DEBUG_LTC6811
	ITM_SendString("Aufruf von Check LTC6811.\n");
#endif

	// Variablen definieren
	uint8_t tmp_data[64] = {0}, error = 0;									// Speicher Registerwerte, Fehlerspeicher
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	f107 0308 	add.w	r3, r7, #8
 8000a44:	223c      	movs	r2, #60	; 0x3c
 8000a46:	2100      	movs	r1, #0
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f008 fa4f 	bl	8008eec <memset>
 8000a4e:	2300      	movs	r3, #0
 8000a50:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8000a54:	f7ff fe04 	bl	8000660 <wakeup_ltc6811>

	// Alle Register zuruecksetzen
	ltc6811(CLRCELL);														// Register Zellspannung auf default setzen
 8000a58:	f240 7011 	movw	r0, #1809	; 0x711
 8000a5c:	f7ff fe28 	bl	80006b0 <ltc6811>
	ltc6811(CLRAUX);														// Register GPIO-Spannung auf default setzen
 8000a60:	f240 7012 	movw	r0, #1810	; 0x712
 8000a64:	f7ff fe24 	bl	80006b0 <ltc6811>
	ltc6811(CLRSTAT);														// Register Interne Messungen auf default setzen
 8000a68:	f240 7013 	movw	r0, #1811	; 0x713
 8000a6c:	f7ff fe20 	bl	80006b0 <ltc6811>

	// Lese Register Status B aus
	ltc6811_read(RDSTATB, &tmp_data[0]);
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	4619      	mov	r1, r3
 8000a74:	2012      	movs	r0, #18
 8000a76:	f7ff fef1 	bl	800085c <ltc6811_read>
		ITM_SendChar('\n');
#endif
	}

	// Selbsttest 1 Digitale Filter
	if (ltc6811_test(ST1 | MD73) == 1)
 8000a7a:	f44f 7090 	mov.w	r0, #288	; 0x120
 8000a7e:	f000 f83f 	bl	8000b00 <ltc6811_test>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d105      	bne.n	8000a94 <ltc6811_check+0x5e>
	{
		error |= (1 << 1);													// Selbsttest 1 nicht bestanden
 8000a88:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a8c:	f043 0302 	orr.w	r3, r3, #2
 8000a90:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#ifdef DEBUG_LTC6811
		ITM_SendString("Selbsttest 1 Fehler");
		ITM_SendChar('\n');
#endif
	}
	HAL_Delay(300);
 8000a94:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a98:	f002 febc 	bl	8003814 <HAL_Delay>

	// Selbsttest 2 Digitale Filter
	if (ltc6811_test(ST2 | MD73) == 1)
 8000a9c:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8000aa0:	f000 f82e 	bl	8000b00 <ltc6811_test>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d105      	bne.n	8000ab6 <ltc6811_check+0x80>
	{
		error |= (1 << 2);													// Selbsttest 2 nicht bestanden
 8000aaa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000aae:	f043 0304 	orr.w	r3, r3, #4
 8000ab2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#ifdef DEBUG_LTC6811
		ITM_SendString("Selbsttest 2 Fehler");
		ITM_SendChar('\n');
#endif
	}
	HAL_Delay(300);
 8000ab6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000aba:	f002 feab 	bl	8003814 <HAL_Delay>

	// Selbsttest Multiplexer
	if (ltc6811_diagn() == 1)
 8000abe:	f000 fa09 	bl	8000ed4 <ltc6811_diagn>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d105      	bne.n	8000ad4 <ltc6811_check+0x9e>
	{
		error |= (1 << 3);													// Multiplexertest nicht bestanden
 8000ac8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000acc:	f043 0308 	orr.w	r3, r3, #8
 8000ad0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#ifdef DEBUG_LTC6811
		ITM_SendString("Multiplexer Fehler");
		ITM_SendChar('\n');
#endif
	}
	HAL_Delay(300);
 8000ad4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000ad8:	f002 fe9c 	bl	8003814 <HAL_Delay>

	// Open Wire Check durchfuehren
	if (ltc6811_openwire() == 1)
 8000adc:	f000 fa1c 	bl	8000f18 <ltc6811_openwire>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d105      	bne.n	8000af2 <ltc6811_check+0xbc>
	{
		error |= (1 << 4);													// Open-Wire Test nicht bestanden
 8000ae6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000aea:	f043 0310 	orr.w	r3, r3, #16
 8000aee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	ITM_SendNumber(error);
	ITM_SendChar('\n');
#endif

	// Fehlercode zurueckgeben
	return error;															// Fehler 0 = alles Ok, Fehler > 0 = Selbsttest fehlerhaft
 8000af2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3748      	adds	r7, #72	; 0x48
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
	...

08000b00 <ltc6811_test>:
//----------------------------------------------------------------------

// Selbsttest Digitale Filter (Datasheet ltc6811 Page 28)
//----------------------------------------------------------------------
uint8_t ltc6811_test(uint16_t command)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b094      	sub	sp, #80	; 0x50
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	80fb      	strh	r3, [r7, #6]
#ifdef DEBUG_LTC6811
	ITM_SendString("Aufruf von Test LTC6811.\n");
#endif

	// Variablen definieren
	uint8_t tmp_data[64] = {0};												// Speicher Registerwerte
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	f107 030c 	add.w	r3, r7, #12
 8000b12:	223c      	movs	r2, #60	; 0x3c
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f008 f9e8 	bl	8008eec <memset>
	uint16_t tmp = 0, test_pattern = 0;										// Zwischenspeicher, Kontrollvariable Selbsttest
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000b22:	2300      	movs	r3, #0
 8000b24:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	// Commands fuer Status senden  Test 1
	ltc6811(CVST | command);												// Digitalfilter Check Zellspannungen
 8000b28:	88fb      	ldrh	r3, [r7, #6]
 8000b2a:	f443 7301 	orr.w	r3, r3, #516	; 0x204
 8000b2e:	f043 0303 	orr.w	r3, r3, #3
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff fdbb 	bl	80006b0 <ltc6811>
	HAL_Delay(300);															// 300ms zwischen den Selbsttests warten
 8000b3a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b3e:	f002 fe69 	bl	8003814 <HAL_Delay>
	ltc6811(AUXST | command);												// Digitalfilter Check GPIO-Spannungen
 8000b42:	88fb      	ldrh	r3, [r7, #6]
 8000b44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b48:	f043 0307 	orr.w	r3, r3, #7
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff fdae 	bl	80006b0 <ltc6811>
	HAL_Delay(300);															// 300ms zwischen den Selbsttests warten
 8000b54:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b58:	f002 fe5c 	bl	8003814 <HAL_Delay>
	ltc6811(STATST | command);												// Digitalfilter Check Interne Messungen
 8000b5c:	88fb      	ldrh	r3, [r7, #6]
 8000b5e:	f443 6381 	orr.w	r3, r3, #1032	; 0x408
 8000b62:	f043 0307 	orr.w	r3, r3, #7
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff fda1 	bl	80006b0 <ltc6811>
	HAL_Delay(300);															// 300ms zwischen den Selbsttests warten
 8000b6e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b72:	f002 fe4f 	bl	8003814 <HAL_Delay>

	// Register auslesen Test 1
	// Spannungsregister
	ltc6811_read(RDCVA, &tmp_data[0]);										// Lese Register CVA zurueck
 8000b76:	f107 0308 	add.w	r3, r7, #8
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	2004      	movs	r0, #4
 8000b7e:	f7ff fe6d 	bl	800085c <ltc6811_read>
	ltc6811_read(RDCVB, &tmp_data[8]);										// Lese Register CVB zurueck
 8000b82:	f107 0308 	add.w	r3, r7, #8
 8000b86:	3308      	adds	r3, #8
 8000b88:	4619      	mov	r1, r3
 8000b8a:	2006      	movs	r0, #6
 8000b8c:	f7ff fe66 	bl	800085c <ltc6811_read>
	ltc6811_read(RDCVC, &tmp_data[16]);										// Lese Register CVC zurueck
 8000b90:	f107 0308 	add.w	r3, r7, #8
 8000b94:	3310      	adds	r3, #16
 8000b96:	4619      	mov	r1, r3
 8000b98:	2008      	movs	r0, #8
 8000b9a:	f7ff fe5f 	bl	800085c <ltc6811_read>
	ltc6811_read(RDCVD, &tmp_data[24]);										// Lese Register CVD zurueck
 8000b9e:	f107 0308 	add.w	r3, r7, #8
 8000ba2:	3318      	adds	r3, #24
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	200a      	movs	r0, #10
 8000ba8:	f7ff fe58 	bl	800085c <ltc6811_read>

	// GPIO-Register
	ltc6811_read(RDAUXA, &tmp_data[32]);									// Lese Register AUXA zurueck
 8000bac:	f107 0308 	add.w	r3, r7, #8
 8000bb0:	3320      	adds	r3, #32
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	200c      	movs	r0, #12
 8000bb6:	f7ff fe51 	bl	800085c <ltc6811_read>
	ltc6811_read(RDAUXB, &tmp_data[40]);									// Lese Register AUXB zurueck
 8000bba:	f107 0308 	add.w	r3, r7, #8
 8000bbe:	3328      	adds	r3, #40	; 0x28
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	200e      	movs	r0, #14
 8000bc4:	f7ff fe4a 	bl	800085c <ltc6811_read>

	// Statusregister
	ltc6811_read(RDSTATA, &tmp_data[48]);									// Lese Register STATA zurueck
 8000bc8:	f107 0308 	add.w	r3, r7, #8
 8000bcc:	3330      	adds	r3, #48	; 0x30
 8000bce:	4619      	mov	r1, r3
 8000bd0:	2010      	movs	r0, #16
 8000bd2:	f7ff fe43 	bl	800085c <ltc6811_read>
	ltc6811_read(RDSTATB, &tmp_data[56]);									// Lese Register STATB zurueck
 8000bd6:	f107 0308 	add.w	r3, r7, #8
 8000bda:	3338      	adds	r3, #56	; 0x38
 8000bdc:	4619      	mov	r1, r3
 8000bde:	2012      	movs	r0, #18
 8000be0:	f7ff fe3c 	bl	800085c <ltc6811_read>

	// Lookup fuer Selbstest digitaler Filter
	// Kontrollvariable heraussuchen
	if (command & MD2714)													// Wenn Sampling Frequenz = MD2714
 8000be4:	88fb      	ldrh	r3, [r7, #6]
 8000be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d032      	beq.n	8000c54 <ltc6811_test+0x154>
	{
		// Wenn ADCOPT gesetzt
		if (Ltc6811_Conf.ADCOPT == 1)
 8000bee:	4bb8      	ldr	r3, [pc, #736]	; (8000ed0 <ltc6811_test+0x3d0>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d013      	beq.n	8000c24 <ltc6811_test+0x124>
		{
			// Wenn Selbsttest 1 gewaehlt
			if (command == ST1)
 8000bfc:	88fb      	ldrh	r3, [r7, #6]
 8000bfe:	2b20      	cmp	r3, #32
 8000c00:	d104      	bne.n	8000c0c <ltc6811_test+0x10c>
			{
				test_pattern = 0x9553;										// Registerwert bei 14kHz
 8000c02:	f249 5353 	movw	r3, #38227	; 0x9553
 8000c06:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000c0a:	e03a      	b.n	8000c82 <ltc6811_test+0x182>
			}
			// Wenn Selbsttest 2 gewaehlt
			else if (command == ST2)
 8000c0c:	88fb      	ldrh	r3, [r7, #6]
 8000c0e:	2b40      	cmp	r3, #64	; 0x40
 8000c10:	d104      	bne.n	8000c1c <ltc6811_test+0x11c>
			{
				test_pattern = 0x6AAC;										// Registerwert bei 14kHz
 8000c12:	f646 23ac 	movw	r3, #27308	; 0x6aac
 8000c16:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000c1a:	e032      	b.n	8000c82 <ltc6811_test+0x182>
			}
			// Bei fehlerhaften Einstellungen
			else
			{
				test_pattern = 0;											// Registerwert = 0 damit Fehler ausloest
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000c22:	e02e      	b.n	8000c82 <ltc6811_test+0x182>
			}
		}
		else																// Wenn ADCOPT nicht gesetzt
		{
			// Wenn Selbsttest 1 gewaehlt
			if (command & ST1)
 8000c24:	88fb      	ldrh	r3, [r7, #6]
 8000c26:	f003 0320 	and.w	r3, r3, #32
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d004      	beq.n	8000c38 <ltc6811_test+0x138>
			{
				test_pattern = 0x9565;										// Registerwert bei 27kHz
 8000c2e:	f249 5365 	movw	r3, #38245	; 0x9565
 8000c32:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000c36:	e024      	b.n	8000c82 <ltc6811_test+0x182>
			}
			// Wenn Selbsttest 2 gewaehlt
			else if (command & ST2)
 8000c38:	88fb      	ldrh	r3, [r7, #6]
 8000c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d004      	beq.n	8000c4c <ltc6811_test+0x14c>
			{
				test_pattern = 0x6A9A;										// Registerwert bei 27kHz
 8000c42:	f646 239a 	movw	r3, #27290	; 0x6a9a
 8000c46:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000c4a:	e01a      	b.n	8000c82 <ltc6811_test+0x182>
			}
			// Bei fehlerhaften Einstellungen
			else
			{
				test_pattern = 0;											// Registerwert = 0 damit Fehler ausloest
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000c52:	e016      	b.n	8000c82 <ltc6811_test+0x182>
		}
	}
	else
	{
		// Wenn Selbsttest 1 gewaehlt
		if (command & ST1)
 8000c54:	88fb      	ldrh	r3, [r7, #6]
 8000c56:	f003 0320 	and.w	r3, r3, #32
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d004      	beq.n	8000c68 <ltc6811_test+0x168>
		{
			test_pattern = 0x9555;											// Registerwert bei allen anderen Sampling Frequenzen
 8000c5e:	f249 5355 	movw	r3, #38229	; 0x9555
 8000c62:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000c66:	e00c      	b.n	8000c82 <ltc6811_test+0x182>
		}
		// Wenn Selbsttest 2 gewaehlt
		else if (command & ST2)
 8000c68:	88fb      	ldrh	r3, [r7, #6]
 8000c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d004      	beq.n	8000c7c <ltc6811_test+0x17c>
		{
			test_pattern = 0x6AAA;											// Registerwert bei allen anderen Sampling Frequenzen
 8000c72:	f646 23aa 	movw	r3, #27306	; 0x6aaa
 8000c76:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000c7a:	e002      	b.n	8000c82 <ltc6811_test+0x182>
		}
		// Bei fehlerhaften Einstellungen
		else
		{
			test_pattern = 0;												// Registerwert = 0 damit Fehler ausloest
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		}
	}

	// Daten pruefen Test 1
	for (uint8_t i=0; i<22; i++)
 8000c82:	2300      	movs	r3, #0
 8000c84:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8000c88:	e117      	b.n	8000eba <ltc6811_test+0x3ba>
	{
		// Auswaehlen welches Register im Array steht
		switch (i)
 8000c8a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000c8e:	2b1d      	cmp	r3, #29
 8000c90:	f200 8105 	bhi.w	8000e9e <ltc6811_test+0x39e>
 8000c94:	a201      	add	r2, pc, #4	; (adr r2, 8000c9c <ltc6811_test+0x19c>)
 8000c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c9a:	bf00      	nop
 8000c9c:	08000d15 	.word	0x08000d15
 8000ca0:	08000d15 	.word	0x08000d15
 8000ca4:	08000d15 	.word	0x08000d15
 8000ca8:	08000d43 	.word	0x08000d43
 8000cac:	08000d43 	.word	0x08000d43
 8000cb0:	08000d43 	.word	0x08000d43
 8000cb4:	08000d73 	.word	0x08000d73
 8000cb8:	08000d73 	.word	0x08000d73
 8000cbc:	08000d73 	.word	0x08000d73
 8000cc0:	08000da5 	.word	0x08000da5
 8000cc4:	08000da5 	.word	0x08000da5
 8000cc8:	08000da5 	.word	0x08000da5
 8000ccc:	08000dd7 	.word	0x08000dd7
 8000cd0:	08000dd7 	.word	0x08000dd7
 8000cd4:	08000dd7 	.word	0x08000dd7
 8000cd8:	08000e09 	.word	0x08000e09
 8000cdc:	08000e09 	.word	0x08000e09
 8000ce0:	08000e09 	.word	0x08000e09
 8000ce4:	08000e3b 	.word	0x08000e3b
 8000ce8:	08000e9f 	.word	0x08000e9f
 8000cec:	08000e3b 	.word	0x08000e3b
 8000cf0:	08000e6d 	.word	0x08000e6d
 8000cf4:	08000e9f 	.word	0x08000e9f
 8000cf8:	08000e9f 	.word	0x08000e9f
 8000cfc:	08000e9f 	.word	0x08000e9f
 8000d00:	08000e9f 	.word	0x08000e9f
 8000d04:	08000e9f 	.word	0x08000e9f
 8000d08:	08000e9f 	.word	0x08000e9f
 8000d0c:	08000e9f 	.word	0x08000e9f
 8000d10:	08000e3b 	.word	0x08000e3b
		{
			// Register CVA
			case 0:
			case 1:
			case 2:
				tmp = ((tmp_data[i*2+1]<<8)|tmp_data[i*2]);					// Register CVA umwandeln
 8000d14:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	3350      	adds	r3, #80	; 0x50
 8000d1e:	443b      	add	r3, r7
 8000d20:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000d24:	021b      	lsls	r3, r3, #8
 8000d26:	b21a      	sxth	r2, r3
 8000d28:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	3350      	adds	r3, #80	; 0x50
 8000d30:	443b      	add	r3, r7
 8000d32:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000d36:	b21b      	sxth	r3, r3
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	b21b      	sxth	r3, r3
 8000d3c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000d40:	e0ae      	b.n	8000ea0 <ltc6811_test+0x3a0>
			// Register CVB
			case 3:
			case 4:
			case 5:
				tmp = ((tmp_data[i*2+3] << 8)|tmp_data[i*2+2]);				// Register CVB umwandeln
 8000d42:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	3303      	adds	r3, #3
 8000d4a:	3350      	adds	r3, #80	; 0x50
 8000d4c:	443b      	add	r3, r7
 8000d4e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000d52:	021b      	lsls	r3, r3, #8
 8000d54:	b21a      	sxth	r2, r3
 8000d56:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	3350      	adds	r3, #80	; 0x50
 8000d60:	443b      	add	r3, r7
 8000d62:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000d66:	b21b      	sxth	r3, r3
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	b21b      	sxth	r3, r3
 8000d6c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000d70:	e096      	b.n	8000ea0 <ltc6811_test+0x3a0>
			// Register CVC
			case 6:
			case 7:
			case 8:
				tmp = ((tmp_data[(i+2)*2+1] << 8)|tmp_data[(i+2)*2]);		// Register CVC umwandeln
 8000d72:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000d76:	3302      	adds	r3, #2
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	3350      	adds	r3, #80	; 0x50
 8000d7e:	443b      	add	r3, r7
 8000d80:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000d84:	021b      	lsls	r3, r3, #8
 8000d86:	b21a      	sxth	r2, r3
 8000d88:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000d8c:	3302      	adds	r3, #2
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	3350      	adds	r3, #80	; 0x50
 8000d92:	443b      	add	r3, r7
 8000d94:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000d98:	b21b      	sxth	r3, r3
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	b21b      	sxth	r3, r3
 8000d9e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000da2:	e07d      	b.n	8000ea0 <ltc6811_test+0x3a0>
			// Register CVD
			case 9:
			case 10:
			case 11:
				tmp = ((tmp_data[(i+2)*2+3] << 8)|tmp_data[(i+2)*2+2]);		// Register CVD umwandeln
 8000da4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000da8:	3302      	adds	r3, #2
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	3303      	adds	r3, #3
 8000dae:	3350      	adds	r3, #80	; 0x50
 8000db0:	443b      	add	r3, r7
 8000db2:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000db6:	021b      	lsls	r3, r3, #8
 8000db8:	b21a      	sxth	r2, r3
 8000dba:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000dbe:	3303      	adds	r3, #3
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	3350      	adds	r3, #80	; 0x50
 8000dc4:	443b      	add	r3, r7
 8000dc6:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000dca:	b21b      	sxth	r3, r3
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	b21b      	sxth	r3, r3
 8000dd0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000dd4:	e064      	b.n	8000ea0 <ltc6811_test+0x3a0>
			// Register AUXA
			case 12:
			case 13:
			case 14:
				tmp = ((tmp_data[(i+4)*2+1] << 8)|tmp_data[(i+4)*2]);		// Register AUXA umwandeln
 8000dd6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000dda:	3304      	adds	r3, #4
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	3301      	adds	r3, #1
 8000de0:	3350      	adds	r3, #80	; 0x50
 8000de2:	443b      	add	r3, r7
 8000de4:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000de8:	021b      	lsls	r3, r3, #8
 8000dea:	b21a      	sxth	r2, r3
 8000dec:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000df0:	3304      	adds	r3, #4
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	3350      	adds	r3, #80	; 0x50
 8000df6:	443b      	add	r3, r7
 8000df8:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000dfc:	b21b      	sxth	r3, r3
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	b21b      	sxth	r3, r3
 8000e02:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000e06:	e04b      	b.n	8000ea0 <ltc6811_test+0x3a0>
			// Register AUXB
			case 15:
			case 16:
			case 17:
				tmp = ((tmp_data[(i+4)*2+3] << 8)|tmp_data[(i+4)*2+2]);		// Register AUXB umwandeln
 8000e08:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000e0c:	3304      	adds	r3, #4
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	3303      	adds	r3, #3
 8000e12:	3350      	adds	r3, #80	; 0x50
 8000e14:	443b      	add	r3, r7
 8000e16:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000e1a:	021b      	lsls	r3, r3, #8
 8000e1c:	b21a      	sxth	r2, r3
 8000e1e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000e22:	3305      	adds	r3, #5
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	3350      	adds	r3, #80	; 0x50
 8000e28:	443b      	add	r3, r7
 8000e2a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000e2e:	b21b      	sxth	r3, r3
 8000e30:	4313      	orrs	r3, r2
 8000e32:	b21b      	sxth	r3, r3
 8000e34:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000e38:	e032      	b.n	8000ea0 <ltc6811_test+0x3a0>
			// Register STATA
			case 18:
			case 29:
			case 20:
				tmp = ((tmp_data[(i+6)*2+1] << 8)|tmp_data[(i+6)*2]);		// Register STATA umwandeln
 8000e3a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000e3e:	3306      	adds	r3, #6
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	3301      	adds	r3, #1
 8000e44:	3350      	adds	r3, #80	; 0x50
 8000e46:	443b      	add	r3, r7
 8000e48:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000e4c:	021b      	lsls	r3, r3, #8
 8000e4e:	b21a      	sxth	r2, r3
 8000e50:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000e54:	3306      	adds	r3, #6
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	3350      	adds	r3, #80	; 0x50
 8000e5a:	443b      	add	r3, r7
 8000e5c:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000e60:	b21b      	sxth	r3, r3
 8000e62:	4313      	orrs	r3, r2
 8000e64:	b21b      	sxth	r3, r3
 8000e66:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000e6a:	e019      	b.n	8000ea0 <ltc6811_test+0x3a0>
			// Register STATB
			case 21:
				tmp = ((tmp_data[(i+6)*2+3] << 8)|tmp_data[(i+6)*2+2]);		// Register STATB umwandeln
 8000e6c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000e70:	3306      	adds	r3, #6
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	3303      	adds	r3, #3
 8000e76:	3350      	adds	r3, #80	; 0x50
 8000e78:	443b      	add	r3, r7
 8000e7a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000e7e:	021b      	lsls	r3, r3, #8
 8000e80:	b21a      	sxth	r2, r3
 8000e82:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000e86:	3307      	adds	r3, #7
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	3350      	adds	r3, #80	; 0x50
 8000e8c:	443b      	add	r3, r7
 8000e8e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000e92:	b21b      	sxth	r3, r3
 8000e94:	4313      	orrs	r3, r2
 8000e96:	b21b      	sxth	r3, r3
 8000e98:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				break;
 8000e9c:	e000      	b.n	8000ea0 <ltc6811_test+0x3a0>
			// Kein Register
			default:
				break;
 8000e9e:	bf00      	nop
		}

		// Vergleiche Registerwert mit Vorgabewert aus Datenblatt
		if (tmp != test_pattern)
 8000ea0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8000ea4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d001      	beq.n	8000eb0 <ltc6811_test+0x3b0>
#ifdef DEBUG_LTC6811
			ITM_SendString("Test failed: ");
			ITM_SendNumber(i);
			ITM_SendChar('\n');
#endif
			return 1;														// Selbsttest 1 nicht OK
 8000eac:	2301      	movs	r3, #1
 8000eae:	e00a      	b.n	8000ec6 <ltc6811_test+0x3c6>
	for (uint8_t i=0; i<22; i++)
 8000eb0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8000eba:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000ebe:	2b15      	cmp	r3, #21
 8000ec0:	f67f aee3 	bls.w	8000c8a <ltc6811_test+0x18a>
		}
	}
#ifdef DEBUG_LTC6811
	ITM_SendString("Test passed\n");
#endif
	return 0;																// Selbsttest 1 OK
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3750      	adds	r7, #80	; 0x50
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000028 	.word	0x20000028

08000ed4 <ltc6811_diagn>:
//----------------------------------------------------------------------

// Selbstdiagnose Multiplexer (Datasheet ltc6811 Page 27)
//----------------------------------------------------------------------
uint8_t ltc6811_diagn(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
#ifdef DEBUG_LTC6811
	ITM_SendString("Aufruf von Diagnostic LTC6811.\n");
#endif

	// Variablen definieren
	uint8_t tmp_data[8] = {0};												// Speicher Registerwerte
 8000eda:	2300      	movs	r3, #0
 8000edc:	603b      	str	r3, [r7, #0]
 8000ede:	2300      	movs	r3, #0
 8000ee0:	607b      	str	r3, [r7, #4]

	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8000ee2:	f7ff fbbd 	bl	8000660 <wakeup_ltc6811>

	// Command senden
	ltc6811(DIAGN);															// Multiplexer Check
 8000ee6:	f240 7015 	movw	r0, #1813	; 0x715
 8000eea:	f7ff fbe1 	bl	80006b0 <ltc6811>

	// Verzoegerungszeit 10ms, DIAG Befehl braucht ca. 400µs bis 4ms
	HAL_Delay(10);
 8000eee:	200a      	movs	r0, #10
 8000ef0:	f002 fc90 	bl	8003814 <HAL_Delay>

	// Lese Register
	ltc6811_read(RDSTATB, &tmp_data[0]);									// Lese Status B Register fuer Multiplexer Check
 8000ef4:	463b      	mov	r3, r7
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	2012      	movs	r0, #18
 8000efa:	f7ff fcaf 	bl	800085c <ltc6811_read>

	// Multiplexer pruefen
	if (tmp_data[5] & (1 << 1))
 8000efe:	797b      	ldrb	r3, [r7, #5]
 8000f00:	f003 0302 	and.w	r3, r3, #2
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <ltc6811_diagn+0x38>
	{
		return 1;															// Multiplexertest nicht OK
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e000      	b.n	8000f0e <ltc6811_diagn+0x3a>
	}

	return 0;																// Multiplexertest OK
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <ltc6811_openwire>:
//----------------------------------------------------------------------

// LTC6811 Openwire check
//----------------------------------------------------------------------
uint8_t ltc6811_openwire(void)
{
 8000f18:	b590      	push	{r4, r7, lr}
 8000f1a:	b09b      	sub	sp, #108	; 0x6c
 8000f1c:	af00      	add	r7, sp, #0
#ifdef DEBUG_LTC6811
	ITM_SendString("Aufruf von Openwire LTC6811.\n");
#endif

	// Arrays definieren
	uint8_t pulldown[32] = {0}, pullup[32] = {0};							// Speicher Registerwerte
 8000f1e:	2300      	movs	r3, #0
 8000f20:	647b      	str	r3, [r7, #68]	; 0x44
 8000f22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]
 8000f30:	611a      	str	r2, [r3, #16]
 8000f32:	615a      	str	r2, [r3, #20]
 8000f34:	619a      	str	r2, [r3, #24]
 8000f36:	2300      	movs	r3, #0
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
 8000f3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
 8000f48:	611a      	str	r2, [r3, #16]
 8000f4a:	615a      	str	r2, [r3, #20]
 8000f4c:	619a      	str	r2, [r3, #24]
	uint16_t cell[1] = {0}, openwire[13] = {0};								// Speicher Zelle, Openwire vergleic Threshold
 8000f4e:	2300      	movs	r3, #0
 8000f50:	843b      	strh	r3, [r7, #32]
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
 8000f60:	615a      	str	r2, [r3, #20]
 8000f62:	831a      	strh	r2, [r3, #24]

	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8000f64:	f7ff fb7c 	bl	8000660 <wakeup_ltc6811>

	// Pullup Current, drei Durchgaenge
	for (uint8_t i = 0; i < 2; i++)
 8000f68:	2300      	movs	r3, #0
 8000f6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000f6e:	e00c      	b.n	8000f8a <ltc6811_openwire+0x72>
	{

		// Commands fuer Openwire Test
		ltc6811(ADOW | MD262 | PUP);										// Pullup Current
 8000f70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f74:	f7ff fb9c 	bl	80006b0 <ltc6811>
		HAL_Delay(300);
 8000f78:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000f7c:	f002 fc4a 	bl	8003814 <HAL_Delay>
	for (uint8_t i = 0; i < 2; i++)
 8000f80:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000f84:	3301      	adds	r3, #1
 8000f86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000f8a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d9ee      	bls.n	8000f70 <ltc6811_openwire+0x58>
	}

	// Register auslesen OpenWire
	ltc6811_read(RDCVA, &pullup[0]);
 8000f92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f96:	4619      	mov	r1, r3
 8000f98:	2004      	movs	r0, #4
 8000f9a:	f7ff fc5f 	bl	800085c <ltc6811_read>
	ltc6811_read(RDCVB, &pullup[8]);
 8000f9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa2:	3308      	adds	r3, #8
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	2006      	movs	r0, #6
 8000fa8:	f7ff fc58 	bl	800085c <ltc6811_read>
	ltc6811_read(RDCVC, &pullup[16]);
 8000fac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb0:	3310      	adds	r3, #16
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	2008      	movs	r0, #8
 8000fb6:	f7ff fc51 	bl	800085c <ltc6811_read>
	ltc6811_read(RDCVD, &pullup[24]);
 8000fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fbe:	3318      	adds	r3, #24
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	200a      	movs	r0, #10
 8000fc4:	f7ff fc4a 	bl	800085c <ltc6811_read>


	// Verzoegerungszeit zum wecken des LTC6811
	wakeup_ltc6811();
 8000fc8:	f7ff fb4a 	bl	8000660 <wakeup_ltc6811>

	// Pulldown Current, drei Durchgaenge
	for (uint8_t i = 0; i < 2; i++)
 8000fcc:	2300      	movs	r3, #0
 8000fce:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8000fd2:	e00c      	b.n	8000fee <ltc6811_openwire+0xd6>
	{

		// Commands fuer Openwire Test
		ltc6811(ADOW | MD262 | PUP);											// Pulldown Current
 8000fd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fd8:	f7ff fb6a 	bl	80006b0 <ltc6811>
		HAL_Delay(300);
 8000fdc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000fe0:	f002 fc18 	bl	8003814 <HAL_Delay>
	for (uint8_t i = 0; i < 2; i++)
 8000fe4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000fe8:	3301      	adds	r3, #1
 8000fea:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8000fee:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d9ee      	bls.n	8000fd4 <ltc6811_openwire+0xbc>
	}

	// Register auslesen OpenWire
	ltc6811_read(RDCVA, &pulldown[0]);
 8000ff6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	2004      	movs	r0, #4
 8000ffe:	f7ff fc2d 	bl	800085c <ltc6811_read>
	ltc6811_read(RDCVB, &pulldown[8]);
 8001002:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001006:	3308      	adds	r3, #8
 8001008:	4619      	mov	r1, r3
 800100a:	2006      	movs	r0, #6
 800100c:	f7ff fc26 	bl	800085c <ltc6811_read>
	ltc6811_read(RDCVC, &pulldown[16]);
 8001010:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001014:	3310      	adds	r3, #16
 8001016:	4619      	mov	r1, r3
 8001018:	2008      	movs	r0, #8
 800101a:	f7ff fc1f 	bl	800085c <ltc6811_read>
	ltc6811_read(RDCVD, &pulldown[24]);
 800101e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001022:	3318      	adds	r3, #24
 8001024:	4619      	mov	r1, r3
 8001026:	200a      	movs	r0, #10
 8001028:	f7ff fc18 	bl	800085c <ltc6811_read>

	// Schleife zum umformatieren der Daten
	for (uint8_t i = 0; i < 13; i++)
 800102c:	2300      	movs	r3, #0
 800102e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8001032:	e12d      	b.n	8001290 <ltc6811_openwire+0x378>
	{
		// Auswahl welche Leitung
		switch (i)
 8001034:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001038:	2b0c      	cmp	r3, #12
 800103a:	f200 8123 	bhi.w	8001284 <ltc6811_openwire+0x36c>
 800103e:	a201      	add	r2, pc, #4	; (adr r2, 8001044 <ltc6811_openwire+0x12c>)
 8001040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001044:	08001079 	.word	0x08001079
 8001048:	0800109d 	.word	0x0800109d
 800104c:	0800109d 	.word	0x0800109d
 8001050:	0800110b 	.word	0x0800110b
 8001054:	0800110b 	.word	0x0800110b
 8001058:	0800110b 	.word	0x0800110b
 800105c:	0800117d 	.word	0x0800117d
 8001060:	0800117d 	.word	0x0800117d
 8001064:	0800117d 	.word	0x0800117d
 8001068:	080011ef 	.word	0x080011ef
 800106c:	080011ef 	.word	0x080011ef
 8001070:	080011ef 	.word	0x080011ef
 8001074:	08001261 	.word	0x08001261
		{
			// Leitungen Zelle 1/2 bis 3/4
			case 0:
				openwire[i] = ((pulldown[1] << 8) + pulldown[0]);
 8001078:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800107c:	b29b      	uxth	r3, r3
 800107e:	021b      	lsls	r3, r3, #8
 8001080:	b299      	uxth	r1, r3
 8001082:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001086:	b29a      	uxth	r2, r3
 8001088:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800108c:	440a      	add	r2, r1
 800108e:	b292      	uxth	r2, r2
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	3368      	adds	r3, #104	; 0x68
 8001094:	443b      	add	r3, r7
 8001096:	f823 2c64 	strh.w	r2, [r3, #-100]
				break;
 800109a:	e0f4      	b.n	8001286 <ltc6811_openwire+0x36e>
			case 1:
			case 2:
				openwire[i] = getDifference(((pullup[i*2+1] << 8) + pullup[i*2]), ((pulldown[i*2+1] << 8) + pulldown[i*2]));
 800109c:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	3301      	adds	r3, #1
 80010a4:	3368      	adds	r3, #104	; 0x68
 80010a6:	443b      	add	r3, r7
 80010a8:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	021b      	lsls	r3, r3, #8
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	3368      	adds	r3, #104	; 0x68
 80010ba:	443b      	add	r3, r7
 80010bc:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	4413      	add	r3, r2
 80010c4:	b298      	uxth	r0, r3
 80010c6:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	3301      	adds	r3, #1
 80010ce:	3368      	adds	r3, #104	; 0x68
 80010d0:	443b      	add	r3, r7
 80010d2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	021b      	lsls	r3, r3, #8
 80010da:	b29a      	uxth	r2, r3
 80010dc:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	3368      	adds	r3, #104	; 0x68
 80010e4:	443b      	add	r3, r7
 80010e6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	4413      	add	r3, r2
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	f897 4065 	ldrb.w	r4, [r7, #101]	; 0x65
 80010f4:	4619      	mov	r1, r3
 80010f6:	f7ff fa91 	bl	800061c <getDifference>
 80010fa:	4603      	mov	r3, r0
 80010fc:	461a      	mov	r2, r3
 80010fe:	0063      	lsls	r3, r4, #1
 8001100:	3368      	adds	r3, #104	; 0x68
 8001102:	443b      	add	r3, r7
 8001104:	f823 2c64 	strh.w	r2, [r3, #-100]
				break;
 8001108:	e0bd      	b.n	8001286 <ltc6811_openwire+0x36e>
			// Leitungen Zelle 4/5 bis 6/7
			case 3:
			case 4:
			case 5:
				openwire[i] = getDifference(((pullup[i*2+3] << 8) + pullup[i*2+2]), ((pulldown[i*2+3] << 8) + pulldown[i*2+2]));
 800110a:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	3303      	adds	r3, #3
 8001112:	3368      	adds	r3, #104	; 0x68
 8001114:	443b      	add	r3, r7
 8001116:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 800111a:	b29b      	uxth	r3, r3
 800111c:	021b      	lsls	r3, r3, #8
 800111e:	b29a      	uxth	r2, r3
 8001120:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001124:	3301      	adds	r3, #1
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	3368      	adds	r3, #104	; 0x68
 800112a:	443b      	add	r3, r7
 800112c:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001130:	b29b      	uxth	r3, r3
 8001132:	4413      	add	r3, r2
 8001134:	b298      	uxth	r0, r3
 8001136:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	3303      	adds	r3, #3
 800113e:	3368      	adds	r3, #104	; 0x68
 8001140:	443b      	add	r3, r7
 8001142:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001146:	b29b      	uxth	r3, r3
 8001148:	021b      	lsls	r3, r3, #8
 800114a:	b29a      	uxth	r2, r3
 800114c:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001150:	3301      	adds	r3, #1
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	3368      	adds	r3, #104	; 0x68
 8001156:	443b      	add	r3, r7
 8001158:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800115c:	b29b      	uxth	r3, r3
 800115e:	4413      	add	r3, r2
 8001160:	b29b      	uxth	r3, r3
 8001162:	f897 4065 	ldrb.w	r4, [r7, #101]	; 0x65
 8001166:	4619      	mov	r1, r3
 8001168:	f7ff fa58 	bl	800061c <getDifference>
 800116c:	4603      	mov	r3, r0
 800116e:	461a      	mov	r2, r3
 8001170:	0063      	lsls	r3, r4, #1
 8001172:	3368      	adds	r3, #104	; 0x68
 8001174:	443b      	add	r3, r7
 8001176:	f823 2c64 	strh.w	r2, [r3, #-100]
				break;
 800117a:	e084      	b.n	8001286 <ltc6811_openwire+0x36e>
			// Leitungen Zelle 7/8 bis 9/10
			case 6:
			case 7:
			case 8:
				openwire[i] = getDifference(((pullup[i*2+5] << 8) + pullup[i*2+4]), ((pulldown[i*2+5] << 8) + pulldown[i*2+4]));
 800117c:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	3305      	adds	r3, #5
 8001184:	3368      	adds	r3, #104	; 0x68
 8001186:	443b      	add	r3, r7
 8001188:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 800118c:	b29b      	uxth	r3, r3
 800118e:	021b      	lsls	r3, r3, #8
 8001190:	b29a      	uxth	r2, r3
 8001192:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001196:	3302      	adds	r3, #2
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	3368      	adds	r3, #104	; 0x68
 800119c:	443b      	add	r3, r7
 800119e:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	4413      	add	r3, r2
 80011a6:	b298      	uxth	r0, r3
 80011a8:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	3305      	adds	r3, #5
 80011b0:	3368      	adds	r3, #104	; 0x68
 80011b2:	443b      	add	r3, r7
 80011b4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	021b      	lsls	r3, r3, #8
 80011bc:	b29a      	uxth	r2, r3
 80011be:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80011c2:	3302      	adds	r3, #2
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	3368      	adds	r3, #104	; 0x68
 80011c8:	443b      	add	r3, r7
 80011ca:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	4413      	add	r3, r2
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	f897 4065 	ldrb.w	r4, [r7, #101]	; 0x65
 80011d8:	4619      	mov	r1, r3
 80011da:	f7ff fa1f 	bl	800061c <getDifference>
 80011de:	4603      	mov	r3, r0
 80011e0:	461a      	mov	r2, r3
 80011e2:	0063      	lsls	r3, r4, #1
 80011e4:	3368      	adds	r3, #104	; 0x68
 80011e6:	443b      	add	r3, r7
 80011e8:	f823 2c64 	strh.w	r2, [r3, #-100]
				break;
 80011ec:	e04b      	b.n	8001286 <ltc6811_openwire+0x36e>
			// Leitungen Zelle 10/11 und 11/12
			case 9:
			case 10:
			case 11:
				openwire[i] = getDifference(((pullup[i*2+7] << 8) + pullup[i*2+6]), ((pulldown[i*2+7] << 8) + pulldown[i*2+6]));
 80011ee:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	3307      	adds	r3, #7
 80011f6:	3368      	adds	r3, #104	; 0x68
 80011f8:	443b      	add	r3, r7
 80011fa:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80011fe:	b29b      	uxth	r3, r3
 8001200:	021b      	lsls	r3, r3, #8
 8001202:	b29a      	uxth	r2, r3
 8001204:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001208:	3303      	adds	r3, #3
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	3368      	adds	r3, #104	; 0x68
 800120e:	443b      	add	r3, r7
 8001210:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001214:	b29b      	uxth	r3, r3
 8001216:	4413      	add	r3, r2
 8001218:	b298      	uxth	r0, r3
 800121a:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	3307      	adds	r3, #7
 8001222:	3368      	adds	r3, #104	; 0x68
 8001224:	443b      	add	r3, r7
 8001226:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800122a:	b29b      	uxth	r3, r3
 800122c:	021b      	lsls	r3, r3, #8
 800122e:	b29a      	uxth	r2, r3
 8001230:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001234:	3303      	adds	r3, #3
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	3368      	adds	r3, #104	; 0x68
 800123a:	443b      	add	r3, r7
 800123c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001240:	b29b      	uxth	r3, r3
 8001242:	4413      	add	r3, r2
 8001244:	b29b      	uxth	r3, r3
 8001246:	f897 4065 	ldrb.w	r4, [r7, #101]	; 0x65
 800124a:	4619      	mov	r1, r3
 800124c:	f7ff f9e6 	bl	800061c <getDifference>
 8001250:	4603      	mov	r3, r0
 8001252:	461a      	mov	r2, r3
 8001254:	0063      	lsls	r3, r4, #1
 8001256:	3368      	adds	r3, #104	; 0x68
 8001258:	443b      	add	r3, r7
 800125a:	f823 2c64 	strh.w	r2, [r3, #-100]
				break;
 800125e:	e012      	b.n	8001286 <ltc6811_openwire+0x36e>
			case 12:
				openwire[i] = ((pullup[29] << 8) + pullup[28]);
 8001260:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001264:	b29b      	uxth	r3, r3
 8001266:	021b      	lsls	r3, r3, #8
 8001268:	b299      	uxth	r1, r3
 800126a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800126e:	b29a      	uxth	r2, r3
 8001270:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001274:	440a      	add	r2, r1
 8001276:	b292      	uxth	r2, r2
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	3368      	adds	r3, #104	; 0x68
 800127c:	443b      	add	r3, r7
 800127e:	f823 2c64 	strh.w	r2, [r3, #-100]
				break;
 8001282:	e000      	b.n	8001286 <ltc6811_openwire+0x36e>
			default:
				break;
 8001284:	bf00      	nop
	for (uint8_t i = 0; i < 13; i++)
 8001286:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800128a:	3301      	adds	r3, #1
 800128c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8001290:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001294:	2b0c      	cmp	r3, #12
 8001296:	f67f aecd 	bls.w	8001034 <ltc6811_openwire+0x11c>
		}
	}

	// Schleife zum Pruefen der Daten
	for (uint8_t i = 1; i < 12; i++)
 800129a:	2301      	movs	r3, #1
 800129c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 80012a0:	e01a      	b.n	80012d8 <ltc6811_openwire+0x3c0>
	{
		// Vergleiche Messdaten mit Threshold
		if (openwire[i] > OPENWIRE_THRESHOLD)
 80012a2:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	3368      	adds	r3, #104	; 0x68
 80012aa:	443b      	add	r3, r7
 80012ac:	f833 3c64 	ldrh.w	r3, [r3, #-100]
 80012b0:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80012b4:	d90b      	bls.n	80012ce <ltc6811_openwire+0x3b6>
		{
			cell[0] |= (1 << i);											// Wenn Threshold ueberschritten, Offene Leitung
 80012b6:	8c3b      	ldrh	r3, [r7, #32]
 80012b8:	b21a      	sxth	r2, r3
 80012ba:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80012be:	2101      	movs	r1, #1
 80012c0:	fa01 f303 	lsl.w	r3, r1, r3
 80012c4:	b21b      	sxth	r3, r3
 80012c6:	4313      	orrs	r3, r2
 80012c8:	b21b      	sxth	r3, r3
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	843b      	strh	r3, [r7, #32]
	for (uint8_t i = 1; i < 12; i++)
 80012ce:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80012d2:	3301      	adds	r3, #1
 80012d4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 80012d8:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80012dc:	2b0b      	cmp	r3, #11
 80012de:	d9e0      	bls.n	80012a2 <ltc6811_openwire+0x38a>
		}
	}

	// Offene Leitung erste Zelle messen
	if (openwire[0] == 0)
 80012e0:	88bb      	ldrh	r3, [r7, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d104      	bne.n	80012f0 <ltc6811_openwire+0x3d8>
	{
		cell[0] |= (1 << 0);												// Unterste Leitung Offen
 80012e6:	8c3b      	ldrh	r3, [r7, #32]
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	843b      	strh	r3, [r7, #32]
	}

	// Offene Leitung letzte Zelle messen
	if (openwire[12] == 0)
 80012f0:	8bbb      	ldrh	r3, [r7, #28]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d104      	bne.n	8001300 <ltc6811_openwire+0x3e8>
	{
		cell[0] |= (1 << 12);												// Oberste Leitung offen
 80012f6:	8c3b      	ldrh	r3, [r7, #32]
 80012f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	843b      	strh	r3, [r7, #32]
	}

	// Wenn offene Leitung vorhanden
	if (cell[0] != 0)
 8001300:	8c3b      	ldrh	r3, [r7, #32]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <ltc6811_openwire+0x3f2>
	{
		return 1;															// Open Wire nicht OK
 8001306:	2301      	movs	r3, #1
 8001308:	e000      	b.n	800130c <ltc6811_openwire+0x3f4>
	}

	return 0;																// Open Wire OK
 800130a:	2300      	movs	r3, #0
}
 800130c:	4618      	mov	r0, r3
 800130e:	376c      	adds	r7, #108	; 0x6c
 8001310:	46bd      	mov	sp, r7
 8001312:	bd90      	pop	{r4, r7, pc}

08001314 <collectHardwareInfo>:


// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
	#define STRING_STM_DEVICE_ID			"\nSTM32 Device ID:\t\t\t"
	#define STRING_STM_REVISION				"\nSTM32 Revision ID:\t\t\t"
	#define STRING_STM_FREQ					"\nSTM32 CPU-Freq:\t\t\t\t"
	#define STRING_STM_UUID					"\nSTM32 UUID:\t\t\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 800131a:	2115      	movs	r1, #21
 800131c:	483b      	ldr	r0, [pc, #236]	; (800140c <collectHardwareInfo+0xf8>)
 800131e:	f7ff f915 	bl	800054c <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);									// Mikrocontroller Typ
 8001322:	f002 fab1 	bl	8003888 <HAL_GetDEVID>
 8001326:	4603      	mov	r3, r0
 8001328:	210a      	movs	r1, #10
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff f922 	bl	8000574 <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 8001330:	2117      	movs	r1, #23
 8001332:	4837      	ldr	r0, [pc, #220]	; (8001410 <collectHardwareInfo+0xfc>)
 8001334:	f7ff f90a 	bl	800054c <uartTransmit>

	switch(HAL_GetREVID())													// Mikrocontroller Revision
 8001338:	f002 fa9a 	bl	8003870 <HAL_GetREVID>
 800133c:	4603      	mov	r3, r0
 800133e:	f242 0201 	movw	r2, #8193	; 0x2001
 8001342:	4293      	cmp	r3, r2
 8001344:	d016      	beq.n	8001374 <collectHardwareInfo+0x60>
 8001346:	f242 0201 	movw	r2, #8193	; 0x2001
 800134a:	4293      	cmp	r3, r2
 800134c:	d817      	bhi.n	800137e <collectHardwareInfo+0x6a>
 800134e:	f241 0201 	movw	r2, #4097	; 0x1001
 8001352:	4293      	cmp	r3, r2
 8001354:	d004      	beq.n	8001360 <collectHardwareInfo+0x4c>
 8001356:	f241 0203 	movw	r2, #4099	; 0x1003
 800135a:	4293      	cmp	r3, r2
 800135c:	d005      	beq.n	800136a <collectHardwareInfo+0x56>
 800135e:	e00e      	b.n	800137e <collectHardwareInfo+0x6a>
	{
		case 0x1001:
			uartTransmit("Z", 1);
 8001360:	2101      	movs	r1, #1
 8001362:	482c      	ldr	r0, [pc, #176]	; (8001414 <collectHardwareInfo+0x100>)
 8001364:	f7ff f8f2 	bl	800054c <uartTransmit>
			break;
 8001368:	e011      	b.n	800138e <collectHardwareInfo+0x7a>
		case 0x1003:
			uartTransmit("Y", 1);
 800136a:	2101      	movs	r1, #1
 800136c:	482a      	ldr	r0, [pc, #168]	; (8001418 <collectHardwareInfo+0x104>)
 800136e:	f7ff f8ed 	bl	800054c <uartTransmit>
			break;
 8001372:	e00c      	b.n	800138e <collectHardwareInfo+0x7a>
		case 0x2001:
			uartTransmit("X", 1);
 8001374:	2101      	movs	r1, #1
 8001376:	4829      	ldr	r0, [pc, #164]	; (800141c <collectHardwareInfo+0x108>)
 8001378:	f7ff f8e8 	bl	800054c <uartTransmit>
			break;
 800137c:	e007      	b.n	800138e <collectHardwareInfo+0x7a>
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 800137e:	f002 fa77 	bl	8003870 <HAL_GetREVID>
 8001382:	4603      	mov	r3, r0
 8001384:	210a      	movs	r1, #10
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff f8f4 	bl	8000574 <uartTransmitNumber>
			break;
 800138c:	bf00      	nop
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 800138e:	2115      	movs	r1, #21
 8001390:	4823      	ldr	r0, [pc, #140]	; (8001420 <collectHardwareInfo+0x10c>)
 8001392:	f7ff f8db 	bl	800054c <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();						// Systemfrequenz ausgeben
 8001396:	f003 ff45 	bl	8005224 <HAL_RCC_GetSysClockFreq>
 800139a:	6078      	str	r0, [r7, #4]
		frequency = frequency / 1000000;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4a21      	ldr	r2, [pc, #132]	; (8001424 <collectHardwareInfo+0x110>)
 80013a0:	fba2 2303 	umull	r2, r3, r2, r3
 80013a4:	0c9b      	lsrs	r3, r3, #18
 80013a6:	607b      	str	r3, [r7, #4]

		uartTransmitNumber(frequency, 10);
 80013a8:	210a      	movs	r1, #10
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff f8e2 	bl	8000574 <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 80013b0:	2104      	movs	r1, #4
 80013b2:	481d      	ldr	r0, [pc, #116]	; (8001428 <collectHardwareInfo+0x114>)
 80013b4:	f7ff f8ca 	bl	800054c <uartTransmit>


	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 80013b8:	2111      	movs	r1, #17
 80013ba:	481c      	ldr	r0, [pc, #112]	; (800142c <collectHardwareInfo+0x118>)
 80013bc:	f7ff f8c6 	bl	800054c <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);									// UID0 ausgeben
 80013c0:	f002 fa70 	bl	80038a4 <HAL_GetUIDw0>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2110      	movs	r1, #16
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff f8d3 	bl	8000574 <uartTransmitNumber>

	uartTransmit(" ", 1);
 80013ce:	2101      	movs	r1, #1
 80013d0:	4817      	ldr	r0, [pc, #92]	; (8001430 <collectHardwareInfo+0x11c>)
 80013d2:	f7ff f8bb 	bl	800054c <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);									// UID1 ausgeben
 80013d6:	f002 fa71 	bl	80038bc <HAL_GetUIDw1>
 80013da:	4603      	mov	r3, r0
 80013dc:	2110      	movs	r1, #16
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff f8c8 	bl	8000574 <uartTransmitNumber>

	uartTransmit(" ", 1);
 80013e4:	2101      	movs	r1, #1
 80013e6:	4812      	ldr	r0, [pc, #72]	; (8001430 <collectHardwareInfo+0x11c>)
 80013e8:	f7ff f8b0 	bl	800054c <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);									// UID2 ausgeben
 80013ec:	f002 fa72 	bl	80038d4 <HAL_GetUIDw2>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2110      	movs	r1, #16
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff f8bd 	bl	8000574 <uartTransmitNumber>

	uartTransmit("\n", 1);
 80013fa:	2101      	movs	r1, #1
 80013fc:	480d      	ldr	r0, [pc, #52]	; (8001434 <collectHardwareInfo+0x120>)
 80013fe:	f7ff f8a5 	bl	800054c <uartTransmit>
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	08009038 	.word	0x08009038
 8001410:	08009050 	.word	0x08009050
 8001414:	08009068 	.word	0x08009068
 8001418:	0800906c 	.word	0x0800906c
 800141c:	08009070 	.word	0x08009070
 8001420:	08009074 	.word	0x08009074
 8001424:	431bde83 	.word	0x431bde83
 8001428:	0800908c 	.word	0x0800908c
 800142c:	08009094 	.word	0x08009094
 8001430:	080090a8 	.word	0x080090a8
 8001434:	080090ac 	.word	0x080090ac

08001438 <collectMiddlewareInfo>:
//----------------------------------------------------------------------

// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
	#define STRING_CMSIS_VERSION			"\nCMSIS Version:\t\t\t\t"
	#define STRING_HAL_VERSION				"\nHAL Version:\t\t\t\t"
	#define STRING_RTOS_CMSIS_VERSION		"\nRTOS CMSIS Version:\t\t\t"
	#define STRING_RTOS_VERSION				"\nRTOS Version:\t\t\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 800143c:	2114      	movs	r1, #20
 800143e:	4824      	ldr	r0, [pc, #144]	; (80014d0 <collectMiddlewareInfo+0x98>)
 8001440:	f7ff f884 	bl	800054c <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);						// CMSIS Version anzeigen
 8001444:	210a      	movs	r1, #10
 8001446:	2005      	movs	r0, #5
 8001448:	f7ff f894 	bl	8000574 <uartTransmitNumber>
	uartTransmit(".", 1);
 800144c:	2101      	movs	r1, #1
 800144e:	4821      	ldr	r0, [pc, #132]	; (80014d4 <collectMiddlewareInfo+0x9c>)
 8001450:	f7ff f87c 	bl	800054c <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);						// CMSIS Version anzeigen
 8001454:	210a      	movs	r1, #10
 8001456:	2001      	movs	r0, #1
 8001458:	f7ff f88c 	bl	8000574 <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));			// Hal Version anzeigen
 800145c:	2112      	movs	r1, #18
 800145e:	481e      	ldr	r0, [pc, #120]	; (80014d8 <collectMiddlewareInfo+0xa0>)
 8001460:	f7ff f874 	bl	800054c <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 8001464:	f002 f9fa 	bl	800385c <HAL_GetHalVersion>
 8001468:	4603      	mov	r3, r0
 800146a:	0e1b      	lsrs	r3, r3, #24
 800146c:	b2db      	uxtb	r3, r3
 800146e:	210a      	movs	r1, #10
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff f87f 	bl	8000574 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8001476:	2101      	movs	r1, #1
 8001478:	4816      	ldr	r0, [pc, #88]	; (80014d4 <collectMiddlewareInfo+0x9c>)
 800147a:	f7ff f867 	bl	800054c <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 800147e:	f002 f9ed 	bl	800385c <HAL_GetHalVersion>
 8001482:	4603      	mov	r3, r0
 8001484:	0c1b      	lsrs	r3, r3, #16
 8001486:	b2db      	uxtb	r3, r3
 8001488:	210a      	movs	r1, #10
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff f872 	bl	8000574 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8001490:	2101      	movs	r1, #1
 8001492:	4810      	ldr	r0, [pc, #64]	; (80014d4 <collectMiddlewareInfo+0x9c>)
 8001494:	f7ff f85a 	bl	800054c <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 8001498:	f002 f9e0 	bl	800385c <HAL_GetHalVersion>
 800149c:	4603      	mov	r3, r0
 800149e:	0a1b      	lsrs	r3, r3, #8
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	210a      	movs	r1, #10
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff f865 	bl	8000574 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 80014aa:	2101      	movs	r1, #1
 80014ac:	4809      	ldr	r0, [pc, #36]	; (80014d4 <collectMiddlewareInfo+0x9c>)
 80014ae:	f7ff f84d 	bl	800054c <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 80014b2:	f002 f9d3 	bl	800385c <HAL_GetHalVersion>
 80014b6:	4603      	mov	r3, r0
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	210a      	movs	r1, #10
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff f859 	bl	8000574 <uartTransmitNumber>

	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);						// FreeRTOS Kernel Version anzeigen
#endif

	uartTransmit("\n", 1);
 80014c2:	2101      	movs	r1, #1
 80014c4:	4805      	ldr	r0, [pc, #20]	; (80014dc <collectMiddlewareInfo+0xa4>)
 80014c6:	f7ff f841 	bl	800054c <uartTransmit>
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	080090b0 	.word	0x080090b0
 80014d4:	080090c4 	.word	0x080090c4
 80014d8:	080090c8 	.word	0x080090c8
 80014dc:	080090ac 	.word	0x080090ac

080014e0 <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
	#define STRING_GIT_TAG_COMMIT			"\nGit Tags commit:\t\t\t"
	#define STRING_GIT_TAG_DIRTY			"\nGit Dirty commit:\t\t\t"
	#define STRING_BUILD_DATE				"\nBuild Date:\t\t\t\t"
	#define STRING_BUILD_TIME				"\nBuild Time:\t\t\t\t"

	uartTransmit(STRING_GIT_COMMIT, sizeof(STRING_GIT_COMMIT));
 80014e4:	2111      	movs	r1, #17
 80014e6:	4826      	ldr	r0, [pc, #152]	; (8001580 <collectSoftwareInfo+0xa0>)
 80014e8:	f7ff f830 	bl	800054c <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));							// Git Commit anzeigen
 80014ec:	2108      	movs	r1, #8
 80014ee:	4825      	ldr	r0, [pc, #148]	; (8001584 <collectSoftwareInfo+0xa4>)
 80014f0:	f7ff f82c 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 80014f4:	2111      	movs	r1, #17
 80014f6:	4824      	ldr	r0, [pc, #144]	; (8001588 <collectSoftwareInfo+0xa8>)
 80014f8:	f7ff f828 	bl	800054c <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));							// Git Branch anzeigen
 80014fc:	2108      	movs	r1, #8
 80014fe:	4823      	ldr	r0, [pc, #140]	; (800158c <collectSoftwareInfo+0xac>)
 8001500:	f7ff f824 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 8001504:	210f      	movs	r1, #15
 8001506:	4822      	ldr	r0, [pc, #136]	; (8001590 <collectSoftwareInfo+0xb0>)
 8001508:	f7ff f820 	bl	800054c <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));								// Git Hash anzeigen
 800150c:	2129      	movs	r1, #41	; 0x29
 800150e:	4821      	ldr	r0, [pc, #132]	; (8001594 <collectSoftwareInfo+0xb4>)
 8001510:	f7ff f81c 	bl	800054c <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8001514:	2101      	movs	r1, #1
 8001516:	4820      	ldr	r0, [pc, #128]	; (8001598 <collectSoftwareInfo+0xb8>)
 8001518:	f7ff f818 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 800151c:	2116      	movs	r1, #22
 800151e:	481f      	ldr	r0, [pc, #124]	; (800159c <collectSoftwareInfo+0xbc>)
 8001520:	f7ff f814 	bl	800054c <uartTransmit>
	uartTransmit(GIT_LAST_TAG, sizeof(GIT_LAST_TAG));						// Git letzten Tags anzeigen
 8001524:	2105      	movs	r1, #5
 8001526:	481e      	ldr	r0, [pc, #120]	; (80015a0 <collectSoftwareInfo+0xc0>)
 8001528:	f7ff f810 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 800152c:	2115      	movs	r1, #21
 800152e:	481d      	ldr	r0, [pc, #116]	; (80015a4 <collectSoftwareInfo+0xc4>)
 8001530:	f7ff f80c 	bl	800054c <uartTransmit>
	uartTransmit(GIT_TAG_COMMIT, sizeof(GIT_TAG_COMMIT));					// Git Tags Commit anzeigen
 8001534:	2108      	movs	r1, #8
 8001536:	481c      	ldr	r0, [pc, #112]	; (80015a8 <collectSoftwareInfo+0xc8>)
 8001538:	f7ff f808 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_TAG_DIRTY, sizeof(STRING_GIT_TAG_DIRTY));
 800153c:	2116      	movs	r1, #22
 800153e:	481b      	ldr	r0, [pc, #108]	; (80015ac <collectSoftwareInfo+0xcc>)
 8001540:	f7ff f804 	bl	800054c <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY, sizeof(GIT_TAG_DIRTY));						// Git Dirty Commit anzeigen
 8001544:	2111      	movs	r1, #17
 8001546:	481a      	ldr	r0, [pc, #104]	; (80015b0 <collectSoftwareInfo+0xd0>)
 8001548:	f7ff f800 	bl	800054c <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 800154c:	2101      	movs	r1, #1
 800154e:	4812      	ldr	r0, [pc, #72]	; (8001598 <collectSoftwareInfo+0xb8>)
 8001550:	f7fe fffc 	bl	800054c <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 8001554:	2111      	movs	r1, #17
 8001556:	4817      	ldr	r0, [pc, #92]	; (80015b4 <collectSoftwareInfo+0xd4>)
 8001558:	f7fe fff8 	bl	800054c <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));							// Kompilierdatum anzeigen
 800155c:	210b      	movs	r1, #11
 800155e:	4816      	ldr	r0, [pc, #88]	; (80015b8 <collectSoftwareInfo+0xd8>)
 8001560:	f7fe fff4 	bl	800054c <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 8001564:	2111      	movs	r1, #17
 8001566:	4815      	ldr	r0, [pc, #84]	; (80015bc <collectSoftwareInfo+0xdc>)
 8001568:	f7fe fff0 	bl	800054c <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));							// Kompilierzeit anzeigen
 800156c:	2109      	movs	r1, #9
 800156e:	4814      	ldr	r0, [pc, #80]	; (80015c0 <collectSoftwareInfo+0xe0>)
 8001570:	f7fe ffec 	bl	800054c <uartTransmit>

	uartTransmit("\n", 1);													// Leerzeile einfuegen
 8001574:	2101      	movs	r1, #1
 8001576:	4808      	ldr	r0, [pc, #32]	; (8001598 <collectSoftwareInfo+0xb8>)
 8001578:	f7fe ffe8 	bl	800054c <uartTransmit>
}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}
 8001580:	080090dc 	.word	0x080090dc
 8001584:	080090f0 	.word	0x080090f0
 8001588:	080090f8 	.word	0x080090f8
 800158c:	0800910c 	.word	0x0800910c
 8001590:	08009114 	.word	0x08009114
 8001594:	08009124 	.word	0x08009124
 8001598:	080090ac 	.word	0x080090ac
 800159c:	08009150 	.word	0x08009150
 80015a0:	08009168 	.word	0x08009168
 80015a4:	08009170 	.word	0x08009170
 80015a8:	08009188 	.word	0x08009188
 80015ac:	08009190 	.word	0x08009190
 80015b0:	080091a8 	.word	0x080091a8
 80015b4:	080091bc 	.word	0x080091bc
 80015b8:	080091d0 	.word	0x080091d0
 80015bc:	080091dc 	.word	0x080091dc
 80015c0:	080091f0 	.word	0x080091f0

080015c4 <collectGitcounts>:
//----------------------------------------------------------------------

// Collects Git count information and prints it
//----------------------------------------------------------------------
void collectGitcounts(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
	#define STRING_GIT_OVERALL_COMMIT_COUNT	"\nGit Overall count:\t\t\t"
	#define STRING_GIT_BRANCH_COMMIT_COUNT	"\nGit Branch commit count:\t\t"
	#define STRING_GIT_ACTIVE_BRANCHES		"\nGit active Branches:\t\t\t\t"
	#define STRING_GIT_TAG_COUNT			"\nGit Tags count:\t\t\t\t"

	uartTransmit(STRING_GIT_TAG_DIRTY_COUNT, sizeof(STRING_GIT_TAG_DIRTY_COUNT));
 80015c8:	2115      	movs	r1, #21
 80015ca:	4814      	ldr	r0, [pc, #80]	; (800161c <collectGitcounts+0x58>)
 80015cc:	f7fe ffbe 	bl	800054c <uartTransmit>
	uartTransmit(GIT_TAG_DIRTY_COUNT, sizeof(GIT_TAG_DIRTY_COUNT));			// Git zaehle Dirty commits nach letztem Tags und Anzahl anzeigen
 80015d0:	2103      	movs	r1, #3
 80015d2:	4813      	ldr	r0, [pc, #76]	; (8001620 <collectGitcounts+0x5c>)
 80015d4:	f7fe ffba 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_OVERALL_COMMIT_COUNT, sizeof(STRING_GIT_OVERALL_COMMIT_COUNT));
 80015d8:	2117      	movs	r1, #23
 80015da:	4812      	ldr	r0, [pc, #72]	; (8001624 <collectGitcounts+0x60>)
 80015dc:	f7fe ffb6 	bl	800054c <uartTransmit>
	uartTransmit(GIT_OVERALL_COMMIT_COUNT, sizeof(GIT_OVERALL_COMMIT_COUNT));// Git alle Commits zaehlen und Anzahl anzeigen
 80015e0:	2103      	movs	r1, #3
 80015e2:	4811      	ldr	r0, [pc, #68]	; (8001628 <collectGitcounts+0x64>)
 80015e4:	f7fe ffb2 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH_COMMIT_COUNT, sizeof(STRING_GIT_BRANCH_COMMIT_COUNT));
 80015e8:	211c      	movs	r1, #28
 80015ea:	4810      	ldr	r0, [pc, #64]	; (800162c <collectGitcounts+0x68>)
 80015ec:	f7fe ffae 	bl	800054c <uartTransmit>
	uartTransmit(GIT_BRANCH_COMMIT_COUNT, sizeof(GIT_BRANCH_COMMIT_COUNT));	// Git Branch Commits zaehken und Anzahl anzeigen
 80015f0:	2103      	movs	r1, #3
 80015f2:	480f      	ldr	r0, [pc, #60]	; (8001630 <collectGitcounts+0x6c>)
 80015f4:	f7fe ffaa 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_LAST_TAG, sizeof(STRING_GIT_LAST_TAG));
 80015f8:	2116      	movs	r1, #22
 80015fa:	480e      	ldr	r0, [pc, #56]	; (8001634 <collectGitcounts+0x70>)
 80015fc:	f7fe ffa6 	bl	800054c <uartTransmit>
	uartTransmit(GIT_ACTIVE_BRANCHES, sizeof(GIT_ACTIVE_BRANCHES));			// Git aktive Branches zaehlen und Anzahl anzeigen
 8001600:	2102      	movs	r1, #2
 8001602:	480d      	ldr	r0, [pc, #52]	; (8001638 <collectGitcounts+0x74>)
 8001604:	f7fe ffa2 	bl	800054c <uartTransmit>

	uartTransmit(STRING_GIT_TAG_COMMIT, sizeof(STRING_GIT_TAG_COMMIT));
 8001608:	2115      	movs	r1, #21
 800160a:	480c      	ldr	r0, [pc, #48]	; (800163c <collectGitcounts+0x78>)
 800160c:	f7fe ff9e 	bl	800054c <uartTransmit>
	uartTransmit(GIT_TAG_COUNT, sizeof(GIT_TAG_COUNT));						// Git Tags zaehlen und Anzahl anzeigen
 8001610:	2102      	movs	r1, #2
 8001612:	480b      	ldr	r0, [pc, #44]	; (8001640 <collectGitcounts+0x7c>)
 8001614:	f7fe ff9a 	bl	800054c <uartTransmit>
}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}
 800161c:	080091fc 	.word	0x080091fc
 8001620:	08009214 	.word	0x08009214
 8001624:	08009218 	.word	0x08009218
 8001628:	08009230 	.word	0x08009230
 800162c:	08009234 	.word	0x08009234
 8001630:	08009250 	.word	0x08009250
 8001634:	08009150 	.word	0x08009150
 8001638:	08009254 	.word	0x08009254
 800163c:	08009170 	.word	0x08009170
 8001640:	08009258 	.word	0x08009258

08001644 <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
	#define STRING_HARDWARE_TITEL			"\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL			"\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL			"\n\t --Software--\n"
	#define STRING_GIT_COUNTS				"\n\t --Git counts--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 8001648:	2111      	movs	r1, #17
 800164a:	480e      	ldr	r0, [pc, #56]	; (8001684 <collectSystemInfo+0x40>)
 800164c:	f7fe ff7e 	bl	800054c <uartTransmit>
	collectHardwareInfo();													// Sammelt Hardware Informationen und gibt diese ueber Uart aus
 8001650:	f7ff fe60 	bl	8001314 <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 8001654:	2111      	movs	r1, #17
 8001656:	480c      	ldr	r0, [pc, #48]	; (8001688 <collectSystemInfo+0x44>)
 8001658:	f7fe ff78 	bl	800054c <uartTransmit>
	collectSoftwareInfo();													// Sammelt Software Informationen und gibt diese ueber Uart aus
 800165c:	f7ff ff40 	bl	80014e0 <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 8001660:	2113      	movs	r1, #19
 8001662:	480a      	ldr	r0, [pc, #40]	; (800168c <collectSystemInfo+0x48>)
 8001664:	f7fe ff72 	bl	800054c <uartTransmit>
	collectMiddlewareInfo();												// Sammelt Middleware Informationen und gibt diese ueber Uart aus
 8001668:	f7ff fee6 	bl	8001438 <collectMiddlewareInfo>

	uartTransmit(STRING_GIT_COUNTS, sizeof(STRING_GIT_COUNTS));
 800166c:	2113      	movs	r1, #19
 800166e:	4808      	ldr	r0, [pc, #32]	; (8001690 <collectSystemInfo+0x4c>)
 8001670:	f7fe ff6c 	bl	800054c <uartTransmit>
	collectGitcounts();														// Sammelt Git count Informationen und gibt diese ueber Uart aus
 8001674:	f7ff ffa6 	bl	80015c4 <collectGitcounts>

	uartTransmit("\n\n\n", 3);
 8001678:	2103      	movs	r1, #3
 800167a:	4806      	ldr	r0, [pc, #24]	; (8001694 <collectSystemInfo+0x50>)
 800167c:	f7fe ff66 	bl	800054c <uartTransmit>
}
 8001680:	bf00      	nop
 8001682:	bd80      	pop	{r7, pc}
 8001684:	0800925c 	.word	0x0800925c
 8001688:	08009270 	.word	0x08009270
 800168c:	08009284 	.word	0x08009284
 8001690:	08009298 	.word	0x08009298
 8001694:	080092ac 	.word	0x080092ac

08001698 <readResetSource>:
//----------------------------------------------------------------------

// Collects Reset source Flag microcontroller
//----------------------------------------------------------------------
reset_reason readResetSource(void)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
	reset_reason reset_flags = STARTUP;
 800169e:	2300      	movs	r3, #0
 80016a0:	71fb      	strb	r3, [r7, #7]

	// Pruefe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 80016a2:	4b25      	ldr	r3, [pc, #148]	; (8001738 <readResetSource+0xa0>)
 80016a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d002      	beq.n	80016b4 <readResetSource+0x1c>
	{
		reset_flags += IWDG1;
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	3301      	adds	r3, #1
 80016b2:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 80016b4:	4b20      	ldr	r3, [pc, #128]	; (8001738 <readResetSource+0xa0>)
 80016b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d002      	beq.n	80016c6 <readResetSource+0x2e>
	{
		reset_flags += WWDG1;
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	3302      	adds	r3, #2
 80016c4:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 80016c6:	4b1c      	ldr	r3, [pc, #112]	; (8001738 <readResetSource+0xa0>)
 80016c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	da02      	bge.n	80016d4 <readResetSource+0x3c>
	{
		reset_flags += CPURST1;
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	3304      	adds	r3, #4
 80016d2:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 80016d4:	4b18      	ldr	r3, [pc, #96]	; (8001738 <readResetSource+0xa0>)
 80016d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d002      	beq.n	80016e6 <readResetSource+0x4e>
	{
		reset_flags += BORST1;
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	3308      	adds	r3, #8
 80016e4:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 80016e6:	4b14      	ldr	r3, [pc, #80]	; (8001738 <readResetSource+0xa0>)
 80016e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d002      	beq.n	80016f8 <readResetSource+0x60>
	{
		reset_flags += PORST1;
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	3310      	adds	r3, #16
 80016f6:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 80016f8:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <readResetSource+0xa0>)
 80016fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d002      	beq.n	800170a <readResetSource+0x72>
	{
		reset_flags += SFTRST1;
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	3320      	adds	r3, #32
 8001708:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 800170a:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <readResetSource+0xa0>)
 800170c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800170e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d002      	beq.n	800171c <readResetSource+0x84>
	{
		reset_flags += PINRST1;
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	3340      	adds	r3, #64	; 0x40
 800171a:	71fb      	strb	r3, [r7, #7]
	}

	// Loesche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <readResetSource+0xa0>)
 800171e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001720:	4a05      	ldr	r2, [pc, #20]	; (8001738 <readResetSource+0xa0>)
 8001722:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001726:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
 8001728:	79fb      	ldrb	r3, [r7, #7]
}
 800172a:	4618      	mov	r0, r3
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	40023800 	.word	0x40023800

0800173c <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	71fb      	strb	r3, [r7, #7]
	// Returns für Absatz nach Neustart.
	uartTransmit("\r\r\r\r\r\r", 6);
 8001746:	2106      	movs	r1, #6
 8001748:	482a      	ldr	r0, [pc, #168]	; (80017f4 <printResetSource+0xb8>)
 800174a:	f7fe feff 	bl	800054c <uartTransmit>


	if (reset_flags == STARTUP)											// Regulärer Start
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d104      	bne.n	800175e <printResetSource+0x22>
	{
		uartTransmit("Regular Start\r\n", 15);
 8001754:	210f      	movs	r1, #15
 8001756:	4828      	ldr	r0, [pc, #160]	; (80017f8 <printResetSource+0xbc>)
 8001758:	f7fe fef8 	bl	800054c <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 800175c:	e046      	b.n	80017ec <printResetSource+0xb0>
		if (reset_flags & IWDG1)											// Interner watchdog Reset
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	2b00      	cmp	r3, #0
 8001766:	d003      	beq.n	8001770 <printResetSource+0x34>
			uartTransmit("Interner Watchdog Reset\n", 24);
 8001768:	2118      	movs	r1, #24
 800176a:	4824      	ldr	r0, [pc, #144]	; (80017fc <printResetSource+0xc0>)
 800176c:	f7fe feee 	bl	800054c <uartTransmit>
		if (reset_flags & WWDG1)											// Window watchdog Reset
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <printResetSource+0x46>
			uartTransmit("Window Watchdog Reset\n", 22);
 800177a:	2116      	movs	r1, #22
 800177c:	4820      	ldr	r0, [pc, #128]	; (8001800 <printResetSource+0xc4>)
 800177e:	f7fe fee5 	bl	800054c <uartTransmit>
		if (reset_flags & CPURST1)											// CPU Reset
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	2b00      	cmp	r3, #0
 800178a:	d003      	beq.n	8001794 <printResetSource+0x58>
			uartTransmit("CPU Reset\n", 10);
 800178c:	210a      	movs	r1, #10
 800178e:	481d      	ldr	r0, [pc, #116]	; (8001804 <printResetSource+0xc8>)
 8001790:	f7fe fedc 	bl	800054c <uartTransmit>
		if (reset_flags & BORST1)											// Brown out Reset
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	f003 0308 	and.w	r3, r3, #8
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <printResetSource+0x6a>
			uartTransmit("Brown Out Reset\n", 16);
 800179e:	2110      	movs	r1, #16
 80017a0:	4819      	ldr	r0, [pc, #100]	; (8001808 <printResetSource+0xcc>)
 80017a2:	f7fe fed3 	bl	800054c <uartTransmit>
		if (reset_flags & PORST1)											//Power on Reset / Power down Reser
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	f003 0310 	and.w	r3, r3, #16
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d003      	beq.n	80017b8 <printResetSource+0x7c>
			uartTransmit("Power On Reset\n", 15);
 80017b0:	210f      	movs	r1, #15
 80017b2:	4816      	ldr	r0, [pc, #88]	; (800180c <printResetSource+0xd0>)
 80017b4:	f7fe feca 	bl	800054c <uartTransmit>
		if (reset_flags & SFTRST1)											// Software Reset
 80017b8:	79fb      	ldrb	r3, [r7, #7]
 80017ba:	f003 0320 	and.w	r3, r3, #32
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <printResetSource+0x8e>
			uartTransmit("Software Reset\n", 15);
 80017c2:	210f      	movs	r1, #15
 80017c4:	4812      	ldr	r0, [pc, #72]	; (8001810 <printResetSource+0xd4>)
 80017c6:	f7fe fec1 	bl	800054c <uartTransmit>
		if (reset_flags & PINRST1)											//NRST pin
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d003      	beq.n	80017dc <printResetSource+0xa0>
			uartTransmit("PIN Reset\n", 10);
 80017d4:	210a      	movs	r1, #10
 80017d6:	480f      	ldr	r0, [pc, #60]	; (8001814 <printResetSource+0xd8>)
 80017d8:	f7fe feb8 	bl	800054c <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
 80017dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	da03      	bge.n	80017ec <printResetSource+0xb0>
			uartTransmit("RMVF\n", 5);
 80017e4:	2105      	movs	r1, #5
 80017e6:	480c      	ldr	r0, [pc, #48]	; (8001818 <printResetSource+0xdc>)
 80017e8:	f7fe feb0 	bl	800054c <uartTransmit>
}
 80017ec:	bf00      	nop
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	080092b0 	.word	0x080092b0
 80017f8:	080092b8 	.word	0x080092b8
 80017fc:	080092c8 	.word	0x080092c8
 8001800:	080092e4 	.word	0x080092e4
 8001804:	080092fc 	.word	0x080092fc
 8001808:	08009308 	.word	0x08009308
 800180c:	0800931c 	.word	0x0800931c
 8001810:	0800932c 	.word	0x0800932c
 8001814:	0800933c 	.word	0x0800933c
 8001818:	08009348 	.word	0x08009348

0800181c <hal_error>:
//----------------------------------------------------------------------

// Hal Error auswerten und ausgeben
//----------------------------------------------------------------------
void hal_error(uint8_t status)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG
	if (status == HAL_OK) {													// HAL OK
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d104      	bne.n	8001836 <hal_error+0x1a>
		uartTransmit("HAL OK\n", 7);
 800182c:	2107      	movs	r1, #7
 800182e:	480f      	ldr	r0, [pc, #60]	; (800186c <hal_error+0x50>)
 8001830:	f7fe fe8c 	bl	800054c <uartTransmit>
	}
	else if (status == HAL_TIMEOUT) {										// HAL Timeout
		uartTransmit("HAL TIMEOUT\n", 12);
	}
#endif
}
 8001834:	e016      	b.n	8001864 <hal_error+0x48>
	else if (status == HAL_ERROR) {											// HAL Error
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d104      	bne.n	8001846 <hal_error+0x2a>
		uartTransmit("HAL ERROR\n", 10);
 800183c:	210a      	movs	r1, #10
 800183e:	480c      	ldr	r0, [pc, #48]	; (8001870 <hal_error+0x54>)
 8001840:	f7fe fe84 	bl	800054c <uartTransmit>
}
 8001844:	e00e      	b.n	8001864 <hal_error+0x48>
	else if (status == HAL_BUSY) {											// HAL Beschaeftigt
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	2b02      	cmp	r3, #2
 800184a:	d104      	bne.n	8001856 <hal_error+0x3a>
		uartTransmit("HAL BUSY\n", 9);
 800184c:	2109      	movs	r1, #9
 800184e:	4809      	ldr	r0, [pc, #36]	; (8001874 <hal_error+0x58>)
 8001850:	f7fe fe7c 	bl	800054c <uartTransmit>
}
 8001854:	e006      	b.n	8001864 <hal_error+0x48>
	else if (status == HAL_TIMEOUT) {										// HAL Timeout
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	2b03      	cmp	r3, #3
 800185a:	d103      	bne.n	8001864 <hal_error+0x48>
		uartTransmit("HAL TIMEOUT\n", 12);
 800185c:	210c      	movs	r1, #12
 800185e:	4806      	ldr	r0, [pc, #24]	; (8001878 <hal_error+0x5c>)
 8001860:	f7fe fe74 	bl	800054c <uartTransmit>
}
 8001864:	bf00      	nop
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	08009350 	.word	0x08009350
 8001870:	08009358 	.word	0x08009358
 8001874:	08009364 	.word	0x08009364
 8001878:	08009370 	.word	0x08009370

0800187c <readall_inputs>:
//----------------------------------------------------------------------

// Lese alle Eingaenge
//----------------------------------------------------------------------
void readall_inputs(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
	// Systemeingaenge einlesen
	system_in.IMD_PWM = HAL_GPIO_ReadPin(IMD_PWM_GPIO_Port, IMD_PWM_Pin);						// Eingang IMD PWM
 8001880:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001884:	4850      	ldr	r0, [pc, #320]	; (80019c8 <readall_inputs+0x14c>)
 8001886:	f003 f8b1 	bl	80049ec <HAL_GPIO_ReadPin>
 800188a:	4603      	mov	r3, r0
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	b2d9      	uxtb	r1, r3
 8001892:	4a4e      	ldr	r2, [pc, #312]	; (80019cc <readall_inputs+0x150>)
 8001894:	7813      	ldrb	r3, [r2, #0]
 8001896:	f361 03c3 	bfi	r3, r1, #3, #1
 800189a:	7013      	strb	r3, [r2, #0]
	system_in.KL15 = HAL_GPIO_ReadPin(KL15_GPIO_Port, KL15_Pin);								// Eingang Auto an
 800189c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018a0:	484b      	ldr	r0, [pc, #300]	; (80019d0 <readall_inputs+0x154>)
 80018a2:	f003 f8a3 	bl	80049ec <HAL_GPIO_ReadPin>
 80018a6:	4603      	mov	r3, r0
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	b2d9      	uxtb	r1, r3
 80018ae:	4a47      	ldr	r2, [pc, #284]	; (80019cc <readall_inputs+0x150>)
 80018b0:	7813      	ldrb	r3, [r2, #0]
 80018b2:	f361 1304 	bfi	r3, r1, #4, #1
 80018b6:	7013      	strb	r3, [r2, #0]
	system_in.Crash = HAL_GPIO_ReadPin(CRASH_GPIO_Port, CRASH_Pin);								// Crash Eingang
 80018b8:	2101      	movs	r1, #1
 80018ba:	4846      	ldr	r0, [pc, #280]	; (80019d4 <readall_inputs+0x158>)
 80018bc:	f003 f896 	bl	80049ec <HAL_GPIO_ReadPin>
 80018c0:	4603      	mov	r3, r0
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	b2d9      	uxtb	r1, r3
 80018c8:	4a40      	ldr	r2, [pc, #256]	; (80019cc <readall_inputs+0x150>)
 80018ca:	7813      	ldrb	r3, [r2, #0]
 80018cc:	f361 1345 	bfi	r3, r1, #5, #1
 80018d0:	7013      	strb	r3, [r2, #0]
	system_in.Wakeup = HAL_GPIO_ReadPin(HW_WAKE_GPIO_Port, HW_WAKE_Pin);						// Eingang Hardware Wakeup
 80018d2:	2104      	movs	r1, #4
 80018d4:	483f      	ldr	r0, [pc, #252]	; (80019d4 <readall_inputs+0x158>)
 80018d6:	f003 f889 	bl	80049ec <HAL_GPIO_ReadPin>
 80018da:	4603      	mov	r3, r0
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	b2d9      	uxtb	r1, r3
 80018e2:	4a3a      	ldr	r2, [pc, #232]	; (80019cc <readall_inputs+0x150>)
 80018e4:	7813      	ldrb	r3, [r2, #0]
 80018e6:	f361 1386 	bfi	r3, r1, #6, #1
 80018ea:	7013      	strb	r3, [r2, #0]

	// SDC-Eingaenge einlesen
	sdc_in.IMD_OK_IN = HAL_GPIO_ReadPin(IMD_OK_IN_GPIO_Port, IMD_OK_IN_Pin);					// IMD OK, Akku
 80018ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018f0:	4835      	ldr	r0, [pc, #212]	; (80019c8 <readall_inputs+0x14c>)
 80018f2:	f003 f87b 	bl	80049ec <HAL_GPIO_ReadPin>
 80018f6:	4603      	mov	r3, r0
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	b2d9      	uxtb	r1, r3
 80018fe:	4a36      	ldr	r2, [pc, #216]	; (80019d8 <readall_inputs+0x15c>)
 8001900:	7813      	ldrb	r3, [r2, #0]
 8001902:	f361 0300 	bfi	r3, r1, #0, #1
 8001906:	7013      	strb	r3, [r2, #0]
	sdc_in.HVIL = HAL_GPIO_ReadPin(SENSE_SDC_HVIL_GPIO_Port, SENSE_SDC_HVIL_Pin);				// Shutdown-Circuit HVIL, OK
 8001908:	2108      	movs	r1, #8
 800190a:	482f      	ldr	r0, [pc, #188]	; (80019c8 <readall_inputs+0x14c>)
 800190c:	f003 f86e 	bl	80049ec <HAL_GPIO_ReadPin>
 8001910:	4603      	mov	r3, r0
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	b2d9      	uxtb	r1, r3
 8001918:	4a2f      	ldr	r2, [pc, #188]	; (80019d8 <readall_inputs+0x15c>)
 800191a:	7813      	ldrb	r3, [r2, #0]
 800191c:	f361 0341 	bfi	r3, r1, #1, #1
 8001920:	7013      	strb	r3, [r2, #0]
	sdc_in.MotorSDC = HAL_GPIO_ReadPin(SENSE_SDC_MOTOR_GPIO_Port, SENSE_SDC_MOTOR_Pin);			// Shutdown-Circuit Akku, OK
 8001922:	2120      	movs	r1, #32
 8001924:	4828      	ldr	r0, [pc, #160]	; (80019c8 <readall_inputs+0x14c>)
 8001926:	f003 f861 	bl	80049ec <HAL_GPIO_ReadPin>
 800192a:	4603      	mov	r3, r0
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	b2d9      	uxtb	r1, r3
 8001932:	4a29      	ldr	r2, [pc, #164]	; (80019d8 <readall_inputs+0x15c>)
 8001934:	7813      	ldrb	r3, [r2, #0]
 8001936:	f361 0382 	bfi	r3, r1, #2, #1
 800193a:	7013      	strb	r3, [r2, #0]
	sdc_in.BTB_SDC = HAL_GPIO_ReadPin(SENSE_SDC_BTB_GPIO_Port, SENSE_SDC_BTB_Pin);				// Shutdown-Circuit Bamocar, OK
 800193c:	2110      	movs	r1, #16
 800193e:	4822      	ldr	r0, [pc, #136]	; (80019c8 <readall_inputs+0x14c>)
 8001940:	f003 f854 	bl	80049ec <HAL_GPIO_ReadPin>
 8001944:	4603      	mov	r3, r0
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	b2d9      	uxtb	r1, r3
 800194c:	4a22      	ldr	r2, [pc, #136]	; (80019d8 <readall_inputs+0x15c>)
 800194e:	7813      	ldrb	r3, [r2, #0]
 8001950:	f361 03c3 	bfi	r3, r1, #3, #1
 8001954:	7013      	strb	r3, [r2, #0]
	sdc_in.PrechargeIn = HAL_GPIO_ReadPin(PRECHARGE_IN_GPIO_Port, PRECHARGE_IN_Pin);			// Eingang Precharge abgeschlossen
 8001956:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800195a:	4820      	ldr	r0, [pc, #128]	; (80019dc <readall_inputs+0x160>)
 800195c:	f003 f846 	bl	80049ec <HAL_GPIO_ReadPin>
 8001960:	4603      	mov	r3, r0
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	b2d9      	uxtb	r1, r3
 8001968:	4a1b      	ldr	r2, [pc, #108]	; (80019d8 <readall_inputs+0x15c>)
 800196a:	7813      	ldrb	r3, [r2, #0]
 800196c:	f361 1304 	bfi	r3, r1, #4, #1
 8001970:	7013      	strb	r3, [r2, #0]

	// Komforteingaenge einlesen
	komfort_in.OVC = HAL_GPIO_ReadPin(OVC_SENSE_GPIO_Port, OVC_SENSE_Pin);						// Eingang Overcurrent erkannt
 8001972:	2104      	movs	r1, #4
 8001974:	4819      	ldr	r0, [pc, #100]	; (80019dc <readall_inputs+0x160>)
 8001976:	f003 f839 	bl	80049ec <HAL_GPIO_ReadPin>
 800197a:	4603      	mov	r3, r0
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	b2d9      	uxtb	r1, r3
 8001982:	4a17      	ldr	r2, [pc, #92]	; (80019e0 <readall_inputs+0x164>)
 8001984:	7813      	ldrb	r3, [r2, #0]
 8001986:	f361 0300 	bfi	r3, r1, #0, #1
 800198a:	7013      	strb	r3, [r2, #0]
	komfort_in.Button1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);						// Zusatzeingang Taster 1
 800198c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001990:	4810      	ldr	r0, [pc, #64]	; (80019d4 <readall_inputs+0x158>)
 8001992:	f003 f82b 	bl	80049ec <HAL_GPIO_ReadPin>
 8001996:	4603      	mov	r3, r0
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	b2d9      	uxtb	r1, r3
 800199e:	4a10      	ldr	r2, [pc, #64]	; (80019e0 <readall_inputs+0x164>)
 80019a0:	7813      	ldrb	r3, [r2, #0]
 80019a2:	f361 0341 	bfi	r3, r1, #1, #1
 80019a6:	7013      	strb	r3, [r2, #0]
	komfort_in.Button2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);						// Zusatzeingang Taster 2
 80019a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019ac:	4809      	ldr	r0, [pc, #36]	; (80019d4 <readall_inputs+0x158>)
 80019ae:	f003 f81d 	bl	80049ec <HAL_GPIO_ReadPin>
 80019b2:	4603      	mov	r3, r0
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	b2d9      	uxtb	r1, r3
 80019ba:	4a09      	ldr	r2, [pc, #36]	; (80019e0 <readall_inputs+0x164>)
 80019bc:	7813      	ldrb	r3, [r2, #0]
 80019be:	f361 0382 	bfi	r3, r1, #2, #1
 80019c2:	7013      	strb	r3, [r2, #0]
}
 80019c4:	bf00      	nop
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40021000 	.word	0x40021000
 80019cc:	20000030 	.word	0x20000030
 80019d0:	40020c00 	.word	0x40020c00
 80019d4:	40020000 	.word	0x40020000
 80019d8:	20000034 	.word	0x20000034
 80019dc:	40021400 	.word	0x40021400
 80019e0:	20000038 	.word	0x20000038

080019e4 <testPCB_Leds>:
//----------------------------------------------------------------------

// Teste Platinen LEDs
//----------------------------------------------------------------------
void testPCB_Leds(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
	// Leds Testen
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);								// Blaue LED Platine setzen
 80019e8:	2201      	movs	r2, #1
 80019ea:	2180      	movs	r1, #128	; 0x80
 80019ec:	481b      	ldr	r0, [pc, #108]	; (8001a5c <testPCB_Leds+0x78>)
 80019ee:	f003 f815 	bl	8004a1c <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80019f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019f6:	f001 ff0d 	bl	8003814 <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);							// Blaue LED Platine zuruecksetzen
 80019fa:	2200      	movs	r2, #0
 80019fc:	2180      	movs	r1, #128	; 0x80
 80019fe:	4817      	ldr	r0, [pc, #92]	; (8001a5c <testPCB_Leds+0x78>)
 8001a00:	f003 f80c 	bl	8004a1c <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001a04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a08:	f001 ff04 	bl	8003814 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);							// Gruene LED Platine setzen
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	2104      	movs	r1, #4
 8001a10:	4812      	ldr	r0, [pc, #72]	; (8001a5c <testPCB_Leds+0x78>)
 8001a12:	f003 f803 	bl	8004a1c <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8001a16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a1a:	f001 fefb 	bl	8003814 <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);							// Gruene LED Platine zuruecksetzen
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2104      	movs	r1, #4
 8001a22:	480e      	ldr	r0, [pc, #56]	; (8001a5c <testPCB_Leds+0x78>)
 8001a24:	f002 fffa 	bl	8004a1c <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001a28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a2c:	f001 fef2 	bl	8003814 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);								// Rote LED Platine setzen
 8001a30:	2201      	movs	r2, #1
 8001a32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a36:	4809      	ldr	r0, [pc, #36]	; (8001a5c <testPCB_Leds+0x78>)
 8001a38:	f002 fff0 	bl	8004a1c <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8001a3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a40:	f001 fee8 	bl	8003814 <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);								// Rote LED Platine zuruecksetzen
 8001a44:	2200      	movs	r2, #0
 8001a46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a4a:	4804      	ldr	r0, [pc, #16]	; (8001a5c <testPCB_Leds+0x78>)
 8001a4c:	f002 ffe6 	bl	8004a1c <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001a50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a54:	f001 fede 	bl	8003814 <HAL_Delay>
}
 8001a58:	bf00      	nop
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40020400 	.word	0x40020400

08001a60 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a66:	463b      	mov	r3, r7
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a72:	4b44      	ldr	r3, [pc, #272]	; (8001b84 <MX_ADC1_Init+0x124>)
 8001a74:	4a44      	ldr	r2, [pc, #272]	; (8001b88 <MX_ADC1_Init+0x128>)
 8001a76:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001a78:	4b42      	ldr	r3, [pc, #264]	; (8001b84 <MX_ADC1_Init+0x124>)
 8001a7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a7e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a80:	4b40      	ldr	r3, [pc, #256]	; (8001b84 <MX_ADC1_Init+0x124>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001a86:	4b3f      	ldr	r3, [pc, #252]	; (8001b84 <MX_ADC1_Init+0x124>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a8c:	4b3d      	ldr	r3, [pc, #244]	; (8001b84 <MX_ADC1_Init+0x124>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a92:	4b3c      	ldr	r3, [pc, #240]	; (8001b84 <MX_ADC1_Init+0x124>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a9a:	4b3a      	ldr	r3, [pc, #232]	; (8001b84 <MX_ADC1_Init+0x124>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001aa0:	4b38      	ldr	r3, [pc, #224]	; (8001b84 <MX_ADC1_Init+0x124>)
 8001aa2:	4a3a      	ldr	r2, [pc, #232]	; (8001b8c <MX_ADC1_Init+0x12c>)
 8001aa4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001aa6:	4b37      	ldr	r3, [pc, #220]	; (8001b84 <MX_ADC1_Init+0x124>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8001aac:	4b35      	ldr	r3, [pc, #212]	; (8001b84 <MX_ADC1_Init+0x124>)
 8001aae:	2206      	movs	r2, #6
 8001ab0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001ab2:	4b34      	ldr	r3, [pc, #208]	; (8001b84 <MX_ADC1_Init+0x124>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001aba:	4b32      	ldr	r3, [pc, #200]	; (8001b84 <MX_ADC1_Init+0x124>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ac0:	4830      	ldr	r0, [pc, #192]	; (8001b84 <MX_ADC1_Init+0x124>)
 8001ac2:	f001 ff13 	bl	80038ec <HAL_ADC_Init>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001acc:	f001 f9ce 	bl	8002e6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001ad0:	2307      	movs	r3, #7
 8001ad2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001adc:	463b      	mov	r3, r7
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4828      	ldr	r0, [pc, #160]	; (8001b84 <MX_ADC1_Init+0x124>)
 8001ae2:	f001 ff47 	bl	8003974 <HAL_ADC_ConfigChannel>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001aec:	f001 f9be 	bl	8002e6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001af0:	2303      	movs	r3, #3
 8001af2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001af4:	2302      	movs	r3, #2
 8001af6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001af8:	463b      	mov	r3, r7
 8001afa:	4619      	mov	r1, r3
 8001afc:	4821      	ldr	r0, [pc, #132]	; (8001b84 <MX_ADC1_Init+0x124>)
 8001afe:	f001 ff39 	bl	8003974 <HAL_ADC_ConfigChannel>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001b08:	f001 f9b0 	bl	8002e6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001b0c:	2304      	movs	r3, #4
 8001b0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001b10:	2303      	movs	r3, #3
 8001b12:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b14:	463b      	mov	r3, r7
 8001b16:	4619      	mov	r1, r3
 8001b18:	481a      	ldr	r0, [pc, #104]	; (8001b84 <MX_ADC1_Init+0x124>)
 8001b1a:	f001 ff2b 	bl	8003974 <HAL_ADC_ConfigChannel>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001b24:	f001 f9a2 	bl	8002e6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001b28:	2305      	movs	r3, #5
 8001b2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001b2c:	2304      	movs	r3, #4
 8001b2e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b30:	463b      	mov	r3, r7
 8001b32:	4619      	mov	r1, r3
 8001b34:	4813      	ldr	r0, [pc, #76]	; (8001b84 <MX_ADC1_Init+0x124>)
 8001b36:	f001 ff1d 	bl	8003974 <HAL_ADC_ConfigChannel>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001b40:	f001 f994 	bl	8002e6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001b44:	2306      	movs	r3, #6
 8001b46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001b48:	2305      	movs	r3, #5
 8001b4a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b4c:	463b      	mov	r3, r7
 8001b4e:	4619      	mov	r1, r3
 8001b50:	480c      	ldr	r0, [pc, #48]	; (8001b84 <MX_ADC1_Init+0x124>)
 8001b52:	f001 ff0f 	bl	8003974 <HAL_ADC_ConfigChannel>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001b5c:	f001 f986 	bl	8002e6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001b60:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <MX_ADC1_Init+0x130>)
 8001b62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001b64:	2306      	movs	r3, #6
 8001b66:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b68:	463b      	mov	r3, r7
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4805      	ldr	r0, [pc, #20]	; (8001b84 <MX_ADC1_Init+0x124>)
 8001b6e:	f001 ff01 	bl	8003974 <HAL_ADC_ConfigChannel>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001b78:	f001 f978 	bl	8002e6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b7c:	bf00      	nop
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	2000004c 	.word	0x2000004c
 8001b88:	40012000 	.word	0x40012000
 8001b8c:	0f000001 	.word	0x0f000001
 8001b90:	10000012 	.word	0x10000012

08001b94 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08a      	sub	sp, #40	; 0x28
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a15      	ldr	r2, [pc, #84]	; (8001c08 <HAL_ADC_MspInit+0x74>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d123      	bne.n	8001bfe <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bb6:	4b15      	ldr	r3, [pc, #84]	; (8001c0c <HAL_ADC_MspInit+0x78>)
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bba:	4a14      	ldr	r2, [pc, #80]	; (8001c0c <HAL_ADC_MspInit+0x78>)
 8001bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bc2:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <HAL_ADC_MspInit+0x78>)
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bca:	613b      	str	r3, [r7, #16]
 8001bcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bce:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <HAL_ADC_MspInit+0x78>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	4a0e      	ldr	r2, [pc, #56]	; (8001c0c <HAL_ADC_MspInit+0x78>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bda:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <HAL_ADC_MspInit+0x78>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = SENSE_TEMP1_Pin|SENSE_TEMP2_Pin|SENSE_TEMP3_Pin|SENSE_TEMP4_Pin
 8001be6:	23f8      	movs	r3, #248	; 0xf8
 8001be8:	617b      	str	r3, [r7, #20]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bea:	2303      	movs	r3, #3
 8001bec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf2:	f107 0314 	add.w	r3, r7, #20
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4805      	ldr	r0, [pc, #20]	; (8001c10 <HAL_ADC_MspInit+0x7c>)
 8001bfa:	f002 fd4b 	bl	8004694 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001bfe:	bf00      	nop
 8001c00:	3728      	adds	r7, #40	; 0x28
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40012000 	.word	0x40012000
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	40020000 	.word	0x40020000

08001c14 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan3;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001c18:	4b17      	ldr	r3, [pc, #92]	; (8001c78 <MX_CAN1_Init+0x64>)
 8001c1a:	4a18      	ldr	r2, [pc, #96]	; (8001c7c <MX_CAN1_Init+0x68>)
 8001c1c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001c1e:	4b16      	ldr	r3, [pc, #88]	; (8001c78 <MX_CAN1_Init+0x64>)
 8001c20:	2210      	movs	r2, #16
 8001c22:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001c24:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <MX_CAN1_Init+0x64>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001c2a:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <MX_CAN1_Init+0x64>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001c30:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <MX_CAN1_Init+0x64>)
 8001c32:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c36:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001c38:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <MX_CAN1_Init+0x64>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001c3e:	4b0e      	ldr	r3, [pc, #56]	; (8001c78 <MX_CAN1_Init+0x64>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001c44:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <MX_CAN1_Init+0x64>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001c4a:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <MX_CAN1_Init+0x64>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001c50:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <MX_CAN1_Init+0x64>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001c56:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <MX_CAN1_Init+0x64>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001c5c:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <MX_CAN1_Init+0x64>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001c62:	4805      	ldr	r0, [pc, #20]	; (8001c78 <MX_CAN1_Init+0x64>)
 8001c64:	f002 f8d6 	bl	8003e14 <HAL_CAN_Init>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001c6e:	f001 f8fd 	bl	8002e6c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000094 	.word	0x20000094
 8001c7c:	40006400 	.word	0x40006400

08001c80 <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8001c84:	4b17      	ldr	r3, [pc, #92]	; (8001ce4 <MX_CAN3_Init+0x64>)
 8001c86:	4a18      	ldr	r2, [pc, #96]	; (8001ce8 <MX_CAN3_Init+0x68>)
 8001c88:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 8001c8a:	4b16      	ldr	r3, [pc, #88]	; (8001ce4 <MX_CAN3_Init+0x64>)
 8001c8c:	2206      	movs	r2, #6
 8001c8e:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8001c90:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <MX_CAN3_Init+0x64>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001c96:	4b13      	ldr	r3, [pc, #76]	; (8001ce4 <MX_CAN3_Init+0x64>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001c9c:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <MX_CAN3_Init+0x64>)
 8001c9e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001ca2:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001ca4:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <MX_CAN3_Init+0x64>)
 8001ca6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001caa:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8001cac:	4b0d      	ldr	r3, [pc, #52]	; (8001ce4 <MX_CAN3_Init+0x64>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 8001cb2:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <MX_CAN3_Init+0x64>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8001cb8:	4b0a      	ldr	r3, [pc, #40]	; (8001ce4 <MX_CAN3_Init+0x64>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8001cbe:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <MX_CAN3_Init+0x64>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8001cc4:	4b07      	ldr	r3, [pc, #28]	; (8001ce4 <MX_CAN3_Init+0x64>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8001cca:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <MX_CAN3_Init+0x64>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8001cd0:	4804      	ldr	r0, [pc, #16]	; (8001ce4 <MX_CAN3_Init+0x64>)
 8001cd2:	f002 f89f 	bl	8003e14 <HAL_CAN_Init>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8001cdc:	f001 f8c6 	bl	8002e6c <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 8001ce0:	bf00      	nop
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	200000bc 	.word	0x200000bc
 8001ce8:	40003400 	.word	0x40003400

08001cec <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08c      	sub	sp, #48	; 0x30
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf4:	f107 031c 	add.w	r3, r7, #28
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a2e      	ldr	r2, [pc, #184]	; (8001dc4 <HAL_CAN_MspInit+0xd8>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d128      	bne.n	8001d60 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001d0e:	4b2e      	ldr	r3, [pc, #184]	; (8001dc8 <HAL_CAN_MspInit+0xdc>)
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	4a2d      	ldr	r2, [pc, #180]	; (8001dc8 <HAL_CAN_MspInit+0xdc>)
 8001d14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d18:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1a:	4b2b      	ldr	r3, [pc, #172]	; (8001dc8 <HAL_CAN_MspInit+0xdc>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d22:	61bb      	str	r3, [r7, #24]
 8001d24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d26:	4b28      	ldr	r3, [pc, #160]	; (8001dc8 <HAL_CAN_MspInit+0xdc>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	4a27      	ldr	r2, [pc, #156]	; (8001dc8 <HAL_CAN_MspInit+0xdc>)
 8001d2c:	f043 0308 	orr.w	r3, r3, #8
 8001d30:	6313      	str	r3, [r2, #48]	; 0x30
 8001d32:	4b25      	ldr	r3, [pc, #148]	; (8001dc8 <HAL_CAN_MspInit+0xdc>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	f003 0308 	and.w	r3, r3, #8
 8001d3a:	617b      	str	r3, [r7, #20]
 8001d3c:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d42:	2302      	movs	r3, #2
 8001d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001d4e:	2309      	movs	r3, #9
 8001d50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d52:	f107 031c 	add.w	r3, r7, #28
 8001d56:	4619      	mov	r1, r3
 8001d58:	481c      	ldr	r0, [pc, #112]	; (8001dcc <HAL_CAN_MspInit+0xe0>)
 8001d5a:	f002 fc9b 	bl	8004694 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 8001d5e:	e02d      	b.n	8001dbc <HAL_CAN_MspInit+0xd0>
  else if(canHandle->Instance==CAN3)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a1a      	ldr	r2, [pc, #104]	; (8001dd0 <HAL_CAN_MspInit+0xe4>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d128      	bne.n	8001dbc <HAL_CAN_MspInit+0xd0>
    __HAL_RCC_CAN3_CLK_ENABLE();
 8001d6a:	4b17      	ldr	r3, [pc, #92]	; (8001dc8 <HAL_CAN_MspInit+0xdc>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	4a16      	ldr	r2, [pc, #88]	; (8001dc8 <HAL_CAN_MspInit+0xdc>)
 8001d70:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d74:	6413      	str	r3, [r2, #64]	; 0x40
 8001d76:	4b14      	ldr	r3, [pc, #80]	; (8001dc8 <HAL_CAN_MspInit+0xdc>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d82:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <HAL_CAN_MspInit+0xdc>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	4a10      	ldr	r2, [pc, #64]	; (8001dc8 <HAL_CAN_MspInit+0xdc>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8e:	4b0e      	ldr	r3, [pc, #56]	; (8001dc8 <HAL_CAN_MspInit+0xdc>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8001d9a:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da0:	2302      	movs	r3, #2
 8001da2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da8:	2303      	movs	r3, #3
 8001daa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8001dac:	230b      	movs	r3, #11
 8001dae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db0:	f107 031c 	add.w	r3, r7, #28
 8001db4:	4619      	mov	r1, r3
 8001db6:	4807      	ldr	r0, [pc, #28]	; (8001dd4 <HAL_CAN_MspInit+0xe8>)
 8001db8:	f002 fc6c 	bl	8004694 <HAL_GPIO_Init>
}
 8001dbc:	bf00      	nop
 8001dbe:	3730      	adds	r7, #48	; 0x30
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40006400 	.word	0x40006400
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40020c00 	.word	0x40020c00
 8001dd0:	40003400 	.word	0x40003400
 8001dd4:	40020000 	.word	0x40020000

08001dd8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08e      	sub	sp, #56	; 0x38
 8001ddc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	605a      	str	r2, [r3, #4]
 8001de8:	609a      	str	r2, [r3, #8]
 8001dea:	60da      	str	r2, [r3, #12]
 8001dec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dee:	4bb7      	ldr	r3, [pc, #732]	; (80020cc <MX_GPIO_Init+0x2f4>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	4ab6      	ldr	r2, [pc, #728]	; (80020cc <MX_GPIO_Init+0x2f4>)
 8001df4:	f043 0310 	orr.w	r3, r3, #16
 8001df8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfa:	4bb4      	ldr	r3, [pc, #720]	; (80020cc <MX_GPIO_Init+0x2f4>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	f003 0310 	and.w	r3, r3, #16
 8001e02:	623b      	str	r3, [r7, #32]
 8001e04:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e06:	4bb1      	ldr	r3, [pc, #708]	; (80020cc <MX_GPIO_Init+0x2f4>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	4ab0      	ldr	r2, [pc, #704]	; (80020cc <MX_GPIO_Init+0x2f4>)
 8001e0c:	f043 0304 	orr.w	r3, r3, #4
 8001e10:	6313      	str	r3, [r2, #48]	; 0x30
 8001e12:	4bae      	ldr	r3, [pc, #696]	; (80020cc <MX_GPIO_Init+0x2f4>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	f003 0304 	and.w	r3, r3, #4
 8001e1a:	61fb      	str	r3, [r7, #28]
 8001e1c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e1e:	4bab      	ldr	r3, [pc, #684]	; (80020cc <MX_GPIO_Init+0x2f4>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	4aaa      	ldr	r2, [pc, #680]	; (80020cc <MX_GPIO_Init+0x2f4>)
 8001e24:	f043 0320 	orr.w	r3, r3, #32
 8001e28:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2a:	4ba8      	ldr	r3, [pc, #672]	; (80020cc <MX_GPIO_Init+0x2f4>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	f003 0320 	and.w	r3, r3, #32
 8001e32:	61bb      	str	r3, [r7, #24]
 8001e34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e36:	4ba5      	ldr	r3, [pc, #660]	; (80020cc <MX_GPIO_Init+0x2f4>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	4aa4      	ldr	r2, [pc, #656]	; (80020cc <MX_GPIO_Init+0x2f4>)
 8001e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e40:	6313      	str	r3, [r2, #48]	; 0x30
 8001e42:	4ba2      	ldr	r3, [pc, #648]	; (80020cc <MX_GPIO_Init+0x2f4>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e4a:	617b      	str	r3, [r7, #20]
 8001e4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4e:	4b9f      	ldr	r3, [pc, #636]	; (80020cc <MX_GPIO_Init+0x2f4>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	4a9e      	ldr	r2, [pc, #632]	; (80020cc <MX_GPIO_Init+0x2f4>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5a:	4b9c      	ldr	r3, [pc, #624]	; (80020cc <MX_GPIO_Init+0x2f4>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	613b      	str	r3, [r7, #16]
 8001e64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e66:	4b99      	ldr	r3, [pc, #612]	; (80020cc <MX_GPIO_Init+0x2f4>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	4a98      	ldr	r2, [pc, #608]	; (80020cc <MX_GPIO_Init+0x2f4>)
 8001e6c:	f043 0302 	orr.w	r3, r3, #2
 8001e70:	6313      	str	r3, [r2, #48]	; 0x30
 8001e72:	4b96      	ldr	r3, [pc, #600]	; (80020cc <MX_GPIO_Init+0x2f4>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e7e:	4b93      	ldr	r3, [pc, #588]	; (80020cc <MX_GPIO_Init+0x2f4>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	4a92      	ldr	r2, [pc, #584]	; (80020cc <MX_GPIO_Init+0x2f4>)
 8001e84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e88:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8a:	4b90      	ldr	r3, [pc, #576]	; (80020cc <MX_GPIO_Init+0x2f4>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e92:	60bb      	str	r3, [r7, #8]
 8001e94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e96:	4b8d      	ldr	r3, [pc, #564]	; (80020cc <MX_GPIO_Init+0x2f4>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	4a8c      	ldr	r2, [pc, #560]	; (80020cc <MX_GPIO_Init+0x2f4>)
 8001e9c:	f043 0308 	orr.w	r3, r3, #8
 8001ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea2:	4b8a      	ldr	r3, [pc, #552]	; (80020cc <MX_GPIO_Init+0x2f4>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	607b      	str	r3, [r7, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, INLET_RED_Pin|AMS_OK_Pin|ISOSPI_EN_Pin|FREIGABE_Pin
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f248 0187 	movw	r1, #32903	; 0x8087
 8001eb4:	4886      	ldr	r0, [pc, #536]	; (80020d0 <MX_GPIO_Init+0x2f8>)
 8001eb6:	f002 fdb1 	bl	8004a1c <HAL_GPIO_WritePin>
                          |INLET_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(POWER_ON_GPIO_Port, POWER_ON_Pin, GPIO_PIN_RESET);
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ec0:	4884      	ldr	r0, [pc, #528]	; (80020d4 <MX_GPIO_Init+0x2fc>)
 8001ec2:	f002 fdab 	bl	8004a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin, GPIO_PIN_RESET);
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f242 0102 	movw	r1, #8194	; 0x2002
 8001ecc:	4882      	ldr	r0, [pc, #520]	; (80020d8 <MX_GPIO_Init+0x300>)
 8001ece:	f002 fda5 	bl	8004a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin, GPIO_PIN_RESET);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f240 6102 	movw	r1, #1538	; 0x602
 8001ed8:	4880      	ldr	r0, [pc, #512]	; (80020dc <MX_GPIO_Init+0x304>)
 8001eda:	f002 fd9f 	bl	8004a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f244 0184 	movw	r1, #16516	; 0x4084
 8001ee4:	487e      	ldr	r0, [pc, #504]	; (80020e0 <MX_GPIO_Init+0x308>)
 8001ee6:	f002 fd99 	bl	8004a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISOSPI_CS_GPIO_Port, ISOSPI_CS_Pin, GPIO_PIN_SET);
 8001eea:	2201      	movs	r2, #1
 8001eec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ef0:	4877      	ldr	r0, [pc, #476]	; (80020d0 <MX_GPIO_Init+0x2f8>)
 8001ef2:	f002 fd93 	bl	8004a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f24f 01bc 	movw	r1, #61628	; 0xf0bc
 8001efc:	4879      	ldr	r0, [pc, #484]	; (80020e4 <MX_GPIO_Init+0x30c>)
 8001efe:	f002 fd8d 	bl	8004a1c <HAL_GPIO_WritePin>
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DIGITAL1_Pin|DIGITAL2_Pin, GPIO_PIN_RESET);
 8001f02:	2200      	movs	r2, #0
 8001f04:	2118      	movs	r1, #24
 8001f06:	4878      	ldr	r0, [pc, #480]	; (80020e8 <MX_GPIO_Init+0x310>)
 8001f08:	f002 fd88 	bl	8004a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = INLET_RED_Pin|AMS_OK_Pin|ISOSPI_CS_Pin|ISOSPI_EN_Pin
 8001f0c:	f648 0387 	movw	r3, #34951	; 0x8887
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
                          |FREIGABE_Pin|INLET_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f12:	2301      	movs	r3, #1
 8001f14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f22:	4619      	mov	r1, r3
 8001f24:	486a      	ldr	r0, [pc, #424]	; (80020d0 <MX_GPIO_Init+0x2f8>)
 8001f26:	f002 fbb5 	bl	8004694 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SENSE_SDC_HVIL_Pin|SENSE_SDC_BTB_Pin|SENSE_SDC_MOTOR_Pin|IMD_OK_IN_Pin;
 8001f2a:	f44f 739c 	mov.w	r3, #312	; 0x138
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f30:	2300      	movs	r3, #0
 8001f32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4864      	ldr	r0, [pc, #400]	; (80020d0 <MX_GPIO_Init+0x2f8>)
 8001f40:	f002 fba8 	bl	8004694 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 8001f44:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8001f48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f56:	4619      	mov	r1, r3
 8001f58:	485d      	ldr	r0, [pc, #372]	; (80020d0 <MX_GPIO_Init+0x2f8>)
 8001f5a:	f002 fb9b 	bl	8004694 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 8001f5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f64:	2301      	movs	r3, #1
 8001f66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 8001f70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f74:	4619      	mov	r1, r3
 8001f76:	4857      	ldr	r0, [pc, #348]	; (80020d4 <MX_GPIO_Init+0x2fc>)
 8001f78:	f002 fb8c 	bl	8004694 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PC3 PC4 PC5
                           PCPin PC7 PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8001f7c:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |SD_SW_Pin|GPIO_PIN_7|SD_D0_Pin|SD_D1_Pin
                          |SD_D2_Pin|SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f82:	2303      	movs	r3, #3
 8001f84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4850      	ldr	r0, [pc, #320]	; (80020d4 <MX_GPIO_Init+0x2fc>)
 8001f92:	f002 fb7f 	bl	8004694 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF3 PF4 PF5
                           PFPin PFPin PFPin PFPin
                           PF10 PF11 PF12 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001f96:	f645 73f9 	movw	r3, #24569	; 0x5ff9
 8001f9a:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPI_CS_Pin|SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fa8:	4619      	mov	r1, r3
 8001faa:	484b      	ldr	r0, [pc, #300]	; (80020d8 <MX_GPIO_Init+0x300>)
 8001fac:	f002 fb72 	bl	8004694 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = TRIGGER_CURRENT_Pin|PRECHARGE_OUT_Pin;
 8001fb0:	f242 0302 	movw	r3, #8194	; 0x2002
 8001fb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4843      	ldr	r0, [pc, #268]	; (80020d8 <MX_GPIO_Init+0x300>)
 8001fca:	f002 fb63 	bl	8004694 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OVC_SENSE_Pin|PRECHARGE_IN_Pin;
 8001fce:	f248 0304 	movw	r3, #32772	; 0x8004
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	483d      	ldr	r0, [pc, #244]	; (80020d8 <MX_GPIO_Init+0x300>)
 8001fe4:	f002 fb56 	bl	8004694 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|HW_WAKE_Pin|BUTTON2_Pin|BUTTON1_Pin;
 8001fe8:	f641 0305 	movw	r3, #6149	; 0x1805
 8001fec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4837      	ldr	r0, [pc, #220]	; (80020dc <MX_GPIO_Init+0x304>)
 8001ffe:	f002 fb49 	bl	8004694 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IMD_OK_OUT_Pin|HEATER2_Pin|HEATER1_Pin;
 8002002:	f240 6302 	movw	r3, #1538	; 0x602
 8002006:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002008:	2301      	movs	r3, #1
 800200a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200c:	2300      	movs	r3, #0
 800200e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002010:	2300      	movs	r3, #0
 8002012:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002014:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002018:	4619      	mov	r1, r3
 800201a:	4830      	ldr	r0, [pc, #192]	; (80020dc <MX_GPIO_Init+0x304>)
 800201c:	f002 fb3a 	bl	8004694 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB15 PB4
                           PB5 PB6 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8002020:	f64b 7373 	movw	r3, #49011	; 0xbf73
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|I2C_SCL_Pin|I2C_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002026:	2303      	movs	r3, #3
 8002028:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800202e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002032:	4619      	mov	r1, r3
 8002034:	482a      	ldr	r0, [pc, #168]	; (80020e0 <MX_GPIO_Init+0x308>)
 8002036:	f002 fb2d 	bl	8004694 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin;
 800203a:	f244 0384 	movw	r3, #16516	; 0x4084
 800203e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002040:	2301      	movs	r3, #1
 8002042:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002048:	2300      	movs	r3, #0
 800204a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800204c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002050:	4619      	mov	r1, r3
 8002052:	4823      	ldr	r0, [pc, #140]	; (80020e0 <MX_GPIO_Init+0x308>)
 8002054:	f002 fb1e 	bl	8004694 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG6 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_8;
 8002058:	f240 1343 	movw	r3, #323	; 0x143
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800205e:	2303      	movs	r3, #3
 8002060:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002062:	2300      	movs	r3, #0
 8002064:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002066:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800206a:	4619      	mov	r1, r3
 800206c:	481d      	ldr	r0, [pc, #116]	; (80020e4 <MX_GPIO_Init+0x30c>)
 800206e:	f002 fb11 	bl	8004694 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|SD_CMD_Pin;
 8002072:	f240 7304 	movw	r3, #1796	; 0x704
 8002076:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002078:	2303      	movs	r3, #3
 800207a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002080:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002084:	4619      	mov	r1, r3
 8002086:	4818      	ldr	r0, [pc, #96]	; (80020e8 <MX_GPIO_Init+0x310>)
 8002088:	f002 fb04 	bl	8004694 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KL15_Pin;
 800208c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002090:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002092:	2300      	movs	r3, #0
 8002094:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002096:	2300      	movs	r3, #0
 8002098:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KL15_GPIO_Port, &GPIO_InitStruct);
 800209a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800209e:	4619      	mov	r1, r3
 80020a0:	4811      	ldr	r0, [pc, #68]	; (80020e8 <MX_GPIO_Init+0x310>)
 80020a2:	f002 faf7 	bl	8004694 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = HV_N_Pin|HV_P_Pin|HV_M_Pin|HV_Charger_Pin
 80020a6:	f24f 03bc 	movw	r3, #61628	; 0xf0bc
 80020aa:	627b      	str	r3, [r7, #36]	; 0x24
                          |AKKU_LED_Pin|POTI_RS_Pin|POTI_SHDN_Pin|RECUPERATION_Pin
                          |AMS_LIMIT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ac:	2301      	movs	r3, #1
 80020ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b4:	2300      	movs	r3, #0
 80020b6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020bc:	4619      	mov	r1, r3
 80020be:	4809      	ldr	r0, [pc, #36]	; (80020e4 <MX_GPIO_Init+0x30c>)
 80020c0:	f002 fae8 	bl	8004694 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|DIGITAL2_Pin;
 80020c4:	2318      	movs	r3, #24
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
 80020c8:	e010      	b.n	80020ec <MX_GPIO_Init+0x314>
 80020ca:	bf00      	nop
 80020cc:	40023800 	.word	0x40023800
 80020d0:	40021000 	.word	0x40021000
 80020d4:	40020800 	.word	0x40020800
 80020d8:	40021400 	.word	0x40021400
 80020dc:	40020000 	.word	0x40020000
 80020e0:	40020400 	.word	0x40020400
 80020e4:	40021800 	.word	0x40021800
 80020e8:	40020c00 	.word	0x40020c00
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ec:	2301      	movs	r3, #1
 80020ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f4:	2300      	movs	r3, #0
 80020f6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020fc:	4619      	mov	r1, r3
 80020fe:	4803      	ldr	r0, [pc, #12]	; (800210c <MX_GPIO_Init+0x334>)
 8002100:	f002 fac8 	bl	8004694 <HAL_GPIO_Init>

}
 8002104:	bf00      	nop
 8002106:	3738      	adds	r7, #56	; 0x38
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40020c00 	.word	0x40020c00

08002110 <calculateMovingAverage>:
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	80fb      	strh	r3, [r7, #6]
 800211a:	460b      	mov	r3, r1
 800211c:	80bb      	strh	r3, [r7, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	807b      	strh	r3, [r7, #2]
	return (oldValue + ((newValue - oldValue) / n));						// MovingAverage Calculation x_n  = x_{n-1} + ((x_n+x_{n-1})/n)
 8002122:	88ba      	ldrh	r2, [r7, #4]
 8002124:	88fb      	ldrh	r3, [r7, #6]
 8002126:	1ad2      	subs	r2, r2, r3
 8002128:	887b      	ldrh	r3, [r7, #2]
 800212a:	fb92 f3f3 	sdiv	r3, r2, r3
 800212e:	b29a      	uxth	r2, r3
 8002130:	88fb      	ldrh	r3, [r7, #6]
 8002132:	4413      	add	r3, r2
 8002134:	b29b      	uxth	r3, r3
}
 8002136:	4618      	mov	r0, r3
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <getDifference>:
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	4603      	mov	r3, r0
 800214a:	460a      	mov	r2, r1
 800214c:	80fb      	strh	r3, [r7, #6]
 800214e:	4613      	mov	r3, r2
 8002150:	80bb      	strh	r3, [r7, #4]
	if (a > b)
 8002152:	88fa      	ldrh	r2, [r7, #6]
 8002154:	88bb      	ldrh	r3, [r7, #4]
 8002156:	429a      	cmp	r2, r3
 8002158:	d904      	bls.n	8002164 <getDifference+0x22>
		return (a - b);
 800215a:	88fa      	ldrh	r2, [r7, #6]
 800215c:	88bb      	ldrh	r3, [r7, #4]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	b29b      	uxth	r3, r3
 8002162:	e009      	b.n	8002178 <getDifference+0x36>
	else if (a < b)
 8002164:	88fa      	ldrh	r2, [r7, #6]
 8002166:	88bb      	ldrh	r3, [r7, #4]
 8002168:	429a      	cmp	r2, r3
 800216a:	d204      	bcs.n	8002176 <getDifference+0x34>
		return (b - a);
 800216c:	88ba      	ldrh	r2, [r7, #4]
 800216e:	88fb      	ldrh	r3, [r7, #6]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	b29b      	uxth	r3, r3
 8002174:	e000      	b.n	8002178 <getDifference+0x36>
		return 0;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002184:	b5b0      	push	{r4, r5, r7, lr}
 8002186:	b0ba      	sub	sp, #232	; 0xe8
 8002188:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800218a:	f001 fae6 	bl	800375a <HAL_Init>

  /* USER CODE BEGIN Init */
	// Definiere Variablen fuer Main-Funktion
	uint16_t dutyCycle, timerPeriod, frequency, count = 0, R_IMD;
 800218e:	2300      	movs	r3, #0
 8002190:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
	uint8_t start_flag = 0;
 8002194:	2300      	movs	r3, #0
 8002196:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1

	// Definiere Variablen fuer BMS Zellen
	uint8_t data[36] = {0}, temp, CFG[6] = {0};
 800219a:	2300      	movs	r3, #0
 800219c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80021a0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80021a4:	2220      	movs	r2, #32
 80021a6:	2100      	movs	r1, #0
 80021a8:	4618      	mov	r0, r3
 80021aa:	f006 fe9f 	bl	8008eec <memset>
 80021ae:	2300      	movs	r3, #0
 80021b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80021b4:	2300      	movs	r3, #0
 80021b6:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
	uint32_t tmp;
	uint16_t spannungen[12] = {0}, temperatur[2] = {0}, tmp_mean;
 80021ba:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	605a      	str	r2, [r3, #4]
 80021c4:	609a      	str	r2, [r3, #8]
 80021c6:	60da      	str	r2, [r3, #12]
 80021c8:	611a      	str	r2, [r3, #16]
 80021ca:	615a      	str	r2, [r3, #20]
 80021cc:	2300      	movs	r3, #0
 80021ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	// Definiere Variablen fuer Main-Funktion
	uint8_t TxData[8], OutData[4], InData[3], status;
  	CAN_FilterTypeDef sFilterConfig;

  	// Erstelle Can-Nachrichten
  	CAN_TxHeaderTypeDef TxMessage = {0x123, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 80021d2:	4bc8      	ldr	r3, [pc, #800]	; (80024f4 <main+0x370>)
 80021d4:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80021d8:	461d      	mov	r5, r3
 80021da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021de:	e895 0003 	ldmia.w	r5, {r0, r1}
 80021e2:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxOutput = {BMS_CAN_DIGITAL_OUT, 0, CAN_RTR_DATA, CAN_ID_STD, 4, DISABLE};
 80021e6:	4bc4      	ldr	r3, [pc, #784]	; (80024f8 <main+0x374>)
 80021e8:	f107 0418 	add.w	r4, r7, #24
 80021ec:	461d      	mov	r5, r3
 80021ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021f2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80021f6:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxInput = {BMS_CAN_DIGITAL_IN, 0, CAN_RTR_DATA, CAN_ID_STD, 3, DISABLE};
 80021fa:	4bc0      	ldr	r3, [pc, #768]	; (80024fc <main+0x378>)
 80021fc:	463c      	mov	r4, r7
 80021fe:	461d      	mov	r5, r3
 8002200:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002202:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002204:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002208:	e884 0003 	stmia.w	r4, {r0, r1}
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800220c:	f000 fd74 	bl	8002cf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002210:	f7ff fde2 	bl	8001dd8 <MX_GPIO_Init>
  MX_CAN1_Init();
 8002214:	f7ff fcfe 	bl	8001c14 <MX_CAN1_Init>
  MX_SPI4_Init();
 8002218:	f000 fe94 	bl	8002f44 <MX_SPI4_Init>
  MX_USART2_UART_Init();
 800221c:	f001 f9e6 	bl	80035ec <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8002220:	f7ff fc1e 	bl	8001a60 <MX_ADC1_Init>
  MX_TIM1_Init();
 8002224:	f000 ffde 	bl	80031e4 <MX_TIM1_Init>
  MX_TIM4_Init();
 8002228:	f001 f864 	bl	80032f4 <MX_TIM4_Init>
  MX_SPI1_Init();
 800222c:	f000 fe4c 	bl	8002ec8 <MX_SPI1_Init>
  MX_CAN3_Init();
 8002230:	f7ff fd26 	bl	8001c80 <MX_CAN3_Init>
  MX_TIM6_Init();
 8002234:	f001 f8da 	bl	80033ec <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

	/* Schreibe Resetquelle auf die Konsole */
#ifdef DEBUG
	printResetSource(readResetSource());
 8002238:	f7ff fa2e 	bl	8001698 <readResetSource>
 800223c:	4603      	mov	r3, r0
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff fa7c 	bl	800173c <printResetSource>

	/* Teste serielle Schnittstelle*/
	#define TEST_STRING_UART		"\nUART2 Transmitting in polling mode, Hello Diveturtle93!\n"
	uartTransmit(TEST_STRING_UART, sizeof(TEST_STRING_UART));
 8002244:	213a      	movs	r1, #58	; 0x3a
 8002246:	48ae      	ldr	r0, [pc, #696]	; (8002500 <main+0x37c>)
 8002248:	f7fe f980 	bl	800054c <uartTransmit>

  	// Sammel Systeminformationen
  	collectSystemInfo();
 800224c:	f7ff f9fa 	bl	8001644 <collectSystemInfo>
#endif

	// Leds Testen
	testPCB_Leds();
 8002250:	f7ff fbc8 	bl	80019e4 <testPCB_Leds>

  	// Lese alle Eingaenge
  	readall_inputs();
 8002254:	f7ff fb12 	bl	800187c <readall_inputs>

  	// IsoSPI einschalten, Isolierte Spannungsversorgung IsoSPI und HV-Precharge Messung einschalten
  	ISOSPI_ENABLE();
 8002258:	2201      	movs	r2, #1
 800225a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800225e:	48a9      	ldr	r0, [pc, #676]	; (8002504 <main+0x380>)
 8002260:	f002 fbdc 	bl	8004a1c <HAL_GPIO_WritePin>

  	// Warten fuer eine kurze Zeit
  	HAL_Delay(20);
 8002264:	2014      	movs	r0, #20
 8002266:	f001 fad5 	bl	8003814 <HAL_Delay>

    uartTransmit("\n", 1);
 800226a:	2101      	movs	r1, #1
 800226c:	48a6      	ldr	r0, [pc, #664]	; (8002508 <main+0x384>)
 800226e:	f7fe f96d 	bl	800054c <uartTransmit>
#define TEST_LTC6811	"Starte Batteriemanagement-System\n"
    uartTransmit(TEST_LTC6811, sizeof(TEST_LTC6811));
 8002272:	2122      	movs	r1, #34	; 0x22
 8002274:	48a5      	ldr	r0, [pc, #660]	; (800250c <main+0x388>)
 8002276:	f7fe f969 	bl	800054c <uartTransmit>

	if ((temp = ltc6811_check()) != 0)									// LTC6804 Selftest durchfuehren
 800227a:	f7fe fbdc 	bl	8000a36 <ltc6811_check>
 800227e:	4603      	mov	r3, r0
 8002280:	f887 30e0 	strb.w	r3, [r7, #224]	; 0xe0
 8002284:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d020      	beq.n	80022ce <main+0x14a>
	{
#define LTC6811_FAILED	"Selbsttest LTC6811 fehlerhaft\n"
		uartTransmit(LTC6811_FAILED, sizeof(LTC6811_FAILED));			// Ausgabe bei Fehlerhaftem Selbsttest
 800228c:	211f      	movs	r1, #31
 800228e:	48a0      	ldr	r0, [pc, #640]	; (8002510 <main+0x38c>)
 8002290:	f7fe f95c 	bl	800054c <uartTransmit>
		leuchten_out.RedLed = 1;										// Variable setzen
 8002294:	4a9f      	ldr	r2, [pc, #636]	; (8002514 <main+0x390>)
 8002296:	7813      	ldrb	r3, [r2, #0]
 8002298:	f043 0320 	orr.w	r3, r3, #32
 800229c:	7013      	strb	r3, [r2, #0]
	    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);// Ausgabe auf LEDs
 800229e:	4b9d      	ldr	r3, [pc, #628]	; (8002514 <main+0x390>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	461a      	mov	r2, r3
 80022aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022ae:	489a      	ldr	r0, [pc, #616]	; (8002518 <main+0x394>)
 80022b0:	f002 fbb4 	bl	8004a1c <HAL_GPIO_WritePin>

	    uartTransmitNumber(temp, 10);
 80022b4:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 80022b8:	210a      	movs	r1, #10
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7fe f95a 	bl	8000574 <uartTransmitNumber>
		uartTransmit("\n", 1);
 80022c0:	2101      	movs	r1, #1
 80022c2:	4891      	ldr	r0, [pc, #580]	; (8002508 <main+0x384>)
 80022c4:	f7fe f942 	bl	800054c <uartTransmit>

		return 0;														// Programm abbrechen
 80022c8:	2300      	movs	r3, #0
 80022ca:	f000 bcfd 	b.w	8002cc8 <main+0xb44>
	}
	else
	{
#define LTC6811_PASSED	"Selbsttest LTC6811 erfolgreich\n"
		uartTransmit(LTC6811_PASSED, sizeof(LTC6811_PASSED));			// Ausgabe bei Erfolgreichem Selbsttest
 80022ce:	2120      	movs	r1, #32
 80022d0:	4892      	ldr	r0, [pc, #584]	; (800251c <main+0x398>)
 80022d2:	f7fe f93b 	bl	800054c <uartTransmit>
	}

    // LTC6811 initialisieren
	CFG[0] = 0xF8;
 80022d6:	23f8      	movs	r3, #248	; 0xf8
 80022d8:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
	CFG[1] = 0xCF;
 80022dc:	23cf      	movs	r3, #207	; 0xcf
 80022de:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
	CFG[2] = 0x17;
 80022e2:	2317      	movs	r3, #23
 80022e4:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
	CFG[3] = 0xA4;
 80022e8:	23a4      	movs	r3, #164	; 0xa4
 80022ea:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	CFG[4] = 0x00;
 80022ee:	2300      	movs	r3, #0
 80022f0:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
	CFG[5] = 0x00;
 80022f4:	2300      	movs	r3, #0
 80022f6:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
	ltc6811_write(WRCFG, &CFG[0]);
 80022fa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80022fe:	4619      	mov	r1, r3
 8002300:	2001      	movs	r0, #1
 8002302:	f7fe fa29 	bl	8000758 <ltc6811_write>

	// Alle Register zuruecksetzen
	ltc6811(CLRCELL);
 8002306:	f240 7011 	movw	r0, #1809	; 0x711
 800230a:	f7fe f9d1 	bl	80006b0 <ltc6811>
	ltc6811(CLRSTAT);
 800230e:	f240 7013 	movw	r0, #1811	; 0x713
 8002312:	f7fe f9cd 	bl	80006b0 <ltc6811>
	ltc6811(CLRAUX);
 8002316:	f240 7012 	movw	r0, #1810	; 0x712
 800231a:	f7fe f9c9 	bl	80006b0 <ltc6811>

	// Erster ADC Vorgang ist ungueltig
	ltc6811(ADCVAX | MD73 | CELLALL);									// Initial Command Zellen auslesen
 800231e:	f240 506f 	movw	r0, #1391	; 0x56f
 8002322:	f7fe f9c5 	bl	80006b0 <ltc6811>

	tmp_mean = 65535;
 8002326:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800232a:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
	timerPeriod = (HAL_RCC_GetPCLK2Freq() / htim1.Init.Prescaler);
 800232e:	f003 f85f 	bl	80053f0 <HAL_RCC_GetPCLK2Freq>
 8002332:	4602      	mov	r2, r0
 8002334:	4b7a      	ldr	r3, [pc, #488]	; (8002520 <main+0x39c>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	fbb2 f3f3 	udiv	r3, r2, r3
 800233c:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
  	// Start timer
	if (HAL_TIM_Base_Start_IT(&htim1) != HAL_OK);
 8002340:	4877      	ldr	r0, [pc, #476]	; (8002520 <main+0x39c>)
 8002342:	f004 fcb9 	bl	8006cb8 <HAL_TIM_Base_Start_IT>
	if (HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1) != HAL_OK);
 8002346:	2100      	movs	r1, #0
 8002348:	4875      	ldr	r0, [pc, #468]	; (8002520 <main+0x39c>)
 800234a:	f004 fddb 	bl	8006f04 <HAL_TIM_IC_Start_IT>
	if (HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2) != HAL_OK);
 800234e:	2104      	movs	r1, #4
 8002350:	4873      	ldr	r0, [pc, #460]	; (8002520 <main+0x39c>)
 8002352:	f004 fdd7 	bl	8006f04 <HAL_TIM_IC_Start_IT>
  	HAL_TIM_Base_Start(&htim6);
 8002356:	4873      	ldr	r0, [pc, #460]	; (8002524 <main+0x3a0>)
 8002358:	f004 fc3e 	bl	8006bd8 <HAL_TIM_Base_Start>

  	// Starte CAN Bus
  	if((status = HAL_CAN_Start(&hcan3)) != HAL_OK)
 800235c:	4872      	ldr	r0, [pc, #456]	; (8002528 <main+0x3a4>)
 800235e:	f001 ff41 	bl	80041e4 <HAL_CAN_Start>
 8002362:	4603      	mov	r3, r0
 8002364:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
 8002368:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 800236c:	2b00      	cmp	r3, #0
 800236e:	d006      	beq.n	800237e <main+0x1fa>
  	{
  		/* Start Error */
  		hal_error(status);
 8002370:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff fa51 	bl	800181c <hal_error>
  		Error_Handler();
 800237a:	f000 fd77 	bl	8002e6c <Error_Handler>
  	}
  	uartTransmit("CAN START\n", 10);
 800237e:	210a      	movs	r1, #10
 8002380:	486a      	ldr	r0, [pc, #424]	; (800252c <main+0x3a8>)
 8002382:	f7fe f8e3 	bl	800054c <uartTransmit>

  	// Aktiviere Interrupts für CAN Bus
  	if((status = HAL_CAN_ActivateNotification(&hcan3, CAN_IT_RX_FIFO0_MSG_PENDING)) != HAL_OK)
 8002386:	2102      	movs	r1, #2
 8002388:	4867      	ldr	r0, [pc, #412]	; (8002528 <main+0x3a4>)
 800238a:	f002 f84a 	bl	8004422 <HAL_CAN_ActivateNotification>
 800238e:	4603      	mov	r3, r0
 8002390:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
 8002394:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 8002398:	2b00      	cmp	r3, #0
 800239a:	d006      	beq.n	80023aa <main+0x226>
  	{
  		/* Notification Error */
  		hal_error(status);
 800239c:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff fa3b 	bl	800181c <hal_error>
  		Error_Handler();
 80023a6:	f000 fd61 	bl	8002e6c <Error_Handler>
  	}
  	uartTransmit("Send Message\n", 13);
 80023aa:	210d      	movs	r1, #13
 80023ac:	4860      	ldr	r0, [pc, #384]	; (8002530 <main+0x3ac>)
 80023ae:	f7fe f8cd 	bl	800054c <uartTransmit>

  	// Filter Bank initialisieren um Daten zu empfangen
    sFilterConfig.FilterBank = 0;
 80023b2:	2300      	movs	r3, #0
 80023b4:	65fb      	str	r3, [r7, #92]	; 0x5c
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80023b6:	2300      	movs	r3, #0
 80023b8:	663b      	str	r3, [r7, #96]	; 0x60
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80023ba:	2301      	movs	r3, #1
 80023bc:	667b      	str	r3, [r7, #100]	; 0x64
    sFilterConfig.FilterIdHigh = 0x0000;
 80023be:	2300      	movs	r3, #0
 80023c0:	64bb      	str	r3, [r7, #72]	; 0x48
    sFilterConfig.FilterIdLow = 0x0000;
 80023c2:	2300      	movs	r3, #0
 80023c4:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 80023c6:	2300      	movs	r3, #0
 80023c8:	653b      	str	r3, [r7, #80]	; 0x50
    sFilterConfig.FilterMaskIdLow = 0x0000;
 80023ca:	2300      	movs	r3, #0
 80023cc:	657b      	str	r3, [r7, #84]	; 0x54
    sFilterConfig.FilterFIFOAssignment = 0;
 80023ce:	2300      	movs	r3, #0
 80023d0:	65bb      	str	r3, [r7, #88]	; 0x58
    sFilterConfig.FilterActivation = ENABLE;
 80023d2:	2301      	movs	r3, #1
 80023d4:	66bb      	str	r3, [r7, #104]	; 0x68

    // Filter Bank schreiben
    if((status = HAL_CAN_ConfigFilter(&hcan3, &sFilterConfig)) != HAL_OK)
 80023d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80023da:	4619      	mov	r1, r3
 80023dc:	4852      	ldr	r0, [pc, #328]	; (8002528 <main+0x3a4>)
 80023de:	f001 fe15 	bl	800400c <HAL_CAN_ConfigFilter>
 80023e2:	4603      	mov	r3, r0
 80023e4:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
 80023e8:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d006      	beq.n	80023fe <main+0x27a>
    {
    	/* Filter configuration Error */
  		hal_error(status);
 80023f0:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff fa11 	bl	800181c <hal_error>
  		Error_Handler();
 80023fa:	f000 fd37 	bl	8002e6c <Error_Handler>
    }

    // Test CAN Nachricht beschreiben
    for (uint8_t j = 0; j < 8; j++)
 80023fe:	2300      	movs	r3, #0
 8002400:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
 8002404:	e00e      	b.n	8002424 <main+0x2a0>
    {
    	TxData[j] = (j + 1);
 8002406:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 800240a:	f897 20d9 	ldrb.w	r2, [r7, #217]	; 0xd9
 800240e:	3201      	adds	r2, #1
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	33e8      	adds	r3, #232	; 0xe8
 8002414:	443b      	add	r3, r7
 8002416:	f803 2c70 	strb.w	r2, [r3, #-112]
    for (uint8_t j = 0; j < 8; j++)
 800241a:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 800241e:	3301      	adds	r3, #1
 8002420:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
 8002424:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 8002428:	2b07      	cmp	r3, #7
 800242a:	d9ec      	bls.n	8002406 <main+0x282>
    }

	if (!(sdc_in.sdcinput && 0b00001111))										// SDC OK; Motor, BTB, IMD und HVIL OK
 800242c:	4b41      	ldr	r3, [pc, #260]	; (8002534 <main+0x3b0>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	f040 808d 	bne.w	8002550 <main+0x3cc>
	{
		#define SDC_STRING_ERROR			"\nSDC ist nicht geschlossen"
		uartTransmit(SDC_STRING_ERROR, sizeof(SDC_STRING_ERROR));
 8002436:	211b      	movs	r1, #27
 8002438:	483f      	ldr	r0, [pc, #252]	; (8002538 <main+0x3b4>)
 800243a:	f7fe f887 	bl	800054c <uartTransmit>

		// LEDs setzen bei SDC Fehler
		leuchten_out.GreenLed = 0;
 800243e:	4a35      	ldr	r2, [pc, #212]	; (8002514 <main+0x390>)
 8002440:	7813      	ldrb	r3, [r2, #0]
 8002442:	f36f 1386 	bfc	r3, #6, #1
 8002446:	7013      	strb	r3, [r2, #0]
		leuchten_out.RedLed = 1;
 8002448:	4a32      	ldr	r2, [pc, #200]	; (8002514 <main+0x390>)
 800244a:	7813      	ldrb	r3, [r2, #0]
 800244c:	f043 0320 	orr.w	r3, r3, #32
 8002450:	7013      	strb	r3, [r2, #0]
		leuchten_out.AkkuErrorLed = 0;
 8002452:	4a30      	ldr	r2, [pc, #192]	; (8002514 <main+0x390>)
 8002454:	7813      	ldrb	r3, [r2, #0]
 8002456:	f36f 0382 	bfc	r3, #2, #1
 800245a:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);
 800245c:	4b2d      	ldr	r3, [pc, #180]	; (8002514 <main+0x390>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002464:	b2db      	uxtb	r3, r3
 8002466:	461a      	mov	r2, r3
 8002468:	2104      	movs	r1, #4
 800246a:	482b      	ldr	r0, [pc, #172]	; (8002518 <main+0x394>)
 800246c:	f002 fad6 	bl	8004a1c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);
 8002470:	4b28      	ldr	r3, [pc, #160]	; (8002514 <main+0x390>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002478:	b2db      	uxtb	r3, r3
 800247a:	461a      	mov	r2, r3
 800247c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002480:	4825      	ldr	r0, [pc, #148]	; (8002518 <main+0x394>)
 8002482:	f002 facb 	bl	8004a1c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AKKU_LED_GPIO_Port, AKKU_LED_Pin, leuchten_out.AkkuErrorLed);
 8002486:	4b23      	ldr	r3, [pc, #140]	; (8002514 <main+0x390>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800248e:	b2db      	uxtb	r3, r3
 8002490:	461a      	mov	r2, r3
 8002492:	2180      	movs	r1, #128	; 0x80
 8002494:	4829      	ldr	r0, [pc, #164]	; (800253c <main+0x3b8>)
 8002496:	f002 fac1 	bl	8004a1c <HAL_GPIO_WritePin>

		// Ausgabe welcher Fehler vorhanden
		// Motorsteuergeraet Fehler
		if(!(sdc_in.MotorSDC == 1))
 800249a:	4b26      	ldr	r3, [pc, #152]	; (8002534 <main+0x3b0>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	f003 0304 	and.w	r3, r3, #4
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d103      	bne.n	80024b0 <main+0x32c>
		{
			#define SDC_STRING_MOTOR		"\nSDC Motor hat einen Fehler und ist offen"
			uartTransmit(SDC_STRING_MOTOR, sizeof(SDC_STRING_MOTOR));
 80024a8:	212a      	movs	r1, #42	; 0x2a
 80024aa:	4825      	ldr	r0, [pc, #148]	; (8002540 <main+0x3bc>)
 80024ac:	f7fe f84e 	bl	800054c <uartTransmit>
		}

		// BamoCar Fehler
		if (!(sdc_in.BTB_SDC == 1))
 80024b0:	4b20      	ldr	r3, [pc, #128]	; (8002534 <main+0x3b0>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	f003 0308 	and.w	r3, r3, #8
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d103      	bne.n	80024c6 <main+0x342>
		{
			#define SDC_STRING_BTB			"\nSDC BTB hat einen Fehler und ist offen"
			uartTransmit(SDC_STRING_BTB, sizeof(SDC_STRING_BTB));
 80024be:	2128      	movs	r1, #40	; 0x28
 80024c0:	4820      	ldr	r0, [pc, #128]	; (8002544 <main+0x3c0>)
 80024c2:	f7fe f843 	bl	800054c <uartTransmit>
		}

		// HVIL Fehler
		if (!(sdc_in.HVIL == 1))
 80024c6:	4b1b      	ldr	r3, [pc, #108]	; (8002534 <main+0x3b0>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d103      	bne.n	80024dc <main+0x358>
		{
			#define SDC_STRING_HVIL			"\nSDC HVIL ist nicht geschlossen"
			uartTransmit(SDC_STRING_HVIL, sizeof(SDC_STRING_HVIL));
 80024d4:	2120      	movs	r1, #32
 80024d6:	481c      	ldr	r0, [pc, #112]	; (8002548 <main+0x3c4>)
 80024d8:	f7fe f838 	bl	800054c <uartTransmit>
		}

		// IMD Fehler
		if (!(sdc_in.IMD_OK_IN == 1))
 80024dc:	4b15      	ldr	r3, [pc, #84]	; (8002534 <main+0x3b0>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d154      	bne.n	8002594 <main+0x410>
		{
			#define SDC_STRING_IMD			"\nSDC IMD hat einen Fehler"
			uartTransmit(SDC_STRING_IMD, sizeof(SDC_STRING_IMD));
 80024ea:	211a      	movs	r1, #26
 80024ec:	4817      	ldr	r0, [pc, #92]	; (800254c <main+0x3c8>)
 80024ee:	f7fe f82d 	bl	800054c <uartTransmit>
 80024f2:	e04f      	b.n	8002594 <main+0x410>
 80024f4:	08009558 	.word	0x08009558
 80024f8:	08009570 	.word	0x08009570
 80024fc:	08009588 	.word	0x08009588
 8002500:	080093b4 	.word	0x080093b4
 8002504:	40021000 	.word	0x40021000
 8002508:	080093f0 	.word	0x080093f0
 800250c:	080093f4 	.word	0x080093f4
 8002510:	08009418 	.word	0x08009418
 8002514:	20000044 	.word	0x20000044
 8002518:	40020400 	.word	0x40020400
 800251c:	08009438 	.word	0x08009438
 8002520:	200001b4 	.word	0x200001b4
 8002524:	2000024c 	.word	0x2000024c
 8002528:	200000bc 	.word	0x200000bc
 800252c:	08009458 	.word	0x08009458
 8002530:	08009464 	.word	0x08009464
 8002534:	20000034 	.word	0x20000034
 8002538:	08009474 	.word	0x08009474
 800253c:	40021800 	.word	0x40021800
 8002540:	08009490 	.word	0x08009490
 8002544:	080094bc 	.word	0x080094bc
 8002548:	080094e4 	.word	0x080094e4
 800254c:	08009504 	.word	0x08009504
		}
	}
	else
	{
		// Keine Fehler, LEDs fuer OK setzen
		system_out.AmsOK = 1;
 8002550:	4a79      	ldr	r2, [pc, #484]	; (8002738 <main+0x5b4>)
 8002552:	7813      	ldrb	r3, [r2, #0]
 8002554:	f043 0304 	orr.w	r3, r3, #4
 8002558:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(AMS_OK_GPIO_Port, AMS_OK_Pin, system_out.AmsOK);
 800255a:	4b77      	ldr	r3, [pc, #476]	; (8002738 <main+0x5b4>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002562:	b2db      	uxtb	r3, r3
 8002564:	461a      	mov	r2, r3
 8002566:	2180      	movs	r1, #128	; 0x80
 8002568:	4874      	ldr	r0, [pc, #464]	; (800273c <main+0x5b8>)
 800256a:	f002 fa57 	bl	8004a1c <HAL_GPIO_WritePin>
		leuchten_out.GreenLed = 1;
 800256e:	4a74      	ldr	r2, [pc, #464]	; (8002740 <main+0x5bc>)
 8002570:	7813      	ldrb	r3, [r2, #0]
 8002572:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002576:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);
 8002578:	4b71      	ldr	r3, [pc, #452]	; (8002740 <main+0x5bc>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002580:	b2db      	uxtb	r3, r3
 8002582:	461a      	mov	r2, r3
 8002584:	2104      	movs	r1, #4
 8002586:	486f      	ldr	r0, [pc, #444]	; (8002744 <main+0x5c0>)
 8002588:	f002 fa48 	bl	8004a1c <HAL_GPIO_WritePin>

		// Ausgabe SDC geschlossen
		#define SDC_STRING_OK				"\nSDC ist geschlossen"
		uartTransmit(SDC_STRING_OK, sizeof(SDC_STRING_OK));
 800258c:	2115      	movs	r1, #21
 800258e:	486e      	ldr	r0, [pc, #440]	; (8002748 <main+0x5c4>)
 8002590:	f7fd ffdc 	bl	800054c <uartTransmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		ltc6811(ADCVC | MD73 | CELLALL);
 8002594:	f44f 7058 	mov.w	r0, #864	; 0x360
 8002598:	f7fe f88a 	bl	80006b0 <ltc6811>
		HAL_Delay(100);
 800259c:	2064      	movs	r0, #100	; 0x64
 800259e:	f001 f939 	bl	8003814 <HAL_Delay>

		ltc6811_read(RDCVA, &data[0]);
 80025a2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80025a6:	4619      	mov	r1, r3
 80025a8:	2004      	movs	r0, #4
 80025aa:	f7fe f957 	bl	800085c <ltc6811_read>
		ltc6811_read(RDCVB, &data[6]);
 80025ae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80025b2:	3306      	adds	r3, #6
 80025b4:	4619      	mov	r1, r3
 80025b6:	2006      	movs	r0, #6
 80025b8:	f7fe f950 	bl	800085c <ltc6811_read>
		ltc6811_read(RDCVC, &data[12]);
 80025bc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80025c0:	330c      	adds	r3, #12
 80025c2:	4619      	mov	r1, r3
 80025c4:	2008      	movs	r0, #8
 80025c6:	f7fe f949 	bl	800085c <ltc6811_read>
		ltc6811_read(RDCVD, &data[18]);
 80025ca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80025ce:	3312      	adds	r3, #18
 80025d0:	4619      	mov	r1, r3
 80025d2:	200a      	movs	r0, #10
 80025d4:	f7fe f942 	bl	800085c <ltc6811_read>

		uartTransmit("Spannungen\n", 11);
 80025d8:	210b      	movs	r1, #11
 80025da:	485c      	ldr	r0, [pc, #368]	; (800274c <main+0x5c8>)
 80025dc:	f7fd ffb6 	bl	800054c <uartTransmit>

		for (uint8_t i = 0; i < 12; i++)
 80025e0:	2300      	movs	r3, #0
 80025e2:	f887 30d8 	strb.w	r3, [r7, #216]	; 0xd8
 80025e6:	e020      	b.n	800262a <main+0x4a6>
		{
			spannungen[i] = ((data[i*2+1]<<8) | data[i*2]);
 80025e8:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	3301      	adds	r3, #1
 80025f0:	33e8      	adds	r3, #232	; 0xe8
 80025f2:	443b      	add	r3, r7
 80025f4:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80025f8:	021b      	lsls	r3, r3, #8
 80025fa:	b21a      	sxth	r2, r3
 80025fc:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	33e8      	adds	r3, #232	; 0xe8
 8002604:	443b      	add	r3, r7
 8002606:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 800260a:	b21b      	sxth	r3, r3
 800260c:	4313      	orrs	r3, r2
 800260e:	b21a      	sxth	r2, r3
 8002610:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 8002614:	b292      	uxth	r2, r2
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	33e8      	adds	r3, #232	; 0xe8
 800261a:	443b      	add	r3, r7
 800261c:	f823 2c64 	strh.w	r2, [r3, #-100]
		for (uint8_t i = 0; i < 12; i++)
 8002620:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 8002624:	3301      	adds	r3, #1
 8002626:	f887 30d8 	strb.w	r3, [r7, #216]	; 0xd8
 800262a:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 800262e:	2b0b      	cmp	r3, #11
 8002630:	d9da      	bls.n	80025e8 <main+0x464>
		}

		for (uint8_t i = 0; i < 12; i++)
 8002632:	2300      	movs	r3, #0
 8002634:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002638:	e013      	b.n	8002662 <main+0x4de>
		{
			uartTransmitNumber(spannungen[i], 10);
 800263a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	33e8      	adds	r3, #232	; 0xe8
 8002642:	443b      	add	r3, r7
 8002644:	f833 3c64 	ldrh.w	r3, [r3, #-100]
 8002648:	210a      	movs	r1, #10
 800264a:	4618      	mov	r0, r3
 800264c:	f7fd ff92 	bl	8000574 <uartTransmitNumber>
			uartTransmit(";", 1);
 8002650:	2101      	movs	r1, #1
 8002652:	483f      	ldr	r0, [pc, #252]	; (8002750 <main+0x5cc>)
 8002654:	f7fd ff7a 	bl	800054c <uartTransmit>
		for (uint8_t i = 0; i < 12; i++)
 8002658:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800265c:	3301      	adds	r3, #1
 800265e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002662:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8002666:	2b0b      	cmp	r3, #11
 8002668:	d9e7      	bls.n	800263a <main+0x4b6>
		}

		tmp = 0;
 800266a:	2300      	movs	r3, #0
 800266c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		for (uint8_t i = 0; i < 12; i++)
 8002670:	2300      	movs	r3, #0
 8002672:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
 8002676:	e011      	b.n	800269c <main+0x518>
		{
			tmp += spannungen[i];
 8002678:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	33e8      	adds	r3, #232	; 0xe8
 8002680:	443b      	add	r3, r7
 8002682:	f833 3c64 	ldrh.w	r3, [r3, #-100]
 8002686:	461a      	mov	r2, r3
 8002688:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800268c:	4413      	add	r3, r2
 800268e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		for (uint8_t i = 0; i < 12; i++)
 8002692:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8002696:	3301      	adds	r3, #1
 8002698:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
 800269c:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 80026a0:	2b0b      	cmp	r3, #11
 80026a2:	d9e9      	bls.n	8002678 <main+0x4f4>
		}
		tmp /= 12;
 80026a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026a8:	4a2a      	ldr	r2, [pc, #168]	; (8002754 <main+0x5d0>)
 80026aa:	fba2 2303 	umull	r2, r3, r2, r3
 80026ae:	08db      	lsrs	r3, r3, #3
 80026b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		uartTransmitNumber(tmp, 10);
 80026b4:	210a      	movs	r1, #10
 80026b6:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80026ba:	f7fd ff5b 	bl	8000574 <uartTransmitNumber>
		uartTransmit(";", 1);
 80026be:	2101      	movs	r1, #1
 80026c0:	4823      	ldr	r0, [pc, #140]	; (8002750 <main+0x5cc>)
 80026c2:	f7fd ff43 	bl	800054c <uartTransmit>

		tmp_mean = calculateMovingAverage(tmp_mean, tmp, 10);
 80026c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026ca:	b299      	uxth	r1, r3
 80026cc:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 80026d0:	220a      	movs	r2, #10
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff fd1c 	bl	8002110 <calculateMovingAverage>
 80026d8:	4603      	mov	r3, r0
 80026da:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
		uartTransmitNumber(tmp_mean, 10);
 80026de:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 80026e2:	210a      	movs	r1, #10
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fd ff45 	bl	8000574 <uartTransmitNumber>

		uartTransmit("\n", 1);
 80026ea:	2101      	movs	r1, #1
 80026ec:	481a      	ldr	r0, [pc, #104]	; (8002758 <main+0x5d4>)
 80026ee:	f7fd ff2d 	bl	800054c <uartTransmit>

		uartTransmit("Temperaturen\n", 13);
 80026f2:	210d      	movs	r1, #13
 80026f4:	4819      	ldr	r0, [pc, #100]	; (800275c <main+0x5d8>)
 80026f6:	f7fd ff29 	bl	800054c <uartTransmit>

		for (uint8_t j = 0; j < 8; j++)
 80026fa:	2300      	movs	r3, #0
 80026fc:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
 8002700:	e07a      	b.n	80027f8 <main+0x674>
		{
			ltc1380_write(LTC1380_MUX0, j);									// Multiplexer 0 einstellen
 8002702:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 8002706:	4619      	mov	r1, r3
 8002708:	2090      	movs	r0, #144	; 0x90
 800270a:	f7fd ff53 	bl	80005b4 <ltc1380_write>
			ltc1380_write(LTC1380_MUX2, j);									// Multiplexer 1 einstellen
 800270e:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 8002712:	4619      	mov	r1, r3
 8002714:	2094      	movs	r0, #148	; 0x94
 8002716:	f7fd ff4d 	bl	80005b4 <ltc1380_write>
			ltc6811(ADAX | MD73 | GPIOALL);									// Initial Command Zellen auslesen
 800271a:	f44f 60ac 	mov.w	r0, #1376	; 0x560
 800271e:	f7fd ffc7 	bl	80006b0 <ltc6811>
			ltc6811_read(RDAUXA, &data[0]);
 8002722:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002726:	4619      	mov	r1, r3
 8002728:	200c      	movs	r0, #12
 800272a:	f7fe f897 	bl	800085c <ltc6811_read>

			for (uint8_t i = 0; i < 3; i++)
 800272e:	2300      	movs	r3, #0
 8002730:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
 8002734:	e035      	b.n	80027a2 <main+0x61e>
 8002736:	bf00      	nop
 8002738:	2000003c 	.word	0x2000003c
 800273c:	40021000 	.word	0x40021000
 8002740:	20000044 	.word	0x20000044
 8002744:	40020400 	.word	0x40020400
 8002748:	08009520 	.word	0x08009520
 800274c:	08009538 	.word	0x08009538
 8002750:	08009544 	.word	0x08009544
 8002754:	aaaaaaab 	.word	0xaaaaaaab
 8002758:	080093f0 	.word	0x080093f0
 800275c:	08009548 	.word	0x08009548
			{
				temperatur[i] = ((data[i*2+1]<<8) | data[i*2]);
 8002760:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	3301      	adds	r3, #1
 8002768:	33e8      	adds	r3, #232	; 0xe8
 800276a:	443b      	add	r3, r7
 800276c:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8002770:	021b      	lsls	r3, r3, #8
 8002772:	b21a      	sxth	r2, r3
 8002774:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	33e8      	adds	r3, #232	; 0xe8
 800277c:	443b      	add	r3, r7
 800277e:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8002782:	b21b      	sxth	r3, r3
 8002784:	4313      	orrs	r3, r2
 8002786:	b21a      	sxth	r2, r3
 8002788:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 800278c:	b292      	uxth	r2, r2
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	33e8      	adds	r3, #232	; 0xe8
 8002792:	443b      	add	r3, r7
 8002794:	f823 2c68 	strh.w	r2, [r3, #-104]
			for (uint8_t i = 0; i < 3; i++)
 8002798:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 800279c:	3301      	adds	r3, #1
 800279e:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
 80027a2:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d9da      	bls.n	8002760 <main+0x5dc>
			}
			uartTransmitNumber(temperatur[0], 10);
 80027aa:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 80027ae:	210a      	movs	r1, #10
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7fd fedf 	bl	8000574 <uartTransmitNumber>
			uartTransmit(";", 1);
 80027b6:	2101      	movs	r1, #1
 80027b8:	48c4      	ldr	r0, [pc, #784]	; (8002acc <main+0x948>)
 80027ba:	f7fd fec7 	bl	800054c <uartTransmit>
			uartTransmitNumber(temperatur[1], 10);
 80027be:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80027c2:	210a      	movs	r1, #10
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7fd fed5 	bl	8000574 <uartTransmitNumber>
			uartTransmit(";", 1);
 80027ca:	2101      	movs	r1, #1
 80027cc:	48bf      	ldr	r0, [pc, #764]	; (8002acc <main+0x948>)
 80027ce:	f7fd febd 	bl	800054c <uartTransmit>

			if (j == 7)
 80027d2:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 80027d6:	2b07      	cmp	r3, #7
 80027d8:	d109      	bne.n	80027ee <main+0x66a>
			{
				uartTransmitNumber(temperatur[2], 10);
 80027da:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80027de:	210a      	movs	r1, #10
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7fd fec7 	bl	8000574 <uartTransmitNumber>
				uartTransmit(";", 1);
 80027e6:	2101      	movs	r1, #1
 80027e8:	48b8      	ldr	r0, [pc, #736]	; (8002acc <main+0x948>)
 80027ea:	f7fd feaf 	bl	800054c <uartTransmit>
		for (uint8_t j = 0; j < 8; j++)
 80027ee:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 80027f2:	3301      	adds	r3, #1
 80027f4:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
 80027f8:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 80027fc:	2b07      	cmp	r3, #7
 80027fe:	d980      	bls.n	8002702 <main+0x57e>
			}
		}

		uartTransmit("\n", 1);
 8002800:	2101      	movs	r1, #1
 8002802:	48b3      	ldr	r0, [pc, #716]	; (8002ad0 <main+0x94c>)
 8002804:	f7fd fea2 	bl	800054c <uartTransmit>

		temp++;
 8002808:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 800280c:	3301      	adds	r3, #1
 800280e:	f887 30e0 	strb.w	r3, [r7, #224]	; 0xe0
		// Task wird jede Millisekunde ausgefuehrt
		if (millisekunden_flag_1 == 1)
 8002812:	4bb0      	ldr	r3, [pc, #704]	; (8002ad4 <main+0x950>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b01      	cmp	r3, #1
 800281a:	d10a      	bne.n	8002832 <main+0x6ae>
		{
			count++;													// Zaehler count hochzaehlen
 800281c:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 8002820:	3301      	adds	r3, #1
 8002822:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
			millisekunden_flag_1 = 0;									// Setze Millisekunden-Flag zurueck
 8002826:	4bab      	ldr	r3, [pc, #684]	; (8002ad4 <main+0x950>)
 8002828:	2200      	movs	r2, #0
 800282a:	701a      	strb	r2, [r3, #0]

			// Setzen des Start Flags,  damit Tasks nur einmal pro ms aufgerufen werden kann
			start_flag = 1;												// Setze Start Flag
 800282c:	2301      	movs	r3, #1
 800282e:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
		}

		// Task wird alle 500 Millisekunden ausgefuehrt
		if (((count % 500) == 0) && (start_flag == 1))
 8002832:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 8002836:	4aa8      	ldr	r2, [pc, #672]	; (8002ad8 <main+0x954>)
 8002838:	fba2 1203 	umull	r1, r2, r2, r3
 800283c:	0952      	lsrs	r2, r2, #5
 800283e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002842:	fb01 f202 	mul.w	r2, r1, r2
 8002846:	1a9b      	subs	r3, r3, r2
 8002848:	b29b      	uxth	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	f040 81de 	bne.w	8002c0c <main+0xa88>
 8002850:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8002854:	2b01      	cmp	r3, #1
 8002856:	f040 81d9 	bne.w	8002c0c <main+0xa88>
		{
			if (rising != 0 && falling != 0)
 800285a:	4ba0      	ldr	r3, [pc, #640]	; (8002adc <main+0x958>)
 800285c:	881b      	ldrh	r3, [r3, #0]
 800285e:	b29b      	uxth	r3, r3
 8002860:	2b00      	cmp	r3, #0
 8002862:	d03b      	beq.n	80028dc <main+0x758>
 8002864:	4b9e      	ldr	r3, [pc, #632]	; (8002ae0 <main+0x95c>)
 8002866:	881b      	ldrh	r3, [r3, #0]
 8002868:	b29b      	uxth	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d036      	beq.n	80028dc <main+0x758>
			{
				int diff = getDifference(rising, falling);
 800286e:	4b9b      	ldr	r3, [pc, #620]	; (8002adc <main+0x958>)
 8002870:	881b      	ldrh	r3, [r3, #0]
 8002872:	b29b      	uxth	r3, r3
 8002874:	4a9a      	ldr	r2, [pc, #616]	; (8002ae0 <main+0x95c>)
 8002876:	8812      	ldrh	r2, [r2, #0]
 8002878:	b292      	uxth	r2, r2
 800287a:	4611      	mov	r1, r2
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff fc60 	bl	8002142 <getDifference>
 8002882:	4603      	mov	r3, r0
 8002884:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
				dutyCycle = round((float)(diff * 100) / (float)rising);	// (width / period ) * 100
 8002888:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800288c:	2264      	movs	r2, #100	; 0x64
 800288e:	fb02 f303 	mul.w	r3, r2, r3
 8002892:	ee07 3a90 	vmov	s15, r3
 8002896:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800289a:	4b90      	ldr	r3, [pc, #576]	; (8002adc <main+0x958>)
 800289c:	881b      	ldrh	r3, [r3, #0]
 800289e:	b29b      	uxth	r3, r3
 80028a0:	ee07 3a90 	vmov	s15, r3
 80028a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80028b0:	eeb0 0b47 	vmov.f64	d0, d7
 80028b4:	f006 fb66 	bl	8008f84 <round>
 80028b8:	eeb0 7b40 	vmov.f64	d7, d0
 80028bc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80028c0:	ee17 3a90 	vmov	r3, s15
 80028c4:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
				frequency = timerPeriod / rising;						// timer restarts after rising edge so time between two rising edge is whatever is measured
 80028c8:	4b84      	ldr	r3, [pc, #528]	; (8002adc <main+0x958>)
 80028ca:	881b      	ldrh	r3, [r3, #0]
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	f8b7 20d2 	ldrh.w	r2, [r7, #210]	; 0xd2
 80028d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d6:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
			{
 80028da:	e005      	b.n	80028e8 <main+0x764>
			}
			else
			{
				dutyCycle = 0;
 80028dc:	2300      	movs	r3, #0
 80028de:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
				frequency = 0;
 80028e2:	2300      	movs	r3, #0
 80028e4:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
			}

			uartTransmitNumber(dutyCycle, 10);
 80028e8:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 80028ec:	210a      	movs	r1, #10
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fd fe40 	bl	8000574 <uartTransmitNumber>
			uartTransmitNumber(frequency, 10);
 80028f4:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 80028f8:	210a      	movs	r1, #10
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fd fe3a 	bl	8000574 <uartTransmitNumber>

			if (sdc_in.IMD_OK_IN == 1)
 8002900:	4b78      	ldr	r3, [pc, #480]	; (8002ae4 <main+0x960>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	f000 8122 	beq.w	8002b54 <main+0x9d0>
			{
				switch (frequency)
 8002910:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8002914:	2b32      	cmp	r3, #50	; 0x32
 8002916:	f300 8117 	bgt.w	8002b48 <main+0x9c4>
 800291a:	2b14      	cmp	r3, #20
 800291c:	da04      	bge.n	8002928 <main+0x7a4>
 800291e:	2b00      	cmp	r3, #0
 8002920:	d048      	beq.n	80029b4 <main+0x830>
 8002922:	2b0a      	cmp	r3, #10
 8002924:	d068      	beq.n	80029f8 <main+0x874>
 8002926:	e10f      	b.n	8002b48 <main+0x9c4>
 8002928:	3b14      	subs	r3, #20
 800292a:	2b1e      	cmp	r3, #30
 800292c:	f200 810c 	bhi.w	8002b48 <main+0x9c4>
 8002930:	a201      	add	r2, pc, #4	; (adr r2, 8002938 <main+0x7b4>)
 8002932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002936:	bf00      	nop
 8002938:	08002a45 	.word	0x08002a45
 800293c:	08002b49 	.word	0x08002b49
 8002940:	08002b49 	.word	0x08002b49
 8002944:	08002b49 	.word	0x08002b49
 8002948:	08002b49 	.word	0x08002b49
 800294c:	08002b49 	.word	0x08002b49
 8002950:	08002b49 	.word	0x08002b49
 8002954:	08002b49 	.word	0x08002b49
 8002958:	08002b49 	.word	0x08002b49
 800295c:	08002b49 	.word	0x08002b49
 8002960:	08002a91 	.word	0x08002a91
 8002964:	08002b49 	.word	0x08002b49
 8002968:	08002b49 	.word	0x08002b49
 800296c:	08002b49 	.word	0x08002b49
 8002970:	08002b49 	.word	0x08002b49
 8002974:	08002b49 	.word	0x08002b49
 8002978:	08002b49 	.word	0x08002b49
 800297c:	08002b49 	.word	0x08002b49
 8002980:	08002b49 	.word	0x08002b49
 8002984:	08002b49 	.word	0x08002b49
 8002988:	08002af5 	.word	0x08002af5
 800298c:	08002b49 	.word	0x08002b49
 8002990:	08002b49 	.word	0x08002b49
 8002994:	08002b49 	.word	0x08002b49
 8002998:	08002b49 	.word	0x08002b49
 800299c:	08002b49 	.word	0x08002b49
 80029a0:	08002b49 	.word	0x08002b49
 80029a4:	08002b49 	.word	0x08002b49
 80029a8:	08002b49 	.word	0x08002b49
 80029ac:	08002b49 	.word	0x08002b49
 80029b0:	08002b1f 	.word	0x08002b1f
				{
					case 0:
						system_in.IMD_PWM = HAL_GPIO_ReadPin(IMD_PWM_GPIO_Port, IMD_PWM_Pin);						// Eingang IMD PWM
 80029b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029b8:	484b      	ldr	r0, [pc, #300]	; (8002ae8 <main+0x964>)
 80029ba:	f002 f817 	bl	80049ec <HAL_GPIO_ReadPin>
 80029be:	4603      	mov	r3, r0
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	b2d9      	uxtb	r1, r3
 80029c6:	4a49      	ldr	r2, [pc, #292]	; (8002aec <main+0x968>)
 80029c8:	7813      	ldrb	r3, [r2, #0]
 80029ca:	f361 03c3 	bfi	r3, r1, #3, #1
 80029ce:	7013      	strb	r3, [r2, #0]
						if (system_in.IMD_PWM == 1)
 80029d0:	4b46      	ldr	r3, [pc, #280]	; (8002aec <main+0x968>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	f003 0308 	and.w	r3, r3, #8
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d006      	beq.n	80029ec <main+0x868>
						{
							system_in.IMD_PWM_STATUS = IMD_KURZSCHLUSS_KL15;
 80029de:	4a43      	ldr	r2, [pc, #268]	; (8002aec <main+0x968>)
 80029e0:	7813      	ldrb	r3, [r2, #0]
 80029e2:	2106      	movs	r1, #6
 80029e4:	f361 0302 	bfi	r3, r1, #0, #3
 80029e8:	7013      	strb	r3, [r2, #0]
						}
						else
						{
							system_in.IMD_PWM_STATUS = IMD_KURZSCHLUSS_GND;
						}
						break;
 80029ea:	e10c      	b.n	8002c06 <main+0xa82>
							system_in.IMD_PWM_STATUS = IMD_KURZSCHLUSS_GND;
 80029ec:	4a3f      	ldr	r2, [pc, #252]	; (8002aec <main+0x968>)
 80029ee:	7813      	ldrb	r3, [r2, #0]
 80029f0:	f36f 0302 	bfc	r3, #0, #3
 80029f4:	7013      	strb	r3, [r2, #0]
						break;
 80029f6:	e106      	b.n	8002c06 <main+0xa82>
					case 10:
						system_in.IMD_PWM_STATUS = IMD_NORMAL;
 80029f8:	4a3c      	ldr	r2, [pc, #240]	; (8002aec <main+0x968>)
 80029fa:	7813      	ldrb	r3, [r2, #0]
 80029fc:	2101      	movs	r1, #1
 80029fe:	f361 0302 	bfi	r3, r1, #0, #3
 8002a02:	7013      	strb	r3, [r2, #0]
						if (dutyCycle > 5 && dutyCycle < 95)								// IMD PWM
 8002a04:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8002a08:	2b05      	cmp	r3, #5
 8002a0a:	d915      	bls.n	8002a38 <main+0x8b4>
 8002a0c:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8002a10:	2b5e      	cmp	r3, #94	; 0x5e
 8002a12:	d811      	bhi.n	8002a38 <main+0x8b4>
						{
							R_IMD = 90 * 1200 / (dutyCycle - 5) - 1200;
 8002a14:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8002a18:	3b05      	subs	r3, #5
 8002a1a:	4a35      	ldr	r2, [pc, #212]	; (8002af0 <main+0x96c>)
 8002a1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8002a26:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
							uartTransmitNumber(R_IMD, 10);
 8002a2a:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8002a2e:	210a      	movs	r1, #10
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7fd fd9f 	bl	8000574 <uartTransmitNumber>
						}
						else																// IMD Invalid
						{
							system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;
						}
						break;
 8002a36:	e0e6      	b.n	8002c06 <main+0xa82>
							system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;
 8002a38:	4a2c      	ldr	r2, [pc, #176]	; (8002aec <main+0x968>)
 8002a3a:	7813      	ldrb	r3, [r2, #0]
 8002a3c:	f043 0307 	orr.w	r3, r3, #7
 8002a40:	7013      	strb	r3, [r2, #0]
						break;
 8002a42:	e0e0      	b.n	8002c06 <main+0xa82>
					case 20:
						system_in.IMD_PWM_STATUS = IMD_UNTERSPANNUNG;
 8002a44:	4a29      	ldr	r2, [pc, #164]	; (8002aec <main+0x968>)
 8002a46:	7813      	ldrb	r3, [r2, #0]
 8002a48:	2102      	movs	r1, #2
 8002a4a:	f361 0302 	bfi	r3, r1, #0, #3
 8002a4e:	7013      	strb	r3, [r2, #0]
						if (dutyCycle > 5 && dutyCycle < 95)								// IMD PWM
 8002a50:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8002a54:	2b05      	cmp	r3, #5
 8002a56:	d915      	bls.n	8002a84 <main+0x900>
 8002a58:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8002a5c:	2b5e      	cmp	r3, #94	; 0x5e
 8002a5e:	d811      	bhi.n	8002a84 <main+0x900>
						{
							R_IMD = 90 * 1200 / (dutyCycle - 5) - 1200;
 8002a60:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8002a64:	3b05      	subs	r3, #5
 8002a66:	4a22      	ldr	r2, [pc, #136]	; (8002af0 <main+0x96c>)
 8002a68:	fb92 f3f3 	sdiv	r3, r2, r3
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8002a72:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
							uartTransmitNumber(R_IMD, 10);
 8002a76:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8002a7a:	210a      	movs	r1, #10
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7fd fd79 	bl	8000574 <uartTransmitNumber>
						}
						else																// IMD Invalid
						{
							system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;
						}
						break;
 8002a82:	e0c0      	b.n	8002c06 <main+0xa82>
							system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;
 8002a84:	4a19      	ldr	r2, [pc, #100]	; (8002aec <main+0x968>)
 8002a86:	7813      	ldrb	r3, [r2, #0]
 8002a88:	f043 0307 	orr.w	r3, r3, #7
 8002a8c:	7013      	strb	r3, [r2, #0]
						break;
 8002a8e:	e0ba      	b.n	8002c06 <main+0xa82>
					case 30:
						system_in.IMD_PWM_STATUS = IMD_SCHNELLSTART;
 8002a90:	4a16      	ldr	r2, [pc, #88]	; (8002aec <main+0x968>)
 8002a92:	7813      	ldrb	r3, [r2, #0]
 8002a94:	2103      	movs	r1, #3
 8002a96:	f361 0302 	bfi	r3, r1, #0, #3
 8002a9a:	7013      	strb	r3, [r2, #0]
						if (dutyCycle > 5 && dutyCycle < 11)								// IMD Gut
 8002a9c:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8002aa0:	2b05      	cmp	r3, #5
 8002aa2:	d903      	bls.n	8002aac <main+0x928>
 8002aa4:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8002aa8:	2b0a      	cmp	r3, #10
 8002aaa:	d90d      	bls.n	8002ac8 <main+0x944>
						{

						}
						else if (dutyCycle > 89 && dutyCycle < 95)							// IMD Schlecht
 8002aac:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8002ab0:	2b59      	cmp	r3, #89	; 0x59
 8002ab2:	d903      	bls.n	8002abc <main+0x938>
 8002ab4:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8002ab8:	2b5e      	cmp	r3, #94	; 0x5e
 8002aba:	d905      	bls.n	8002ac8 <main+0x944>
						{

						}
						else																// IMD Fehlerhaft
						{
							system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;
 8002abc:	4a0b      	ldr	r2, [pc, #44]	; (8002aec <main+0x968>)
 8002abe:	7813      	ldrb	r3, [r2, #0]
 8002ac0:	f043 0307 	orr.w	r3, r3, #7
 8002ac4:	7013      	strb	r3, [r2, #0]
						}
						break;
 8002ac6:	e09e      	b.n	8002c06 <main+0xa82>
 8002ac8:	e09d      	b.n	8002c06 <main+0xa82>
 8002aca:	bf00      	nop
 8002acc:	08009544 	.word	0x08009544
 8002ad0:	080093f0 	.word	0x080093f0
 8002ad4:	200000e8 	.word	0x200000e8
 8002ad8:	10624dd3 	.word	0x10624dd3
 8002adc:	200000e4 	.word	0x200000e4
 8002ae0:	200000e6 	.word	0x200000e6
 8002ae4:	20000034 	.word	0x20000034
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	20000030 	.word	0x20000030
 8002af0:	0001a5e0 	.word	0x0001a5e0
					case 40:
						system_in.IMD_PWM_STATUS = IMD_GERAETEFEHLER;
 8002af4:	4a76      	ldr	r2, [pc, #472]	; (8002cd0 <main+0xb4c>)
 8002af6:	7813      	ldrb	r3, [r2, #0]
 8002af8:	2104      	movs	r1, #4
 8002afa:	f361 0302 	bfi	r3, r1, #0, #3
 8002afe:	7013      	strb	r3, [r2, #0]
						if (dutyCycle > 47 && dutyCycle < 53)								// IMD PWM
 8002b00:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8002b04:	2b2f      	cmp	r3, #47	; 0x2f
 8002b06:	d903      	bls.n	8002b10 <main+0x98c>
 8002b08:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8002b0c:	2b34      	cmp	r3, #52	; 0x34
 8002b0e:	d905      	bls.n	8002b1c <main+0x998>
						{

						}
						else																// IMD Invalid
						{
							system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;
 8002b10:	4a6f      	ldr	r2, [pc, #444]	; (8002cd0 <main+0xb4c>)
 8002b12:	7813      	ldrb	r3, [r2, #0]
 8002b14:	f043 0307 	orr.w	r3, r3, #7
 8002b18:	7013      	strb	r3, [r2, #0]
						}
						break;
 8002b1a:	e074      	b.n	8002c06 <main+0xa82>
 8002b1c:	e073      	b.n	8002c06 <main+0xa82>
					case 50:
						system_in.IMD_PWM_STATUS = IMD_ANSCHLUSSFEHLER_ERDE;
 8002b1e:	4a6c      	ldr	r2, [pc, #432]	; (8002cd0 <main+0xb4c>)
 8002b20:	7813      	ldrb	r3, [r2, #0]
 8002b22:	2105      	movs	r1, #5
 8002b24:	f361 0302 	bfi	r3, r1, #0, #3
 8002b28:	7013      	strb	r3, [r2, #0]
						if (dutyCycle > 47 && dutyCycle < 53)								// IMD PWM
 8002b2a:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8002b2e:	2b2f      	cmp	r3, #47	; 0x2f
 8002b30:	d903      	bls.n	8002b3a <main+0x9b6>
 8002b32:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8002b36:	2b34      	cmp	r3, #52	; 0x34
 8002b38:	d905      	bls.n	8002b46 <main+0x9c2>
						{

						}
						else																// IMD Invalid
						{
							system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;
 8002b3a:	4a65      	ldr	r2, [pc, #404]	; (8002cd0 <main+0xb4c>)
 8002b3c:	7813      	ldrb	r3, [r2, #0]
 8002b3e:	f043 0307 	orr.w	r3, r3, #7
 8002b42:	7013      	strb	r3, [r2, #0]
						}
						break;																// IMD Error, kein anderes Ereignis zutrefend
 8002b44:	e05f      	b.n	8002c06 <main+0xa82>
 8002b46:	e05e      	b.n	8002c06 <main+0xa82>
					default:
						system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;
 8002b48:	4a61      	ldr	r2, [pc, #388]	; (8002cd0 <main+0xb4c>)
 8002b4a:	7813      	ldrb	r3, [r2, #0]
 8002b4c:	f043 0307 	orr.w	r3, r3, #7
 8002b50:	7013      	strb	r3, [r2, #0]
						break;
 8002b52:	e058      	b.n	8002c06 <main+0xa82>
				}
			}
			else
			{
				switch (frequency)
 8002b54:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8002b58:	2b0a      	cmp	r3, #10
 8002b5a:	d002      	beq.n	8002b62 <main+0x9de>
 8002b5c:	2b14      	cmp	r3, #20
 8002b5e:	d026      	beq.n	8002bae <main+0xa2a>
 8002b60:	e04b      	b.n	8002bfa <main+0xa76>
				{

					case 10:
						system_in.IMD_PWM_STATUS = IMD_NORMAL;
 8002b62:	4a5b      	ldr	r2, [pc, #364]	; (8002cd0 <main+0xb4c>)
 8002b64:	7813      	ldrb	r3, [r2, #0]
 8002b66:	2101      	movs	r1, #1
 8002b68:	f361 0302 	bfi	r3, r1, #0, #3
 8002b6c:	7013      	strb	r3, [r2, #0]
						if (dutyCycle > 5 && dutyCycle < 95)								// IMD PWM
 8002b6e:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8002b72:	2b05      	cmp	r3, #5
 8002b74:	d915      	bls.n	8002ba2 <main+0xa1e>
 8002b76:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8002b7a:	2b5e      	cmp	r3, #94	; 0x5e
 8002b7c:	d811      	bhi.n	8002ba2 <main+0xa1e>
						{
							R_IMD = 90 * 1200 / (dutyCycle - 5) - 1200;
 8002b7e:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8002b82:	3b05      	subs	r3, #5
 8002b84:	4a53      	ldr	r2, [pc, #332]	; (8002cd4 <main+0xb50>)
 8002b86:	fb92 f3f3 	sdiv	r3, r2, r3
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8002b90:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
							uartTransmitNumber(R_IMD, 10);
 8002b94:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8002b98:	210a      	movs	r1, #10
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7fd fcea 	bl	8000574 <uartTransmitNumber>
						}
						else																// IMD Invalid
						{
							system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;
						}
						break;
 8002ba0:	e031      	b.n	8002c06 <main+0xa82>
							system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;
 8002ba2:	4a4b      	ldr	r2, [pc, #300]	; (8002cd0 <main+0xb4c>)
 8002ba4:	7813      	ldrb	r3, [r2, #0]
 8002ba6:	f043 0307 	orr.w	r3, r3, #7
 8002baa:	7013      	strb	r3, [r2, #0]
						break;
 8002bac:	e02b      	b.n	8002c06 <main+0xa82>
					case 20:
						system_in.IMD_PWM_STATUS = IMD_UNTERSPANNUNG;
 8002bae:	4a48      	ldr	r2, [pc, #288]	; (8002cd0 <main+0xb4c>)
 8002bb0:	7813      	ldrb	r3, [r2, #0]
 8002bb2:	2102      	movs	r1, #2
 8002bb4:	f361 0302 	bfi	r3, r1, #0, #3
 8002bb8:	7013      	strb	r3, [r2, #0]
						if (dutyCycle > 5 && dutyCycle < 95)								// IMD PWM
 8002bba:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8002bbe:	2b05      	cmp	r3, #5
 8002bc0:	d915      	bls.n	8002bee <main+0xa6a>
 8002bc2:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8002bc6:	2b5e      	cmp	r3, #94	; 0x5e
 8002bc8:	d811      	bhi.n	8002bee <main+0xa6a>
						{
							R_IMD = 90 * 1200 / (dutyCycle - 5) - 1200;
 8002bca:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8002bce:	3b05      	subs	r3, #5
 8002bd0:	4a40      	ldr	r2, [pc, #256]	; (8002cd4 <main+0xb50>)
 8002bd2:	fb92 f3f3 	sdiv	r3, r2, r3
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8002bdc:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
							uartTransmitNumber(R_IMD, 10);
 8002be0:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8002be4:	210a      	movs	r1, #10
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fd fcc4 	bl	8000574 <uartTransmitNumber>
						}
						else																// IMD Invalid
						{
							system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;
						}
						break;																// IMD Error, kein anderes Ereignis zutrefend
 8002bec:	e00b      	b.n	8002c06 <main+0xa82>
							system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;
 8002bee:	4a38      	ldr	r2, [pc, #224]	; (8002cd0 <main+0xb4c>)
 8002bf0:	7813      	ldrb	r3, [r2, #0]
 8002bf2:	f043 0307 	orr.w	r3, r3, #7
 8002bf6:	7013      	strb	r3, [r2, #0]
						break;																// IMD Error, kein anderes Ereignis zutrefend
 8002bf8:	e005      	b.n	8002c06 <main+0xa82>
					default:
						system_in.IMD_PWM_STATUS = IMD_FREQ_ERROR;
 8002bfa:	4a35      	ldr	r2, [pc, #212]	; (8002cd0 <main+0xb4c>)
 8002bfc:	7813      	ldrb	r3, [r2, #0]
 8002bfe:	f043 0307 	orr.w	r3, r3, #7
 8002c02:	7013      	strb	r3, [r2, #0]
						break;
 8002c04:	bf00      	nop
				}
			}
	
			count = 0;
 8002c06:	2300      	movs	r3, #0
 8002c08:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
		}
		
		if ((count % 250) == 0)
 8002c0c:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 8002c10:	4a31      	ldr	r2, [pc, #196]	; (8002cd8 <main+0xb54>)
 8002c12:	fba2 1203 	umull	r1, r2, r2, r3
 8002c16:	0912      	lsrs	r2, r2, #4
 8002c18:	21fa      	movs	r1, #250	; 0xfa
 8002c1a:	fb01 f202 	mul.w	r2, r1, r2
 8002c1e:	1a9b      	subs	r3, r3, r2
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d14c      	bne.n	8002cc0 <main+0xb3c>
		{
			readall_inputs();
 8002c26:	f7fe fe29 	bl	800187c <readall_inputs>

			// Daten fuer Ausgaenge zusammenfuehren
			OutData[0] = system_out.systemoutput;
 8002c2a:	4b2c      	ldr	r3, [pc, #176]	; (8002cdc <main+0xb58>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
			OutData[1] = highcurrent_out.high_out;
 8002c32:	4b2b      	ldr	r3, [pc, #172]	; (8002ce0 <main+0xb5c>)
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
			OutData[2] = leuchten_out.ledoutput;
 8002c3a:	4b2a      	ldr	r3, [pc, #168]	; (8002ce4 <main+0xb60>)
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
			OutData[3] = komfort_out.komfortoutput;
 8002c42:	4b29      	ldr	r3, [pc, #164]	; (8002ce8 <main+0xb64>)
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	
			// Sende Nachricht digitale Ausgaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxOutput, OutData, (uint32_t *)CAN_TX_MAILBOX0);
 8002c4a:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8002c4e:	f107 0118 	add.w	r1, r7, #24
 8002c52:	2301      	movs	r3, #1
 8002c54:	4825      	ldr	r0, [pc, #148]	; (8002cec <main+0xb68>)
 8002c56:	f001 fb09 	bl	800426c <HAL_CAN_AddTxMessage>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
			hal_error(status);
 8002c60:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7fe fdd9 	bl	800181c <hal_error>

			// Daten fuer Eingaenge zusammenfuehren
			InData[0] = system_in.systeminput;
 8002c6a:	4b19      	ldr	r3, [pc, #100]	; (8002cd0 <main+0xb4c>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
			InData[1] = sdc_in.sdcinput;
 8002c72:	4b1f      	ldr	r3, [pc, #124]	; (8002cf0 <main+0xb6c>)
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
			InData[2] = komfort_in.komfortinput;
 8002c7a:	4b1e      	ldr	r3, [pc, #120]	; (8002cf4 <main+0xb70>)
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
	
			// Sende Nachricht digitale Eingaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxInput, InData, (uint32_t *)CAN_TX_MAILBOX0);
 8002c82:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002c86:	4639      	mov	r1, r7
 8002c88:	2301      	movs	r3, #1
 8002c8a:	4818      	ldr	r0, [pc, #96]	; (8002cec <main+0xb68>)
 8002c8c:	f001 faee 	bl	800426c <HAL_CAN_AddTxMessage>
 8002c90:	4603      	mov	r3, r0
 8002c92:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
			hal_error(status);
 8002c96:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fe fdbe 	bl	800181c <hal_error>
	
			// Sende Nachricht digitale Eingaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxMessage, TxData, (uint32_t *)CAN_TX_MAILBOX0);
 8002ca0:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002ca4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002ca8:	2301      	movs	r3, #1
 8002caa:	4810      	ldr	r0, [pc, #64]	; (8002cec <main+0xb68>)
 8002cac:	f001 fade 	bl	800426c <HAL_CAN_AddTxMessage>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
			hal_error(status);
 8002cb6:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7fe fdae 	bl	800181c <hal_error>
		}

		// Zuruecksetzen des Start Flags, damit Tasks erst nach einer ms wieder aufgerufen werden kann
		start_flag = 0;																		// Zuruechsetze Start Flag
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
		ltc6811(ADCVC | MD73 | CELLALL);
 8002cc6:	e465      	b.n	8002594 <main+0x410>
  }
  /* USER CODE END 3 */
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	37e8      	adds	r7, #232	; 0xe8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bdb0      	pop	{r4, r5, r7, pc}
 8002cd0:	20000030 	.word	0x20000030
 8002cd4:	0001a5e0 	.word	0x0001a5e0
 8002cd8:	10624dd3 	.word	0x10624dd3
 8002cdc:	2000003c 	.word	0x2000003c
 8002ce0:	20000040 	.word	0x20000040
 8002ce4:	20000044 	.word	0x20000044
 8002ce8:	20000048 	.word	0x20000048
 8002cec:	200000bc 	.word	0x200000bc
 8002cf0:	20000034 	.word	0x20000034
 8002cf4:	20000038 	.word	0x20000038

08002cf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b094      	sub	sp, #80	; 0x50
 8002cfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cfe:	f107 031c 	add.w	r3, r7, #28
 8002d02:	2234      	movs	r2, #52	; 0x34
 8002d04:	2100      	movs	r1, #0
 8002d06:	4618      	mov	r0, r3
 8002d08:	f006 f8f0 	bl	8008eec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d0c:	f107 0308 	add.w	r3, r7, #8
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	605a      	str	r2, [r3, #4]
 8002d16:	609a      	str	r2, [r3, #8]
 8002d18:	60da      	str	r2, [r3, #12]
 8002d1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d1c:	4b2c      	ldr	r3, [pc, #176]	; (8002dd0 <SystemClock_Config+0xd8>)
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d20:	4a2b      	ldr	r2, [pc, #172]	; (8002dd0 <SystemClock_Config+0xd8>)
 8002d22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d26:	6413      	str	r3, [r2, #64]	; 0x40
 8002d28:	4b29      	ldr	r3, [pc, #164]	; (8002dd0 <SystemClock_Config+0xd8>)
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d30:	607b      	str	r3, [r7, #4]
 8002d32:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d34:	4b27      	ldr	r3, [pc, #156]	; (8002dd4 <SystemClock_Config+0xdc>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a26      	ldr	r2, [pc, #152]	; (8002dd4 <SystemClock_Config+0xdc>)
 8002d3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d3e:	6013      	str	r3, [r2, #0]
 8002d40:	4b24      	ldr	r3, [pc, #144]	; (8002dd4 <SystemClock_Config+0xdc>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d48:	603b      	str	r3, [r7, #0]
 8002d4a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d54:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d56:	2302      	movs	r3, #2
 8002d58:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d5e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002d60:	2319      	movs	r3, #25
 8002d62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8002d64:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8002d68:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8002d6e:	2308      	movs	r3, #8
 8002d70:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002d72:	2302      	movs	r3, #2
 8002d74:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d76:	f107 031c 	add.w	r3, r7, #28
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f001 feb8 	bl	8004af0 <HAL_RCC_OscConfig>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002d86:	f000 f871 	bl	8002e6c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002d8a:	f001 fe61 	bl	8004a50 <HAL_PWREx_EnableOverDrive>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002d94:	f000 f86a 	bl	8002e6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d98:	230f      	movs	r3, #15
 8002d9a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002da0:	2300      	movs	r3, #0
 8002da2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002da4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002da8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002daa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dae:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002db0:	f107 0308 	add.w	r3, r7, #8
 8002db4:	2107      	movs	r1, #7
 8002db6:	4618      	mov	r0, r3
 8002db8:	f002 f948 	bl	800504c <HAL_RCC_ClockConfig>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8002dc2:	f000 f853 	bl	8002e6c <Error_Handler>
  }
}
 8002dc6:	bf00      	nop
 8002dc8:	3750      	adds	r7, #80	; 0x50
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	40007000 	.word	0x40007000

08002dd8 <HAL_TIM_PeriodElapsedCallback>:
	can_change = 1;
}

// Timer-Interrupt: Timer ist uebergelaufen
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dd8:	b590      	push	{r4, r7, lr}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
	// Kontrolliere welcher Timer den Ueberlauf ausgeloest hat
	if (htim == &htim6)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a1d      	ldr	r2, [pc, #116]	; (8002e58 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d102      	bne.n	8002dee <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		millisekunden_flag_1 = 1;
 8002de8:	4b1c      	ldr	r3, [pc, #112]	; (8002e5c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002dea:	2201      	movs	r2, #1
 8002dec:	701a      	strb	r2, [r3, #0]
	}

	// Timer IMD
	if (htim == &htim1)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a1b      	ldr	r2, [pc, #108]	; (8002e60 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d12c      	bne.n	8002e50 <HAL_TIM_PeriodElapsedCallback+0x78>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	7f1b      	ldrb	r3, [r3, #28]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d112      	bne.n	8002e24 <HAL_TIM_PeriodElapsedCallback+0x4c>
		{
			rising = calculateMovingAverage(rising, HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1), 64);
 8002dfe:	4b19      	ldr	r3, [pc, #100]	; (8002e64 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002e00:	881b      	ldrh	r3, [r3, #0]
 8002e02:	b29c      	uxth	r4, r3
 8002e04:	2100      	movs	r1, #0
 8002e06:	4816      	ldr	r0, [pc, #88]	; (8002e60 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002e08:	f004 fcde 	bl	80077c8 <HAL_TIM_ReadCapturedValue>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	2240      	movs	r2, #64	; 0x40
 8002e12:	4619      	mov	r1, r3
 8002e14:	4620      	mov	r0, r4
 8002e16:	f7ff f97b 	bl	8002110 <calculateMovingAverage>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	4b11      	ldr	r3, [pc, #68]	; (8002e64 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002e20:	801a      	strh	r2, [r3, #0]
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
		{
			falling = calculateMovingAverage(falling, HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2), 64);
		}
	}
}
 8002e22:	e015      	b.n	8002e50 <HAL_TIM_PeriodElapsedCallback+0x78>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	7f1b      	ldrb	r3, [r3, #28]
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d111      	bne.n	8002e50 <HAL_TIM_PeriodElapsedCallback+0x78>
			falling = calculateMovingAverage(falling, HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2), 64);
 8002e2c:	4b0e      	ldr	r3, [pc, #56]	; (8002e68 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	b29c      	uxth	r4, r3
 8002e32:	2104      	movs	r1, #4
 8002e34:	480a      	ldr	r0, [pc, #40]	; (8002e60 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002e36:	f004 fcc7 	bl	80077c8 <HAL_TIM_ReadCapturedValue>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	2240      	movs	r2, #64	; 0x40
 8002e40:	4619      	mov	r1, r3
 8002e42:	4620      	mov	r0, r4
 8002e44:	f7ff f964 	bl	8002110 <calculateMovingAverage>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002e4e:	801a      	strh	r2, [r3, #0]
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd90      	pop	{r4, r7, pc}
 8002e58:	2000024c 	.word	0x2000024c
 8002e5c:	200000e8 	.word	0x200000e8
 8002e60:	200001b4 	.word	0x200001b4
 8002e64:	200000e4 	.word	0x200000e4
 8002e68:	200000e6 	.word	0x200000e6

08002e6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e70:	b672      	cpsid	i
}
 8002e72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();														// Interrupts deaktivieren

	// Schalte Fehler LED ein
	leuchten_out.RedLed = 1;												// Setze Variable
 8002e74:	4a11      	ldr	r2, [pc, #68]	; (8002ebc <Error_Handler+0x50>)
 8002e76:	7813      	ldrb	r3, [r2, #0]
 8002e78:	f043 0320 	orr.w	r3, r3, #32
 8002e7c:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);	// Fehler LED einschalten
 8002e7e:	4b0f      	ldr	r3, [pc, #60]	; (8002ebc <Error_Handler+0x50>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	461a      	mov	r2, r3
 8002e8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e8e:	480c      	ldr	r0, [pc, #48]	; (8002ec0 <Error_Handler+0x54>)
 8002e90:	f001 fdc4 	bl	8004a1c <HAL_GPIO_WritePin>

	// Schalte Ok LED aus
	leuchten_out.GreenLed = 0;												// Zuruechsetzen Variable
 8002e94:	4a09      	ldr	r2, [pc, #36]	; (8002ebc <Error_Handler+0x50>)
 8002e96:	7813      	ldrb	r3, [r2, #0]
 8002e98:	f36f 1386 	bfc	r3, #6, #1
 8002e9c:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, leuchten_out.GreenLed);// Fehler LED ausschalten
 8002e9e:	4b07      	ldr	r3, [pc, #28]	; (8002ebc <Error_Handler+0x50>)
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	2104      	movs	r1, #4
 8002eac:	4804      	ldr	r0, [pc, #16]	; (8002ec0 <Error_Handler+0x54>)
 8002eae:	f001 fdb5 	bl	8004a1c <HAL_GPIO_WritePin>

	// Sende Nachricht auf Uart-Interface
#ifdef DEBUG
#define STRING_ERROR_HANDLER			"Error Handler wird ausgefuehrt!!!"
	uartTransmit(STRING_ERROR_HANDLER, sizeof(STRING_ERROR_HANDLER));
 8002eb2:	2122      	movs	r1, #34	; 0x22
 8002eb4:	4803      	ldr	r0, [pc, #12]	; (8002ec4 <Error_Handler+0x58>)
 8002eb6:	f7fd fb49 	bl	800054c <uartTransmit>
#endif
	// Beginne Endlosschleife nachdem Fehler aufgetreten ist
	while (1)
 8002eba:	e7fe      	b.n	8002eba <Error_Handler+0x4e>
 8002ebc:	20000044 	.word	0x20000044
 8002ec0:	40020400 	.word	0x40020400
 8002ec4:	080095a0 	.word	0x080095a0

08002ec8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002ecc:	4b1b      	ldr	r3, [pc, #108]	; (8002f3c <MX_SPI1_Init+0x74>)
 8002ece:	4a1c      	ldr	r2, [pc, #112]	; (8002f40 <MX_SPI1_Init+0x78>)
 8002ed0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002ed2:	4b1a      	ldr	r3, [pc, #104]	; (8002f3c <MX_SPI1_Init+0x74>)
 8002ed4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ed8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002eda:	4b18      	ldr	r3, [pc, #96]	; (8002f3c <MX_SPI1_Init+0x74>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002ee0:	4b16      	ldr	r3, [pc, #88]	; (8002f3c <MX_SPI1_Init+0x74>)
 8002ee2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002ee6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ee8:	4b14      	ldr	r3, [pc, #80]	; (8002f3c <MX_SPI1_Init+0x74>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002eee:	4b13      	ldr	r3, [pc, #76]	; (8002f3c <MX_SPI1_Init+0x74>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002ef4:	4b11      	ldr	r3, [pc, #68]	; (8002f3c <MX_SPI1_Init+0x74>)
 8002ef6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002efa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002efc:	4b0f      	ldr	r3, [pc, #60]	; (8002f3c <MX_SPI1_Init+0x74>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f02:	4b0e      	ldr	r3, [pc, #56]	; (8002f3c <MX_SPI1_Init+0x74>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f08:	4b0c      	ldr	r3, [pc, #48]	; (8002f3c <MX_SPI1_Init+0x74>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f0e:	4b0b      	ldr	r3, [pc, #44]	; (8002f3c <MX_SPI1_Init+0x74>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002f14:	4b09      	ldr	r3, [pc, #36]	; (8002f3c <MX_SPI1_Init+0x74>)
 8002f16:	2207      	movs	r2, #7
 8002f18:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002f1a:	4b08      	ldr	r3, [pc, #32]	; (8002f3c <MX_SPI1_Init+0x74>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002f20:	4b06      	ldr	r3, [pc, #24]	; (8002f3c <MX_SPI1_Init+0x74>)
 8002f22:	2208      	movs	r2, #8
 8002f24:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f26:	4805      	ldr	r0, [pc, #20]	; (8002f3c <MX_SPI1_Init+0x74>)
 8002f28:	f002 fe9e 	bl	8005c68 <HAL_SPI_Init>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002f32:	f7ff ff9b 	bl	8002e6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002f36:	bf00      	nop
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	200000ec 	.word	0x200000ec
 8002f40:	40013000 	.word	0x40013000

08002f44 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002f48:	4b1b      	ldr	r3, [pc, #108]	; (8002fb8 <MX_SPI4_Init+0x74>)
 8002f4a:	4a1c      	ldr	r2, [pc, #112]	; (8002fbc <MX_SPI4_Init+0x78>)
 8002f4c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002f4e:	4b1a      	ldr	r3, [pc, #104]	; (8002fb8 <MX_SPI4_Init+0x74>)
 8002f50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f54:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002f56:	4b18      	ldr	r3, [pc, #96]	; (8002fb8 <MX_SPI4_Init+0x74>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f5c:	4b16      	ldr	r3, [pc, #88]	; (8002fb8 <MX_SPI4_Init+0x74>)
 8002f5e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002f62:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002f64:	4b14      	ldr	r3, [pc, #80]	; (8002fb8 <MX_SPI4_Init+0x74>)
 8002f66:	2202      	movs	r2, #2
 8002f68:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002f6a:	4b13      	ldr	r3, [pc, #76]	; (8002fb8 <MX_SPI4_Init+0x74>)
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002f70:	4b11      	ldr	r3, [pc, #68]	; (8002fb8 <MX_SPI4_Init+0x74>)
 8002f72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f76:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002f78:	4b0f      	ldr	r3, [pc, #60]	; (8002fb8 <MX_SPI4_Init+0x74>)
 8002f7a:	2230      	movs	r2, #48	; 0x30
 8002f7c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f7e:	4b0e      	ldr	r3, [pc, #56]	; (8002fb8 <MX_SPI4_Init+0x74>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f84:	4b0c      	ldr	r3, [pc, #48]	; (8002fb8 <MX_SPI4_Init+0x74>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f8a:	4b0b      	ldr	r3, [pc, #44]	; (8002fb8 <MX_SPI4_Init+0x74>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8002f90:	4b09      	ldr	r3, [pc, #36]	; (8002fb8 <MX_SPI4_Init+0x74>)
 8002f92:	2207      	movs	r2, #7
 8002f94:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002f96:	4b08      	ldr	r3, [pc, #32]	; (8002fb8 <MX_SPI4_Init+0x74>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002f9c:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <MX_SPI4_Init+0x74>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002fa2:	4805      	ldr	r0, [pc, #20]	; (8002fb8 <MX_SPI4_Init+0x74>)
 8002fa4:	f002 fe60 	bl	8005c68 <HAL_SPI_Init>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8002fae:	f7ff ff5d 	bl	8002e6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002fb2:	bf00      	nop
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	20000150 	.word	0x20000150
 8002fbc:	40013400 	.word	0x40013400

08002fc0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b08c      	sub	sp, #48	; 0x30
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc8:	f107 031c 	add.w	r3, r7, #28
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	605a      	str	r2, [r3, #4]
 8002fd2:	609a      	str	r2, [r3, #8]
 8002fd4:	60da      	str	r2, [r3, #12]
 8002fd6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a3d      	ldr	r2, [pc, #244]	; (80030d4 <HAL_SPI_MspInit+0x114>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d145      	bne.n	800306e <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002fe2:	4b3d      	ldr	r3, [pc, #244]	; (80030d8 <HAL_SPI_MspInit+0x118>)
 8002fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe6:	4a3c      	ldr	r2, [pc, #240]	; (80030d8 <HAL_SPI_MspInit+0x118>)
 8002fe8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fec:	6453      	str	r3, [r2, #68]	; 0x44
 8002fee:	4b3a      	ldr	r3, [pc, #232]	; (80030d8 <HAL_SPI_MspInit+0x118>)
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ff6:	61bb      	str	r3, [r7, #24]
 8002ff8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ffa:	4b37      	ldr	r3, [pc, #220]	; (80030d8 <HAL_SPI_MspInit+0x118>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	4a36      	ldr	r2, [pc, #216]	; (80030d8 <HAL_SPI_MspInit+0x118>)
 8003000:	f043 0308 	orr.w	r3, r3, #8
 8003004:	6313      	str	r3, [r2, #48]	; 0x30
 8003006:	4b34      	ldr	r3, [pc, #208]	; (80030d8 <HAL_SPI_MspInit+0x118>)
 8003008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300a:	f003 0308 	and.w	r3, r3, #8
 800300e:	617b      	str	r3, [r7, #20]
 8003010:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003012:	4b31      	ldr	r3, [pc, #196]	; (80030d8 <HAL_SPI_MspInit+0x118>)
 8003014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003016:	4a30      	ldr	r2, [pc, #192]	; (80030d8 <HAL_SPI_MspInit+0x118>)
 8003018:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800301c:	6313      	str	r3, [r2, #48]	; 0x30
 800301e:	4b2e      	ldr	r3, [pc, #184]	; (80030d8 <HAL_SPI_MspInit+0x118>)
 8003020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003026:	613b      	str	r3, [r7, #16]
 8003028:	693b      	ldr	r3, [r7, #16]
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG10     ------> SPI1_NSS
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = POTI_MOSI_Pin;
 800302a:	2380      	movs	r3, #128	; 0x80
 800302c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800302e:	2302      	movs	r3, #2
 8003030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003032:	2300      	movs	r3, #0
 8003034:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003036:	2303      	movs	r3, #3
 8003038:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800303a:	2305      	movs	r3, #5
 800303c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(POTI_MOSI_GPIO_Port, &GPIO_InitStruct);
 800303e:	f107 031c 	add.w	r3, r7, #28
 8003042:	4619      	mov	r1, r3
 8003044:	4825      	ldr	r0, [pc, #148]	; (80030dc <HAL_SPI_MspInit+0x11c>)
 8003046:	f001 fb25 	bl	8004694 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POTI_MISO_Pin|POTI_CS_Pin|POTI_SCK_Pin;
 800304a:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800304e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003050:	2302      	movs	r3, #2
 8003052:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003054:	2300      	movs	r3, #0
 8003056:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003058:	2303      	movs	r3, #3
 800305a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800305c:	2305      	movs	r3, #5
 800305e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003060:	f107 031c 	add.w	r3, r7, #28
 8003064:	4619      	mov	r1, r3
 8003066:	481e      	ldr	r0, [pc, #120]	; (80030e0 <HAL_SPI_MspInit+0x120>)
 8003068:	f001 fb14 	bl	8004694 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800306c:	e02d      	b.n	80030ca <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI4)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a1c      	ldr	r2, [pc, #112]	; (80030e4 <HAL_SPI_MspInit+0x124>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d128      	bne.n	80030ca <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003078:	4b17      	ldr	r3, [pc, #92]	; (80030d8 <HAL_SPI_MspInit+0x118>)
 800307a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307c:	4a16      	ldr	r2, [pc, #88]	; (80030d8 <HAL_SPI_MspInit+0x118>)
 800307e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003082:	6453      	str	r3, [r2, #68]	; 0x44
 8003084:	4b14      	ldr	r3, [pc, #80]	; (80030d8 <HAL_SPI_MspInit+0x118>)
 8003086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003088:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003090:	4b11      	ldr	r3, [pc, #68]	; (80030d8 <HAL_SPI_MspInit+0x118>)
 8003092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003094:	4a10      	ldr	r2, [pc, #64]	; (80030d8 <HAL_SPI_MspInit+0x118>)
 8003096:	f043 0310 	orr.w	r3, r3, #16
 800309a:	6313      	str	r3, [r2, #48]	; 0x30
 800309c:	4b0e      	ldr	r3, [pc, #56]	; (80030d8 <HAL_SPI_MspInit+0x118>)
 800309e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a0:	f003 0310 	and.w	r3, r3, #16
 80030a4:	60bb      	str	r3, [r7, #8]
 80030a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ISOSPI_SCK_Pin|ISOSPI_MISO_Pin|ISOSPI_MOSI_Pin;
 80030a8:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80030ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ae:	2302      	movs	r3, #2
 80030b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030b6:	2303      	movs	r3, #3
 80030b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80030ba:	2305      	movs	r3, #5
 80030bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80030be:	f107 031c 	add.w	r3, r7, #28
 80030c2:	4619      	mov	r1, r3
 80030c4:	4808      	ldr	r0, [pc, #32]	; (80030e8 <HAL_SPI_MspInit+0x128>)
 80030c6:	f001 fae5 	bl	8004694 <HAL_GPIO_Init>
}
 80030ca:	bf00      	nop
 80030cc:	3730      	adds	r7, #48	; 0x30
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40013000 	.word	0x40013000
 80030d8:	40023800 	.word	0x40023800
 80030dc:	40020c00 	.word	0x40020c00
 80030e0:	40021800 	.word	0x40021800
 80030e4:	40013400 	.word	0x40013400
 80030e8:	40021000 	.word	0x40021000

080030ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80030f2:	4b0f      	ldr	r3, [pc, #60]	; (8003130 <HAL_MspInit+0x44>)
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	4a0e      	ldr	r2, [pc, #56]	; (8003130 <HAL_MspInit+0x44>)
 80030f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030fc:	6413      	str	r3, [r2, #64]	; 0x40
 80030fe:	4b0c      	ldr	r3, [pc, #48]	; (8003130 <HAL_MspInit+0x44>)
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003106:	607b      	str	r3, [r7, #4]
 8003108:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800310a:	4b09      	ldr	r3, [pc, #36]	; (8003130 <HAL_MspInit+0x44>)
 800310c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310e:	4a08      	ldr	r2, [pc, #32]	; (8003130 <HAL_MspInit+0x44>)
 8003110:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003114:	6453      	str	r3, [r2, #68]	; 0x44
 8003116:	4b06      	ldr	r3, [pc, #24]	; (8003130 <HAL_MspInit+0x44>)
 8003118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800311e:	603b      	str	r3, [r7, #0]
 8003120:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	40023800 	.word	0x40023800

08003134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003138:	bf00      	nop
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003142:	b480      	push	{r7}
 8003144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003146:	e7fe      	b.n	8003146 <HardFault_Handler+0x4>

08003148 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800314c:	e7fe      	b.n	800314c <MemManage_Handler+0x4>

0800314e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800314e:	b480      	push	{r7}
 8003150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003152:	e7fe      	b.n	8003152 <BusFault_Handler+0x4>

08003154 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003158:	e7fe      	b.n	8003158 <UsageFault_Handler+0x4>

0800315a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800315a:	b480      	push	{r7}
 800315c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800315e:	bf00      	nop
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800316c:	bf00      	nop
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr

08003176 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003176:	b480      	push	{r7}
 8003178:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800317a:	bf00      	nop
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003188:	f000 fb24 	bl	80037d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800318c:	bf00      	nop
 800318e:	bd80      	pop	{r7, pc}

08003190 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003194:	4802      	ldr	r0, [pc, #8]	; (80031a0 <TIM1_CC_IRQHandler+0x10>)
 8003196:	f004 f805 	bl	80071a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800319a:	bf00      	nop
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	200001b4 	.word	0x200001b4

080031a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80031a8:	4802      	ldr	r0, [pc, #8]	; (80031b4 <TIM6_DAC_IRQHandler+0x10>)
 80031aa:	f003 fffb 	bl	80071a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80031ae:	bf00      	nop
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	2000024c 	.word	0x2000024c

080031b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031bc:	4b08      	ldr	r3, [pc, #32]	; (80031e0 <SystemInit+0x28>)
 80031be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c2:	4a07      	ldr	r2, [pc, #28]	; (80031e0 <SystemInit+0x28>)
 80031c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80031cc:	4b04      	ldr	r3, [pc, #16]	; (80031e0 <SystemInit+0x28>)
 80031ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80031d2:	609a      	str	r2, [r3, #8]
#endif
}
 80031d4:	bf00      	nop
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	e000ed00 	.word	0xe000ed00

080031e4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b08c      	sub	sp, #48	; 0x30
 80031e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80031ea:	f107 031c 	add.w	r3, r7, #28
 80031ee:	2200      	movs	r2, #0
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	605a      	str	r2, [r3, #4]
 80031f4:	609a      	str	r2, [r3, #8]
 80031f6:	60da      	str	r2, [r3, #12]
 80031f8:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80031fa:	f107 030c 	add.w	r3, r7, #12
 80031fe:	2200      	movs	r2, #0
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	605a      	str	r2, [r3, #4]
 8003204:	609a      	str	r2, [r3, #8]
 8003206:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003208:	463b      	mov	r3, r7
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	605a      	str	r2, [r3, #4]
 8003210:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003212:	4b36      	ldr	r3, [pc, #216]	; (80032ec <MX_TIM1_Init+0x108>)
 8003214:	4a36      	ldr	r2, [pc, #216]	; (80032f0 <MX_TIM1_Init+0x10c>)
 8003216:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 675 - 1;
 8003218:	4b34      	ldr	r3, [pc, #208]	; (80032ec <MX_TIM1_Init+0x108>)
 800321a:	f240 22a2 	movw	r2, #674	; 0x2a2
 800321e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003220:	4b32      	ldr	r3, [pc, #200]	; (80032ec <MX_TIM1_Init+0x108>)
 8003222:	2200      	movs	r2, #0
 8003224:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003226:	4b31      	ldr	r3, [pc, #196]	; (80032ec <MX_TIM1_Init+0x108>)
 8003228:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800322c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800322e:	4b2f      	ldr	r3, [pc, #188]	; (80032ec <MX_TIM1_Init+0x108>)
 8003230:	2200      	movs	r2, #0
 8003232:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003234:	4b2d      	ldr	r3, [pc, #180]	; (80032ec <MX_TIM1_Init+0x108>)
 8003236:	2200      	movs	r2, #0
 8003238:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800323a:	4b2c      	ldr	r3, [pc, #176]	; (80032ec <MX_TIM1_Init+0x108>)
 800323c:	2200      	movs	r2, #0
 800323e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8003240:	482a      	ldr	r0, [pc, #168]	; (80032ec <MX_TIM1_Init+0x108>)
 8003242:	f003 fe08 	bl	8006e56 <HAL_TIM_IC_Init>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d001      	beq.n	8003250 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800324c:	f7ff fe0e 	bl	8002e6c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003250:	2304      	movs	r3, #4
 8003252:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8003254:	2350      	movs	r3, #80	; 0x50
 8003256:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003258:	2300      	movs	r3, #0
 800325a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800325c:	2300      	movs	r3, #0
 800325e:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8003260:	2300      	movs	r3, #0
 8003262:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8003264:	f107 031c 	add.w	r3, r7, #28
 8003268:	4619      	mov	r1, r3
 800326a:	4820      	ldr	r0, [pc, #128]	; (80032ec <MX_TIM1_Init+0x108>)
 800326c:	f004 fa6a 	bl	8007744 <HAL_TIM_SlaveConfigSynchro>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003276:	f7ff fdf9 	bl	8002e6c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800327a:	2300      	movs	r3, #0
 800327c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800327e:	2301      	movs	r3, #1
 8003280:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003282:	2300      	movs	r3, #0
 8003284:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8003286:	2300      	movs	r3, #0
 8003288:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800328a:	f107 030c 	add.w	r3, r7, #12
 800328e:	2200      	movs	r2, #0
 8003290:	4619      	mov	r1, r3
 8003292:	4816      	ldr	r0, [pc, #88]	; (80032ec <MX_TIM1_Init+0x108>)
 8003294:	f004 f8a5 	bl	80073e2 <HAL_TIM_IC_ConfigChannel>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800329e:	f7ff fde5 	bl	8002e6c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80032a2:	2302      	movs	r3, #2
 80032a4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80032a6:	2302      	movs	r3, #2
 80032a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80032aa:	f107 030c 	add.w	r3, r7, #12
 80032ae:	2204      	movs	r2, #4
 80032b0:	4619      	mov	r1, r3
 80032b2:	480e      	ldr	r0, [pc, #56]	; (80032ec <MX_TIM1_Init+0x108>)
 80032b4:	f004 f895 	bl	80073e2 <HAL_TIM_IC_ConfigChannel>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 80032be:	f7ff fdd5 	bl	8002e6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032c2:	2300      	movs	r3, #0
 80032c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80032c6:	2300      	movs	r3, #0
 80032c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032ca:	2300      	movs	r3, #0
 80032cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80032ce:	463b      	mov	r3, r7
 80032d0:	4619      	mov	r1, r3
 80032d2:	4806      	ldr	r0, [pc, #24]	; (80032ec <MX_TIM1_Init+0x108>)
 80032d4:	f005 f844 	bl	8008360 <HAL_TIMEx_MasterConfigSynchronization>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80032de:	f7ff fdc5 	bl	8002e6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80032e2:	bf00      	nop
 80032e4:	3730      	adds	r7, #48	; 0x30
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	200001b4 	.word	0x200001b4
 80032f0:	40010000 	.word	0x40010000

080032f4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b08a      	sub	sp, #40	; 0x28
 80032f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032fa:	f107 031c 	add.w	r3, r7, #28
 80032fe:	2200      	movs	r2, #0
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	605a      	str	r2, [r3, #4]
 8003304:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003306:	463b      	mov	r3, r7
 8003308:	2200      	movs	r2, #0
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	605a      	str	r2, [r3, #4]
 800330e:	609a      	str	r2, [r3, #8]
 8003310:	60da      	str	r2, [r3, #12]
 8003312:	611a      	str	r2, [r3, #16]
 8003314:	615a      	str	r2, [r3, #20]
 8003316:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003318:	4b32      	ldr	r3, [pc, #200]	; (80033e4 <MX_TIM4_Init+0xf0>)
 800331a:	4a33      	ldr	r2, [pc, #204]	; (80033e8 <MX_TIM4_Init+0xf4>)
 800331c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800331e:	4b31      	ldr	r3, [pc, #196]	; (80033e4 <MX_TIM4_Init+0xf0>)
 8003320:	2200      	movs	r2, #0
 8003322:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003324:	4b2f      	ldr	r3, [pc, #188]	; (80033e4 <MX_TIM4_Init+0xf0>)
 8003326:	2200      	movs	r2, #0
 8003328:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800332a:	4b2e      	ldr	r3, [pc, #184]	; (80033e4 <MX_TIM4_Init+0xf0>)
 800332c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003330:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003332:	4b2c      	ldr	r3, [pc, #176]	; (80033e4 <MX_TIM4_Init+0xf0>)
 8003334:	2200      	movs	r2, #0
 8003336:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003338:	4b2a      	ldr	r3, [pc, #168]	; (80033e4 <MX_TIM4_Init+0xf0>)
 800333a:	2200      	movs	r2, #0
 800333c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800333e:	4829      	ldr	r0, [pc, #164]	; (80033e4 <MX_TIM4_Init+0xf0>)
 8003340:	f003 fd32 	bl	8006da8 <HAL_TIM_PWM_Init>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800334a:	f7ff fd8f 	bl	8002e6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800334e:	2300      	movs	r3, #0
 8003350:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003352:	2300      	movs	r3, #0
 8003354:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003356:	f107 031c 	add.w	r3, r7, #28
 800335a:	4619      	mov	r1, r3
 800335c:	4821      	ldr	r0, [pc, #132]	; (80033e4 <MX_TIM4_Init+0xf0>)
 800335e:	f004 ffff 	bl	8008360 <HAL_TIMEx_MasterConfigSynchronization>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8003368:	f7ff fd80 	bl	8002e6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800336c:	2360      	movs	r3, #96	; 0x60
 800336e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003370:	2300      	movs	r3, #0
 8003372:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003374:	2300      	movs	r3, #0
 8003376:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003378:	2300      	movs	r3, #0
 800337a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800337c:	463b      	mov	r3, r7
 800337e:	2200      	movs	r2, #0
 8003380:	4619      	mov	r1, r3
 8003382:	4818      	ldr	r0, [pc, #96]	; (80033e4 <MX_TIM4_Init+0xf0>)
 8003384:	f004 f8ca 	bl	800751c <HAL_TIM_PWM_ConfigChannel>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800338e:	f7ff fd6d 	bl	8002e6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003392:	463b      	mov	r3, r7
 8003394:	2204      	movs	r2, #4
 8003396:	4619      	mov	r1, r3
 8003398:	4812      	ldr	r0, [pc, #72]	; (80033e4 <MX_TIM4_Init+0xf0>)
 800339a:	f004 f8bf 	bl	800751c <HAL_TIM_PWM_ConfigChannel>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80033a4:	f7ff fd62 	bl	8002e6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80033a8:	463b      	mov	r3, r7
 80033aa:	2208      	movs	r2, #8
 80033ac:	4619      	mov	r1, r3
 80033ae:	480d      	ldr	r0, [pc, #52]	; (80033e4 <MX_TIM4_Init+0xf0>)
 80033b0:	f004 f8b4 	bl	800751c <HAL_TIM_PWM_ConfigChannel>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 80033ba:	f7ff fd57 	bl	8002e6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80033be:	463b      	mov	r3, r7
 80033c0:	220c      	movs	r2, #12
 80033c2:	4619      	mov	r1, r3
 80033c4:	4807      	ldr	r0, [pc, #28]	; (80033e4 <MX_TIM4_Init+0xf0>)
 80033c6:	f004 f8a9 	bl	800751c <HAL_TIM_PWM_ConfigChannel>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 80033d0:	f7ff fd4c 	bl	8002e6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80033d4:	4803      	ldr	r0, [pc, #12]	; (80033e4 <MX_TIM4_Init+0xf0>)
 80033d6:	f000 f8d1 	bl	800357c <HAL_TIM_MspPostInit>

}
 80033da:	bf00      	nop
 80033dc:	3728      	adds	r7, #40	; 0x28
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	20000200 	.word	0x20000200
 80033e8:	40000800 	.word	0x40000800

080033ec <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033f2:	1d3b      	adds	r3, r7, #4
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	605a      	str	r2, [r3, #4]
 80033fa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80033fc:	4b14      	ldr	r3, [pc, #80]	; (8003450 <MX_TIM6_Init+0x64>)
 80033fe:	4a15      	ldr	r2, [pc, #84]	; (8003454 <MX_TIM6_Init+0x68>)
 8003400:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 27;
 8003402:	4b13      	ldr	r3, [pc, #76]	; (8003450 <MX_TIM6_Init+0x64>)
 8003404:	221b      	movs	r2, #27
 8003406:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003408:	4b11      	ldr	r3, [pc, #68]	; (8003450 <MX_TIM6_Init+0x64>)
 800340a:	2200      	movs	r2, #0
 800340c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4000;
 800340e:	4b10      	ldr	r3, [pc, #64]	; (8003450 <MX_TIM6_Init+0x64>)
 8003410:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003414:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003416:	4b0e      	ldr	r3, [pc, #56]	; (8003450 <MX_TIM6_Init+0x64>)
 8003418:	2200      	movs	r2, #0
 800341a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800341c:	480c      	ldr	r0, [pc, #48]	; (8003450 <MX_TIM6_Init+0x64>)
 800341e:	f003 fb83 	bl	8006b28 <HAL_TIM_Base_Init>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003428:	f7ff fd20 	bl	8002e6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800342c:	2300      	movs	r3, #0
 800342e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003430:	2300      	movs	r3, #0
 8003432:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003434:	1d3b      	adds	r3, r7, #4
 8003436:	4619      	mov	r1, r3
 8003438:	4805      	ldr	r0, [pc, #20]	; (8003450 <MX_TIM6_Init+0x64>)
 800343a:	f004 ff91 	bl	8008360 <HAL_TIMEx_MasterConfigSynchronization>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003444:	f7ff fd12 	bl	8002e6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003448:	bf00      	nop
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	2000024c 	.word	0x2000024c
 8003454:	40001000 	.word	0x40001000

08003458 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b08a      	sub	sp, #40	; 0x28
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003460:	f107 0314 	add.w	r3, r7, #20
 8003464:	2200      	movs	r2, #0
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	605a      	str	r2, [r3, #4]
 800346a:	609a      	str	r2, [r3, #8]
 800346c:	60da      	str	r2, [r3, #12]
 800346e:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a1b      	ldr	r2, [pc, #108]	; (80034e4 <HAL_TIM_IC_MspInit+0x8c>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d130      	bne.n	80034dc <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800347a:	4b1b      	ldr	r3, [pc, #108]	; (80034e8 <HAL_TIM_IC_MspInit+0x90>)
 800347c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347e:	4a1a      	ldr	r2, [pc, #104]	; (80034e8 <HAL_TIM_IC_MspInit+0x90>)
 8003480:	f043 0301 	orr.w	r3, r3, #1
 8003484:	6453      	str	r3, [r2, #68]	; 0x44
 8003486:	4b18      	ldr	r3, [pc, #96]	; (80034e8 <HAL_TIM_IC_MspInit+0x90>)
 8003488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	613b      	str	r3, [r7, #16]
 8003490:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003492:	4b15      	ldr	r3, [pc, #84]	; (80034e8 <HAL_TIM_IC_MspInit+0x90>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	4a14      	ldr	r2, [pc, #80]	; (80034e8 <HAL_TIM_IC_MspInit+0x90>)
 8003498:	f043 0310 	orr.w	r3, r3, #16
 800349c:	6313      	str	r3, [r2, #48]	; 0x30
 800349e:	4b12      	ldr	r3, [pc, #72]	; (80034e8 <HAL_TIM_IC_MspInit+0x90>)
 80034a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a2:	f003 0310 	and.w	r3, r3, #16
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = IMD_PWM_Pin;
 80034aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b0:	2302      	movs	r3, #2
 80034b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b4:	2300      	movs	r3, #0
 80034b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b8:	2300      	movs	r3, #0
 80034ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80034bc:	2301      	movs	r3, #1
 80034be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(IMD_PWM_GPIO_Port, &GPIO_InitStruct);
 80034c0:	f107 0314 	add.w	r3, r7, #20
 80034c4:	4619      	mov	r1, r3
 80034c6:	4809      	ldr	r0, [pc, #36]	; (80034ec <HAL_TIM_IC_MspInit+0x94>)
 80034c8:	f001 f8e4 	bl	8004694 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80034cc:	2200      	movs	r2, #0
 80034ce:	2100      	movs	r1, #0
 80034d0:	201b      	movs	r0, #27
 80034d2:	f001 f8a8 	bl	8004626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80034d6:	201b      	movs	r0, #27
 80034d8:	f001 f8c1 	bl	800465e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80034dc:	bf00      	nop
 80034de:	3728      	adds	r7, #40	; 0x28
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40010000 	.word	0x40010000
 80034e8:	40023800 	.word	0x40023800
 80034ec:	40021000 	.word	0x40021000

080034f0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a0a      	ldr	r2, [pc, #40]	; (8003528 <HAL_TIM_PWM_MspInit+0x38>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d10b      	bne.n	800351a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003502:	4b0a      	ldr	r3, [pc, #40]	; (800352c <HAL_TIM_PWM_MspInit+0x3c>)
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	4a09      	ldr	r2, [pc, #36]	; (800352c <HAL_TIM_PWM_MspInit+0x3c>)
 8003508:	f043 0304 	orr.w	r3, r3, #4
 800350c:	6413      	str	r3, [r2, #64]	; 0x40
 800350e:	4b07      	ldr	r3, [pc, #28]	; (800352c <HAL_TIM_PWM_MspInit+0x3c>)
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	f003 0304 	and.w	r3, r3, #4
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800351a:	bf00      	nop
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	40000800 	.word	0x40000800
 800352c:	40023800 	.word	0x40023800

08003530 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a0d      	ldr	r2, [pc, #52]	; (8003574 <HAL_TIM_Base_MspInit+0x44>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d113      	bne.n	800356a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003542:	4b0d      	ldr	r3, [pc, #52]	; (8003578 <HAL_TIM_Base_MspInit+0x48>)
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	4a0c      	ldr	r2, [pc, #48]	; (8003578 <HAL_TIM_Base_MspInit+0x48>)
 8003548:	f043 0310 	orr.w	r3, r3, #16
 800354c:	6413      	str	r3, [r2, #64]	; 0x40
 800354e:	4b0a      	ldr	r3, [pc, #40]	; (8003578 <HAL_TIM_Base_MspInit+0x48>)
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	f003 0310 	and.w	r3, r3, #16
 8003556:	60fb      	str	r3, [r7, #12]
 8003558:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800355a:	2200      	movs	r2, #0
 800355c:	2100      	movs	r1, #0
 800355e:	2036      	movs	r0, #54	; 0x36
 8003560:	f001 f861 	bl	8004626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003564:	2036      	movs	r0, #54	; 0x36
 8003566:	f001 f87a 	bl	800465e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800356a:	bf00      	nop
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	40001000 	.word	0x40001000
 8003578:	40023800 	.word	0x40023800

0800357c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b088      	sub	sp, #32
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003584:	f107 030c 	add.w	r3, r7, #12
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	605a      	str	r2, [r3, #4]
 800358e:	609a      	str	r2, [r3, #8]
 8003590:	60da      	str	r2, [r3, #12]
 8003592:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a11      	ldr	r2, [pc, #68]	; (80035e0 <HAL_TIM_MspPostInit+0x64>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d11c      	bne.n	80035d8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800359e:	4b11      	ldr	r3, [pc, #68]	; (80035e4 <HAL_TIM_MspPostInit+0x68>)
 80035a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a2:	4a10      	ldr	r2, [pc, #64]	; (80035e4 <HAL_TIM_MspPostInit+0x68>)
 80035a4:	f043 0308 	orr.w	r3, r3, #8
 80035a8:	6313      	str	r3, [r2, #48]	; 0x30
 80035aa:	4b0e      	ldr	r3, [pc, #56]	; (80035e4 <HAL_TIM_MspPostInit+0x68>)
 80035ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	60bb      	str	r3, [r7, #8]
 80035b4:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PWM_HV_N_Pin|PWM_HV_P_Pin|PWM_HV_M_Pin|PWM_HV_Charger_Pin;
 80035b6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80035ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035bc:	2302      	movs	r3, #2
 80035be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c0:	2300      	movs	r3, #0
 80035c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035c4:	2300      	movs	r3, #0
 80035c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80035c8:	2302      	movs	r3, #2
 80035ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035cc:	f107 030c 	add.w	r3, r7, #12
 80035d0:	4619      	mov	r1, r3
 80035d2:	4805      	ldr	r0, [pc, #20]	; (80035e8 <HAL_TIM_MspPostInit+0x6c>)
 80035d4:	f001 f85e 	bl	8004694 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80035d8:	bf00      	nop
 80035da:	3720      	adds	r7, #32
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	40000800 	.word	0x40000800
 80035e4:	40023800 	.word	0x40023800
 80035e8:	40020c00 	.word	0x40020c00

080035ec <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80035f0:	4b14      	ldr	r3, [pc, #80]	; (8003644 <MX_USART2_UART_Init+0x58>)
 80035f2:	4a15      	ldr	r2, [pc, #84]	; (8003648 <MX_USART2_UART_Init+0x5c>)
 80035f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80035f6:	4b13      	ldr	r3, [pc, #76]	; (8003644 <MX_USART2_UART_Init+0x58>)
 80035f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80035fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80035fe:	4b11      	ldr	r3, [pc, #68]	; (8003644 <MX_USART2_UART_Init+0x58>)
 8003600:	2200      	movs	r2, #0
 8003602:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003604:	4b0f      	ldr	r3, [pc, #60]	; (8003644 <MX_USART2_UART_Init+0x58>)
 8003606:	2200      	movs	r2, #0
 8003608:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800360a:	4b0e      	ldr	r3, [pc, #56]	; (8003644 <MX_USART2_UART_Init+0x58>)
 800360c:	2200      	movs	r2, #0
 800360e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003610:	4b0c      	ldr	r3, [pc, #48]	; (8003644 <MX_USART2_UART_Init+0x58>)
 8003612:	220c      	movs	r2, #12
 8003614:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003616:	4b0b      	ldr	r3, [pc, #44]	; (8003644 <MX_USART2_UART_Init+0x58>)
 8003618:	2200      	movs	r2, #0
 800361a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800361c:	4b09      	ldr	r3, [pc, #36]	; (8003644 <MX_USART2_UART_Init+0x58>)
 800361e:	2200      	movs	r2, #0
 8003620:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003622:	4b08      	ldr	r3, [pc, #32]	; (8003644 <MX_USART2_UART_Init+0x58>)
 8003624:	2200      	movs	r2, #0
 8003626:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003628:	4b06      	ldr	r3, [pc, #24]	; (8003644 <MX_USART2_UART_Init+0x58>)
 800362a:	2200      	movs	r2, #0
 800362c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800362e:	4805      	ldr	r0, [pc, #20]	; (8003644 <MX_USART2_UART_Init+0x58>)
 8003630:	f004 ff42 	bl	80084b8 <HAL_UART_Init>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800363a:	f7ff fc17 	bl	8002e6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800363e:	bf00      	nop
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	20000298 	.word	0x20000298
 8003648:	40004400 	.word	0x40004400

0800364c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b0ae      	sub	sp, #184	; 0xb8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003654:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	605a      	str	r2, [r3, #4]
 800365e:	609a      	str	r2, [r3, #8]
 8003660:	60da      	str	r2, [r3, #12]
 8003662:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003664:	f107 0314 	add.w	r3, r7, #20
 8003668:	2290      	movs	r2, #144	; 0x90
 800366a:	2100      	movs	r1, #0
 800366c:	4618      	mov	r0, r3
 800366e:	f005 fc3d 	bl	8008eec <memset>
  if(uartHandle->Instance==USART2)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a21      	ldr	r2, [pc, #132]	; (80036fc <HAL_UART_MspInit+0xb0>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d13a      	bne.n	80036f2 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800367c:	2380      	movs	r3, #128	; 0x80
 800367e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003680:	2300      	movs	r3, #0
 8003682:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003684:	f107 0314 	add.w	r3, r7, #20
 8003688:	4618      	mov	r0, r3
 800368a:	f001 fec5 	bl	8005418 <HAL_RCCEx_PeriphCLKConfig>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d001      	beq.n	8003698 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003694:	f7ff fbea 	bl	8002e6c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003698:	4b19      	ldr	r3, [pc, #100]	; (8003700 <HAL_UART_MspInit+0xb4>)
 800369a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369c:	4a18      	ldr	r2, [pc, #96]	; (8003700 <HAL_UART_MspInit+0xb4>)
 800369e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036a2:	6413      	str	r3, [r2, #64]	; 0x40
 80036a4:	4b16      	ldr	r3, [pc, #88]	; (8003700 <HAL_UART_MspInit+0xb4>)
 80036a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ac:	613b      	str	r3, [r7, #16]
 80036ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036b0:	4b13      	ldr	r3, [pc, #76]	; (8003700 <HAL_UART_MspInit+0xb4>)
 80036b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b4:	4a12      	ldr	r2, [pc, #72]	; (8003700 <HAL_UART_MspInit+0xb4>)
 80036b6:	f043 0308 	orr.w	r3, r3, #8
 80036ba:	6313      	str	r3, [r2, #48]	; 0x30
 80036bc:	4b10      	ldr	r3, [pc, #64]	; (8003700 <HAL_UART_MspInit+0xb4>)
 80036be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c0:	f003 0308 	and.w	r3, r3, #8
 80036c4:	60fb      	str	r3, [r7, #12]
 80036c6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80036c8:	2360      	movs	r3, #96	; 0x60
 80036ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ce:	2302      	movs	r3, #2
 80036d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d4:	2300      	movs	r3, #0
 80036d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036da:	2303      	movs	r3, #3
 80036dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80036e0:	2307      	movs	r3, #7
 80036e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036e6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80036ea:	4619      	mov	r1, r3
 80036ec:	4805      	ldr	r0, [pc, #20]	; (8003704 <HAL_UART_MspInit+0xb8>)
 80036ee:	f000 ffd1 	bl	8004694 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80036f2:	bf00      	nop
 80036f4:	37b8      	adds	r7, #184	; 0xb8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	40004400 	.word	0x40004400
 8003700:	40023800 	.word	0x40023800
 8003704:	40020c00 	.word	0x40020c00

08003708 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003708:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003740 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800370c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800370e:	e003      	b.n	8003718 <LoopCopyDataInit>

08003710 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003710:	4b0c      	ldr	r3, [pc, #48]	; (8003744 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003712:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003714:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003716:	3104      	adds	r1, #4

08003718 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003718:	480b      	ldr	r0, [pc, #44]	; (8003748 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800371a:	4b0c      	ldr	r3, [pc, #48]	; (800374c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800371c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800371e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003720:	d3f6      	bcc.n	8003710 <CopyDataInit>
  ldr  r2, =_sbss
 8003722:	4a0b      	ldr	r2, [pc, #44]	; (8003750 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003724:	e002      	b.n	800372c <LoopFillZerobss>

08003726 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003726:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003728:	f842 3b04 	str.w	r3, [r2], #4

0800372c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800372c:	4b09      	ldr	r3, [pc, #36]	; (8003754 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800372e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003730:	d3f9      	bcc.n	8003726 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003732:	f7ff fd41 	bl	80031b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003736:	f005 fbb5 	bl	8008ea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800373a:	f7fe fd23 	bl	8002184 <main>
  bx  lr    
 800373e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003740:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8003744:	08009814 	.word	0x08009814
  ldr  r0, =_sdata
 8003748:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800374c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8003750:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8003754:	20000320 	.word	0x20000320

08003758 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003758:	e7fe      	b.n	8003758 <ADC_IRQHandler>

0800375a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800375e:	2003      	movs	r0, #3
 8003760:	f000 ff56 	bl	8004610 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003764:	2000      	movs	r0, #0
 8003766:	f000 f805 	bl	8003774 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800376a:	f7ff fcbf 	bl	80030ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	bd80      	pop	{r7, pc}

08003774 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800377c:	4b12      	ldr	r3, [pc, #72]	; (80037c8 <HAL_InitTick+0x54>)
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	4b12      	ldr	r3, [pc, #72]	; (80037cc <HAL_InitTick+0x58>)
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	4619      	mov	r1, r3
 8003786:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800378a:	fbb3 f3f1 	udiv	r3, r3, r1
 800378e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003792:	4618      	mov	r0, r3
 8003794:	f000 ff71 	bl	800467a <HAL_SYSTICK_Config>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e00e      	b.n	80037c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2b0f      	cmp	r3, #15
 80037a6:	d80a      	bhi.n	80037be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037a8:	2200      	movs	r2, #0
 80037aa:	6879      	ldr	r1, [r7, #4]
 80037ac:	f04f 30ff 	mov.w	r0, #4294967295
 80037b0:	f000 ff39 	bl	8004626 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037b4:	4a06      	ldr	r2, [pc, #24]	; (80037d0 <HAL_InitTick+0x5c>)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
 80037bc:	e000      	b.n	80037c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	20000000 	.word	0x20000000
 80037cc:	20000008 	.word	0x20000008
 80037d0:	20000004 	.word	0x20000004

080037d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037d4:	b480      	push	{r7}
 80037d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037d8:	4b06      	ldr	r3, [pc, #24]	; (80037f4 <HAL_IncTick+0x20>)
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	461a      	mov	r2, r3
 80037de:	4b06      	ldr	r3, [pc, #24]	; (80037f8 <HAL_IncTick+0x24>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4413      	add	r3, r2
 80037e4:	4a04      	ldr	r2, [pc, #16]	; (80037f8 <HAL_IncTick+0x24>)
 80037e6:	6013      	str	r3, [r2, #0]
}
 80037e8:	bf00      	nop
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	20000008 	.word	0x20000008
 80037f8:	2000031c 	.word	0x2000031c

080037fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  return uwTick;
 8003800:	4b03      	ldr	r3, [pc, #12]	; (8003810 <HAL_GetTick+0x14>)
 8003802:	681b      	ldr	r3, [r3, #0]
}
 8003804:	4618      	mov	r0, r3
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	2000031c 	.word	0x2000031c

08003814 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800381c:	f7ff ffee 	bl	80037fc <HAL_GetTick>
 8003820:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800382c:	d005      	beq.n	800383a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800382e:	4b0a      	ldr	r3, [pc, #40]	; (8003858 <HAL_Delay+0x44>)
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	461a      	mov	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	4413      	add	r3, r2
 8003838:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800383a:	bf00      	nop
 800383c:	f7ff ffde 	bl	80037fc <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	429a      	cmp	r2, r3
 800384a:	d8f7      	bhi.n	800383c <HAL_Delay+0x28>
  {
  }
}
 800384c:	bf00      	nop
 800384e:	bf00      	nop
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	20000008 	.word	0x20000008

0800385c <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  return __STM32F7xx_HAL_VERSION;
 8003860:	4b02      	ldr	r3, [pc, #8]	; (800386c <HAL_GetHalVersion+0x10>)
}
 8003862:	4618      	mov	r0, r3
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	01020a00 	.word	0x01020a00

08003870 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8003874:	4b03      	ldr	r3, [pc, #12]	; (8003884 <HAL_GetREVID+0x14>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	0c1b      	lsrs	r3, r3, #16
}
 800387a:	4618      	mov	r0, r3
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	e0042000 	.word	0xe0042000

08003888 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800388c:	4b04      	ldr	r3, [pc, #16]	; (80038a0 <HAL_GetDEVID+0x18>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8003894:	4618      	mov	r0, r3
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	e0042000 	.word	0xe0042000

080038a4 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 80038a8:	4b03      	ldr	r3, [pc, #12]	; (80038b8 <HAL_GetUIDw0+0x14>)
 80038aa:	681b      	ldr	r3, [r3, #0]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	1ff0f420 	.word	0x1ff0f420

080038bc <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80038c0:	4b03      	ldr	r3, [pc, #12]	; (80038d0 <HAL_GetUIDw1+0x14>)
 80038c2:	681b      	ldr	r3, [r3, #0]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	1ff0f424 	.word	0x1ff0f424

080038d4 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80038d8:	4b03      	ldr	r3, [pc, #12]	; (80038e8 <HAL_GetUIDw2+0x14>)
 80038da:	681b      	ldr	r3, [r3, #0]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	1ff0f428 	.word	0x1ff0f428

080038ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038f4:	2300      	movs	r3, #0
 80038f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e031      	b.n	8003966 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	2b00      	cmp	r3, #0
 8003908:	d109      	bne.n	800391e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7fe f942 	bl	8001b94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	f003 0310 	and.w	r3, r3, #16
 8003926:	2b00      	cmp	r3, #0
 8003928:	d116      	bne.n	8003958 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800392e:	4b10      	ldr	r3, [pc, #64]	; (8003970 <HAL_ADC_Init+0x84>)
 8003930:	4013      	ands	r3, r2
 8003932:	f043 0202 	orr.w	r2, r3, #2
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f970 	bl	8003c20 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	f023 0303 	bic.w	r3, r3, #3
 800394e:	f043 0201 	orr.w	r2, r3, #1
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	641a      	str	r2, [r3, #64]	; 0x40
 8003956:	e001      	b.n	800395c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003964:	7bfb      	ldrb	r3, [r7, #15]
}
 8003966:	4618      	mov	r0, r3
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	ffffeefd 	.word	0xffffeefd

08003974 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800397e:	2300      	movs	r3, #0
 8003980:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003988:	2b01      	cmp	r3, #1
 800398a:	d101      	bne.n	8003990 <HAL_ADC_ConfigChannel+0x1c>
 800398c:	2302      	movs	r3, #2
 800398e:	e136      	b.n	8003bfe <HAL_ADC_ConfigChannel+0x28a>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2b09      	cmp	r3, #9
 800399e:	d93a      	bls.n	8003a16 <HAL_ADC_ConfigChannel+0xa2>
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039a8:	d035      	beq.n	8003a16 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68d9      	ldr	r1, [r3, #12]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	461a      	mov	r2, r3
 80039b8:	4613      	mov	r3, r2
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	4413      	add	r3, r2
 80039be:	3b1e      	subs	r3, #30
 80039c0:	2207      	movs	r2, #7
 80039c2:	fa02 f303 	lsl.w	r3, r2, r3
 80039c6:	43da      	mvns	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	400a      	ands	r2, r1
 80039ce:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a8d      	ldr	r2, [pc, #564]	; (8003c0c <HAL_ADC_ConfigChannel+0x298>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d10a      	bne.n	80039f0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68d9      	ldr	r1, [r3, #12]
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	061a      	lsls	r2, r3, #24
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039ee:	e035      	b.n	8003a5c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68d9      	ldr	r1, [r3, #12]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	689a      	ldr	r2, [r3, #8]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	4618      	mov	r0, r3
 8003a02:	4603      	mov	r3, r0
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	4403      	add	r3, r0
 8003a08:	3b1e      	subs	r3, #30
 8003a0a:	409a      	lsls	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	430a      	orrs	r2, r1
 8003a12:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a14:	e022      	b.n	8003a5c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6919      	ldr	r1, [r3, #16]
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	461a      	mov	r2, r3
 8003a24:	4613      	mov	r3, r2
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	4413      	add	r3, r2
 8003a2a:	2207      	movs	r2, #7
 8003a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a30:	43da      	mvns	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	400a      	ands	r2, r1
 8003a38:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6919      	ldr	r1, [r3, #16]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	4403      	add	r3, r0
 8003a52:	409a      	lsls	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	2b06      	cmp	r3, #6
 8003a62:	d824      	bhi.n	8003aae <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	685a      	ldr	r2, [r3, #4]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	4413      	add	r3, r2
 8003a74:	3b05      	subs	r3, #5
 8003a76:	221f      	movs	r2, #31
 8003a78:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7c:	43da      	mvns	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	400a      	ands	r2, r1
 8003a84:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	4618      	mov	r0, r3
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685a      	ldr	r2, [r3, #4]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4413      	add	r3, r2
 8003a9e:	3b05      	subs	r3, #5
 8003aa0:	fa00 f203 	lsl.w	r2, r0, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	635a      	str	r2, [r3, #52]	; 0x34
 8003aac:	e04c      	b.n	8003b48 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2b0c      	cmp	r3, #12
 8003ab4:	d824      	bhi.n	8003b00 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	4413      	add	r3, r2
 8003ac6:	3b23      	subs	r3, #35	; 0x23
 8003ac8:	221f      	movs	r2, #31
 8003aca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ace:	43da      	mvns	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	400a      	ands	r2, r1
 8003ad6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	4613      	mov	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4413      	add	r3, r2
 8003af0:	3b23      	subs	r3, #35	; 0x23
 8003af2:	fa00 f203 	lsl.w	r2, r0, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	631a      	str	r2, [r3, #48]	; 0x30
 8003afe:	e023      	b.n	8003b48 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	4413      	add	r3, r2
 8003b10:	3b41      	subs	r3, #65	; 0x41
 8003b12:	221f      	movs	r2, #31
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	43da      	mvns	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	400a      	ands	r2, r1
 8003b20:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	4618      	mov	r0, r3
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	4613      	mov	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4413      	add	r3, r2
 8003b3a:	3b41      	subs	r3, #65	; 0x41
 8003b3c:	fa00 f203 	lsl.w	r2, r0, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	430a      	orrs	r2, r1
 8003b46:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a30      	ldr	r2, [pc, #192]	; (8003c10 <HAL_ADC_ConfigChannel+0x29c>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d10a      	bne.n	8003b68 <HAL_ADC_ConfigChannel+0x1f4>
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b5a:	d105      	bne.n	8003b68 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003b5c:	4b2d      	ldr	r3, [pc, #180]	; (8003c14 <HAL_ADC_ConfigChannel+0x2a0>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	4a2c      	ldr	r2, [pc, #176]	; (8003c14 <HAL_ADC_ConfigChannel+0x2a0>)
 8003b62:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003b66:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a28      	ldr	r2, [pc, #160]	; (8003c10 <HAL_ADC_ConfigChannel+0x29c>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d10f      	bne.n	8003b92 <HAL_ADC_ConfigChannel+0x21e>
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2b12      	cmp	r3, #18
 8003b78:	d10b      	bne.n	8003b92 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8003b7a:	4b26      	ldr	r3, [pc, #152]	; (8003c14 <HAL_ADC_ConfigChannel+0x2a0>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	4a25      	ldr	r2, [pc, #148]	; (8003c14 <HAL_ADC_ConfigChannel+0x2a0>)
 8003b80:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003b84:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003b86:	4b23      	ldr	r3, [pc, #140]	; (8003c14 <HAL_ADC_ConfigChannel+0x2a0>)
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	4a22      	ldr	r2, [pc, #136]	; (8003c14 <HAL_ADC_ConfigChannel+0x2a0>)
 8003b8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b90:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a1e      	ldr	r2, [pc, #120]	; (8003c10 <HAL_ADC_ConfigChannel+0x29c>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d12b      	bne.n	8003bf4 <HAL_ADC_ConfigChannel+0x280>
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a1a      	ldr	r2, [pc, #104]	; (8003c0c <HAL_ADC_ConfigChannel+0x298>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d003      	beq.n	8003bae <HAL_ADC_ConfigChannel+0x23a>
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2b11      	cmp	r3, #17
 8003bac:	d122      	bne.n	8003bf4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003bae:	4b19      	ldr	r3, [pc, #100]	; (8003c14 <HAL_ADC_ConfigChannel+0x2a0>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	4a18      	ldr	r2, [pc, #96]	; (8003c14 <HAL_ADC_ConfigChannel+0x2a0>)
 8003bb4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003bb8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003bba:	4b16      	ldr	r3, [pc, #88]	; (8003c14 <HAL_ADC_ConfigChannel+0x2a0>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	4a15      	ldr	r2, [pc, #84]	; (8003c14 <HAL_ADC_ConfigChannel+0x2a0>)
 8003bc0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003bc4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a10      	ldr	r2, [pc, #64]	; (8003c0c <HAL_ADC_ConfigChannel+0x298>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d111      	bne.n	8003bf4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003bd0:	4b11      	ldr	r3, [pc, #68]	; (8003c18 <HAL_ADC_ConfigChannel+0x2a4>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a11      	ldr	r2, [pc, #68]	; (8003c1c <HAL_ADC_ConfigChannel+0x2a8>)
 8003bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bda:	0c9a      	lsrs	r2, r3, #18
 8003bdc:	4613      	mov	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	4413      	add	r3, r2
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003be6:	e002      	b.n	8003bee <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	3b01      	subs	r3, #1
 8003bec:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1f9      	bne.n	8003be8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3714      	adds	r7, #20
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	10000012 	.word	0x10000012
 8003c10:	40012000 	.word	0x40012000
 8003c14:	40012300 	.word	0x40012300
 8003c18:	20000000 	.word	0x20000000
 8003c1c:	431bde83 	.word	0x431bde83

08003c20 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003c28:	4b78      	ldr	r3, [pc, #480]	; (8003e0c <ADC_Init+0x1ec>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	4a77      	ldr	r2, [pc, #476]	; (8003e0c <ADC_Init+0x1ec>)
 8003c2e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003c32:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003c34:	4b75      	ldr	r3, [pc, #468]	; (8003e0c <ADC_Init+0x1ec>)
 8003c36:	685a      	ldr	r2, [r3, #4]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	4973      	ldr	r1, [pc, #460]	; (8003e0c <ADC_Init+0x1ec>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	6859      	ldr	r1, [r3, #4]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	021a      	lsls	r2, r3, #8
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	430a      	orrs	r2, r1
 8003c64:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003c74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	6859      	ldr	r1, [r3, #4]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	430a      	orrs	r2, r1
 8003c86:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689a      	ldr	r2, [r3, #8]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6899      	ldr	r1, [r3, #8]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68da      	ldr	r2, [r3, #12]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cae:	4a58      	ldr	r2, [pc, #352]	; (8003e10 <ADC_Init+0x1f0>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d022      	beq.n	8003cfa <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	689a      	ldr	r2, [r3, #8]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003cc2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6899      	ldr	r1, [r3, #8]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ce4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6899      	ldr	r1, [r3, #8]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	609a      	str	r2, [r3, #8]
 8003cf8:	e00f      	b.n	8003d1a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	689a      	ldr	r2, [r3, #8]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d18:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 0202 	bic.w	r2, r2, #2
 8003d28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6899      	ldr	r1, [r3, #8]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	005a      	lsls	r2, r3, #1
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d01b      	beq.n	8003d80 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d56:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003d66:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	6859      	ldr	r1, [r3, #4]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d72:	3b01      	subs	r3, #1
 8003d74:	035a      	lsls	r2, r3, #13
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	605a      	str	r2, [r3, #4]
 8003d7e:	e007      	b.n	8003d90 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d8e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003d9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	3b01      	subs	r3, #1
 8003dac:	051a      	lsls	r2, r3, #20
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689a      	ldr	r2, [r3, #8]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003dc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6899      	ldr	r1, [r3, #8]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003dd2:	025a      	lsls	r2, r3, #9
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689a      	ldr	r2, [r3, #8]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6899      	ldr	r1, [r3, #8]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	029a      	lsls	r2, r3, #10
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	609a      	str	r2, [r3, #8]
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	40012300 	.word	0x40012300
 8003e10:	0f000001 	.word	0x0f000001

08003e14 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e0ed      	b.n	8004002 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d102      	bne.n	8003e38 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7fd ff5a 	bl	8001cec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0201 	orr.w	r2, r2, #1
 8003e46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e48:	f7ff fcd8 	bl	80037fc <HAL_GetTick>
 8003e4c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e4e:	e012      	b.n	8003e76 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e50:	f7ff fcd4 	bl	80037fc <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b0a      	cmp	r3, #10
 8003e5c:	d90b      	bls.n	8003e76 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e62:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2205      	movs	r2, #5
 8003e6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e0c5      	b.n	8004002 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d0e5      	beq.n	8003e50 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 0202 	bic.w	r2, r2, #2
 8003e92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e94:	f7ff fcb2 	bl	80037fc <HAL_GetTick>
 8003e98:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003e9a:	e012      	b.n	8003ec2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e9c:	f7ff fcae 	bl	80037fc <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b0a      	cmp	r3, #10
 8003ea8:	d90b      	bls.n	8003ec2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2205      	movs	r2, #5
 8003eba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e09f      	b.n	8004002 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f003 0302 	and.w	r3, r3, #2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1e5      	bne.n	8003e9c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	7e1b      	ldrb	r3, [r3, #24]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d108      	bne.n	8003eea <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	e007      	b.n	8003efa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ef8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	7e5b      	ldrb	r3, [r3, #25]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d108      	bne.n	8003f14 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f10:	601a      	str	r2, [r3, #0]
 8003f12:	e007      	b.n	8003f24 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f22:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	7e9b      	ldrb	r3, [r3, #26]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d108      	bne.n	8003f3e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f042 0220 	orr.w	r2, r2, #32
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	e007      	b.n	8003f4e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f022 0220 	bic.w	r2, r2, #32
 8003f4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	7edb      	ldrb	r3, [r3, #27]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d108      	bne.n	8003f68 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0210 	bic.w	r2, r2, #16
 8003f64:	601a      	str	r2, [r3, #0]
 8003f66:	e007      	b.n	8003f78 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f042 0210 	orr.w	r2, r2, #16
 8003f76:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	7f1b      	ldrb	r3, [r3, #28]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d108      	bne.n	8003f92 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f042 0208 	orr.w	r2, r2, #8
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	e007      	b.n	8003fa2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f022 0208 	bic.w	r2, r2, #8
 8003fa0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	7f5b      	ldrb	r3, [r3, #29]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d108      	bne.n	8003fbc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f042 0204 	orr.w	r2, r2, #4
 8003fb8:	601a      	str	r2, [r3, #0]
 8003fba:	e007      	b.n	8003fcc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 0204 	bic.w	r2, r2, #4
 8003fca:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689a      	ldr	r2, [r3, #8]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	ea42 0103 	orr.w	r1, r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	1e5a      	subs	r2, r3, #1
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
	...

0800400c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800400c:	b480      	push	{r7}
 800400e:	b087      	sub	sp, #28
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004022:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004024:	7cfb      	ldrb	r3, [r7, #19]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d003      	beq.n	8004032 <HAL_CAN_ConfigFilter+0x26>
 800402a:	7cfb      	ldrb	r3, [r7, #19]
 800402c:	2b02      	cmp	r3, #2
 800402e:	f040 80c7 	bne.w	80041c0 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a69      	ldr	r2, [pc, #420]	; (80041dc <HAL_CAN_ConfigFilter+0x1d0>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d001      	beq.n	8004040 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 800403c:	4b68      	ldr	r3, [pc, #416]	; (80041e0 <HAL_CAN_ConfigFilter+0x1d4>)
 800403e:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004046:	f043 0201 	orr.w	r2, r3, #1
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	4a63      	ldr	r2, [pc, #396]	; (80041e0 <HAL_CAN_ConfigFilter+0x1d4>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d111      	bne.n	800407c <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800405e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004072:	021b      	lsls	r3, r3, #8
 8004074:	431a      	orrs	r2, r3
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	f003 031f 	and.w	r3, r3, #31
 8004084:	2201      	movs	r2, #1
 8004086:	fa02 f303 	lsl.w	r3, r2, r3
 800408a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	43db      	mvns	r3, r3
 8004096:	401a      	ands	r2, r3
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d123      	bne.n	80040ee <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	43db      	mvns	r3, r3
 80040b0:	401a      	ands	r2, r3
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80040c8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	3248      	adds	r2, #72	; 0x48
 80040ce:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040e2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040e4:	6979      	ldr	r1, [r7, #20]
 80040e6:	3348      	adds	r3, #72	; 0x48
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	440b      	add	r3, r1
 80040ec:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d122      	bne.n	800413c <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	431a      	orrs	r2, r3
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004112:	683a      	ldr	r2, [r7, #0]
 8004114:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004116:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	3248      	adds	r2, #72	; 0x48
 800411c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004130:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004132:	6979      	ldr	r1, [r7, #20]
 8004134:	3348      	adds	r3, #72	; 0x48
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	440b      	add	r3, r1
 800413a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d109      	bne.n	8004158 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	43db      	mvns	r3, r3
 800414e:	401a      	ands	r2, r3
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004156:	e007      	b.n	8004168 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	431a      	orrs	r2, r3
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d109      	bne.n	8004184 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	43db      	mvns	r3, r3
 800417a:	401a      	ands	r2, r3
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004182:	e007      	b.n	8004194 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	431a      	orrs	r2, r3
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	6a1b      	ldr	r3, [r3, #32]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d107      	bne.n	80041ac <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	431a      	orrs	r2, r3
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80041b2:	f023 0201 	bic.w	r2, r3, #1
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80041bc:	2300      	movs	r3, #0
 80041be:	e006      	b.n	80041ce <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
  }
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	371c      	adds	r7, #28
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	40003400 	.word	0x40003400
 80041e0:	40006400 	.word	0x40006400

080041e4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d12e      	bne.n	8004256 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2202      	movs	r2, #2
 80041fc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f022 0201 	bic.w	r2, r2, #1
 800420e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004210:	f7ff faf4 	bl	80037fc <HAL_GetTick>
 8004214:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004216:	e012      	b.n	800423e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004218:	f7ff faf0 	bl	80037fc <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b0a      	cmp	r3, #10
 8004224:	d90b      	bls.n	800423e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2205      	movs	r2, #5
 8004236:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e012      	b.n	8004264 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1e5      	bne.n	8004218 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004252:	2300      	movs	r3, #0
 8004254:	e006      	b.n	8004264 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
  }
}
 8004264:	4618      	mov	r0, r3
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800426c:	b480      	push	{r7}
 800426e:	b089      	sub	sp, #36	; 0x24
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	607a      	str	r2, [r7, #4]
 8004278:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004280:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800428a:	7ffb      	ldrb	r3, [r7, #31]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d003      	beq.n	8004298 <HAL_CAN_AddTxMessage+0x2c>
 8004290:	7ffb      	ldrb	r3, [r7, #31]
 8004292:	2b02      	cmp	r3, #2
 8004294:	f040 80b8 	bne.w	8004408 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10a      	bne.n	80042b8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d105      	bne.n	80042b8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 80a0 	beq.w	80043f8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	0e1b      	lsrs	r3, r3, #24
 80042bc:	f003 0303 	and.w	r3, r3, #3
 80042c0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d907      	bls.n	80042d8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042cc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e09e      	b.n	8004416 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80042d8:	2201      	movs	r2, #1
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	409a      	lsls	r2, r3
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10d      	bne.n	8004306 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80042f4:	68f9      	ldr	r1, [r7, #12]
 80042f6:	6809      	ldr	r1, [r1, #0]
 80042f8:	431a      	orrs	r2, r3
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	3318      	adds	r3, #24
 80042fe:	011b      	lsls	r3, r3, #4
 8004300:	440b      	add	r3, r1
 8004302:	601a      	str	r2, [r3, #0]
 8004304:	e00f      	b.n	8004326 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004310:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004316:	68f9      	ldr	r1, [r7, #12]
 8004318:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800431a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	3318      	adds	r3, #24
 8004320:	011b      	lsls	r3, r3, #4
 8004322:	440b      	add	r3, r1
 8004324:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6819      	ldr	r1, [r3, #0]
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	691a      	ldr	r2, [r3, #16]
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	3318      	adds	r3, #24
 8004332:	011b      	lsls	r3, r3, #4
 8004334:	440b      	add	r3, r1
 8004336:	3304      	adds	r3, #4
 8004338:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	7d1b      	ldrb	r3, [r3, #20]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d111      	bne.n	8004366 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	3318      	adds	r3, #24
 800434a:	011b      	lsls	r3, r3, #4
 800434c:	4413      	add	r3, r2
 800434e:	3304      	adds	r3, #4
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	6811      	ldr	r1, [r2, #0]
 8004356:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	3318      	adds	r3, #24
 800435e:	011b      	lsls	r3, r3, #4
 8004360:	440b      	add	r3, r1
 8004362:	3304      	adds	r3, #4
 8004364:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	3307      	adds	r3, #7
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	061a      	lsls	r2, r3, #24
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	3306      	adds	r3, #6
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	041b      	lsls	r3, r3, #16
 8004376:	431a      	orrs	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	3305      	adds	r3, #5
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	021b      	lsls	r3, r3, #8
 8004380:	4313      	orrs	r3, r2
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	3204      	adds	r2, #4
 8004386:	7812      	ldrb	r2, [r2, #0]
 8004388:	4610      	mov	r0, r2
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	6811      	ldr	r1, [r2, #0]
 800438e:	ea43 0200 	orr.w	r2, r3, r0
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	011b      	lsls	r3, r3, #4
 8004396:	440b      	add	r3, r1
 8004398:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800439c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	3303      	adds	r3, #3
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	061a      	lsls	r2, r3, #24
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	3302      	adds	r3, #2
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	041b      	lsls	r3, r3, #16
 80043ae:	431a      	orrs	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	3301      	adds	r3, #1
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	021b      	lsls	r3, r3, #8
 80043b8:	4313      	orrs	r3, r2
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	7812      	ldrb	r2, [r2, #0]
 80043be:	4610      	mov	r0, r2
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	6811      	ldr	r1, [r2, #0]
 80043c4:	ea43 0200 	orr.w	r2, r3, r0
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	011b      	lsls	r3, r3, #4
 80043cc:	440b      	add	r3, r1
 80043ce:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80043d2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	3318      	adds	r3, #24
 80043dc:	011b      	lsls	r3, r3, #4
 80043de:	4413      	add	r3, r2
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	6811      	ldr	r1, [r2, #0]
 80043e6:	f043 0201 	orr.w	r2, r3, #1
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	3318      	adds	r3, #24
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	440b      	add	r3, r1
 80043f2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80043f4:	2300      	movs	r3, #0
 80043f6:	e00e      	b.n	8004416 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e006      	b.n	8004416 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
  }
}
 8004416:	4618      	mov	r0, r3
 8004418:	3724      	adds	r7, #36	; 0x24
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr

08004422 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004422:	b480      	push	{r7}
 8004424:	b085      	sub	sp, #20
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
 800442a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004432:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004434:	7bfb      	ldrb	r3, [r7, #15]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d002      	beq.n	8004440 <HAL_CAN_ActivateNotification+0x1e>
 800443a:	7bfb      	ldrb	r3, [r7, #15]
 800443c:	2b02      	cmp	r3, #2
 800443e:	d109      	bne.n	8004454 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6959      	ldr	r1, [r3, #20]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004450:	2300      	movs	r3, #0
 8004452:	e006      	b.n	8004462 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004458:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
  }
}
 8004462:	4618      	mov	r0, r3
 8004464:	3714      	adds	r7, #20
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
	...

08004470 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f003 0307 	and.w	r3, r3, #7
 800447e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004480:	4b0b      	ldr	r3, [pc, #44]	; (80044b0 <__NVIC_SetPriorityGrouping+0x40>)
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800448c:	4013      	ands	r3, r2
 800448e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004498:	4b06      	ldr	r3, [pc, #24]	; (80044b4 <__NVIC_SetPriorityGrouping+0x44>)
 800449a:	4313      	orrs	r3, r2
 800449c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800449e:	4a04      	ldr	r2, [pc, #16]	; (80044b0 <__NVIC_SetPriorityGrouping+0x40>)
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	60d3      	str	r3, [r2, #12]
}
 80044a4:	bf00      	nop
 80044a6:	3714      	adds	r7, #20
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr
 80044b0:	e000ed00 	.word	0xe000ed00
 80044b4:	05fa0000 	.word	0x05fa0000

080044b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044b8:	b480      	push	{r7}
 80044ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044bc:	4b04      	ldr	r3, [pc, #16]	; (80044d0 <__NVIC_GetPriorityGrouping+0x18>)
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	0a1b      	lsrs	r3, r3, #8
 80044c2:	f003 0307 	and.w	r3, r3, #7
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	e000ed00 	.word	0xe000ed00

080044d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	4603      	mov	r3, r0
 80044dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	db0b      	blt.n	80044fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044e6:	79fb      	ldrb	r3, [r7, #7]
 80044e8:	f003 021f 	and.w	r2, r3, #31
 80044ec:	4907      	ldr	r1, [pc, #28]	; (800450c <__NVIC_EnableIRQ+0x38>)
 80044ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f2:	095b      	lsrs	r3, r3, #5
 80044f4:	2001      	movs	r0, #1
 80044f6:	fa00 f202 	lsl.w	r2, r0, r2
 80044fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80044fe:	bf00      	nop
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	e000e100 	.word	0xe000e100

08004510 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	4603      	mov	r3, r0
 8004518:	6039      	str	r1, [r7, #0]
 800451a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800451c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004520:	2b00      	cmp	r3, #0
 8004522:	db0a      	blt.n	800453a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	b2da      	uxtb	r2, r3
 8004528:	490c      	ldr	r1, [pc, #48]	; (800455c <__NVIC_SetPriority+0x4c>)
 800452a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800452e:	0112      	lsls	r2, r2, #4
 8004530:	b2d2      	uxtb	r2, r2
 8004532:	440b      	add	r3, r1
 8004534:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004538:	e00a      	b.n	8004550 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	b2da      	uxtb	r2, r3
 800453e:	4908      	ldr	r1, [pc, #32]	; (8004560 <__NVIC_SetPriority+0x50>)
 8004540:	79fb      	ldrb	r3, [r7, #7]
 8004542:	f003 030f 	and.w	r3, r3, #15
 8004546:	3b04      	subs	r3, #4
 8004548:	0112      	lsls	r2, r2, #4
 800454a:	b2d2      	uxtb	r2, r2
 800454c:	440b      	add	r3, r1
 800454e:	761a      	strb	r2, [r3, #24]
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr
 800455c:	e000e100 	.word	0xe000e100
 8004560:	e000ed00 	.word	0xe000ed00

08004564 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004564:	b480      	push	{r7}
 8004566:	b089      	sub	sp, #36	; 0x24
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f003 0307 	and.w	r3, r3, #7
 8004576:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	f1c3 0307 	rsb	r3, r3, #7
 800457e:	2b04      	cmp	r3, #4
 8004580:	bf28      	it	cs
 8004582:	2304      	movcs	r3, #4
 8004584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	3304      	adds	r3, #4
 800458a:	2b06      	cmp	r3, #6
 800458c:	d902      	bls.n	8004594 <NVIC_EncodePriority+0x30>
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	3b03      	subs	r3, #3
 8004592:	e000      	b.n	8004596 <NVIC_EncodePriority+0x32>
 8004594:	2300      	movs	r3, #0
 8004596:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004598:	f04f 32ff 	mov.w	r2, #4294967295
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	fa02 f303 	lsl.w	r3, r2, r3
 80045a2:	43da      	mvns	r2, r3
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	401a      	ands	r2, r3
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045ac:	f04f 31ff 	mov.w	r1, #4294967295
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	fa01 f303 	lsl.w	r3, r1, r3
 80045b6:	43d9      	mvns	r1, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045bc:	4313      	orrs	r3, r2
         );
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3724      	adds	r7, #36	; 0x24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
	...

080045cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3b01      	subs	r3, #1
 80045d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045dc:	d301      	bcc.n	80045e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045de:	2301      	movs	r3, #1
 80045e0:	e00f      	b.n	8004602 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045e2:	4a0a      	ldr	r2, [pc, #40]	; (800460c <SysTick_Config+0x40>)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	3b01      	subs	r3, #1
 80045e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045ea:	210f      	movs	r1, #15
 80045ec:	f04f 30ff 	mov.w	r0, #4294967295
 80045f0:	f7ff ff8e 	bl	8004510 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045f4:	4b05      	ldr	r3, [pc, #20]	; (800460c <SysTick_Config+0x40>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045fa:	4b04      	ldr	r3, [pc, #16]	; (800460c <SysTick_Config+0x40>)
 80045fc:	2207      	movs	r2, #7
 80045fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	e000e010 	.word	0xe000e010

08004610 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f7ff ff29 	bl	8004470 <__NVIC_SetPriorityGrouping>
}
 800461e:	bf00      	nop
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004626:	b580      	push	{r7, lr}
 8004628:	b086      	sub	sp, #24
 800462a:	af00      	add	r7, sp, #0
 800462c:	4603      	mov	r3, r0
 800462e:	60b9      	str	r1, [r7, #8]
 8004630:	607a      	str	r2, [r7, #4]
 8004632:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004634:	2300      	movs	r3, #0
 8004636:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004638:	f7ff ff3e 	bl	80044b8 <__NVIC_GetPriorityGrouping>
 800463c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	68b9      	ldr	r1, [r7, #8]
 8004642:	6978      	ldr	r0, [r7, #20]
 8004644:	f7ff ff8e 	bl	8004564 <NVIC_EncodePriority>
 8004648:	4602      	mov	r2, r0
 800464a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800464e:	4611      	mov	r1, r2
 8004650:	4618      	mov	r0, r3
 8004652:	f7ff ff5d 	bl	8004510 <__NVIC_SetPriority>
}
 8004656:	bf00      	nop
 8004658:	3718      	adds	r7, #24
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b082      	sub	sp, #8
 8004662:	af00      	add	r7, sp, #0
 8004664:	4603      	mov	r3, r0
 8004666:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800466c:	4618      	mov	r0, r3
 800466e:	f7ff ff31 	bl	80044d4 <__NVIC_EnableIRQ>
}
 8004672:	bf00      	nop
 8004674:	3708      	adds	r7, #8
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b082      	sub	sp, #8
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7ff ffa2 	bl	80045cc <SysTick_Config>
 8004688:	4603      	mov	r3, r0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3708      	adds	r7, #8
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
	...

08004694 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004694:	b480      	push	{r7}
 8004696:	b089      	sub	sp, #36	; 0x24
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800469e:	2300      	movs	r3, #0
 80046a0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80046a2:	2300      	movs	r3, #0
 80046a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80046a6:	2300      	movs	r3, #0
 80046a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80046aa:	2300      	movs	r3, #0
 80046ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80046ae:	2300      	movs	r3, #0
 80046b0:	61fb      	str	r3, [r7, #28]
 80046b2:	e175      	b.n	80049a0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80046b4:	2201      	movs	r2, #1
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	fa02 f303 	lsl.w	r3, r2, r3
 80046bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	4013      	ands	r3, r2
 80046c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	f040 8164 	bne.w	800499a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f003 0303 	and.w	r3, r3, #3
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d005      	beq.n	80046ea <HAL_GPIO_Init+0x56>
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f003 0303 	and.w	r3, r3, #3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d130      	bne.n	800474c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	005b      	lsls	r3, r3, #1
 80046f4:	2203      	movs	r2, #3
 80046f6:	fa02 f303 	lsl.w	r3, r2, r3
 80046fa:	43db      	mvns	r3, r3
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	4013      	ands	r3, r2
 8004700:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	68da      	ldr	r2, [r3, #12]
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	fa02 f303 	lsl.w	r3, r2, r3
 800470e:	69ba      	ldr	r2, [r7, #24]
 8004710:	4313      	orrs	r3, r2
 8004712:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	69ba      	ldr	r2, [r7, #24]
 8004718:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004720:	2201      	movs	r2, #1
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	fa02 f303 	lsl.w	r3, r2, r3
 8004728:	43db      	mvns	r3, r3
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	4013      	ands	r3, r2
 800472e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	091b      	lsrs	r3, r3, #4
 8004736:	f003 0201 	and.w	r2, r3, #1
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	fa02 f303 	lsl.w	r3, r2, r3
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	4313      	orrs	r3, r2
 8004744:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f003 0303 	and.w	r3, r3, #3
 8004754:	2b03      	cmp	r3, #3
 8004756:	d017      	beq.n	8004788 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	2203      	movs	r2, #3
 8004764:	fa02 f303 	lsl.w	r3, r2, r3
 8004768:	43db      	mvns	r3, r3
 800476a:	69ba      	ldr	r2, [r7, #24]
 800476c:	4013      	ands	r3, r2
 800476e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	689a      	ldr	r2, [r3, #8]
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	fa02 f303 	lsl.w	r3, r2, r3
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	4313      	orrs	r3, r2
 8004780:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f003 0303 	and.w	r3, r3, #3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d123      	bne.n	80047dc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	08da      	lsrs	r2, r3, #3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	3208      	adds	r2, #8
 800479c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	f003 0307 	and.w	r3, r3, #7
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	220f      	movs	r2, #15
 80047ac:	fa02 f303 	lsl.w	r3, r2, r3
 80047b0:	43db      	mvns	r3, r3
 80047b2:	69ba      	ldr	r2, [r7, #24]
 80047b4:	4013      	ands	r3, r2
 80047b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	691a      	ldr	r2, [r3, #16]
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	f003 0307 	and.w	r3, r3, #7
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	fa02 f303 	lsl.w	r3, r2, r3
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	08da      	lsrs	r2, r3, #3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	3208      	adds	r2, #8
 80047d6:	69b9      	ldr	r1, [r7, #24]
 80047d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	005b      	lsls	r3, r3, #1
 80047e6:	2203      	movs	r2, #3
 80047e8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ec:	43db      	mvns	r3, r3
 80047ee:	69ba      	ldr	r2, [r7, #24]
 80047f0:	4013      	ands	r3, r2
 80047f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f003 0203 	and.w	r2, r3, #3
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	fa02 f303 	lsl.w	r3, r2, r3
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	4313      	orrs	r3, r2
 8004808:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004818:	2b00      	cmp	r3, #0
 800481a:	f000 80be 	beq.w	800499a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800481e:	4b66      	ldr	r3, [pc, #408]	; (80049b8 <HAL_GPIO_Init+0x324>)
 8004820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004822:	4a65      	ldr	r2, [pc, #404]	; (80049b8 <HAL_GPIO_Init+0x324>)
 8004824:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004828:	6453      	str	r3, [r2, #68]	; 0x44
 800482a:	4b63      	ldr	r3, [pc, #396]	; (80049b8 <HAL_GPIO_Init+0x324>)
 800482c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004832:	60fb      	str	r3, [r7, #12]
 8004834:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004836:	4a61      	ldr	r2, [pc, #388]	; (80049bc <HAL_GPIO_Init+0x328>)
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	089b      	lsrs	r3, r3, #2
 800483c:	3302      	adds	r3, #2
 800483e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004842:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	f003 0303 	and.w	r3, r3, #3
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	220f      	movs	r2, #15
 800484e:	fa02 f303 	lsl.w	r3, r2, r3
 8004852:	43db      	mvns	r3, r3
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	4013      	ands	r3, r2
 8004858:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a58      	ldr	r2, [pc, #352]	; (80049c0 <HAL_GPIO_Init+0x32c>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d037      	beq.n	80048d2 <HAL_GPIO_Init+0x23e>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a57      	ldr	r2, [pc, #348]	; (80049c4 <HAL_GPIO_Init+0x330>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d031      	beq.n	80048ce <HAL_GPIO_Init+0x23a>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a56      	ldr	r2, [pc, #344]	; (80049c8 <HAL_GPIO_Init+0x334>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d02b      	beq.n	80048ca <HAL_GPIO_Init+0x236>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a55      	ldr	r2, [pc, #340]	; (80049cc <HAL_GPIO_Init+0x338>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d025      	beq.n	80048c6 <HAL_GPIO_Init+0x232>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a54      	ldr	r2, [pc, #336]	; (80049d0 <HAL_GPIO_Init+0x33c>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d01f      	beq.n	80048c2 <HAL_GPIO_Init+0x22e>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a53      	ldr	r2, [pc, #332]	; (80049d4 <HAL_GPIO_Init+0x340>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d019      	beq.n	80048be <HAL_GPIO_Init+0x22a>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a52      	ldr	r2, [pc, #328]	; (80049d8 <HAL_GPIO_Init+0x344>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d013      	beq.n	80048ba <HAL_GPIO_Init+0x226>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a51      	ldr	r2, [pc, #324]	; (80049dc <HAL_GPIO_Init+0x348>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d00d      	beq.n	80048b6 <HAL_GPIO_Init+0x222>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a50      	ldr	r2, [pc, #320]	; (80049e0 <HAL_GPIO_Init+0x34c>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d007      	beq.n	80048b2 <HAL_GPIO_Init+0x21e>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a4f      	ldr	r2, [pc, #316]	; (80049e4 <HAL_GPIO_Init+0x350>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d101      	bne.n	80048ae <HAL_GPIO_Init+0x21a>
 80048aa:	2309      	movs	r3, #9
 80048ac:	e012      	b.n	80048d4 <HAL_GPIO_Init+0x240>
 80048ae:	230a      	movs	r3, #10
 80048b0:	e010      	b.n	80048d4 <HAL_GPIO_Init+0x240>
 80048b2:	2308      	movs	r3, #8
 80048b4:	e00e      	b.n	80048d4 <HAL_GPIO_Init+0x240>
 80048b6:	2307      	movs	r3, #7
 80048b8:	e00c      	b.n	80048d4 <HAL_GPIO_Init+0x240>
 80048ba:	2306      	movs	r3, #6
 80048bc:	e00a      	b.n	80048d4 <HAL_GPIO_Init+0x240>
 80048be:	2305      	movs	r3, #5
 80048c0:	e008      	b.n	80048d4 <HAL_GPIO_Init+0x240>
 80048c2:	2304      	movs	r3, #4
 80048c4:	e006      	b.n	80048d4 <HAL_GPIO_Init+0x240>
 80048c6:	2303      	movs	r3, #3
 80048c8:	e004      	b.n	80048d4 <HAL_GPIO_Init+0x240>
 80048ca:	2302      	movs	r3, #2
 80048cc:	e002      	b.n	80048d4 <HAL_GPIO_Init+0x240>
 80048ce:	2301      	movs	r3, #1
 80048d0:	e000      	b.n	80048d4 <HAL_GPIO_Init+0x240>
 80048d2:	2300      	movs	r3, #0
 80048d4:	69fa      	ldr	r2, [r7, #28]
 80048d6:	f002 0203 	and.w	r2, r2, #3
 80048da:	0092      	lsls	r2, r2, #2
 80048dc:	4093      	lsls	r3, r2
 80048de:	69ba      	ldr	r2, [r7, #24]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80048e4:	4935      	ldr	r1, [pc, #212]	; (80049bc <HAL_GPIO_Init+0x328>)
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	089b      	lsrs	r3, r3, #2
 80048ea:	3302      	adds	r3, #2
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048f2:	4b3d      	ldr	r3, [pc, #244]	; (80049e8 <HAL_GPIO_Init+0x354>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	43db      	mvns	r3, r3
 80048fc:	69ba      	ldr	r2, [r7, #24]
 80048fe:	4013      	ands	r3, r2
 8004900:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800490e:	69ba      	ldr	r2, [r7, #24]
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	4313      	orrs	r3, r2
 8004914:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004916:	4a34      	ldr	r2, [pc, #208]	; (80049e8 <HAL_GPIO_Init+0x354>)
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800491c:	4b32      	ldr	r3, [pc, #200]	; (80049e8 <HAL_GPIO_Init+0x354>)
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	43db      	mvns	r3, r3
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	4013      	ands	r3, r2
 800492a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d003      	beq.n	8004940 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	4313      	orrs	r3, r2
 800493e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004940:	4a29      	ldr	r2, [pc, #164]	; (80049e8 <HAL_GPIO_Init+0x354>)
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004946:	4b28      	ldr	r3, [pc, #160]	; (80049e8 <HAL_GPIO_Init+0x354>)
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	43db      	mvns	r3, r3
 8004950:	69ba      	ldr	r2, [r7, #24]
 8004952:	4013      	ands	r3, r2
 8004954:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	4313      	orrs	r3, r2
 8004968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800496a:	4a1f      	ldr	r2, [pc, #124]	; (80049e8 <HAL_GPIO_Init+0x354>)
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004970:	4b1d      	ldr	r3, [pc, #116]	; (80049e8 <HAL_GPIO_Init+0x354>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	43db      	mvns	r3, r3
 800497a:	69ba      	ldr	r2, [r7, #24]
 800497c:	4013      	ands	r3, r2
 800497e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d003      	beq.n	8004994 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800498c:	69ba      	ldr	r2, [r7, #24]
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	4313      	orrs	r3, r2
 8004992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004994:	4a14      	ldr	r2, [pc, #80]	; (80049e8 <HAL_GPIO_Init+0x354>)
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	3301      	adds	r3, #1
 800499e:	61fb      	str	r3, [r7, #28]
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	2b0f      	cmp	r3, #15
 80049a4:	f67f ae86 	bls.w	80046b4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80049a8:	bf00      	nop
 80049aa:	bf00      	nop
 80049ac:	3724      	adds	r7, #36	; 0x24
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	40023800 	.word	0x40023800
 80049bc:	40013800 	.word	0x40013800
 80049c0:	40020000 	.word	0x40020000
 80049c4:	40020400 	.word	0x40020400
 80049c8:	40020800 	.word	0x40020800
 80049cc:	40020c00 	.word	0x40020c00
 80049d0:	40021000 	.word	0x40021000
 80049d4:	40021400 	.word	0x40021400
 80049d8:	40021800 	.word	0x40021800
 80049dc:	40021c00 	.word	0x40021c00
 80049e0:	40022000 	.word	0x40022000
 80049e4:	40022400 	.word	0x40022400
 80049e8:	40013c00 	.word	0x40013c00

080049ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	460b      	mov	r3, r1
 80049f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	691a      	ldr	r2, [r3, #16]
 80049fc:	887b      	ldrh	r3, [r7, #2]
 80049fe:	4013      	ands	r3, r2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d002      	beq.n	8004a0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a04:	2301      	movs	r3, #1
 8004a06:	73fb      	strb	r3, [r7, #15]
 8004a08:	e001      	b.n	8004a0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3714      	adds	r7, #20
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	460b      	mov	r3, r1
 8004a26:	807b      	strh	r3, [r7, #2]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a2c:	787b      	ldrb	r3, [r7, #1]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a32:	887a      	ldrh	r2, [r7, #2]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004a38:	e003      	b.n	8004a42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004a3a:	887b      	ldrh	r3, [r7, #2]
 8004a3c:	041a      	lsls	r2, r3, #16
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	619a      	str	r2, [r3, #24]
}
 8004a42:	bf00      	nop
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
	...

08004a50 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004a56:	2300      	movs	r3, #0
 8004a58:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004a5a:	4b23      	ldr	r3, [pc, #140]	; (8004ae8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5e:	4a22      	ldr	r2, [pc, #136]	; (8004ae8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a64:	6413      	str	r3, [r2, #64]	; 0x40
 8004a66:	4b20      	ldr	r3, [pc, #128]	; (8004ae8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a6e:	603b      	str	r3, [r7, #0]
 8004a70:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004a72:	4b1e      	ldr	r3, [pc, #120]	; (8004aec <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a1d      	ldr	r2, [pc, #116]	; (8004aec <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a7c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a7e:	f7fe febd 	bl	80037fc <HAL_GetTick>
 8004a82:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a84:	e009      	b.n	8004a9a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a86:	f7fe feb9 	bl	80037fc <HAL_GetTick>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a94:	d901      	bls.n	8004a9a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e022      	b.n	8004ae0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a9a:	4b14      	ldr	r3, [pc, #80]	; (8004aec <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aa6:	d1ee      	bne.n	8004a86 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004aa8:	4b10      	ldr	r3, [pc, #64]	; (8004aec <HAL_PWREx_EnableOverDrive+0x9c>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a0f      	ldr	r2, [pc, #60]	; (8004aec <HAL_PWREx_EnableOverDrive+0x9c>)
 8004aae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ab2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ab4:	f7fe fea2 	bl	80037fc <HAL_GetTick>
 8004ab8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004aba:	e009      	b.n	8004ad0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004abc:	f7fe fe9e 	bl	80037fc <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004aca:	d901      	bls.n	8004ad0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e007      	b.n	8004ae0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ad0:	4b06      	ldr	r3, [pc, #24]	; (8004aec <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004adc:	d1ee      	bne.n	8004abc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3708      	adds	r7, #8
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	40023800 	.word	0x40023800
 8004aec:	40007000 	.word	0x40007000

08004af0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004af8:	2300      	movs	r3, #0
 8004afa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d101      	bne.n	8004b06 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e29b      	b.n	800503e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f000 8087 	beq.w	8004c22 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b14:	4b96      	ldr	r3, [pc, #600]	; (8004d70 <HAL_RCC_OscConfig+0x280>)
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f003 030c 	and.w	r3, r3, #12
 8004b1c:	2b04      	cmp	r3, #4
 8004b1e:	d00c      	beq.n	8004b3a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b20:	4b93      	ldr	r3, [pc, #588]	; (8004d70 <HAL_RCC_OscConfig+0x280>)
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f003 030c 	and.w	r3, r3, #12
 8004b28:	2b08      	cmp	r3, #8
 8004b2a:	d112      	bne.n	8004b52 <HAL_RCC_OscConfig+0x62>
 8004b2c:	4b90      	ldr	r3, [pc, #576]	; (8004d70 <HAL_RCC_OscConfig+0x280>)
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b38:	d10b      	bne.n	8004b52 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b3a:	4b8d      	ldr	r3, [pc, #564]	; (8004d70 <HAL_RCC_OscConfig+0x280>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d06c      	beq.n	8004c20 <HAL_RCC_OscConfig+0x130>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d168      	bne.n	8004c20 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e275      	b.n	800503e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b5a:	d106      	bne.n	8004b6a <HAL_RCC_OscConfig+0x7a>
 8004b5c:	4b84      	ldr	r3, [pc, #528]	; (8004d70 <HAL_RCC_OscConfig+0x280>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a83      	ldr	r2, [pc, #524]	; (8004d70 <HAL_RCC_OscConfig+0x280>)
 8004b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b66:	6013      	str	r3, [r2, #0]
 8004b68:	e02e      	b.n	8004bc8 <HAL_RCC_OscConfig+0xd8>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10c      	bne.n	8004b8c <HAL_RCC_OscConfig+0x9c>
 8004b72:	4b7f      	ldr	r3, [pc, #508]	; (8004d70 <HAL_RCC_OscConfig+0x280>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a7e      	ldr	r2, [pc, #504]	; (8004d70 <HAL_RCC_OscConfig+0x280>)
 8004b78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b7c:	6013      	str	r3, [r2, #0]
 8004b7e:	4b7c      	ldr	r3, [pc, #496]	; (8004d70 <HAL_RCC_OscConfig+0x280>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a7b      	ldr	r2, [pc, #492]	; (8004d70 <HAL_RCC_OscConfig+0x280>)
 8004b84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b88:	6013      	str	r3, [r2, #0]
 8004b8a:	e01d      	b.n	8004bc8 <HAL_RCC_OscConfig+0xd8>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b94:	d10c      	bne.n	8004bb0 <HAL_RCC_OscConfig+0xc0>
 8004b96:	4b76      	ldr	r3, [pc, #472]	; (8004d70 <HAL_RCC_OscConfig+0x280>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a75      	ldr	r2, [pc, #468]	; (8004d70 <HAL_RCC_OscConfig+0x280>)
 8004b9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ba0:	6013      	str	r3, [r2, #0]
 8004ba2:	4b73      	ldr	r3, [pc, #460]	; (8004d70 <HAL_RCC_OscConfig+0x280>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a72      	ldr	r2, [pc, #456]	; (8004d70 <HAL_RCC_OscConfig+0x280>)
 8004ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bac:	6013      	str	r3, [r2, #0]
 8004bae:	e00b      	b.n	8004bc8 <HAL_RCC_OscConfig+0xd8>
 8004bb0:	4b6f      	ldr	r3, [pc, #444]	; (8004d70 <HAL_RCC_OscConfig+0x280>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a6e      	ldr	r2, [pc, #440]	; (8004d70 <HAL_RCC_OscConfig+0x280>)
 8004bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bba:	6013      	str	r3, [r2, #0]
 8004bbc:	4b6c      	ldr	r3, [pc, #432]	; (8004d70 <HAL_RCC_OscConfig+0x280>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a6b      	ldr	r2, [pc, #428]	; (8004d70 <HAL_RCC_OscConfig+0x280>)
 8004bc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d013      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd0:	f7fe fe14 	bl	80037fc <HAL_GetTick>
 8004bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bd6:	e008      	b.n	8004bea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bd8:	f7fe fe10 	bl	80037fc <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b64      	cmp	r3, #100	; 0x64
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e229      	b.n	800503e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bea:	4b61      	ldr	r3, [pc, #388]	; (8004d70 <HAL_RCC_OscConfig+0x280>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d0f0      	beq.n	8004bd8 <HAL_RCC_OscConfig+0xe8>
 8004bf6:	e014      	b.n	8004c22 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf8:	f7fe fe00 	bl	80037fc <HAL_GetTick>
 8004bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bfe:	e008      	b.n	8004c12 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c00:	f7fe fdfc 	bl	80037fc <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b64      	cmp	r3, #100	; 0x64
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e215      	b.n	800503e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c12:	4b57      	ldr	r3, [pc, #348]	; (8004d70 <HAL_RCC_OscConfig+0x280>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1f0      	bne.n	8004c00 <HAL_RCC_OscConfig+0x110>
 8004c1e:	e000      	b.n	8004c22 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d069      	beq.n	8004d02 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c2e:	4b50      	ldr	r3, [pc, #320]	; (8004d70 <HAL_RCC_OscConfig+0x280>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f003 030c 	and.w	r3, r3, #12
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00b      	beq.n	8004c52 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c3a:	4b4d      	ldr	r3, [pc, #308]	; (8004d70 <HAL_RCC_OscConfig+0x280>)
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f003 030c 	and.w	r3, r3, #12
 8004c42:	2b08      	cmp	r3, #8
 8004c44:	d11c      	bne.n	8004c80 <HAL_RCC_OscConfig+0x190>
 8004c46:	4b4a      	ldr	r3, [pc, #296]	; (8004d70 <HAL_RCC_OscConfig+0x280>)
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d116      	bne.n	8004c80 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c52:	4b47      	ldr	r3, [pc, #284]	; (8004d70 <HAL_RCC_OscConfig+0x280>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d005      	beq.n	8004c6a <HAL_RCC_OscConfig+0x17a>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d001      	beq.n	8004c6a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e1e9      	b.n	800503e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c6a:	4b41      	ldr	r3, [pc, #260]	; (8004d70 <HAL_RCC_OscConfig+0x280>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	00db      	lsls	r3, r3, #3
 8004c78:	493d      	ldr	r1, [pc, #244]	; (8004d70 <HAL_RCC_OscConfig+0x280>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c7e:	e040      	b.n	8004d02 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d023      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c88:	4b39      	ldr	r3, [pc, #228]	; (8004d70 <HAL_RCC_OscConfig+0x280>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a38      	ldr	r2, [pc, #224]	; (8004d70 <HAL_RCC_OscConfig+0x280>)
 8004c8e:	f043 0301 	orr.w	r3, r3, #1
 8004c92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c94:	f7fe fdb2 	bl	80037fc <HAL_GetTick>
 8004c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c9a:	e008      	b.n	8004cae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c9c:	f7fe fdae 	bl	80037fc <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e1c7      	b.n	800503e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cae:	4b30      	ldr	r3, [pc, #192]	; (8004d70 <HAL_RCC_OscConfig+0x280>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d0f0      	beq.n	8004c9c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cba:	4b2d      	ldr	r3, [pc, #180]	; (8004d70 <HAL_RCC_OscConfig+0x280>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	00db      	lsls	r3, r3, #3
 8004cc8:	4929      	ldr	r1, [pc, #164]	; (8004d70 <HAL_RCC_OscConfig+0x280>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	600b      	str	r3, [r1, #0]
 8004cce:	e018      	b.n	8004d02 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cd0:	4b27      	ldr	r3, [pc, #156]	; (8004d70 <HAL_RCC_OscConfig+0x280>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a26      	ldr	r2, [pc, #152]	; (8004d70 <HAL_RCC_OscConfig+0x280>)
 8004cd6:	f023 0301 	bic.w	r3, r3, #1
 8004cda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cdc:	f7fe fd8e 	bl	80037fc <HAL_GetTick>
 8004ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ce2:	e008      	b.n	8004cf6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ce4:	f7fe fd8a 	bl	80037fc <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e1a3      	b.n	800503e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cf6:	4b1e      	ldr	r3, [pc, #120]	; (8004d70 <HAL_RCC_OscConfig+0x280>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1f0      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0308 	and.w	r3, r3, #8
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d038      	beq.n	8004d80 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d019      	beq.n	8004d4a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d16:	4b16      	ldr	r3, [pc, #88]	; (8004d70 <HAL_RCC_OscConfig+0x280>)
 8004d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d1a:	4a15      	ldr	r2, [pc, #84]	; (8004d70 <HAL_RCC_OscConfig+0x280>)
 8004d1c:	f043 0301 	orr.w	r3, r3, #1
 8004d20:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d22:	f7fe fd6b 	bl	80037fc <HAL_GetTick>
 8004d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d28:	e008      	b.n	8004d3c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d2a:	f7fe fd67 	bl	80037fc <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d901      	bls.n	8004d3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e180      	b.n	800503e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d3c:	4b0c      	ldr	r3, [pc, #48]	; (8004d70 <HAL_RCC_OscConfig+0x280>)
 8004d3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d40:	f003 0302 	and.w	r3, r3, #2
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d0f0      	beq.n	8004d2a <HAL_RCC_OscConfig+0x23a>
 8004d48:	e01a      	b.n	8004d80 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d4a:	4b09      	ldr	r3, [pc, #36]	; (8004d70 <HAL_RCC_OscConfig+0x280>)
 8004d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d4e:	4a08      	ldr	r2, [pc, #32]	; (8004d70 <HAL_RCC_OscConfig+0x280>)
 8004d50:	f023 0301 	bic.w	r3, r3, #1
 8004d54:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d56:	f7fe fd51 	bl	80037fc <HAL_GetTick>
 8004d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d5c:	e00a      	b.n	8004d74 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d5e:	f7fe fd4d 	bl	80037fc <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d903      	bls.n	8004d74 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e166      	b.n	800503e <HAL_RCC_OscConfig+0x54e>
 8004d70:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d74:	4b92      	ldr	r3, [pc, #584]	; (8004fc0 <HAL_RCC_OscConfig+0x4d0>)
 8004d76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d78:	f003 0302 	and.w	r3, r3, #2
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1ee      	bne.n	8004d5e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0304 	and.w	r3, r3, #4
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f000 80a4 	beq.w	8004ed6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d8e:	4b8c      	ldr	r3, [pc, #560]	; (8004fc0 <HAL_RCC_OscConfig+0x4d0>)
 8004d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d10d      	bne.n	8004db6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d9a:	4b89      	ldr	r3, [pc, #548]	; (8004fc0 <HAL_RCC_OscConfig+0x4d0>)
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9e:	4a88      	ldr	r2, [pc, #544]	; (8004fc0 <HAL_RCC_OscConfig+0x4d0>)
 8004da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004da4:	6413      	str	r3, [r2, #64]	; 0x40
 8004da6:	4b86      	ldr	r3, [pc, #536]	; (8004fc0 <HAL_RCC_OscConfig+0x4d0>)
 8004da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dae:	60bb      	str	r3, [r7, #8]
 8004db0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004db2:	2301      	movs	r3, #1
 8004db4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004db6:	4b83      	ldr	r3, [pc, #524]	; (8004fc4 <HAL_RCC_OscConfig+0x4d4>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d118      	bne.n	8004df4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004dc2:	4b80      	ldr	r3, [pc, #512]	; (8004fc4 <HAL_RCC_OscConfig+0x4d4>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a7f      	ldr	r2, [pc, #508]	; (8004fc4 <HAL_RCC_OscConfig+0x4d4>)
 8004dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dce:	f7fe fd15 	bl	80037fc <HAL_GetTick>
 8004dd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dd4:	e008      	b.n	8004de8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dd6:	f7fe fd11 	bl	80037fc <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	2b64      	cmp	r3, #100	; 0x64
 8004de2:	d901      	bls.n	8004de8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e12a      	b.n	800503e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004de8:	4b76      	ldr	r3, [pc, #472]	; (8004fc4 <HAL_RCC_OscConfig+0x4d4>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d0f0      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d106      	bne.n	8004e0a <HAL_RCC_OscConfig+0x31a>
 8004dfc:	4b70      	ldr	r3, [pc, #448]	; (8004fc0 <HAL_RCC_OscConfig+0x4d0>)
 8004dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e00:	4a6f      	ldr	r2, [pc, #444]	; (8004fc0 <HAL_RCC_OscConfig+0x4d0>)
 8004e02:	f043 0301 	orr.w	r3, r3, #1
 8004e06:	6713      	str	r3, [r2, #112]	; 0x70
 8004e08:	e02d      	b.n	8004e66 <HAL_RCC_OscConfig+0x376>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10c      	bne.n	8004e2c <HAL_RCC_OscConfig+0x33c>
 8004e12:	4b6b      	ldr	r3, [pc, #428]	; (8004fc0 <HAL_RCC_OscConfig+0x4d0>)
 8004e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e16:	4a6a      	ldr	r2, [pc, #424]	; (8004fc0 <HAL_RCC_OscConfig+0x4d0>)
 8004e18:	f023 0301 	bic.w	r3, r3, #1
 8004e1c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e1e:	4b68      	ldr	r3, [pc, #416]	; (8004fc0 <HAL_RCC_OscConfig+0x4d0>)
 8004e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e22:	4a67      	ldr	r2, [pc, #412]	; (8004fc0 <HAL_RCC_OscConfig+0x4d0>)
 8004e24:	f023 0304 	bic.w	r3, r3, #4
 8004e28:	6713      	str	r3, [r2, #112]	; 0x70
 8004e2a:	e01c      	b.n	8004e66 <HAL_RCC_OscConfig+0x376>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	2b05      	cmp	r3, #5
 8004e32:	d10c      	bne.n	8004e4e <HAL_RCC_OscConfig+0x35e>
 8004e34:	4b62      	ldr	r3, [pc, #392]	; (8004fc0 <HAL_RCC_OscConfig+0x4d0>)
 8004e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e38:	4a61      	ldr	r2, [pc, #388]	; (8004fc0 <HAL_RCC_OscConfig+0x4d0>)
 8004e3a:	f043 0304 	orr.w	r3, r3, #4
 8004e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8004e40:	4b5f      	ldr	r3, [pc, #380]	; (8004fc0 <HAL_RCC_OscConfig+0x4d0>)
 8004e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e44:	4a5e      	ldr	r2, [pc, #376]	; (8004fc0 <HAL_RCC_OscConfig+0x4d0>)
 8004e46:	f043 0301 	orr.w	r3, r3, #1
 8004e4a:	6713      	str	r3, [r2, #112]	; 0x70
 8004e4c:	e00b      	b.n	8004e66 <HAL_RCC_OscConfig+0x376>
 8004e4e:	4b5c      	ldr	r3, [pc, #368]	; (8004fc0 <HAL_RCC_OscConfig+0x4d0>)
 8004e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e52:	4a5b      	ldr	r2, [pc, #364]	; (8004fc0 <HAL_RCC_OscConfig+0x4d0>)
 8004e54:	f023 0301 	bic.w	r3, r3, #1
 8004e58:	6713      	str	r3, [r2, #112]	; 0x70
 8004e5a:	4b59      	ldr	r3, [pc, #356]	; (8004fc0 <HAL_RCC_OscConfig+0x4d0>)
 8004e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e5e:	4a58      	ldr	r2, [pc, #352]	; (8004fc0 <HAL_RCC_OscConfig+0x4d0>)
 8004e60:	f023 0304 	bic.w	r3, r3, #4
 8004e64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d015      	beq.n	8004e9a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e6e:	f7fe fcc5 	bl	80037fc <HAL_GetTick>
 8004e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e74:	e00a      	b.n	8004e8c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e76:	f7fe fcc1 	bl	80037fc <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d901      	bls.n	8004e8c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e0d8      	b.n	800503e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e8c:	4b4c      	ldr	r3, [pc, #304]	; (8004fc0 <HAL_RCC_OscConfig+0x4d0>)
 8004e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e90:	f003 0302 	and.w	r3, r3, #2
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d0ee      	beq.n	8004e76 <HAL_RCC_OscConfig+0x386>
 8004e98:	e014      	b.n	8004ec4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e9a:	f7fe fcaf 	bl	80037fc <HAL_GetTick>
 8004e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ea0:	e00a      	b.n	8004eb8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ea2:	f7fe fcab 	bl	80037fc <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d901      	bls.n	8004eb8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e0c2      	b.n	800503e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eb8:	4b41      	ldr	r3, [pc, #260]	; (8004fc0 <HAL_RCC_OscConfig+0x4d0>)
 8004eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ebc:	f003 0302 	and.w	r3, r3, #2
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1ee      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ec4:	7dfb      	ldrb	r3, [r7, #23]
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d105      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004eca:	4b3d      	ldr	r3, [pc, #244]	; (8004fc0 <HAL_RCC_OscConfig+0x4d0>)
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ece:	4a3c      	ldr	r2, [pc, #240]	; (8004fc0 <HAL_RCC_OscConfig+0x4d0>)
 8004ed0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ed4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	f000 80ae 	beq.w	800503c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ee0:	4b37      	ldr	r3, [pc, #220]	; (8004fc0 <HAL_RCC_OscConfig+0x4d0>)
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f003 030c 	and.w	r3, r3, #12
 8004ee8:	2b08      	cmp	r3, #8
 8004eea:	d06d      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d14b      	bne.n	8004f8c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ef4:	4b32      	ldr	r3, [pc, #200]	; (8004fc0 <HAL_RCC_OscConfig+0x4d0>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a31      	ldr	r2, [pc, #196]	; (8004fc0 <HAL_RCC_OscConfig+0x4d0>)
 8004efa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004efe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f00:	f7fe fc7c 	bl	80037fc <HAL_GetTick>
 8004f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f06:	e008      	b.n	8004f1a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f08:	f7fe fc78 	bl	80037fc <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e091      	b.n	800503e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f1a:	4b29      	ldr	r3, [pc, #164]	; (8004fc0 <HAL_RCC_OscConfig+0x4d0>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1f0      	bne.n	8004f08 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	69da      	ldr	r2, [r3, #28]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	431a      	orrs	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f34:	019b      	lsls	r3, r3, #6
 8004f36:	431a      	orrs	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3c:	085b      	lsrs	r3, r3, #1
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	041b      	lsls	r3, r3, #16
 8004f42:	431a      	orrs	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f48:	061b      	lsls	r3, r3, #24
 8004f4a:	431a      	orrs	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f50:	071b      	lsls	r3, r3, #28
 8004f52:	491b      	ldr	r1, [pc, #108]	; (8004fc0 <HAL_RCC_OscConfig+0x4d0>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f58:	4b19      	ldr	r3, [pc, #100]	; (8004fc0 <HAL_RCC_OscConfig+0x4d0>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a18      	ldr	r2, [pc, #96]	; (8004fc0 <HAL_RCC_OscConfig+0x4d0>)
 8004f5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f64:	f7fe fc4a 	bl	80037fc <HAL_GetTick>
 8004f68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f6a:	e008      	b.n	8004f7e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f6c:	f7fe fc46 	bl	80037fc <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e05f      	b.n	800503e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f7e:	4b10      	ldr	r3, [pc, #64]	; (8004fc0 <HAL_RCC_OscConfig+0x4d0>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d0f0      	beq.n	8004f6c <HAL_RCC_OscConfig+0x47c>
 8004f8a:	e057      	b.n	800503c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f8c:	4b0c      	ldr	r3, [pc, #48]	; (8004fc0 <HAL_RCC_OscConfig+0x4d0>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a0b      	ldr	r2, [pc, #44]	; (8004fc0 <HAL_RCC_OscConfig+0x4d0>)
 8004f92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f98:	f7fe fc30 	bl	80037fc <HAL_GetTick>
 8004f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f9e:	e008      	b.n	8004fb2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fa0:	f7fe fc2c 	bl	80037fc <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e045      	b.n	800503e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fb2:	4b03      	ldr	r3, [pc, #12]	; (8004fc0 <HAL_RCC_OscConfig+0x4d0>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1f0      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x4b0>
 8004fbe:	e03d      	b.n	800503c <HAL_RCC_OscConfig+0x54c>
 8004fc0:	40023800 	.word	0x40023800
 8004fc4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004fc8:	4b1f      	ldr	r3, [pc, #124]	; (8005048 <HAL_RCC_OscConfig+0x558>)
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d030      	beq.n	8005038 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d129      	bne.n	8005038 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d122      	bne.n	8005038 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ffe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005000:	4293      	cmp	r3, r2
 8005002:	d119      	bne.n	8005038 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500e:	085b      	lsrs	r3, r3, #1
 8005010:	3b01      	subs	r3, #1
 8005012:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005014:	429a      	cmp	r2, r3
 8005016:	d10f      	bne.n	8005038 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005022:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005024:	429a      	cmp	r2, r3
 8005026:	d107      	bne.n	8005038 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005032:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005034:	429a      	cmp	r2, r3
 8005036:	d001      	beq.n	800503c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e000      	b.n	800503e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3718      	adds	r7, #24
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	40023800 	.word	0x40023800

0800504c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005056:	2300      	movs	r3, #0
 8005058:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d101      	bne.n	8005064 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e0d0      	b.n	8005206 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005064:	4b6a      	ldr	r3, [pc, #424]	; (8005210 <HAL_RCC_ClockConfig+0x1c4>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 030f 	and.w	r3, r3, #15
 800506c:	683a      	ldr	r2, [r7, #0]
 800506e:	429a      	cmp	r2, r3
 8005070:	d910      	bls.n	8005094 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005072:	4b67      	ldr	r3, [pc, #412]	; (8005210 <HAL_RCC_ClockConfig+0x1c4>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f023 020f 	bic.w	r2, r3, #15
 800507a:	4965      	ldr	r1, [pc, #404]	; (8005210 <HAL_RCC_ClockConfig+0x1c4>)
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	4313      	orrs	r3, r2
 8005080:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005082:	4b63      	ldr	r3, [pc, #396]	; (8005210 <HAL_RCC_ClockConfig+0x1c4>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 030f 	and.w	r3, r3, #15
 800508a:	683a      	ldr	r2, [r7, #0]
 800508c:	429a      	cmp	r2, r3
 800508e:	d001      	beq.n	8005094 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e0b8      	b.n	8005206 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0302 	and.w	r3, r3, #2
 800509c:	2b00      	cmp	r3, #0
 800509e:	d020      	beq.n	80050e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0304 	and.w	r3, r3, #4
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d005      	beq.n	80050b8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050ac:	4b59      	ldr	r3, [pc, #356]	; (8005214 <HAL_RCC_ClockConfig+0x1c8>)
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	4a58      	ldr	r2, [pc, #352]	; (8005214 <HAL_RCC_ClockConfig+0x1c8>)
 80050b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80050b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0308 	and.w	r3, r3, #8
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d005      	beq.n	80050d0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050c4:	4b53      	ldr	r3, [pc, #332]	; (8005214 <HAL_RCC_ClockConfig+0x1c8>)
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	4a52      	ldr	r2, [pc, #328]	; (8005214 <HAL_RCC_ClockConfig+0x1c8>)
 80050ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80050ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050d0:	4b50      	ldr	r3, [pc, #320]	; (8005214 <HAL_RCC_ClockConfig+0x1c8>)
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	494d      	ldr	r1, [pc, #308]	; (8005214 <HAL_RCC_ClockConfig+0x1c8>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d040      	beq.n	8005170 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d107      	bne.n	8005106 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050f6:	4b47      	ldr	r3, [pc, #284]	; (8005214 <HAL_RCC_ClockConfig+0x1c8>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d115      	bne.n	800512e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e07f      	b.n	8005206 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	2b02      	cmp	r3, #2
 800510c:	d107      	bne.n	800511e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800510e:	4b41      	ldr	r3, [pc, #260]	; (8005214 <HAL_RCC_ClockConfig+0x1c8>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d109      	bne.n	800512e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e073      	b.n	8005206 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800511e:	4b3d      	ldr	r3, [pc, #244]	; (8005214 <HAL_RCC_ClockConfig+0x1c8>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0302 	and.w	r3, r3, #2
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e06b      	b.n	8005206 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800512e:	4b39      	ldr	r3, [pc, #228]	; (8005214 <HAL_RCC_ClockConfig+0x1c8>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f023 0203 	bic.w	r2, r3, #3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	4936      	ldr	r1, [pc, #216]	; (8005214 <HAL_RCC_ClockConfig+0x1c8>)
 800513c:	4313      	orrs	r3, r2
 800513e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005140:	f7fe fb5c 	bl	80037fc <HAL_GetTick>
 8005144:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005146:	e00a      	b.n	800515e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005148:	f7fe fb58 	bl	80037fc <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	f241 3288 	movw	r2, #5000	; 0x1388
 8005156:	4293      	cmp	r3, r2
 8005158:	d901      	bls.n	800515e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e053      	b.n	8005206 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800515e:	4b2d      	ldr	r3, [pc, #180]	; (8005214 <HAL_RCC_ClockConfig+0x1c8>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f003 020c 	and.w	r2, r3, #12
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	429a      	cmp	r2, r3
 800516e:	d1eb      	bne.n	8005148 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005170:	4b27      	ldr	r3, [pc, #156]	; (8005210 <HAL_RCC_ClockConfig+0x1c4>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 030f 	and.w	r3, r3, #15
 8005178:	683a      	ldr	r2, [r7, #0]
 800517a:	429a      	cmp	r2, r3
 800517c:	d210      	bcs.n	80051a0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800517e:	4b24      	ldr	r3, [pc, #144]	; (8005210 <HAL_RCC_ClockConfig+0x1c4>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f023 020f 	bic.w	r2, r3, #15
 8005186:	4922      	ldr	r1, [pc, #136]	; (8005210 <HAL_RCC_ClockConfig+0x1c4>)
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	4313      	orrs	r3, r2
 800518c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800518e:	4b20      	ldr	r3, [pc, #128]	; (8005210 <HAL_RCC_ClockConfig+0x1c4>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 030f 	and.w	r3, r3, #15
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	429a      	cmp	r2, r3
 800519a:	d001      	beq.n	80051a0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e032      	b.n	8005206 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0304 	and.w	r3, r3, #4
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d008      	beq.n	80051be <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051ac:	4b19      	ldr	r3, [pc, #100]	; (8005214 <HAL_RCC_ClockConfig+0x1c8>)
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	4916      	ldr	r1, [pc, #88]	; (8005214 <HAL_RCC_ClockConfig+0x1c8>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0308 	and.w	r3, r3, #8
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d009      	beq.n	80051de <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80051ca:	4b12      	ldr	r3, [pc, #72]	; (8005214 <HAL_RCC_ClockConfig+0x1c8>)
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	00db      	lsls	r3, r3, #3
 80051d8:	490e      	ldr	r1, [pc, #56]	; (8005214 <HAL_RCC_ClockConfig+0x1c8>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80051de:	f000 f821 	bl	8005224 <HAL_RCC_GetSysClockFreq>
 80051e2:	4602      	mov	r2, r0
 80051e4:	4b0b      	ldr	r3, [pc, #44]	; (8005214 <HAL_RCC_ClockConfig+0x1c8>)
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	091b      	lsrs	r3, r3, #4
 80051ea:	f003 030f 	and.w	r3, r3, #15
 80051ee:	490a      	ldr	r1, [pc, #40]	; (8005218 <HAL_RCC_ClockConfig+0x1cc>)
 80051f0:	5ccb      	ldrb	r3, [r1, r3]
 80051f2:	fa22 f303 	lsr.w	r3, r2, r3
 80051f6:	4a09      	ldr	r2, [pc, #36]	; (800521c <HAL_RCC_ClockConfig+0x1d0>)
 80051f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80051fa:	4b09      	ldr	r3, [pc, #36]	; (8005220 <HAL_RCC_ClockConfig+0x1d4>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4618      	mov	r0, r3
 8005200:	f7fe fab8 	bl	8003774 <HAL_InitTick>

  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	40023c00 	.word	0x40023c00
 8005214:	40023800 	.word	0x40023800
 8005218:	080097c4 	.word	0x080097c4
 800521c:	20000000 	.word	0x20000000
 8005220:	20000004 	.word	0x20000004

08005224 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005224:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005228:	b090      	sub	sp, #64	; 0x40
 800522a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800522c:	2300      	movs	r3, #0
 800522e:	637b      	str	r3, [r7, #52]	; 0x34
 8005230:	2300      	movs	r3, #0
 8005232:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005234:	2300      	movs	r3, #0
 8005236:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8005238:	2300      	movs	r3, #0
 800523a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800523c:	4b59      	ldr	r3, [pc, #356]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f003 030c 	and.w	r3, r3, #12
 8005244:	2b08      	cmp	r3, #8
 8005246:	d00d      	beq.n	8005264 <HAL_RCC_GetSysClockFreq+0x40>
 8005248:	2b08      	cmp	r3, #8
 800524a:	f200 80a1 	bhi.w	8005390 <HAL_RCC_GetSysClockFreq+0x16c>
 800524e:	2b00      	cmp	r3, #0
 8005250:	d002      	beq.n	8005258 <HAL_RCC_GetSysClockFreq+0x34>
 8005252:	2b04      	cmp	r3, #4
 8005254:	d003      	beq.n	800525e <HAL_RCC_GetSysClockFreq+0x3a>
 8005256:	e09b      	b.n	8005390 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005258:	4b53      	ldr	r3, [pc, #332]	; (80053a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800525a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800525c:	e09b      	b.n	8005396 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800525e:	4b53      	ldr	r3, [pc, #332]	; (80053ac <HAL_RCC_GetSysClockFreq+0x188>)
 8005260:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005262:	e098      	b.n	8005396 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005264:	4b4f      	ldr	r3, [pc, #316]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800526c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800526e:	4b4d      	ldr	r3, [pc, #308]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d028      	beq.n	80052cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800527a:	4b4a      	ldr	r3, [pc, #296]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	099b      	lsrs	r3, r3, #6
 8005280:	2200      	movs	r2, #0
 8005282:	623b      	str	r3, [r7, #32]
 8005284:	627a      	str	r2, [r7, #36]	; 0x24
 8005286:	6a3b      	ldr	r3, [r7, #32]
 8005288:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800528c:	2100      	movs	r1, #0
 800528e:	4b47      	ldr	r3, [pc, #284]	; (80053ac <HAL_RCC_GetSysClockFreq+0x188>)
 8005290:	fb03 f201 	mul.w	r2, r3, r1
 8005294:	2300      	movs	r3, #0
 8005296:	fb00 f303 	mul.w	r3, r0, r3
 800529a:	4413      	add	r3, r2
 800529c:	4a43      	ldr	r2, [pc, #268]	; (80053ac <HAL_RCC_GetSysClockFreq+0x188>)
 800529e:	fba0 1202 	umull	r1, r2, r0, r2
 80052a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052a4:	460a      	mov	r2, r1
 80052a6:	62ba      	str	r2, [r7, #40]	; 0x28
 80052a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052aa:	4413      	add	r3, r2
 80052ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052b0:	2200      	movs	r2, #0
 80052b2:	61bb      	str	r3, [r7, #24]
 80052b4:	61fa      	str	r2, [r7, #28]
 80052b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80052be:	f7fa ffc3 	bl	8000248 <__aeabi_uldivmod>
 80052c2:	4602      	mov	r2, r0
 80052c4:	460b      	mov	r3, r1
 80052c6:	4613      	mov	r3, r2
 80052c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052ca:	e053      	b.n	8005374 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052cc:	4b35      	ldr	r3, [pc, #212]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	099b      	lsrs	r3, r3, #6
 80052d2:	2200      	movs	r2, #0
 80052d4:	613b      	str	r3, [r7, #16]
 80052d6:	617a      	str	r2, [r7, #20]
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80052de:	f04f 0b00 	mov.w	fp, #0
 80052e2:	4652      	mov	r2, sl
 80052e4:	465b      	mov	r3, fp
 80052e6:	f04f 0000 	mov.w	r0, #0
 80052ea:	f04f 0100 	mov.w	r1, #0
 80052ee:	0159      	lsls	r1, r3, #5
 80052f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052f4:	0150      	lsls	r0, r2, #5
 80052f6:	4602      	mov	r2, r0
 80052f8:	460b      	mov	r3, r1
 80052fa:	ebb2 080a 	subs.w	r8, r2, sl
 80052fe:	eb63 090b 	sbc.w	r9, r3, fp
 8005302:	f04f 0200 	mov.w	r2, #0
 8005306:	f04f 0300 	mov.w	r3, #0
 800530a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800530e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005312:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005316:	ebb2 0408 	subs.w	r4, r2, r8
 800531a:	eb63 0509 	sbc.w	r5, r3, r9
 800531e:	f04f 0200 	mov.w	r2, #0
 8005322:	f04f 0300 	mov.w	r3, #0
 8005326:	00eb      	lsls	r3, r5, #3
 8005328:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800532c:	00e2      	lsls	r2, r4, #3
 800532e:	4614      	mov	r4, r2
 8005330:	461d      	mov	r5, r3
 8005332:	eb14 030a 	adds.w	r3, r4, sl
 8005336:	603b      	str	r3, [r7, #0]
 8005338:	eb45 030b 	adc.w	r3, r5, fp
 800533c:	607b      	str	r3, [r7, #4]
 800533e:	f04f 0200 	mov.w	r2, #0
 8005342:	f04f 0300 	mov.w	r3, #0
 8005346:	e9d7 4500 	ldrd	r4, r5, [r7]
 800534a:	4629      	mov	r1, r5
 800534c:	028b      	lsls	r3, r1, #10
 800534e:	4621      	mov	r1, r4
 8005350:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005354:	4621      	mov	r1, r4
 8005356:	028a      	lsls	r2, r1, #10
 8005358:	4610      	mov	r0, r2
 800535a:	4619      	mov	r1, r3
 800535c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800535e:	2200      	movs	r2, #0
 8005360:	60bb      	str	r3, [r7, #8]
 8005362:	60fa      	str	r2, [r7, #12]
 8005364:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005368:	f7fa ff6e 	bl	8000248 <__aeabi_uldivmod>
 800536c:	4602      	mov	r2, r0
 800536e:	460b      	mov	r3, r1
 8005370:	4613      	mov	r3, r2
 8005372:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005374:	4b0b      	ldr	r3, [pc, #44]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	0c1b      	lsrs	r3, r3, #16
 800537a:	f003 0303 	and.w	r3, r3, #3
 800537e:	3301      	adds	r3, #1
 8005380:	005b      	lsls	r3, r3, #1
 8005382:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8005384:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005388:	fbb2 f3f3 	udiv	r3, r2, r3
 800538c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800538e:	e002      	b.n	8005396 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005390:	4b05      	ldr	r3, [pc, #20]	; (80053a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8005392:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005394:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005398:	4618      	mov	r0, r3
 800539a:	3740      	adds	r7, #64	; 0x40
 800539c:	46bd      	mov	sp, r7
 800539e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053a2:	bf00      	nop
 80053a4:	40023800 	.word	0x40023800
 80053a8:	00f42400 	.word	0x00f42400
 80053ac:	017d7840 	.word	0x017d7840

080053b0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053b0:	b480      	push	{r7}
 80053b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053b4:	4b03      	ldr	r3, [pc, #12]	; (80053c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80053b6:	681b      	ldr	r3, [r3, #0]
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	20000000 	.word	0x20000000

080053c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80053cc:	f7ff fff0 	bl	80053b0 <HAL_RCC_GetHCLKFreq>
 80053d0:	4602      	mov	r2, r0
 80053d2:	4b05      	ldr	r3, [pc, #20]	; (80053e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	0a9b      	lsrs	r3, r3, #10
 80053d8:	f003 0307 	and.w	r3, r3, #7
 80053dc:	4903      	ldr	r1, [pc, #12]	; (80053ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80053de:	5ccb      	ldrb	r3, [r1, r3]
 80053e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	40023800 	.word	0x40023800
 80053ec:	080097d4 	.word	0x080097d4

080053f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80053f4:	f7ff ffdc 	bl	80053b0 <HAL_RCC_GetHCLKFreq>
 80053f8:	4602      	mov	r2, r0
 80053fa:	4b05      	ldr	r3, [pc, #20]	; (8005410 <HAL_RCC_GetPCLK2Freq+0x20>)
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	0b5b      	lsrs	r3, r3, #13
 8005400:	f003 0307 	and.w	r3, r3, #7
 8005404:	4903      	ldr	r1, [pc, #12]	; (8005414 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005406:	5ccb      	ldrb	r3, [r1, r3]
 8005408:	fa22 f303 	lsr.w	r3, r2, r3
}
 800540c:	4618      	mov	r0, r3
 800540e:	bd80      	pop	{r7, pc}
 8005410:	40023800 	.word	0x40023800
 8005414:	080097d4 	.word	0x080097d4

08005418 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b088      	sub	sp, #32
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005420:	2300      	movs	r3, #0
 8005422:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005424:	2300      	movs	r3, #0
 8005426:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005428:	2300      	movs	r3, #0
 800542a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800542c:	2300      	movs	r3, #0
 800542e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005430:	2300      	movs	r3, #0
 8005432:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0301 	and.w	r3, r3, #1
 800543c:	2b00      	cmp	r3, #0
 800543e:	d012      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005440:	4b69      	ldr	r3, [pc, #420]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	4a68      	ldr	r2, [pc, #416]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005446:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800544a:	6093      	str	r3, [r2, #8]
 800544c:	4b66      	ldr	r3, [pc, #408]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800544e:	689a      	ldr	r2, [r3, #8]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005454:	4964      	ldr	r1, [pc, #400]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005456:	4313      	orrs	r3, r2
 8005458:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800545e:	2b00      	cmp	r3, #0
 8005460:	d101      	bne.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005462:	2301      	movs	r3, #1
 8005464:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d017      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005472:	4b5d      	ldr	r3, [pc, #372]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005474:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005478:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005480:	4959      	ldr	r1, [pc, #356]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005482:	4313      	orrs	r3, r2
 8005484:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800548c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005490:	d101      	bne.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005492:	2301      	movs	r3, #1
 8005494:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800549a:	2b00      	cmp	r3, #0
 800549c:	d101      	bne.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800549e:	2301      	movs	r3, #1
 80054a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d017      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80054ae:	4b4e      	ldr	r3, [pc, #312]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054bc:	494a      	ldr	r1, [pc, #296]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054cc:	d101      	bne.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80054ce:	2301      	movs	r3, #1
 80054d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d101      	bne.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80054da:	2301      	movs	r3, #1
 80054dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d001      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80054ea:	2301      	movs	r3, #1
 80054ec:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0320 	and.w	r3, r3, #32
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	f000 808b 	beq.w	8005612 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80054fc:	4b3a      	ldr	r3, [pc, #232]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005500:	4a39      	ldr	r2, [pc, #228]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005502:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005506:	6413      	str	r3, [r2, #64]	; 0x40
 8005508:	4b37      	ldr	r3, [pc, #220]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800550a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005510:	60bb      	str	r3, [r7, #8]
 8005512:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005514:	4b35      	ldr	r3, [pc, #212]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a34      	ldr	r2, [pc, #208]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800551a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800551e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005520:	f7fe f96c 	bl	80037fc <HAL_GetTick>
 8005524:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005526:	e008      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005528:	f7fe f968 	bl	80037fc <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	2b64      	cmp	r3, #100	; 0x64
 8005534:	d901      	bls.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e38f      	b.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800553a:	4b2c      	ldr	r3, [pc, #176]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005542:	2b00      	cmp	r3, #0
 8005544:	d0f0      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005546:	4b28      	ldr	r3, [pc, #160]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800554a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800554e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d035      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800555e:	693a      	ldr	r2, [r7, #16]
 8005560:	429a      	cmp	r2, r3
 8005562:	d02e      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005564:	4b20      	ldr	r3, [pc, #128]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005568:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800556c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800556e:	4b1e      	ldr	r3, [pc, #120]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005572:	4a1d      	ldr	r2, [pc, #116]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005578:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800557a:	4b1b      	ldr	r3, [pc, #108]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800557c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800557e:	4a1a      	ldr	r2, [pc, #104]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005580:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005584:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005586:	4a18      	ldr	r2, [pc, #96]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800558c:	4b16      	ldr	r3, [pc, #88]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800558e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005590:	f003 0301 	and.w	r3, r3, #1
 8005594:	2b01      	cmp	r3, #1
 8005596:	d114      	bne.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005598:	f7fe f930 	bl	80037fc <HAL_GetTick>
 800559c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800559e:	e00a      	b.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055a0:	f7fe f92c 	bl	80037fc <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d901      	bls.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e351      	b.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055b6:	4b0c      	ldr	r3, [pc, #48]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d0ee      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055ce:	d111      	bne.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80055d0:	4b05      	ldr	r3, [pc, #20]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80055dc:	4b04      	ldr	r3, [pc, #16]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80055de:	400b      	ands	r3, r1
 80055e0:	4901      	ldr	r1, [pc, #4]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	608b      	str	r3, [r1, #8]
 80055e6:	e00b      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80055e8:	40023800 	.word	0x40023800
 80055ec:	40007000 	.word	0x40007000
 80055f0:	0ffffcff 	.word	0x0ffffcff
 80055f4:	4bac      	ldr	r3, [pc, #688]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	4aab      	ldr	r2, [pc, #684]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055fa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80055fe:	6093      	str	r3, [r2, #8]
 8005600:	4ba9      	ldr	r3, [pc, #676]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005602:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800560c:	49a6      	ldr	r1, [pc, #664]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800560e:	4313      	orrs	r3, r2
 8005610:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0310 	and.w	r3, r3, #16
 800561a:	2b00      	cmp	r3, #0
 800561c:	d010      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800561e:	4ba2      	ldr	r3, [pc, #648]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005620:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005624:	4aa0      	ldr	r2, [pc, #640]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005626:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800562a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800562e:	4b9e      	ldr	r3, [pc, #632]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005630:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005638:	499b      	ldr	r1, [pc, #620]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800563a:	4313      	orrs	r3, r2
 800563c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00a      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800564c:	4b96      	ldr	r3, [pc, #600]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800564e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005652:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800565a:	4993      	ldr	r1, [pc, #588]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800565c:	4313      	orrs	r3, r2
 800565e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00a      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800566e:	4b8e      	ldr	r3, [pc, #568]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005674:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800567c:	498a      	ldr	r1, [pc, #552]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800567e:	4313      	orrs	r3, r2
 8005680:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00a      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005690:	4b85      	ldr	r3, [pc, #532]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005696:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800569e:	4982      	ldr	r1, [pc, #520]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00a      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80056b2:	4b7d      	ldr	r3, [pc, #500]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c0:	4979      	ldr	r1, [pc, #484]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00a      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056d4:	4b74      	ldr	r3, [pc, #464]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056da:	f023 0203 	bic.w	r2, r3, #3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056e2:	4971      	ldr	r1, [pc, #452]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056e4:	4313      	orrs	r3, r2
 80056e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00a      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80056f6:	4b6c      	ldr	r3, [pc, #432]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056fc:	f023 020c 	bic.w	r2, r3, #12
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005704:	4968      	ldr	r1, [pc, #416]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005706:	4313      	orrs	r3, r2
 8005708:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00a      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005718:	4b63      	ldr	r3, [pc, #396]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800571a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800571e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005726:	4960      	ldr	r1, [pc, #384]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005728:	4313      	orrs	r3, r2
 800572a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00a      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800573a:	4b5b      	ldr	r3, [pc, #364]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800573c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005740:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005748:	4957      	ldr	r1, [pc, #348]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800574a:	4313      	orrs	r3, r2
 800574c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00a      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800575c:	4b52      	ldr	r3, [pc, #328]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800575e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005762:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800576a:	494f      	ldr	r1, [pc, #316]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800576c:	4313      	orrs	r3, r2
 800576e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00a      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800577e:	4b4a      	ldr	r3, [pc, #296]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005784:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800578c:	4946      	ldr	r1, [pc, #280]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800578e:	4313      	orrs	r3, r2
 8005790:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00a      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80057a0:	4b41      	ldr	r3, [pc, #260]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057ae:	493e      	ldr	r1, [pc, #248]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057b0:	4313      	orrs	r3, r2
 80057b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00a      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80057c2:	4b39      	ldr	r3, [pc, #228]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057d0:	4935      	ldr	r1, [pc, #212]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d00a      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80057e4:	4b30      	ldr	r3, [pc, #192]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057f2:	492d      	ldr	r1, [pc, #180]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d011      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005806:	4b28      	ldr	r3, [pc, #160]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800580c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005814:	4924      	ldr	r1, [pc, #144]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005816:	4313      	orrs	r3, r2
 8005818:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005820:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005824:	d101      	bne.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005826:	2301      	movs	r3, #1
 8005828:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0308 	and.w	r3, r3, #8
 8005832:	2b00      	cmp	r3, #0
 8005834:	d001      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005836:	2301      	movs	r3, #1
 8005838:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00a      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005846:	4b18      	ldr	r3, [pc, #96]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800584c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005854:	4914      	ldr	r1, [pc, #80]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005856:	4313      	orrs	r3, r2
 8005858:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00b      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005868:	4b0f      	ldr	r3, [pc, #60]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800586a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800586e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005878:	490b      	ldr	r1, [pc, #44]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800587a:	4313      	orrs	r3, r2
 800587c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00f      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800588c:	4b06      	ldr	r3, [pc, #24]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800588e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005892:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800589c:	4902      	ldr	r1, [pc, #8]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80058a4:	e002      	b.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x494>
 80058a6:	bf00      	nop
 80058a8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00b      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80058b8:	4b8a      	ldr	r3, [pc, #552]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058be:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058c8:	4986      	ldr	r1, [pc, #536]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00b      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80058dc:	4b81      	ldr	r3, [pc, #516]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058e2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058ec:	497d      	ldr	r1, [pc, #500]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d006      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005902:	2b00      	cmp	r3, #0
 8005904:	f000 80d6 	beq.w	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005908:	4b76      	ldr	r3, [pc, #472]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a75      	ldr	r2, [pc, #468]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800590e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005912:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005914:	f7fd ff72 	bl	80037fc <HAL_GetTick>
 8005918:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800591a:	e008      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800591c:	f7fd ff6e 	bl	80037fc <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	2b64      	cmp	r3, #100	; 0x64
 8005928:	d901      	bls.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e195      	b.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800592e:	4b6d      	ldr	r3, [pc, #436]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1f0      	bne.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	2b00      	cmp	r3, #0
 8005944:	d021      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800594a:	2b00      	cmp	r3, #0
 800594c:	d11d      	bne.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800594e:	4b65      	ldr	r3, [pc, #404]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005950:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005954:	0c1b      	lsrs	r3, r3, #16
 8005956:	f003 0303 	and.w	r3, r3, #3
 800595a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800595c:	4b61      	ldr	r3, [pc, #388]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800595e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005962:	0e1b      	lsrs	r3, r3, #24
 8005964:	f003 030f 	and.w	r3, r3, #15
 8005968:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	019a      	lsls	r2, r3, #6
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	041b      	lsls	r3, r3, #16
 8005974:	431a      	orrs	r2, r3
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	061b      	lsls	r3, r3, #24
 800597a:	431a      	orrs	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	071b      	lsls	r3, r3, #28
 8005982:	4958      	ldr	r1, [pc, #352]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005984:	4313      	orrs	r3, r2
 8005986:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d004      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800599a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800599e:	d00a      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d02e      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059b4:	d129      	bne.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80059b6:	4b4b      	ldr	r3, [pc, #300]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059bc:	0c1b      	lsrs	r3, r3, #16
 80059be:	f003 0303 	and.w	r3, r3, #3
 80059c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80059c4:	4b47      	ldr	r3, [pc, #284]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059ca:	0f1b      	lsrs	r3, r3, #28
 80059cc:	f003 0307 	and.w	r3, r3, #7
 80059d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	019a      	lsls	r2, r3, #6
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	041b      	lsls	r3, r3, #16
 80059dc:	431a      	orrs	r2, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	061b      	lsls	r3, r3, #24
 80059e4:	431a      	orrs	r2, r3
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	071b      	lsls	r3, r3, #28
 80059ea:	493e      	ldr	r1, [pc, #248]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059ec:	4313      	orrs	r3, r2
 80059ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80059f2:	4b3c      	ldr	r3, [pc, #240]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059f8:	f023 021f 	bic.w	r2, r3, #31
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a00:	3b01      	subs	r3, #1
 8005a02:	4938      	ldr	r1, [pc, #224]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d01d      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005a16:	4b33      	ldr	r3, [pc, #204]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a1c:	0e1b      	lsrs	r3, r3, #24
 8005a1e:	f003 030f 	and.w	r3, r3, #15
 8005a22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005a24:	4b2f      	ldr	r3, [pc, #188]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a2a:	0f1b      	lsrs	r3, r3, #28
 8005a2c:	f003 0307 	and.w	r3, r3, #7
 8005a30:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	019a      	lsls	r2, r3, #6
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	041b      	lsls	r3, r3, #16
 8005a3e:	431a      	orrs	r2, r3
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	061b      	lsls	r3, r3, #24
 8005a44:	431a      	orrs	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	071b      	lsls	r3, r3, #28
 8005a4a:	4926      	ldr	r1, [pc, #152]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d011      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	019a      	lsls	r2, r3, #6
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	041b      	lsls	r3, r3, #16
 8005a6a:	431a      	orrs	r2, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	061b      	lsls	r3, r3, #24
 8005a72:	431a      	orrs	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	071b      	lsls	r3, r3, #28
 8005a7a:	491a      	ldr	r1, [pc, #104]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005a82:	4b18      	ldr	r3, [pc, #96]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a17      	ldr	r2, [pc, #92]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a88:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a8e:	f7fd feb5 	bl	80037fc <HAL_GetTick>
 8005a92:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a94:	e008      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a96:	f7fd feb1 	bl	80037fc <HAL_GetTick>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	2b64      	cmp	r3, #100	; 0x64
 8005aa2:	d901      	bls.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e0d8      	b.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005aa8:	4b0e      	ldr	r3, [pc, #56]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d0f0      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	f040 80ce 	bne.w	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005abc:	4b09      	ldr	r3, [pc, #36]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a08      	ldr	r2, [pc, #32]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ac2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ac6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ac8:	f7fd fe98 	bl	80037fc <HAL_GetTick>
 8005acc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ace:	e00b      	b.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005ad0:	f7fd fe94 	bl	80037fc <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	2b64      	cmp	r3, #100	; 0x64
 8005adc:	d904      	bls.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e0bb      	b.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005ae2:	bf00      	nop
 8005ae4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ae8:	4b5e      	ldr	r3, [pc, #376]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005af0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005af4:	d0ec      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d003      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d009      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d02e      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d12a      	bne.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005b1e:	4b51      	ldr	r3, [pc, #324]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b24:	0c1b      	lsrs	r3, r3, #16
 8005b26:	f003 0303 	and.w	r3, r3, #3
 8005b2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005b2c:	4b4d      	ldr	r3, [pc, #308]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b32:	0f1b      	lsrs	r3, r3, #28
 8005b34:	f003 0307 	and.w	r3, r3, #7
 8005b38:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	019a      	lsls	r2, r3, #6
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	041b      	lsls	r3, r3, #16
 8005b44:	431a      	orrs	r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	061b      	lsls	r3, r3, #24
 8005b4c:	431a      	orrs	r2, r3
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	071b      	lsls	r3, r3, #28
 8005b52:	4944      	ldr	r1, [pc, #272]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b54:	4313      	orrs	r3, r2
 8005b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005b5a:	4b42      	ldr	r3, [pc, #264]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b60:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	021b      	lsls	r3, r3, #8
 8005b6c:	493d      	ldr	r1, [pc, #244]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d022      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b88:	d11d      	bne.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b8a:	4b36      	ldr	r3, [pc, #216]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b90:	0e1b      	lsrs	r3, r3, #24
 8005b92:	f003 030f 	and.w	r3, r3, #15
 8005b96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005b98:	4b32      	ldr	r3, [pc, #200]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b9e:	0f1b      	lsrs	r3, r3, #28
 8005ba0:	f003 0307 	and.w	r3, r3, #7
 8005ba4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	019a      	lsls	r2, r3, #6
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a1b      	ldr	r3, [r3, #32]
 8005bb0:	041b      	lsls	r3, r3, #16
 8005bb2:	431a      	orrs	r2, r3
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	061b      	lsls	r3, r3, #24
 8005bb8:	431a      	orrs	r2, r3
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	071b      	lsls	r3, r3, #28
 8005bbe:	4929      	ldr	r1, [pc, #164]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 0308 	and.w	r3, r3, #8
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d028      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005bd2:	4b24      	ldr	r3, [pc, #144]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bd8:	0e1b      	lsrs	r3, r3, #24
 8005bda:	f003 030f 	and.w	r3, r3, #15
 8005bde:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005be0:	4b20      	ldr	r3, [pc, #128]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005be6:	0c1b      	lsrs	r3, r3, #16
 8005be8:	f003 0303 	and.w	r3, r3, #3
 8005bec:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	019a      	lsls	r2, r3, #6
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	041b      	lsls	r3, r3, #16
 8005bf8:	431a      	orrs	r2, r3
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	061b      	lsls	r3, r3, #24
 8005bfe:	431a      	orrs	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	69db      	ldr	r3, [r3, #28]
 8005c04:	071b      	lsls	r3, r3, #28
 8005c06:	4917      	ldr	r1, [pc, #92]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005c0e:	4b15      	ldr	r3, [pc, #84]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1c:	4911      	ldr	r1, [pc, #68]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005c24:	4b0f      	ldr	r3, [pc, #60]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a0e      	ldr	r2, [pc, #56]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c30:	f7fd fde4 	bl	80037fc <HAL_GetTick>
 8005c34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c36:	e008      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005c38:	f7fd fde0 	bl	80037fc <HAL_GetTick>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	2b64      	cmp	r3, #100	; 0x64
 8005c44:	d901      	bls.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e007      	b.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c4a:	4b06      	ldr	r3, [pc, #24]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c56:	d1ef      	bne.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3720      	adds	r7, #32
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	40023800 	.word	0x40023800

08005c68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d101      	bne.n	8005c7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e09d      	b.n	8005db6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d108      	bne.n	8005c94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c8a:	d009      	beq.n	8005ca0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	61da      	str	r2, [r3, #28]
 8005c92:	e005      	b.n	8005ca0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d106      	bne.n	8005cc0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f7fd f980 	bl	8002fc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cd6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ce0:	d902      	bls.n	8005ce8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	60fb      	str	r3, [r7, #12]
 8005ce6:	e002      	b.n	8005cee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005ce8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005cf6:	d007      	beq.n	8005d08 <HAL_SPI_Init+0xa0>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d00:	d002      	beq.n	8005d08 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d18:	431a      	orrs	r2, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	f003 0302 	and.w	r3, r3, #2
 8005d22:	431a      	orrs	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	695b      	ldr	r3, [r3, #20]
 8005d28:	f003 0301 	and.w	r3, r3, #1
 8005d2c:	431a      	orrs	r2, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d36:	431a      	orrs	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	69db      	ldr	r3, [r3, #28]
 8005d3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d40:	431a      	orrs	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d4a:	ea42 0103 	orr.w	r1, r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d52:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	0c1b      	lsrs	r3, r3, #16
 8005d64:	f003 0204 	and.w	r2, r3, #4
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6c:	f003 0310 	and.w	r3, r3, #16
 8005d70:	431a      	orrs	r2, r3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d76:	f003 0308 	and.w	r3, r3, #8
 8005d7a:	431a      	orrs	r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005d84:	ea42 0103 	orr.w	r1, r2, r3
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	430a      	orrs	r2, r1
 8005d94:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	69da      	ldr	r2, [r3, #28]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005da4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3710      	adds	r7, #16
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b088      	sub	sp, #32
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	60f8      	str	r0, [r7, #12]
 8005dc6:	60b9      	str	r1, [r7, #8]
 8005dc8:	603b      	str	r3, [r7, #0]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d101      	bne.n	8005de0 <HAL_SPI_Transmit+0x22>
 8005ddc:	2302      	movs	r3, #2
 8005dde:	e158      	b.n	8006092 <HAL_SPI_Transmit+0x2d4>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005de8:	f7fd fd08 	bl	80037fc <HAL_GetTick>
 8005dec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005dee:	88fb      	ldrh	r3, [r7, #6]
 8005df0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d002      	beq.n	8005e04 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005dfe:	2302      	movs	r3, #2
 8005e00:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e02:	e13d      	b.n	8006080 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d002      	beq.n	8005e10 <HAL_SPI_Transmit+0x52>
 8005e0a:	88fb      	ldrh	r3, [r7, #6]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d102      	bne.n	8005e16 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e14:	e134      	b.n	8006080 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2203      	movs	r2, #3
 8005e1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	68ba      	ldr	r2, [r7, #8]
 8005e28:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	88fa      	ldrh	r2, [r7, #6]
 8005e2e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	88fa      	ldrh	r2, [r7, #6]
 8005e34:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e60:	d10f      	bne.n	8005e82 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e70:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e80:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e8c:	2b40      	cmp	r3, #64	; 0x40
 8005e8e:	d007      	beq.n	8005ea0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ea8:	d94b      	bls.n	8005f42 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d002      	beq.n	8005eb8 <HAL_SPI_Transmit+0xfa>
 8005eb2:	8afb      	ldrh	r3, [r7, #22]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d13e      	bne.n	8005f36 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ebc:	881a      	ldrh	r2, [r3, #0]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec8:	1c9a      	adds	r2, r3, #2
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	3b01      	subs	r3, #1
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005edc:	e02b      	b.n	8005f36 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f003 0302 	and.w	r3, r3, #2
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d112      	bne.n	8005f12 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef0:	881a      	ldrh	r2, [r3, #0]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efc:	1c9a      	adds	r2, r3, #2
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f10:	e011      	b.n	8005f36 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f12:	f7fd fc73 	bl	80037fc <HAL_GetTick>
 8005f16:	4602      	mov	r2, r0
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	683a      	ldr	r2, [r7, #0]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d803      	bhi.n	8005f2a <HAL_SPI_Transmit+0x16c>
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f28:	d102      	bne.n	8005f30 <HAL_SPI_Transmit+0x172>
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d102      	bne.n	8005f36 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005f30:	2303      	movs	r3, #3
 8005f32:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005f34:	e0a4      	b.n	8006080 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d1ce      	bne.n	8005ede <HAL_SPI_Transmit+0x120>
 8005f40:	e07c      	b.n	800603c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d002      	beq.n	8005f50 <HAL_SPI_Transmit+0x192>
 8005f4a:	8afb      	ldrh	r3, [r7, #22]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d170      	bne.n	8006032 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d912      	bls.n	8005f80 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5e:	881a      	ldrh	r2, [r3, #0]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f6a:	1c9a      	adds	r2, r3, #2
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	3b02      	subs	r3, #2
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f7e:	e058      	b.n	8006032 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	330c      	adds	r3, #12
 8005f8a:	7812      	ldrb	r2, [r2, #0]
 8005f8c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f92:	1c5a      	adds	r2, r3, #1
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005fa6:	e044      	b.n	8006032 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f003 0302 	and.w	r3, r3, #2
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d12b      	bne.n	800600e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d912      	bls.n	8005fe6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc4:	881a      	ldrh	r2, [r3, #0]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd0:	1c9a      	adds	r2, r3, #2
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	3b02      	subs	r3, #2
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fe4:	e025      	b.n	8006032 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	330c      	adds	r3, #12
 8005ff0:	7812      	ldrb	r2, [r2, #0]
 8005ff2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff8:	1c5a      	adds	r2, r3, #1
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006002:	b29b      	uxth	r3, r3
 8006004:	3b01      	subs	r3, #1
 8006006:	b29a      	uxth	r2, r3
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800600c:	e011      	b.n	8006032 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800600e:	f7fd fbf5 	bl	80037fc <HAL_GetTick>
 8006012:	4602      	mov	r2, r0
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	429a      	cmp	r2, r3
 800601c:	d803      	bhi.n	8006026 <HAL_SPI_Transmit+0x268>
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006024:	d102      	bne.n	800602c <HAL_SPI_Transmit+0x26e>
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d102      	bne.n	8006032 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006030:	e026      	b.n	8006080 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006036:	b29b      	uxth	r3, r3
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1b5      	bne.n	8005fa8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800603c:	69ba      	ldr	r2, [r7, #24]
 800603e:	6839      	ldr	r1, [r7, #0]
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	f000 fd07 	bl	8006a54 <SPI_EndRxTxTransaction>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d002      	beq.n	8006052 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2220      	movs	r2, #32
 8006050:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d10a      	bne.n	8006070 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800605a:	2300      	movs	r3, #0
 800605c:	613b      	str	r3, [r7, #16]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	613b      	str	r3, [r7, #16]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	613b      	str	r3, [r7, #16]
 800606e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006074:	2b00      	cmp	r3, #0
 8006076:	d002      	beq.n	800607e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	77fb      	strb	r3, [r7, #31]
 800607c:	e000      	b.n	8006080 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800607e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006090:	7ffb      	ldrb	r3, [r7, #31]
}
 8006092:	4618      	mov	r0, r3
 8006094:	3720      	adds	r7, #32
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800609a:	b580      	push	{r7, lr}
 800609c:	b088      	sub	sp, #32
 800609e:	af02      	add	r7, sp, #8
 80060a0:	60f8      	str	r0, [r7, #12]
 80060a2:	60b9      	str	r1, [r7, #8]
 80060a4:	603b      	str	r3, [r7, #0]
 80060a6:	4613      	mov	r3, r2
 80060a8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80060aa:	2300      	movs	r3, #0
 80060ac:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060b6:	d112      	bne.n	80060de <HAL_SPI_Receive+0x44>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10e      	bne.n	80060de <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2204      	movs	r2, #4
 80060c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80060c8:	88fa      	ldrh	r2, [r7, #6]
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	9300      	str	r3, [sp, #0]
 80060ce:	4613      	mov	r3, r2
 80060d0:	68ba      	ldr	r2, [r7, #8]
 80060d2:	68b9      	ldr	r1, [r7, #8]
 80060d4:	68f8      	ldr	r0, [r7, #12]
 80060d6:	f000 f910 	bl	80062fa <HAL_SPI_TransmitReceive>
 80060da:	4603      	mov	r3, r0
 80060dc:	e109      	b.n	80062f2 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d101      	bne.n	80060ec <HAL_SPI_Receive+0x52>
 80060e8:	2302      	movs	r3, #2
 80060ea:	e102      	b.n	80062f2 <HAL_SPI_Receive+0x258>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060f4:	f7fd fb82 	bl	80037fc <HAL_GetTick>
 80060f8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b01      	cmp	r3, #1
 8006104:	d002      	beq.n	800610c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006106:	2302      	movs	r3, #2
 8006108:	75fb      	strb	r3, [r7, #23]
    goto error;
 800610a:	e0e9      	b.n	80062e0 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d002      	beq.n	8006118 <HAL_SPI_Receive+0x7e>
 8006112:	88fb      	ldrh	r3, [r7, #6]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d102      	bne.n	800611e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800611c:	e0e0      	b.n	80062e0 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2204      	movs	r2, #4
 8006122:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	88fa      	ldrh	r2, [r7, #6]
 8006136:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	88fa      	ldrh	r2, [r7, #6]
 800613e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006168:	d908      	bls.n	800617c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	685a      	ldr	r2, [r3, #4]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006178:	605a      	str	r2, [r3, #4]
 800617a:	e007      	b.n	800618c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	685a      	ldr	r2, [r3, #4]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800618a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006194:	d10f      	bne.n	80061b6 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80061b4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c0:	2b40      	cmp	r3, #64	; 0x40
 80061c2:	d007      	beq.n	80061d4 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061d2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80061dc:	d867      	bhi.n	80062ae <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80061de:	e030      	b.n	8006242 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d117      	bne.n	800621e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f103 020c 	add.w	r2, r3, #12
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fa:	7812      	ldrb	r2, [r2, #0]
 80061fc:	b2d2      	uxtb	r2, r2
 80061fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006204:	1c5a      	adds	r2, r3, #1
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006210:	b29b      	uxth	r3, r3
 8006212:	3b01      	subs	r3, #1
 8006214:	b29a      	uxth	r2, r3
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800621c:	e011      	b.n	8006242 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800621e:	f7fd faed 	bl	80037fc <HAL_GetTick>
 8006222:	4602      	mov	r2, r0
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	1ad3      	subs	r3, r2, r3
 8006228:	683a      	ldr	r2, [r7, #0]
 800622a:	429a      	cmp	r2, r3
 800622c:	d803      	bhi.n	8006236 <HAL_SPI_Receive+0x19c>
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006234:	d102      	bne.n	800623c <HAL_SPI_Receive+0x1a2>
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d102      	bne.n	8006242 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006240:	e04e      	b.n	80062e0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006248:	b29b      	uxth	r3, r3
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1c8      	bne.n	80061e0 <HAL_SPI_Receive+0x146>
 800624e:	e034      	b.n	80062ba <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	f003 0301 	and.w	r3, r3, #1
 800625a:	2b01      	cmp	r3, #1
 800625c:	d115      	bne.n	800628a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68da      	ldr	r2, [r3, #12]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006268:	b292      	uxth	r2, r2
 800626a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006270:	1c9a      	adds	r2, r3, #2
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800627c:	b29b      	uxth	r3, r3
 800627e:	3b01      	subs	r3, #1
 8006280:	b29a      	uxth	r2, r3
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006288:	e011      	b.n	80062ae <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800628a:	f7fd fab7 	bl	80037fc <HAL_GetTick>
 800628e:	4602      	mov	r2, r0
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	683a      	ldr	r2, [r7, #0]
 8006296:	429a      	cmp	r2, r3
 8006298:	d803      	bhi.n	80062a2 <HAL_SPI_Receive+0x208>
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a0:	d102      	bne.n	80062a8 <HAL_SPI_Receive+0x20e>
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d102      	bne.n	80062ae <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	75fb      	strb	r3, [r7, #23]
          goto error;
 80062ac:	e018      	b.n	80062e0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1ca      	bne.n	8006250 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80062ba:	693a      	ldr	r2, [r7, #16]
 80062bc:	6839      	ldr	r1, [r7, #0]
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f000 fb4c 	bl	800695c <SPI_EndRxTransaction>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d002      	beq.n	80062d0 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2220      	movs	r2, #32
 80062ce:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d002      	beq.n	80062de <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	75fb      	strb	r3, [r7, #23]
 80062dc:	e000      	b.n	80062e0 <HAL_SPI_Receive+0x246>
  }

error :
 80062de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80062f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3718      	adds	r7, #24
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b08a      	sub	sp, #40	; 0x28
 80062fe:	af00      	add	r7, sp, #0
 8006300:	60f8      	str	r0, [r7, #12]
 8006302:	60b9      	str	r1, [r7, #8]
 8006304:	607a      	str	r2, [r7, #4]
 8006306:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006308:	2301      	movs	r3, #1
 800630a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800630c:	2300      	movs	r3, #0
 800630e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006318:	2b01      	cmp	r3, #1
 800631a:	d101      	bne.n	8006320 <HAL_SPI_TransmitReceive+0x26>
 800631c:	2302      	movs	r3, #2
 800631e:	e1fb      	b.n	8006718 <HAL_SPI_TransmitReceive+0x41e>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006328:	f7fd fa68 	bl	80037fc <HAL_GetTick>
 800632c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006334:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800633c:	887b      	ldrh	r3, [r7, #2]
 800633e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006340:	887b      	ldrh	r3, [r7, #2]
 8006342:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006344:	7efb      	ldrb	r3, [r7, #27]
 8006346:	2b01      	cmp	r3, #1
 8006348:	d00e      	beq.n	8006368 <HAL_SPI_TransmitReceive+0x6e>
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006350:	d106      	bne.n	8006360 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d102      	bne.n	8006360 <HAL_SPI_TransmitReceive+0x66>
 800635a:	7efb      	ldrb	r3, [r7, #27]
 800635c:	2b04      	cmp	r3, #4
 800635e:	d003      	beq.n	8006368 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006360:	2302      	movs	r3, #2
 8006362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006366:	e1cd      	b.n	8006704 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d005      	beq.n	800637a <HAL_SPI_TransmitReceive+0x80>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d002      	beq.n	800637a <HAL_SPI_TransmitReceive+0x80>
 8006374:	887b      	ldrh	r3, [r7, #2]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d103      	bne.n	8006382 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006380:	e1c0      	b.n	8006704 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b04      	cmp	r3, #4
 800638c:	d003      	beq.n	8006396 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2205      	movs	r2, #5
 8006392:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	887a      	ldrh	r2, [r7, #2]
 80063a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	887a      	ldrh	r2, [r7, #2]
 80063ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	68ba      	ldr	r2, [r7, #8]
 80063b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	887a      	ldrh	r2, [r7, #2]
 80063bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	887a      	ldrh	r2, [r7, #2]
 80063c2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2200      	movs	r2, #0
 80063c8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80063d8:	d802      	bhi.n	80063e0 <HAL_SPI_TransmitReceive+0xe6>
 80063da:	8a3b      	ldrh	r3, [r7, #16]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d908      	bls.n	80063f2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	685a      	ldr	r2, [r3, #4]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80063ee:	605a      	str	r2, [r3, #4]
 80063f0:	e007      	b.n	8006402 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	685a      	ldr	r2, [r3, #4]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006400:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800640c:	2b40      	cmp	r3, #64	; 0x40
 800640e:	d007      	beq.n	8006420 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800641e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006428:	d97c      	bls.n	8006524 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d002      	beq.n	8006438 <HAL_SPI_TransmitReceive+0x13e>
 8006432:	8a7b      	ldrh	r3, [r7, #18]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d169      	bne.n	800650c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643c:	881a      	ldrh	r2, [r3, #0]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006448:	1c9a      	adds	r2, r3, #2
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006452:	b29b      	uxth	r3, r3
 8006454:	3b01      	subs	r3, #1
 8006456:	b29a      	uxth	r2, r3
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800645c:	e056      	b.n	800650c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	f003 0302 	and.w	r3, r3, #2
 8006468:	2b02      	cmp	r3, #2
 800646a:	d11b      	bne.n	80064a4 <HAL_SPI_TransmitReceive+0x1aa>
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006470:	b29b      	uxth	r3, r3
 8006472:	2b00      	cmp	r3, #0
 8006474:	d016      	beq.n	80064a4 <HAL_SPI_TransmitReceive+0x1aa>
 8006476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006478:	2b01      	cmp	r3, #1
 800647a:	d113      	bne.n	80064a4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006480:	881a      	ldrh	r2, [r3, #0]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648c:	1c9a      	adds	r2, r3, #2
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006496:	b29b      	uxth	r3, r3
 8006498:	3b01      	subs	r3, #1
 800649a:	b29a      	uxth	r2, r3
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80064a0:	2300      	movs	r3, #0
 80064a2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	f003 0301 	and.w	r3, r3, #1
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d11c      	bne.n	80064ec <HAL_SPI_TransmitReceive+0x1f2>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d016      	beq.n	80064ec <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68da      	ldr	r2, [r3, #12]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c8:	b292      	uxth	r2, r2
 80064ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d0:	1c9a      	adds	r2, r3, #2
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064dc:	b29b      	uxth	r3, r3
 80064de:	3b01      	subs	r3, #1
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80064e8:	2301      	movs	r3, #1
 80064ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80064ec:	f7fd f986 	bl	80037fc <HAL_GetTick>
 80064f0:	4602      	mov	r2, r0
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	1ad3      	subs	r3, r2, r3
 80064f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d807      	bhi.n	800650c <HAL_SPI_TransmitReceive+0x212>
 80064fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006502:	d003      	beq.n	800650c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006504:	2303      	movs	r3, #3
 8006506:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800650a:	e0fb      	b.n	8006704 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006510:	b29b      	uxth	r3, r3
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1a3      	bne.n	800645e <HAL_SPI_TransmitReceive+0x164>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800651c:	b29b      	uxth	r3, r3
 800651e:	2b00      	cmp	r3, #0
 8006520:	d19d      	bne.n	800645e <HAL_SPI_TransmitReceive+0x164>
 8006522:	e0df      	b.n	80066e4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d003      	beq.n	8006534 <HAL_SPI_TransmitReceive+0x23a>
 800652c:	8a7b      	ldrh	r3, [r7, #18]
 800652e:	2b01      	cmp	r3, #1
 8006530:	f040 80cb 	bne.w	80066ca <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006538:	b29b      	uxth	r3, r3
 800653a:	2b01      	cmp	r3, #1
 800653c:	d912      	bls.n	8006564 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006542:	881a      	ldrh	r2, [r3, #0]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800654e:	1c9a      	adds	r2, r3, #2
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006558:	b29b      	uxth	r3, r3
 800655a:	3b02      	subs	r3, #2
 800655c:	b29a      	uxth	r2, r3
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006562:	e0b2      	b.n	80066ca <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	330c      	adds	r3, #12
 800656e:	7812      	ldrb	r2, [r2, #0]
 8006570:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006576:	1c5a      	adds	r2, r3, #1
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006580:	b29b      	uxth	r3, r3
 8006582:	3b01      	subs	r3, #1
 8006584:	b29a      	uxth	r2, r3
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800658a:	e09e      	b.n	80066ca <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	f003 0302 	and.w	r3, r3, #2
 8006596:	2b02      	cmp	r3, #2
 8006598:	d134      	bne.n	8006604 <HAL_SPI_TransmitReceive+0x30a>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800659e:	b29b      	uxth	r3, r3
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d02f      	beq.n	8006604 <HAL_SPI_TransmitReceive+0x30a>
 80065a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d12c      	bne.n	8006604 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d912      	bls.n	80065da <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b8:	881a      	ldrh	r2, [r3, #0]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c4:	1c9a      	adds	r2, r3, #2
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	3b02      	subs	r3, #2
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80065d8:	e012      	b.n	8006600 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	330c      	adds	r3, #12
 80065e4:	7812      	ldrb	r2, [r2, #0]
 80065e6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ec:	1c5a      	adds	r2, r3, #1
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	3b01      	subs	r3, #1
 80065fa:	b29a      	uxth	r2, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006600:	2300      	movs	r3, #0
 8006602:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	f003 0301 	and.w	r3, r3, #1
 800660e:	2b01      	cmp	r3, #1
 8006610:	d148      	bne.n	80066a4 <HAL_SPI_TransmitReceive+0x3aa>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006618:	b29b      	uxth	r3, r3
 800661a:	2b00      	cmp	r3, #0
 800661c:	d042      	beq.n	80066a4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006624:	b29b      	uxth	r3, r3
 8006626:	2b01      	cmp	r3, #1
 8006628:	d923      	bls.n	8006672 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68da      	ldr	r2, [r3, #12]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006634:	b292      	uxth	r2, r2
 8006636:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663c:	1c9a      	adds	r2, r3, #2
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006648:	b29b      	uxth	r3, r3
 800664a:	3b02      	subs	r3, #2
 800664c:	b29a      	uxth	r2, r3
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800665a:	b29b      	uxth	r3, r3
 800665c:	2b01      	cmp	r3, #1
 800665e:	d81f      	bhi.n	80066a0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	685a      	ldr	r2, [r3, #4]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800666e:	605a      	str	r2, [r3, #4]
 8006670:	e016      	b.n	80066a0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f103 020c 	add.w	r2, r3, #12
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667e:	7812      	ldrb	r2, [r2, #0]
 8006680:	b2d2      	uxtb	r2, r2
 8006682:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006688:	1c5a      	adds	r2, r3, #1
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006694:	b29b      	uxth	r3, r3
 8006696:	3b01      	subs	r3, #1
 8006698:	b29a      	uxth	r2, r3
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80066a0:	2301      	movs	r3, #1
 80066a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80066a4:	f7fd f8aa 	bl	80037fc <HAL_GetTick>
 80066a8:	4602      	mov	r2, r0
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d803      	bhi.n	80066bc <HAL_SPI_TransmitReceive+0x3c2>
 80066b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ba:	d102      	bne.n	80066c2 <HAL_SPI_TransmitReceive+0x3c8>
 80066bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d103      	bne.n	80066ca <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80066c8:	e01c      	b.n	8006704 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f47f af5b 	bne.w	800658c <HAL_SPI_TransmitReceive+0x292>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066dc:	b29b      	uxth	r3, r3
 80066de:	2b00      	cmp	r3, #0
 80066e0:	f47f af54 	bne.w	800658c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066e4:	69fa      	ldr	r2, [r7, #28]
 80066e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f000 f9b3 	bl	8006a54 <SPI_EndRxTxTransaction>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d006      	beq.n	8006702 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2220      	movs	r2, #32
 80066fe:	661a      	str	r2, [r3, #96]	; 0x60
 8006700:	e000      	b.n	8006704 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006702:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006714:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006718:	4618      	mov	r0, r3
 800671a:	3728      	adds	r7, #40	; 0x28
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b088      	sub	sp, #32
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	603b      	str	r3, [r7, #0]
 800672c:	4613      	mov	r3, r2
 800672e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006730:	f7fd f864 	bl	80037fc <HAL_GetTick>
 8006734:	4602      	mov	r2, r0
 8006736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006738:	1a9b      	subs	r3, r3, r2
 800673a:	683a      	ldr	r2, [r7, #0]
 800673c:	4413      	add	r3, r2
 800673e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006740:	f7fd f85c 	bl	80037fc <HAL_GetTick>
 8006744:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006746:	4b39      	ldr	r3, [pc, #228]	; (800682c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	015b      	lsls	r3, r3, #5
 800674c:	0d1b      	lsrs	r3, r3, #20
 800674e:	69fa      	ldr	r2, [r7, #28]
 8006750:	fb02 f303 	mul.w	r3, r2, r3
 8006754:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006756:	e054      	b.n	8006802 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800675e:	d050      	beq.n	8006802 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006760:	f7fd f84c 	bl	80037fc <HAL_GetTick>
 8006764:	4602      	mov	r2, r0
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	69fa      	ldr	r2, [r7, #28]
 800676c:	429a      	cmp	r2, r3
 800676e:	d902      	bls.n	8006776 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d13d      	bne.n	80067f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	685a      	ldr	r2, [r3, #4]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006784:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800678e:	d111      	bne.n	80067b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006798:	d004      	beq.n	80067a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067a2:	d107      	bne.n	80067b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067bc:	d10f      	bne.n	80067de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067cc:	601a      	str	r2, [r3, #0]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2201      	movs	r2, #1
 80067e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	e017      	b.n	8006822 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d101      	bne.n	80067fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80067f8:	2300      	movs	r3, #0
 80067fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	3b01      	subs	r3, #1
 8006800:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	689a      	ldr	r2, [r3, #8]
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	4013      	ands	r3, r2
 800680c:	68ba      	ldr	r2, [r7, #8]
 800680e:	429a      	cmp	r2, r3
 8006810:	bf0c      	ite	eq
 8006812:	2301      	moveq	r3, #1
 8006814:	2300      	movne	r3, #0
 8006816:	b2db      	uxtb	r3, r3
 8006818:	461a      	mov	r2, r3
 800681a:	79fb      	ldrb	r3, [r7, #7]
 800681c:	429a      	cmp	r2, r3
 800681e:	d19b      	bne.n	8006758 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3720      	adds	r7, #32
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	20000000 	.word	0x20000000

08006830 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b08a      	sub	sp, #40	; 0x28
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	607a      	str	r2, [r7, #4]
 800683c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800683e:	2300      	movs	r3, #0
 8006840:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006842:	f7fc ffdb 	bl	80037fc <HAL_GetTick>
 8006846:	4602      	mov	r2, r0
 8006848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684a:	1a9b      	subs	r3, r3, r2
 800684c:	683a      	ldr	r2, [r7, #0]
 800684e:	4413      	add	r3, r2
 8006850:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006852:	f7fc ffd3 	bl	80037fc <HAL_GetTick>
 8006856:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	330c      	adds	r3, #12
 800685e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006860:	4b3d      	ldr	r3, [pc, #244]	; (8006958 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	4613      	mov	r3, r2
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	4413      	add	r3, r2
 800686a:	00da      	lsls	r2, r3, #3
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	0d1b      	lsrs	r3, r3, #20
 8006870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006872:	fb02 f303 	mul.w	r3, r2, r3
 8006876:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006878:	e060      	b.n	800693c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006880:	d107      	bne.n	8006892 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d104      	bne.n	8006892 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	b2db      	uxtb	r3, r3
 800688e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006890:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006898:	d050      	beq.n	800693c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800689a:	f7fc ffaf 	bl	80037fc <HAL_GetTick>
 800689e:	4602      	mov	r2, r0
 80068a0:	6a3b      	ldr	r3, [r7, #32]
 80068a2:	1ad3      	subs	r3, r2, r3
 80068a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d902      	bls.n	80068b0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80068aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d13d      	bne.n	800692c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	685a      	ldr	r2, [r3, #4]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80068be:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068c8:	d111      	bne.n	80068ee <SPI_WaitFifoStateUntilTimeout+0xbe>
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068d2:	d004      	beq.n	80068de <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068dc:	d107      	bne.n	80068ee <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068ec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068f6:	d10f      	bne.n	8006918 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006906:	601a      	str	r2, [r3, #0]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006916:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2200      	movs	r2, #0
 8006924:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006928:	2303      	movs	r3, #3
 800692a:	e010      	b.n	800694e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d101      	bne.n	8006936 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006932:	2300      	movs	r3, #0
 8006934:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	3b01      	subs	r3, #1
 800693a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	689a      	ldr	r2, [r3, #8]
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	4013      	ands	r3, r2
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	429a      	cmp	r2, r3
 800694a:	d196      	bne.n	800687a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	3728      	adds	r7, #40	; 0x28
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	20000000 	.word	0x20000000

0800695c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b088      	sub	sp, #32
 8006960:	af02      	add	r7, sp, #8
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006970:	d111      	bne.n	8006996 <SPI_EndRxTransaction+0x3a>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800697a:	d004      	beq.n	8006986 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006984:	d107      	bne.n	8006996 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006994:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800699e:	d112      	bne.n	80069c6 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	9300      	str	r3, [sp, #0]
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	2200      	movs	r2, #0
 80069a8:	2180      	movs	r1, #128	; 0x80
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f7ff feb8 	bl	8006720 <SPI_WaitFlagStateUntilTimeout>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d021      	beq.n	80069fa <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069ba:	f043 0220 	orr.w	r2, r3, #32
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80069c2:	2303      	movs	r3, #3
 80069c4:	e03d      	b.n	8006a42 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80069c6:	4b21      	ldr	r3, [pc, #132]	; (8006a4c <SPI_EndRxTransaction+0xf0>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a21      	ldr	r2, [pc, #132]	; (8006a50 <SPI_EndRxTransaction+0xf4>)
 80069cc:	fba2 2303 	umull	r2, r3, r2, r3
 80069d0:	0d5b      	lsrs	r3, r3, #21
 80069d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80069d6:	fb02 f303 	mul.w	r3, r2, r3
 80069da:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00a      	beq.n	80069f8 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	3b01      	subs	r3, #1
 80069e6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069f2:	2b80      	cmp	r3, #128	; 0x80
 80069f4:	d0f2      	beq.n	80069dc <SPI_EndRxTransaction+0x80>
 80069f6:	e000      	b.n	80069fa <SPI_EndRxTransaction+0x9e>
        break;
 80069f8:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a02:	d11d      	bne.n	8006a40 <SPI_EndRxTransaction+0xe4>
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a0c:	d004      	beq.n	8006a18 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a16:	d113      	bne.n	8006a40 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	9300      	str	r3, [sp, #0]
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f7ff ff03 	bl	8006830 <SPI_WaitFifoStateUntilTimeout>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d007      	beq.n	8006a40 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a34:	f043 0220 	orr.w	r2, r3, #32
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006a3c:	2303      	movs	r3, #3
 8006a3e:	e000      	b.n	8006a42 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3718      	adds	r7, #24
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	20000000 	.word	0x20000000
 8006a50:	165e9f81 	.word	0x165e9f81

08006a54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b088      	sub	sp, #32
 8006a58:	af02      	add	r7, sp, #8
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	9300      	str	r3, [sp, #0]
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f7ff fedf 	bl	8006830 <SPI_WaitFifoStateUntilTimeout>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d007      	beq.n	8006a88 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a7c:	f043 0220 	orr.w	r2, r3, #32
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006a84:	2303      	movs	r3, #3
 8006a86:	e046      	b.n	8006b16 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006a88:	4b25      	ldr	r3, [pc, #148]	; (8006b20 <SPI_EndRxTxTransaction+0xcc>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a25      	ldr	r2, [pc, #148]	; (8006b24 <SPI_EndRxTxTransaction+0xd0>)
 8006a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a92:	0d5b      	lsrs	r3, r3, #21
 8006a94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a98:	fb02 f303 	mul.w	r3, r2, r3
 8006a9c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006aa6:	d112      	bne.n	8006ace <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	9300      	str	r3, [sp, #0]
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	2180      	movs	r1, #128	; 0x80
 8006ab2:	68f8      	ldr	r0, [r7, #12]
 8006ab4:	f7ff fe34 	bl	8006720 <SPI_WaitFlagStateUntilTimeout>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d016      	beq.n	8006aec <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ac2:	f043 0220 	orr.w	r2, r3, #32
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006aca:	2303      	movs	r3, #3
 8006acc:	e023      	b.n	8006b16 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d00a      	beq.n	8006aea <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ae4:	2b80      	cmp	r3, #128	; 0x80
 8006ae6:	d0f2      	beq.n	8006ace <SPI_EndRxTxTransaction+0x7a>
 8006ae8:	e000      	b.n	8006aec <SPI_EndRxTxTransaction+0x98>
        break;
 8006aea:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	9300      	str	r3, [sp, #0]
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	f7ff fe99 	bl	8006830 <SPI_WaitFifoStateUntilTimeout>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d007      	beq.n	8006b14 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b08:	f043 0220 	orr.w	r2, r3, #32
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006b10:	2303      	movs	r3, #3
 8006b12:	e000      	b.n	8006b16 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3718      	adds	r7, #24
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	20000000 	.word	0x20000000
 8006b24:	165e9f81 	.word	0x165e9f81

08006b28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d101      	bne.n	8006b3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e049      	b.n	8006bce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d106      	bne.n	8006b54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f7fc fcee 	bl	8003530 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2202      	movs	r2, #2
 8006b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	3304      	adds	r3, #4
 8006b64:	4619      	mov	r1, r3
 8006b66:	4610      	mov	r0, r2
 8006b68:	f000 fe9a 	bl	80078a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3708      	adds	r7, #8
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
	...

08006bd8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d001      	beq.n	8006bf0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e04c      	b.n	8006c8a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2202      	movs	r2, #2
 8006bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a26      	ldr	r2, [pc, #152]	; (8006c98 <HAL_TIM_Base_Start+0xc0>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d022      	beq.n	8006c48 <HAL_TIM_Base_Start+0x70>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c0a:	d01d      	beq.n	8006c48 <HAL_TIM_Base_Start+0x70>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a22      	ldr	r2, [pc, #136]	; (8006c9c <HAL_TIM_Base_Start+0xc4>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d018      	beq.n	8006c48 <HAL_TIM_Base_Start+0x70>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a21      	ldr	r2, [pc, #132]	; (8006ca0 <HAL_TIM_Base_Start+0xc8>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d013      	beq.n	8006c48 <HAL_TIM_Base_Start+0x70>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a1f      	ldr	r2, [pc, #124]	; (8006ca4 <HAL_TIM_Base_Start+0xcc>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d00e      	beq.n	8006c48 <HAL_TIM_Base_Start+0x70>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a1e      	ldr	r2, [pc, #120]	; (8006ca8 <HAL_TIM_Base_Start+0xd0>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d009      	beq.n	8006c48 <HAL_TIM_Base_Start+0x70>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a1c      	ldr	r2, [pc, #112]	; (8006cac <HAL_TIM_Base_Start+0xd4>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d004      	beq.n	8006c48 <HAL_TIM_Base_Start+0x70>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a1b      	ldr	r2, [pc, #108]	; (8006cb0 <HAL_TIM_Base_Start+0xd8>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d115      	bne.n	8006c74 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	689a      	ldr	r2, [r3, #8]
 8006c4e:	4b19      	ldr	r3, [pc, #100]	; (8006cb4 <HAL_TIM_Base_Start+0xdc>)
 8006c50:	4013      	ands	r3, r2
 8006c52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2b06      	cmp	r3, #6
 8006c58:	d015      	beq.n	8006c86 <HAL_TIM_Base_Start+0xae>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c60:	d011      	beq.n	8006c86 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f042 0201 	orr.w	r2, r2, #1
 8006c70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c72:	e008      	b.n	8006c86 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f042 0201 	orr.w	r2, r2, #1
 8006c82:	601a      	str	r2, [r3, #0]
 8006c84:	e000      	b.n	8006c88 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3714      	adds	r7, #20
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr
 8006c96:	bf00      	nop
 8006c98:	40010000 	.word	0x40010000
 8006c9c:	40000400 	.word	0x40000400
 8006ca0:	40000800 	.word	0x40000800
 8006ca4:	40000c00 	.word	0x40000c00
 8006ca8:	40010400 	.word	0x40010400
 8006cac:	40014000 	.word	0x40014000
 8006cb0:	40001800 	.word	0x40001800
 8006cb4:	00010007 	.word	0x00010007

08006cb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b085      	sub	sp, #20
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d001      	beq.n	8006cd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e054      	b.n	8006d7a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2202      	movs	r2, #2
 8006cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68da      	ldr	r2, [r3, #12]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f042 0201 	orr.w	r2, r2, #1
 8006ce6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a26      	ldr	r2, [pc, #152]	; (8006d88 <HAL_TIM_Base_Start_IT+0xd0>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d022      	beq.n	8006d38 <HAL_TIM_Base_Start_IT+0x80>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cfa:	d01d      	beq.n	8006d38 <HAL_TIM_Base_Start_IT+0x80>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a22      	ldr	r2, [pc, #136]	; (8006d8c <HAL_TIM_Base_Start_IT+0xd4>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d018      	beq.n	8006d38 <HAL_TIM_Base_Start_IT+0x80>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a21      	ldr	r2, [pc, #132]	; (8006d90 <HAL_TIM_Base_Start_IT+0xd8>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d013      	beq.n	8006d38 <HAL_TIM_Base_Start_IT+0x80>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a1f      	ldr	r2, [pc, #124]	; (8006d94 <HAL_TIM_Base_Start_IT+0xdc>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d00e      	beq.n	8006d38 <HAL_TIM_Base_Start_IT+0x80>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a1e      	ldr	r2, [pc, #120]	; (8006d98 <HAL_TIM_Base_Start_IT+0xe0>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d009      	beq.n	8006d38 <HAL_TIM_Base_Start_IT+0x80>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a1c      	ldr	r2, [pc, #112]	; (8006d9c <HAL_TIM_Base_Start_IT+0xe4>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d004      	beq.n	8006d38 <HAL_TIM_Base_Start_IT+0x80>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a1b      	ldr	r2, [pc, #108]	; (8006da0 <HAL_TIM_Base_Start_IT+0xe8>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d115      	bne.n	8006d64 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	689a      	ldr	r2, [r3, #8]
 8006d3e:	4b19      	ldr	r3, [pc, #100]	; (8006da4 <HAL_TIM_Base_Start_IT+0xec>)
 8006d40:	4013      	ands	r3, r2
 8006d42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2b06      	cmp	r3, #6
 8006d48:	d015      	beq.n	8006d76 <HAL_TIM_Base_Start_IT+0xbe>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d50:	d011      	beq.n	8006d76 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f042 0201 	orr.w	r2, r2, #1
 8006d60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d62:	e008      	b.n	8006d76 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f042 0201 	orr.w	r2, r2, #1
 8006d72:	601a      	str	r2, [r3, #0]
 8006d74:	e000      	b.n	8006d78 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d76:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3714      	adds	r7, #20
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr
 8006d86:	bf00      	nop
 8006d88:	40010000 	.word	0x40010000
 8006d8c:	40000400 	.word	0x40000400
 8006d90:	40000800 	.word	0x40000800
 8006d94:	40000c00 	.word	0x40000c00
 8006d98:	40010400 	.word	0x40010400
 8006d9c:	40014000 	.word	0x40014000
 8006da0:	40001800 	.word	0x40001800
 8006da4:	00010007 	.word	0x00010007

08006da8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d101      	bne.n	8006dba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	e049      	b.n	8006e4e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d106      	bne.n	8006dd4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f7fc fb8e 	bl	80034f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2202      	movs	r2, #2
 8006dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	3304      	adds	r3, #4
 8006de4:	4619      	mov	r1, r3
 8006de6:	4610      	mov	r0, r2
 8006de8:	f000 fd5a 	bl	80078a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e4c:	2300      	movs	r3, #0
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3708      	adds	r7, #8
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}

08006e56 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006e56:	b580      	push	{r7, lr}
 8006e58:	b082      	sub	sp, #8
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d101      	bne.n	8006e68 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	e049      	b.n	8006efc <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d106      	bne.n	8006e82 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f7fc faeb 	bl	8003458 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2202      	movs	r2, #2
 8006e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	3304      	adds	r3, #4
 8006e92:	4619      	mov	r1, r3
 8006e94:	4610      	mov	r0, r2
 8006e96:	f000 fd03 	bl	80078a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2201      	movs	r2, #1
 8006eae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3708      	adds	r7, #8
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d104      	bne.n	8006f22 <HAL_TIM_IC_Start_IT+0x1e>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	e023      	b.n	8006f6a <HAL_TIM_IC_Start_IT+0x66>
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	2b04      	cmp	r3, #4
 8006f26:	d104      	bne.n	8006f32 <HAL_TIM_IC_Start_IT+0x2e>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	e01b      	b.n	8006f6a <HAL_TIM_IC_Start_IT+0x66>
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	2b08      	cmp	r3, #8
 8006f36:	d104      	bne.n	8006f42 <HAL_TIM_IC_Start_IT+0x3e>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	e013      	b.n	8006f6a <HAL_TIM_IC_Start_IT+0x66>
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	2b0c      	cmp	r3, #12
 8006f46:	d104      	bne.n	8006f52 <HAL_TIM_IC_Start_IT+0x4e>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	e00b      	b.n	8006f6a <HAL_TIM_IC_Start_IT+0x66>
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	2b10      	cmp	r3, #16
 8006f56:	d104      	bne.n	8006f62 <HAL_TIM_IC_Start_IT+0x5e>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	e003      	b.n	8006f6a <HAL_TIM_IC_Start_IT+0x66>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d104      	bne.n	8006f7c <HAL_TIM_IC_Start_IT+0x78>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	e013      	b.n	8006fa4 <HAL_TIM_IC_Start_IT+0xa0>
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	2b04      	cmp	r3, #4
 8006f80:	d104      	bne.n	8006f8c <HAL_TIM_IC_Start_IT+0x88>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	e00b      	b.n	8006fa4 <HAL_TIM_IC_Start_IT+0xa0>
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	2b08      	cmp	r3, #8
 8006f90:	d104      	bne.n	8006f9c <HAL_TIM_IC_Start_IT+0x98>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	e003      	b.n	8006fa4 <HAL_TIM_IC_Start_IT+0xa0>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fa6:	7bbb      	ldrb	r3, [r7, #14]
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d102      	bne.n	8006fb2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006fac:	7b7b      	ldrb	r3, [r7, #13]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d001      	beq.n	8006fb6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e0e2      	b.n	800717c <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d104      	bne.n	8006fc6 <HAL_TIM_IC_Start_IT+0xc2>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2202      	movs	r2, #2
 8006fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fc4:	e023      	b.n	800700e <HAL_TIM_IC_Start_IT+0x10a>
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	2b04      	cmp	r3, #4
 8006fca:	d104      	bne.n	8006fd6 <HAL_TIM_IC_Start_IT+0xd2>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2202      	movs	r2, #2
 8006fd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fd4:	e01b      	b.n	800700e <HAL_TIM_IC_Start_IT+0x10a>
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	2b08      	cmp	r3, #8
 8006fda:	d104      	bne.n	8006fe6 <HAL_TIM_IC_Start_IT+0xe2>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2202      	movs	r2, #2
 8006fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fe4:	e013      	b.n	800700e <HAL_TIM_IC_Start_IT+0x10a>
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	2b0c      	cmp	r3, #12
 8006fea:	d104      	bne.n	8006ff6 <HAL_TIM_IC_Start_IT+0xf2>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2202      	movs	r2, #2
 8006ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ff4:	e00b      	b.n	800700e <HAL_TIM_IC_Start_IT+0x10a>
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	2b10      	cmp	r3, #16
 8006ffa:	d104      	bne.n	8007006 <HAL_TIM_IC_Start_IT+0x102>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2202      	movs	r2, #2
 8007000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007004:	e003      	b.n	800700e <HAL_TIM_IC_Start_IT+0x10a>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2202      	movs	r2, #2
 800700a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d104      	bne.n	800701e <HAL_TIM_IC_Start_IT+0x11a>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2202      	movs	r2, #2
 8007018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800701c:	e013      	b.n	8007046 <HAL_TIM_IC_Start_IT+0x142>
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	2b04      	cmp	r3, #4
 8007022:	d104      	bne.n	800702e <HAL_TIM_IC_Start_IT+0x12a>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2202      	movs	r2, #2
 8007028:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800702c:	e00b      	b.n	8007046 <HAL_TIM_IC_Start_IT+0x142>
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	2b08      	cmp	r3, #8
 8007032:	d104      	bne.n	800703e <HAL_TIM_IC_Start_IT+0x13a>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2202      	movs	r2, #2
 8007038:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800703c:	e003      	b.n	8007046 <HAL_TIM_IC_Start_IT+0x142>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2202      	movs	r2, #2
 8007042:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	2b0c      	cmp	r3, #12
 800704a:	d841      	bhi.n	80070d0 <HAL_TIM_IC_Start_IT+0x1cc>
 800704c:	a201      	add	r2, pc, #4	; (adr r2, 8007054 <HAL_TIM_IC_Start_IT+0x150>)
 800704e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007052:	bf00      	nop
 8007054:	08007089 	.word	0x08007089
 8007058:	080070d1 	.word	0x080070d1
 800705c:	080070d1 	.word	0x080070d1
 8007060:	080070d1 	.word	0x080070d1
 8007064:	0800709b 	.word	0x0800709b
 8007068:	080070d1 	.word	0x080070d1
 800706c:	080070d1 	.word	0x080070d1
 8007070:	080070d1 	.word	0x080070d1
 8007074:	080070ad 	.word	0x080070ad
 8007078:	080070d1 	.word	0x080070d1
 800707c:	080070d1 	.word	0x080070d1
 8007080:	080070d1 	.word	0x080070d1
 8007084:	080070bf 	.word	0x080070bf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	68da      	ldr	r2, [r3, #12]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f042 0202 	orr.w	r2, r2, #2
 8007096:	60da      	str	r2, [r3, #12]
      break;
 8007098:	e01d      	b.n	80070d6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	68da      	ldr	r2, [r3, #12]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f042 0204 	orr.w	r2, r2, #4
 80070a8:	60da      	str	r2, [r3, #12]
      break;
 80070aa:	e014      	b.n	80070d6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	68da      	ldr	r2, [r3, #12]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f042 0208 	orr.w	r2, r2, #8
 80070ba:	60da      	str	r2, [r3, #12]
      break;
 80070bc:	e00b      	b.n	80070d6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	68da      	ldr	r2, [r3, #12]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f042 0210 	orr.w	r2, r2, #16
 80070cc:	60da      	str	r2, [r3, #12]
      break;
 80070ce:	e002      	b.n	80070d6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	73fb      	strb	r3, [r7, #15]
      break;
 80070d4:	bf00      	nop
  }

  if (status == HAL_OK)
 80070d6:	7bfb      	ldrb	r3, [r7, #15]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d14e      	bne.n	800717a <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2201      	movs	r2, #1
 80070e2:	6839      	ldr	r1, [r7, #0]
 80070e4:	4618      	mov	r0, r3
 80070e6:	f001 f916 	bl	8008316 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a25      	ldr	r2, [pc, #148]	; (8007184 <HAL_TIM_IC_Start_IT+0x280>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d022      	beq.n	800713a <HAL_TIM_IC_Start_IT+0x236>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070fc:	d01d      	beq.n	800713a <HAL_TIM_IC_Start_IT+0x236>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a21      	ldr	r2, [pc, #132]	; (8007188 <HAL_TIM_IC_Start_IT+0x284>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d018      	beq.n	800713a <HAL_TIM_IC_Start_IT+0x236>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a1f      	ldr	r2, [pc, #124]	; (800718c <HAL_TIM_IC_Start_IT+0x288>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d013      	beq.n	800713a <HAL_TIM_IC_Start_IT+0x236>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a1e      	ldr	r2, [pc, #120]	; (8007190 <HAL_TIM_IC_Start_IT+0x28c>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d00e      	beq.n	800713a <HAL_TIM_IC_Start_IT+0x236>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a1c      	ldr	r2, [pc, #112]	; (8007194 <HAL_TIM_IC_Start_IT+0x290>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d009      	beq.n	800713a <HAL_TIM_IC_Start_IT+0x236>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a1b      	ldr	r2, [pc, #108]	; (8007198 <HAL_TIM_IC_Start_IT+0x294>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d004      	beq.n	800713a <HAL_TIM_IC_Start_IT+0x236>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a19      	ldr	r2, [pc, #100]	; (800719c <HAL_TIM_IC_Start_IT+0x298>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d115      	bne.n	8007166 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	689a      	ldr	r2, [r3, #8]
 8007140:	4b17      	ldr	r3, [pc, #92]	; (80071a0 <HAL_TIM_IC_Start_IT+0x29c>)
 8007142:	4013      	ands	r3, r2
 8007144:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	2b06      	cmp	r3, #6
 800714a:	d015      	beq.n	8007178 <HAL_TIM_IC_Start_IT+0x274>
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007152:	d011      	beq.n	8007178 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f042 0201 	orr.w	r2, r2, #1
 8007162:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007164:	e008      	b.n	8007178 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f042 0201 	orr.w	r2, r2, #1
 8007174:	601a      	str	r2, [r3, #0]
 8007176:	e000      	b.n	800717a <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007178:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800717a:	7bfb      	ldrb	r3, [r7, #15]
}
 800717c:	4618      	mov	r0, r3
 800717e:	3710      	adds	r7, #16
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}
 8007184:	40010000 	.word	0x40010000
 8007188:	40000400 	.word	0x40000400
 800718c:	40000800 	.word	0x40000800
 8007190:	40000c00 	.word	0x40000c00
 8007194:	40010400 	.word	0x40010400
 8007198:	40014000 	.word	0x40014000
 800719c:	40001800 	.word	0x40001800
 80071a0:	00010007 	.word	0x00010007

080071a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	f003 0302 	and.w	r3, r3, #2
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	d122      	bne.n	8007200 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	f003 0302 	and.w	r3, r3, #2
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	d11b      	bne.n	8007200 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f06f 0202 	mvn.w	r2, #2
 80071d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2201      	movs	r2, #1
 80071d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	699b      	ldr	r3, [r3, #24]
 80071de:	f003 0303 	and.w	r3, r3, #3
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d003      	beq.n	80071ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 fb3c 	bl	8007864 <HAL_TIM_IC_CaptureCallback>
 80071ec:	e005      	b.n	80071fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 fb2e 	bl	8007850 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 fb3f 	bl	8007878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	f003 0304 	and.w	r3, r3, #4
 800720a:	2b04      	cmp	r3, #4
 800720c:	d122      	bne.n	8007254 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	f003 0304 	and.w	r3, r3, #4
 8007218:	2b04      	cmp	r3, #4
 800721a:	d11b      	bne.n	8007254 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f06f 0204 	mvn.w	r2, #4
 8007224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2202      	movs	r2, #2
 800722a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	699b      	ldr	r3, [r3, #24]
 8007232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007236:	2b00      	cmp	r3, #0
 8007238:	d003      	beq.n	8007242 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 fb12 	bl	8007864 <HAL_TIM_IC_CaptureCallback>
 8007240:	e005      	b.n	800724e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 fb04 	bl	8007850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 fb15 	bl	8007878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	f003 0308 	and.w	r3, r3, #8
 800725e:	2b08      	cmp	r3, #8
 8007260:	d122      	bne.n	80072a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	f003 0308 	and.w	r3, r3, #8
 800726c:	2b08      	cmp	r3, #8
 800726e:	d11b      	bne.n	80072a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f06f 0208 	mvn.w	r2, #8
 8007278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2204      	movs	r2, #4
 800727e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	69db      	ldr	r3, [r3, #28]
 8007286:	f003 0303 	and.w	r3, r3, #3
 800728a:	2b00      	cmp	r3, #0
 800728c:	d003      	beq.n	8007296 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fae8 	bl	8007864 <HAL_TIM_IC_CaptureCallback>
 8007294:	e005      	b.n	80072a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 fada 	bl	8007850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 faeb 	bl	8007878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	691b      	ldr	r3, [r3, #16]
 80072ae:	f003 0310 	and.w	r3, r3, #16
 80072b2:	2b10      	cmp	r3, #16
 80072b4:	d122      	bne.n	80072fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	f003 0310 	and.w	r3, r3, #16
 80072c0:	2b10      	cmp	r3, #16
 80072c2:	d11b      	bne.n	80072fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f06f 0210 	mvn.w	r2, #16
 80072cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2208      	movs	r2, #8
 80072d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	69db      	ldr	r3, [r3, #28]
 80072da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d003      	beq.n	80072ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 fabe 	bl	8007864 <HAL_TIM_IC_CaptureCallback>
 80072e8:	e005      	b.n	80072f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 fab0 	bl	8007850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 fac1 	bl	8007878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	f003 0301 	and.w	r3, r3, #1
 8007306:	2b01      	cmp	r3, #1
 8007308:	d10e      	bne.n	8007328 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	f003 0301 	and.w	r3, r3, #1
 8007314:	2b01      	cmp	r3, #1
 8007316:	d107      	bne.n	8007328 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f06f 0201 	mvn.w	r2, #1
 8007320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f7fb fd58 	bl	8002dd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007332:	2b80      	cmp	r3, #128	; 0x80
 8007334:	d10e      	bne.n	8007354 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007340:	2b80      	cmp	r3, #128	; 0x80
 8007342:	d107      	bne.n	8007354 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800734c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f001 f89e 	bl	8008490 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800735e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007362:	d10e      	bne.n	8007382 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800736e:	2b80      	cmp	r3, #128	; 0x80
 8007370:	d107      	bne.n	8007382 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800737a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f001 f891 	bl	80084a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	691b      	ldr	r3, [r3, #16]
 8007388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800738c:	2b40      	cmp	r3, #64	; 0x40
 800738e:	d10e      	bne.n	80073ae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800739a:	2b40      	cmp	r3, #64	; 0x40
 800739c:	d107      	bne.n	80073ae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80073a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 fa6f 	bl	800788c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	691b      	ldr	r3, [r3, #16]
 80073b4:	f003 0320 	and.w	r3, r3, #32
 80073b8:	2b20      	cmp	r3, #32
 80073ba:	d10e      	bne.n	80073da <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	f003 0320 	and.w	r3, r3, #32
 80073c6:	2b20      	cmp	r3, #32
 80073c8:	d107      	bne.n	80073da <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f06f 0220 	mvn.w	r2, #32
 80073d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f001 f851 	bl	800847c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073da:	bf00      	nop
 80073dc:	3708      	adds	r7, #8
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b086      	sub	sp, #24
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	60f8      	str	r0, [r7, #12]
 80073ea:	60b9      	str	r1, [r7, #8]
 80073ec:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073ee:	2300      	movs	r3, #0
 80073f0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d101      	bne.n	8007400 <HAL_TIM_IC_ConfigChannel+0x1e>
 80073fc:	2302      	movs	r3, #2
 80073fe:	e088      	b.n	8007512 <HAL_TIM_IC_ConfigChannel+0x130>
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d11b      	bne.n	8007446 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6818      	ldr	r0, [r3, #0]
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	6819      	ldr	r1, [r3, #0]
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	685a      	ldr	r2, [r3, #4]
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	68db      	ldr	r3, [r3, #12]
 800741e:	f000 fdd1 	bl	8007fc4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	699a      	ldr	r2, [r3, #24]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f022 020c 	bic.w	r2, r2, #12
 8007430:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	6999      	ldr	r1, [r3, #24]
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	689a      	ldr	r2, [r3, #8]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	430a      	orrs	r2, r1
 8007442:	619a      	str	r2, [r3, #24]
 8007444:	e060      	b.n	8007508 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2b04      	cmp	r3, #4
 800744a:	d11c      	bne.n	8007486 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6818      	ldr	r0, [r3, #0]
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	6819      	ldr	r1, [r3, #0]
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	685a      	ldr	r2, [r3, #4]
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	f000 fe55 	bl	800810a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	699a      	ldr	r2, [r3, #24]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800746e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	6999      	ldr	r1, [r3, #24]
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	021a      	lsls	r2, r3, #8
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	430a      	orrs	r2, r1
 8007482:	619a      	str	r2, [r3, #24]
 8007484:	e040      	b.n	8007508 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2b08      	cmp	r3, #8
 800748a:	d11b      	bne.n	80074c4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6818      	ldr	r0, [r3, #0]
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	6819      	ldr	r1, [r3, #0]
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	685a      	ldr	r2, [r3, #4]
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	f000 fea2 	bl	80081e4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	69da      	ldr	r2, [r3, #28]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f022 020c 	bic.w	r2, r2, #12
 80074ae:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	69d9      	ldr	r1, [r3, #28]
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	689a      	ldr	r2, [r3, #8]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	430a      	orrs	r2, r1
 80074c0:	61da      	str	r2, [r3, #28]
 80074c2:	e021      	b.n	8007508 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2b0c      	cmp	r3, #12
 80074c8:	d11c      	bne.n	8007504 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	6818      	ldr	r0, [r3, #0]
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	6819      	ldr	r1, [r3, #0]
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	685a      	ldr	r2, [r3, #4]
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	f000 febf 	bl	800825c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	69da      	ldr	r2, [r3, #28]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80074ec:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	69d9      	ldr	r1, [r3, #28]
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	021a      	lsls	r2, r3, #8
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	430a      	orrs	r2, r1
 8007500:	61da      	str	r2, [r3, #28]
 8007502:	e001      	b.n	8007508 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2200      	movs	r2, #0
 800750c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007510:	7dfb      	ldrb	r3, [r7, #23]
}
 8007512:	4618      	mov	r0, r3
 8007514:	3718      	adds	r7, #24
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
	...

0800751c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b086      	sub	sp, #24
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007528:	2300      	movs	r3, #0
 800752a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007532:	2b01      	cmp	r3, #1
 8007534:	d101      	bne.n	800753a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007536:	2302      	movs	r3, #2
 8007538:	e0ff      	b.n	800773a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2201      	movs	r2, #1
 800753e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2b14      	cmp	r3, #20
 8007546:	f200 80f0 	bhi.w	800772a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800754a:	a201      	add	r2, pc, #4	; (adr r2, 8007550 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800754c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007550:	080075a5 	.word	0x080075a5
 8007554:	0800772b 	.word	0x0800772b
 8007558:	0800772b 	.word	0x0800772b
 800755c:	0800772b 	.word	0x0800772b
 8007560:	080075e5 	.word	0x080075e5
 8007564:	0800772b 	.word	0x0800772b
 8007568:	0800772b 	.word	0x0800772b
 800756c:	0800772b 	.word	0x0800772b
 8007570:	08007627 	.word	0x08007627
 8007574:	0800772b 	.word	0x0800772b
 8007578:	0800772b 	.word	0x0800772b
 800757c:	0800772b 	.word	0x0800772b
 8007580:	08007667 	.word	0x08007667
 8007584:	0800772b 	.word	0x0800772b
 8007588:	0800772b 	.word	0x0800772b
 800758c:	0800772b 	.word	0x0800772b
 8007590:	080076a9 	.word	0x080076a9
 8007594:	0800772b 	.word	0x0800772b
 8007598:	0800772b 	.word	0x0800772b
 800759c:	0800772b 	.word	0x0800772b
 80075a0:	080076e9 	.word	0x080076e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	68b9      	ldr	r1, [r7, #8]
 80075aa:	4618      	mov	r0, r3
 80075ac:	f000 fa18 	bl	80079e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	699a      	ldr	r2, [r3, #24]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f042 0208 	orr.w	r2, r2, #8
 80075be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	699a      	ldr	r2, [r3, #24]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f022 0204 	bic.w	r2, r2, #4
 80075ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	6999      	ldr	r1, [r3, #24]
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	691a      	ldr	r2, [r3, #16]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	430a      	orrs	r2, r1
 80075e0:	619a      	str	r2, [r3, #24]
      break;
 80075e2:	e0a5      	b.n	8007730 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	68b9      	ldr	r1, [r7, #8]
 80075ea:	4618      	mov	r0, r3
 80075ec:	f000 fa6a 	bl	8007ac4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	699a      	ldr	r2, [r3, #24]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	699a      	ldr	r2, [r3, #24]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800760e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	6999      	ldr	r1, [r3, #24]
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	021a      	lsls	r2, r3, #8
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	430a      	orrs	r2, r1
 8007622:	619a      	str	r2, [r3, #24]
      break;
 8007624:	e084      	b.n	8007730 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68b9      	ldr	r1, [r7, #8]
 800762c:	4618      	mov	r0, r3
 800762e:	f000 fac1 	bl	8007bb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	69da      	ldr	r2, [r3, #28]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f042 0208 	orr.w	r2, r2, #8
 8007640:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	69da      	ldr	r2, [r3, #28]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f022 0204 	bic.w	r2, r2, #4
 8007650:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	69d9      	ldr	r1, [r3, #28]
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	691a      	ldr	r2, [r3, #16]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	430a      	orrs	r2, r1
 8007662:	61da      	str	r2, [r3, #28]
      break;
 8007664:	e064      	b.n	8007730 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	68b9      	ldr	r1, [r7, #8]
 800766c:	4618      	mov	r0, r3
 800766e:	f000 fb17 	bl	8007ca0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	69da      	ldr	r2, [r3, #28]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007680:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	69da      	ldr	r2, [r3, #28]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007690:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	69d9      	ldr	r1, [r3, #28]
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	021a      	lsls	r2, r3, #8
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	430a      	orrs	r2, r1
 80076a4:	61da      	str	r2, [r3, #28]
      break;
 80076a6:	e043      	b.n	8007730 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	68b9      	ldr	r1, [r7, #8]
 80076ae:	4618      	mov	r0, r3
 80076b0:	f000 fb4e 	bl	8007d50 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f042 0208 	orr.w	r2, r2, #8
 80076c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f022 0204 	bic.w	r2, r2, #4
 80076d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	691a      	ldr	r2, [r3, #16]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	430a      	orrs	r2, r1
 80076e4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80076e6:	e023      	b.n	8007730 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	68b9      	ldr	r1, [r7, #8]
 80076ee:	4618      	mov	r0, r3
 80076f0:	f000 fb80 	bl	8007df4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007702:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007712:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	021a      	lsls	r2, r3, #8
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	430a      	orrs	r2, r1
 8007726:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007728:	e002      	b.n	8007730 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	75fb      	strb	r3, [r7, #23]
      break;
 800772e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2200      	movs	r2, #0
 8007734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007738:	7dfb      	ldrb	r3, [r7, #23]
}
 800773a:	4618      	mov	r0, r3
 800773c:	3718      	adds	r7, #24
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop

08007744 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007754:	2b01      	cmp	r3, #1
 8007756:	d101      	bne.n	800775c <HAL_TIM_SlaveConfigSynchro+0x18>
 8007758:	2302      	movs	r3, #2
 800775a:	e031      	b.n	80077c0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2202      	movs	r2, #2
 8007768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800776c:	6839      	ldr	r1, [r7, #0]
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 fb94 	bl	8007e9c <TIM_SlaveTimer_SetConfig>
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d009      	beq.n	800778e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2201      	movs	r2, #1
 800777e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	e018      	b.n	80077c0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	68da      	ldr	r2, [r3, #12]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800779c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68da      	ldr	r2, [r3, #12]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80077ac:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2201      	movs	r2, #1
 80077b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3708      	adds	r7, #8
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b085      	sub	sp, #20
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80077d2:	2300      	movs	r3, #0
 80077d4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	2b0c      	cmp	r3, #12
 80077da:	d831      	bhi.n	8007840 <HAL_TIM_ReadCapturedValue+0x78>
 80077dc:	a201      	add	r2, pc, #4	; (adr r2, 80077e4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80077de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e2:	bf00      	nop
 80077e4:	08007819 	.word	0x08007819
 80077e8:	08007841 	.word	0x08007841
 80077ec:	08007841 	.word	0x08007841
 80077f0:	08007841 	.word	0x08007841
 80077f4:	08007823 	.word	0x08007823
 80077f8:	08007841 	.word	0x08007841
 80077fc:	08007841 	.word	0x08007841
 8007800:	08007841 	.word	0x08007841
 8007804:	0800782d 	.word	0x0800782d
 8007808:	08007841 	.word	0x08007841
 800780c:	08007841 	.word	0x08007841
 8007810:	08007841 	.word	0x08007841
 8007814:	08007837 	.word	0x08007837
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800781e:	60fb      	str	r3, [r7, #12]

      break;
 8007820:	e00f      	b.n	8007842 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007828:	60fb      	str	r3, [r7, #12]

      break;
 800782a:	e00a      	b.n	8007842 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007832:	60fb      	str	r3, [r7, #12]

      break;
 8007834:	e005      	b.n	8007842 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800783c:	60fb      	str	r3, [r7, #12]

      break;
 800783e:	e000      	b.n	8007842 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007840:	bf00      	nop
  }

  return tmpreg;
 8007842:	68fb      	ldr	r3, [r7, #12]
}
 8007844:	4618      	mov	r0, r3
 8007846:	3714      	adds	r7, #20
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007850:	b480      	push	{r7}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007858:	bf00      	nop
 800785a:	370c      	adds	r7, #12
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800786c:	bf00      	nop
 800786e:	370c      	adds	r7, #12
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007880:	bf00      	nop
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007894:	bf00      	nop
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b085      	sub	sp, #20
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a40      	ldr	r2, [pc, #256]	; (80079b4 <TIM_Base_SetConfig+0x114>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d013      	beq.n	80078e0 <TIM_Base_SetConfig+0x40>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078be:	d00f      	beq.n	80078e0 <TIM_Base_SetConfig+0x40>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4a3d      	ldr	r2, [pc, #244]	; (80079b8 <TIM_Base_SetConfig+0x118>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d00b      	beq.n	80078e0 <TIM_Base_SetConfig+0x40>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4a3c      	ldr	r2, [pc, #240]	; (80079bc <TIM_Base_SetConfig+0x11c>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d007      	beq.n	80078e0 <TIM_Base_SetConfig+0x40>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4a3b      	ldr	r2, [pc, #236]	; (80079c0 <TIM_Base_SetConfig+0x120>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d003      	beq.n	80078e0 <TIM_Base_SetConfig+0x40>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4a3a      	ldr	r2, [pc, #232]	; (80079c4 <TIM_Base_SetConfig+0x124>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d108      	bne.n	80078f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	68fa      	ldr	r2, [r7, #12]
 80078ee:	4313      	orrs	r3, r2
 80078f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a2f      	ldr	r2, [pc, #188]	; (80079b4 <TIM_Base_SetConfig+0x114>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d02b      	beq.n	8007952 <TIM_Base_SetConfig+0xb2>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007900:	d027      	beq.n	8007952 <TIM_Base_SetConfig+0xb2>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a2c      	ldr	r2, [pc, #176]	; (80079b8 <TIM_Base_SetConfig+0x118>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d023      	beq.n	8007952 <TIM_Base_SetConfig+0xb2>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4a2b      	ldr	r2, [pc, #172]	; (80079bc <TIM_Base_SetConfig+0x11c>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d01f      	beq.n	8007952 <TIM_Base_SetConfig+0xb2>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4a2a      	ldr	r2, [pc, #168]	; (80079c0 <TIM_Base_SetConfig+0x120>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d01b      	beq.n	8007952 <TIM_Base_SetConfig+0xb2>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4a29      	ldr	r2, [pc, #164]	; (80079c4 <TIM_Base_SetConfig+0x124>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d017      	beq.n	8007952 <TIM_Base_SetConfig+0xb2>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4a28      	ldr	r2, [pc, #160]	; (80079c8 <TIM_Base_SetConfig+0x128>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d013      	beq.n	8007952 <TIM_Base_SetConfig+0xb2>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a27      	ldr	r2, [pc, #156]	; (80079cc <TIM_Base_SetConfig+0x12c>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d00f      	beq.n	8007952 <TIM_Base_SetConfig+0xb2>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4a26      	ldr	r2, [pc, #152]	; (80079d0 <TIM_Base_SetConfig+0x130>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d00b      	beq.n	8007952 <TIM_Base_SetConfig+0xb2>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a25      	ldr	r2, [pc, #148]	; (80079d4 <TIM_Base_SetConfig+0x134>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d007      	beq.n	8007952 <TIM_Base_SetConfig+0xb2>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a24      	ldr	r2, [pc, #144]	; (80079d8 <TIM_Base_SetConfig+0x138>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d003      	beq.n	8007952 <TIM_Base_SetConfig+0xb2>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4a23      	ldr	r2, [pc, #140]	; (80079dc <TIM_Base_SetConfig+0x13c>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d108      	bne.n	8007964 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007958:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	68fa      	ldr	r2, [r7, #12]
 8007960:	4313      	orrs	r3, r2
 8007962:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	695b      	ldr	r3, [r3, #20]
 800796e:	4313      	orrs	r3, r2
 8007970:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	689a      	ldr	r2, [r3, #8]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	4a0a      	ldr	r2, [pc, #40]	; (80079b4 <TIM_Base_SetConfig+0x114>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d003      	beq.n	8007998 <TIM_Base_SetConfig+0xf8>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4a0c      	ldr	r2, [pc, #48]	; (80079c4 <TIM_Base_SetConfig+0x124>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d103      	bne.n	80079a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	691a      	ldr	r2, [r3, #16]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	615a      	str	r2, [r3, #20]
}
 80079a6:	bf00      	nop
 80079a8:	3714      	adds	r7, #20
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr
 80079b2:	bf00      	nop
 80079b4:	40010000 	.word	0x40010000
 80079b8:	40000400 	.word	0x40000400
 80079bc:	40000800 	.word	0x40000800
 80079c0:	40000c00 	.word	0x40000c00
 80079c4:	40010400 	.word	0x40010400
 80079c8:	40014000 	.word	0x40014000
 80079cc:	40014400 	.word	0x40014400
 80079d0:	40014800 	.word	0x40014800
 80079d4:	40001800 	.word	0x40001800
 80079d8:	40001c00 	.word	0x40001c00
 80079dc:	40002000 	.word	0x40002000

080079e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b087      	sub	sp, #28
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a1b      	ldr	r3, [r3, #32]
 80079ee:	f023 0201 	bic.w	r2, r3, #1
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6a1b      	ldr	r3, [r3, #32]
 80079fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	699b      	ldr	r3, [r3, #24]
 8007a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a08:	68fa      	ldr	r2, [r7, #12]
 8007a0a:	4b2b      	ldr	r3, [pc, #172]	; (8007ab8 <TIM_OC1_SetConfig+0xd8>)
 8007a0c:	4013      	ands	r3, r2
 8007a0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f023 0303 	bic.w	r3, r3, #3
 8007a16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	68fa      	ldr	r2, [r7, #12]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	f023 0302 	bic.w	r3, r3, #2
 8007a28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	697a      	ldr	r2, [r7, #20]
 8007a30:	4313      	orrs	r3, r2
 8007a32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4a21      	ldr	r2, [pc, #132]	; (8007abc <TIM_OC1_SetConfig+0xdc>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d003      	beq.n	8007a44 <TIM_OC1_SetConfig+0x64>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4a20      	ldr	r2, [pc, #128]	; (8007ac0 <TIM_OC1_SetConfig+0xe0>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d10c      	bne.n	8007a5e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	f023 0308 	bic.w	r3, r3, #8
 8007a4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	68db      	ldr	r3, [r3, #12]
 8007a50:	697a      	ldr	r2, [r7, #20]
 8007a52:	4313      	orrs	r3, r2
 8007a54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	f023 0304 	bic.w	r3, r3, #4
 8007a5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a16      	ldr	r2, [pc, #88]	; (8007abc <TIM_OC1_SetConfig+0xdc>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d003      	beq.n	8007a6e <TIM_OC1_SetConfig+0x8e>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a15      	ldr	r2, [pc, #84]	; (8007ac0 <TIM_OC1_SetConfig+0xe0>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d111      	bne.n	8007a92 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	695b      	ldr	r3, [r3, #20]
 8007a82:	693a      	ldr	r2, [r7, #16]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	699b      	ldr	r3, [r3, #24]
 8007a8c:	693a      	ldr	r2, [r7, #16]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	693a      	ldr	r2, [r7, #16]
 8007a96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	68fa      	ldr	r2, [r7, #12]
 8007a9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	685a      	ldr	r2, [r3, #4]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	697a      	ldr	r2, [r7, #20]
 8007aaa:	621a      	str	r2, [r3, #32]
}
 8007aac:	bf00      	nop
 8007aae:	371c      	adds	r7, #28
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr
 8007ab8:	fffeff8f 	.word	0xfffeff8f
 8007abc:	40010000 	.word	0x40010000
 8007ac0:	40010400 	.word	0x40010400

08007ac4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b087      	sub	sp, #28
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a1b      	ldr	r3, [r3, #32]
 8007ad2:	f023 0210 	bic.w	r2, r3, #16
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a1b      	ldr	r3, [r3, #32]
 8007ade:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	699b      	ldr	r3, [r3, #24]
 8007aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007aec:	68fa      	ldr	r2, [r7, #12]
 8007aee:	4b2e      	ldr	r3, [pc, #184]	; (8007ba8 <TIM_OC2_SetConfig+0xe4>)
 8007af0:	4013      	ands	r3, r2
 8007af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007afa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	021b      	lsls	r3, r3, #8
 8007b02:	68fa      	ldr	r2, [r7, #12]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	f023 0320 	bic.w	r3, r3, #32
 8007b0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	011b      	lsls	r3, r3, #4
 8007b16:	697a      	ldr	r2, [r7, #20]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4a23      	ldr	r2, [pc, #140]	; (8007bac <TIM_OC2_SetConfig+0xe8>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d003      	beq.n	8007b2c <TIM_OC2_SetConfig+0x68>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4a22      	ldr	r2, [pc, #136]	; (8007bb0 <TIM_OC2_SetConfig+0xec>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d10d      	bne.n	8007b48 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	011b      	lsls	r3, r3, #4
 8007b3a:	697a      	ldr	r2, [r7, #20]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4a18      	ldr	r2, [pc, #96]	; (8007bac <TIM_OC2_SetConfig+0xe8>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d003      	beq.n	8007b58 <TIM_OC2_SetConfig+0x94>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	4a17      	ldr	r2, [pc, #92]	; (8007bb0 <TIM_OC2_SetConfig+0xec>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d113      	bne.n	8007b80 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	695b      	ldr	r3, [r3, #20]
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	693a      	ldr	r2, [r7, #16]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	699b      	ldr	r3, [r3, #24]
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	693a      	ldr	r2, [r7, #16]
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	693a      	ldr	r2, [r7, #16]
 8007b84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	68fa      	ldr	r2, [r7, #12]
 8007b8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	685a      	ldr	r2, [r3, #4]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	697a      	ldr	r2, [r7, #20]
 8007b98:	621a      	str	r2, [r3, #32]
}
 8007b9a:	bf00      	nop
 8007b9c:	371c      	adds	r7, #28
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr
 8007ba6:	bf00      	nop
 8007ba8:	feff8fff 	.word	0xfeff8fff
 8007bac:	40010000 	.word	0x40010000
 8007bb0:	40010400 	.word	0x40010400

08007bb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b087      	sub	sp, #28
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6a1b      	ldr	r3, [r3, #32]
 8007bc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a1b      	ldr	r3, [r3, #32]
 8007bce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	69db      	ldr	r3, [r3, #28]
 8007bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	4b2d      	ldr	r3, [pc, #180]	; (8007c94 <TIM_OC3_SetConfig+0xe0>)
 8007be0:	4013      	ands	r3, r2
 8007be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f023 0303 	bic.w	r3, r3, #3
 8007bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	68fa      	ldr	r2, [r7, #12]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007bfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	021b      	lsls	r3, r3, #8
 8007c04:	697a      	ldr	r2, [r7, #20]
 8007c06:	4313      	orrs	r3, r2
 8007c08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4a22      	ldr	r2, [pc, #136]	; (8007c98 <TIM_OC3_SetConfig+0xe4>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d003      	beq.n	8007c1a <TIM_OC3_SetConfig+0x66>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a21      	ldr	r2, [pc, #132]	; (8007c9c <TIM_OC3_SetConfig+0xe8>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d10d      	bne.n	8007c36 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	021b      	lsls	r3, r3, #8
 8007c28:	697a      	ldr	r2, [r7, #20]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4a17      	ldr	r2, [pc, #92]	; (8007c98 <TIM_OC3_SetConfig+0xe4>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d003      	beq.n	8007c46 <TIM_OC3_SetConfig+0x92>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4a16      	ldr	r2, [pc, #88]	; (8007c9c <TIM_OC3_SetConfig+0xe8>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d113      	bne.n	8007c6e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	695b      	ldr	r3, [r3, #20]
 8007c5a:	011b      	lsls	r3, r3, #4
 8007c5c:	693a      	ldr	r2, [r7, #16]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	699b      	ldr	r3, [r3, #24]
 8007c66:	011b      	lsls	r3, r3, #4
 8007c68:	693a      	ldr	r2, [r7, #16]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	693a      	ldr	r2, [r7, #16]
 8007c72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	685a      	ldr	r2, [r3, #4]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	697a      	ldr	r2, [r7, #20]
 8007c86:	621a      	str	r2, [r3, #32]
}
 8007c88:	bf00      	nop
 8007c8a:	371c      	adds	r7, #28
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr
 8007c94:	fffeff8f 	.word	0xfffeff8f
 8007c98:	40010000 	.word	0x40010000
 8007c9c:	40010400 	.word	0x40010400

08007ca0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b087      	sub	sp, #28
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6a1b      	ldr	r3, [r3, #32]
 8007cae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a1b      	ldr	r3, [r3, #32]
 8007cba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	69db      	ldr	r3, [r3, #28]
 8007cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007cc8:	68fa      	ldr	r2, [r7, #12]
 8007cca:	4b1e      	ldr	r3, [pc, #120]	; (8007d44 <TIM_OC4_SetConfig+0xa4>)
 8007ccc:	4013      	ands	r3, r2
 8007cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	021b      	lsls	r3, r3, #8
 8007cde:	68fa      	ldr	r2, [r7, #12]
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007cea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	031b      	lsls	r3, r3, #12
 8007cf2:	693a      	ldr	r2, [r7, #16]
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a13      	ldr	r2, [pc, #76]	; (8007d48 <TIM_OC4_SetConfig+0xa8>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d003      	beq.n	8007d08 <TIM_OC4_SetConfig+0x68>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	4a12      	ldr	r2, [pc, #72]	; (8007d4c <TIM_OC4_SetConfig+0xac>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d109      	bne.n	8007d1c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	695b      	ldr	r3, [r3, #20]
 8007d14:	019b      	lsls	r3, r3, #6
 8007d16:	697a      	ldr	r2, [r7, #20]
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	697a      	ldr	r2, [r7, #20]
 8007d20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	685a      	ldr	r2, [r3, #4]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	693a      	ldr	r2, [r7, #16]
 8007d34:	621a      	str	r2, [r3, #32]
}
 8007d36:	bf00      	nop
 8007d38:	371c      	adds	r7, #28
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr
 8007d42:	bf00      	nop
 8007d44:	feff8fff 	.word	0xfeff8fff
 8007d48:	40010000 	.word	0x40010000
 8007d4c:	40010400 	.word	0x40010400

08007d50 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b087      	sub	sp, #28
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6a1b      	ldr	r3, [r3, #32]
 8007d5e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6a1b      	ldr	r3, [r3, #32]
 8007d6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007d78:	68fa      	ldr	r2, [r7, #12]
 8007d7a:	4b1b      	ldr	r3, [pc, #108]	; (8007de8 <TIM_OC5_SetConfig+0x98>)
 8007d7c:	4013      	ands	r3, r2
 8007d7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68fa      	ldr	r2, [r7, #12]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007d90:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	041b      	lsls	r3, r3, #16
 8007d98:	693a      	ldr	r2, [r7, #16]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4a12      	ldr	r2, [pc, #72]	; (8007dec <TIM_OC5_SetConfig+0x9c>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d003      	beq.n	8007dae <TIM_OC5_SetConfig+0x5e>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4a11      	ldr	r2, [pc, #68]	; (8007df0 <TIM_OC5_SetConfig+0xa0>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d109      	bne.n	8007dc2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007db4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	695b      	ldr	r3, [r3, #20]
 8007dba:	021b      	lsls	r3, r3, #8
 8007dbc:	697a      	ldr	r2, [r7, #20]
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	697a      	ldr	r2, [r7, #20]
 8007dc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	68fa      	ldr	r2, [r7, #12]
 8007dcc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	685a      	ldr	r2, [r3, #4]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	693a      	ldr	r2, [r7, #16]
 8007dda:	621a      	str	r2, [r3, #32]
}
 8007ddc:	bf00      	nop
 8007dde:	371c      	adds	r7, #28
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr
 8007de8:	fffeff8f 	.word	0xfffeff8f
 8007dec:	40010000 	.word	0x40010000
 8007df0:	40010400 	.word	0x40010400

08007df4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b087      	sub	sp, #28
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6a1b      	ldr	r3, [r3, #32]
 8007e02:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6a1b      	ldr	r3, [r3, #32]
 8007e0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007e1c:	68fa      	ldr	r2, [r7, #12]
 8007e1e:	4b1c      	ldr	r3, [pc, #112]	; (8007e90 <TIM_OC6_SetConfig+0x9c>)
 8007e20:	4013      	ands	r3, r2
 8007e22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	021b      	lsls	r3, r3, #8
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007e36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	051b      	lsls	r3, r3, #20
 8007e3e:	693a      	ldr	r2, [r7, #16]
 8007e40:	4313      	orrs	r3, r2
 8007e42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	4a13      	ldr	r2, [pc, #76]	; (8007e94 <TIM_OC6_SetConfig+0xa0>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d003      	beq.n	8007e54 <TIM_OC6_SetConfig+0x60>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	4a12      	ldr	r2, [pc, #72]	; (8007e98 <TIM_OC6_SetConfig+0xa4>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d109      	bne.n	8007e68 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e5a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	695b      	ldr	r3, [r3, #20]
 8007e60:	029b      	lsls	r3, r3, #10
 8007e62:	697a      	ldr	r2, [r7, #20]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	697a      	ldr	r2, [r7, #20]
 8007e6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	68fa      	ldr	r2, [r7, #12]
 8007e72:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	685a      	ldr	r2, [r3, #4]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	693a      	ldr	r2, [r7, #16]
 8007e80:	621a      	str	r2, [r3, #32]
}
 8007e82:	bf00      	nop
 8007e84:	371c      	adds	r7, #28
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr
 8007e8e:	bf00      	nop
 8007e90:	feff8fff 	.word	0xfeff8fff
 8007e94:	40010000 	.word	0x40010000
 8007e98:	40010400 	.word	0x40010400

08007e9c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b086      	sub	sp, #24
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eb8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	693a      	ldr	r2, [r7, #16]
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007ec4:	693a      	ldr	r2, [r7, #16]
 8007ec6:	4b3e      	ldr	r3, [pc, #248]	; (8007fc0 <TIM_SlaveTimer_SetConfig+0x124>)
 8007ec8:	4013      	ands	r3, r2
 8007eca:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	693a      	ldr	r2, [r7, #16]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	693a      	ldr	r2, [r7, #16]
 8007edc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	2b70      	cmp	r3, #112	; 0x70
 8007ee4:	d01a      	beq.n	8007f1c <TIM_SlaveTimer_SetConfig+0x80>
 8007ee6:	2b70      	cmp	r3, #112	; 0x70
 8007ee8:	d860      	bhi.n	8007fac <TIM_SlaveTimer_SetConfig+0x110>
 8007eea:	2b60      	cmp	r3, #96	; 0x60
 8007eec:	d054      	beq.n	8007f98 <TIM_SlaveTimer_SetConfig+0xfc>
 8007eee:	2b60      	cmp	r3, #96	; 0x60
 8007ef0:	d85c      	bhi.n	8007fac <TIM_SlaveTimer_SetConfig+0x110>
 8007ef2:	2b50      	cmp	r3, #80	; 0x50
 8007ef4:	d046      	beq.n	8007f84 <TIM_SlaveTimer_SetConfig+0xe8>
 8007ef6:	2b50      	cmp	r3, #80	; 0x50
 8007ef8:	d858      	bhi.n	8007fac <TIM_SlaveTimer_SetConfig+0x110>
 8007efa:	2b40      	cmp	r3, #64	; 0x40
 8007efc:	d019      	beq.n	8007f32 <TIM_SlaveTimer_SetConfig+0x96>
 8007efe:	2b40      	cmp	r3, #64	; 0x40
 8007f00:	d854      	bhi.n	8007fac <TIM_SlaveTimer_SetConfig+0x110>
 8007f02:	2b30      	cmp	r3, #48	; 0x30
 8007f04:	d055      	beq.n	8007fb2 <TIM_SlaveTimer_SetConfig+0x116>
 8007f06:	2b30      	cmp	r3, #48	; 0x30
 8007f08:	d850      	bhi.n	8007fac <TIM_SlaveTimer_SetConfig+0x110>
 8007f0a:	2b20      	cmp	r3, #32
 8007f0c:	d051      	beq.n	8007fb2 <TIM_SlaveTimer_SetConfig+0x116>
 8007f0e:	2b20      	cmp	r3, #32
 8007f10:	d84c      	bhi.n	8007fac <TIM_SlaveTimer_SetConfig+0x110>
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d04d      	beq.n	8007fb2 <TIM_SlaveTimer_SetConfig+0x116>
 8007f16:	2b10      	cmp	r3, #16
 8007f18:	d04b      	beq.n	8007fb2 <TIM_SlaveTimer_SetConfig+0x116>
 8007f1a:	e047      	b.n	8007fac <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6818      	ldr	r0, [r3, #0]
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	68d9      	ldr	r1, [r3, #12]
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	689a      	ldr	r2, [r3, #8]
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	691b      	ldr	r3, [r3, #16]
 8007f2c:	f000 f9d3 	bl	80082d6 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8007f30:	e040      	b.n	8007fb4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	2b05      	cmp	r3, #5
 8007f38:	d101      	bne.n	8007f3e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e03b      	b.n	8007fb6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	6a1b      	ldr	r3, [r3, #32]
 8007f44:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	6a1a      	ldr	r2, [r3, #32]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f022 0201 	bic.w	r2, r2, #1
 8007f54:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	699b      	ldr	r3, [r3, #24]
 8007f5c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f64:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	691b      	ldr	r3, [r3, #16]
 8007f6a:	011b      	lsls	r3, r3, #4
 8007f6c:	68ba      	ldr	r2, [r7, #8]
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	68ba      	ldr	r2, [r7, #8]
 8007f78:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	68fa      	ldr	r2, [r7, #12]
 8007f80:	621a      	str	r2, [r3, #32]
      break;
 8007f82:	e017      	b.n	8007fb4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6818      	ldr	r0, [r3, #0]
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	6899      	ldr	r1, [r3, #8]
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	691b      	ldr	r3, [r3, #16]
 8007f90:	461a      	mov	r2, r3
 8007f92:	f000 f88b 	bl	80080ac <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007f96:	e00d      	b.n	8007fb4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6818      	ldr	r0, [r3, #0]
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	6899      	ldr	r1, [r3, #8]
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	691b      	ldr	r3, [r3, #16]
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	f000 f8ed 	bl	8008184 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007faa:	e003      	b.n	8007fb4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	75fb      	strb	r3, [r7, #23]
      break;
 8007fb0:	e000      	b.n	8007fb4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8007fb2:	bf00      	nop
  }

  return status;
 8007fb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3718      	adds	r7, #24
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	fffefff8 	.word	0xfffefff8

08007fc4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b087      	sub	sp, #28
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	607a      	str	r2, [r7, #4]
 8007fd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6a1b      	ldr	r3, [r3, #32]
 8007fd6:	f023 0201 	bic.w	r2, r3, #1
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	699b      	ldr	r3, [r3, #24]
 8007fe2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6a1b      	ldr	r3, [r3, #32]
 8007fe8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	4a28      	ldr	r2, [pc, #160]	; (8008090 <TIM_TI1_SetConfig+0xcc>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d01b      	beq.n	800802a <TIM_TI1_SetConfig+0x66>
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ff8:	d017      	beq.n	800802a <TIM_TI1_SetConfig+0x66>
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	4a25      	ldr	r2, [pc, #148]	; (8008094 <TIM_TI1_SetConfig+0xd0>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d013      	beq.n	800802a <TIM_TI1_SetConfig+0x66>
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	4a24      	ldr	r2, [pc, #144]	; (8008098 <TIM_TI1_SetConfig+0xd4>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d00f      	beq.n	800802a <TIM_TI1_SetConfig+0x66>
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	4a23      	ldr	r2, [pc, #140]	; (800809c <TIM_TI1_SetConfig+0xd8>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d00b      	beq.n	800802a <TIM_TI1_SetConfig+0x66>
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	4a22      	ldr	r2, [pc, #136]	; (80080a0 <TIM_TI1_SetConfig+0xdc>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d007      	beq.n	800802a <TIM_TI1_SetConfig+0x66>
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	4a21      	ldr	r2, [pc, #132]	; (80080a4 <TIM_TI1_SetConfig+0xe0>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d003      	beq.n	800802a <TIM_TI1_SetConfig+0x66>
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	4a20      	ldr	r2, [pc, #128]	; (80080a8 <TIM_TI1_SetConfig+0xe4>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d101      	bne.n	800802e <TIM_TI1_SetConfig+0x6a>
 800802a:	2301      	movs	r3, #1
 800802c:	e000      	b.n	8008030 <TIM_TI1_SetConfig+0x6c>
 800802e:	2300      	movs	r3, #0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d008      	beq.n	8008046 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	f023 0303 	bic.w	r3, r3, #3
 800803a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800803c:	697a      	ldr	r2, [r7, #20]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	4313      	orrs	r3, r2
 8008042:	617b      	str	r3, [r7, #20]
 8008044:	e003      	b.n	800804e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	f043 0301 	orr.w	r3, r3, #1
 800804c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008054:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	011b      	lsls	r3, r3, #4
 800805a:	b2db      	uxtb	r3, r3
 800805c:	697a      	ldr	r2, [r7, #20]
 800805e:	4313      	orrs	r3, r2
 8008060:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	f023 030a 	bic.w	r3, r3, #10
 8008068:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	f003 030a 	and.w	r3, r3, #10
 8008070:	693a      	ldr	r2, [r7, #16]
 8008072:	4313      	orrs	r3, r2
 8008074:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	697a      	ldr	r2, [r7, #20]
 800807a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	693a      	ldr	r2, [r7, #16]
 8008080:	621a      	str	r2, [r3, #32]
}
 8008082:	bf00      	nop
 8008084:	371c      	adds	r7, #28
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	40010000 	.word	0x40010000
 8008094:	40000400 	.word	0x40000400
 8008098:	40000800 	.word	0x40000800
 800809c:	40000c00 	.word	0x40000c00
 80080a0:	40010400 	.word	0x40010400
 80080a4:	40014000 	.word	0x40014000
 80080a8:	40001800 	.word	0x40001800

080080ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b087      	sub	sp, #28
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6a1b      	ldr	r3, [r3, #32]
 80080bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	6a1b      	ldr	r3, [r3, #32]
 80080c2:	f023 0201 	bic.w	r2, r3, #1
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	699b      	ldr	r3, [r3, #24]
 80080ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80080d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	011b      	lsls	r3, r3, #4
 80080dc:	693a      	ldr	r2, [r7, #16]
 80080de:	4313      	orrs	r3, r2
 80080e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	f023 030a 	bic.w	r3, r3, #10
 80080e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80080ea:	697a      	ldr	r2, [r7, #20]
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	693a      	ldr	r2, [r7, #16]
 80080f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	697a      	ldr	r2, [r7, #20]
 80080fc:	621a      	str	r2, [r3, #32]
}
 80080fe:	bf00      	nop
 8008100:	371c      	adds	r7, #28
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr

0800810a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800810a:	b480      	push	{r7}
 800810c:	b087      	sub	sp, #28
 800810e:	af00      	add	r7, sp, #0
 8008110:	60f8      	str	r0, [r7, #12]
 8008112:	60b9      	str	r1, [r7, #8]
 8008114:	607a      	str	r2, [r7, #4]
 8008116:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	6a1b      	ldr	r3, [r3, #32]
 800811c:	f023 0210 	bic.w	r2, r3, #16
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	699b      	ldr	r3, [r3, #24]
 8008128:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	6a1b      	ldr	r3, [r3, #32]
 800812e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008136:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	021b      	lsls	r3, r3, #8
 800813c:	697a      	ldr	r2, [r7, #20]
 800813e:	4313      	orrs	r3, r2
 8008140:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008148:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	031b      	lsls	r3, r3, #12
 800814e:	b29b      	uxth	r3, r3
 8008150:	697a      	ldr	r2, [r7, #20]
 8008152:	4313      	orrs	r3, r2
 8008154:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800815c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	011b      	lsls	r3, r3, #4
 8008162:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008166:	693a      	ldr	r2, [r7, #16]
 8008168:	4313      	orrs	r3, r2
 800816a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	697a      	ldr	r2, [r7, #20]
 8008170:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	693a      	ldr	r2, [r7, #16]
 8008176:	621a      	str	r2, [r3, #32]
}
 8008178:	bf00      	nop
 800817a:	371c      	adds	r7, #28
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008184:	b480      	push	{r7}
 8008186:	b087      	sub	sp, #28
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6a1b      	ldr	r3, [r3, #32]
 8008194:	f023 0210 	bic.w	r2, r3, #16
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	699b      	ldr	r3, [r3, #24]
 80081a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	6a1b      	ldr	r3, [r3, #32]
 80081a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80081ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	031b      	lsls	r3, r3, #12
 80081b4:	697a      	ldr	r2, [r7, #20]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80081c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	011b      	lsls	r3, r3, #4
 80081c6:	693a      	ldr	r2, [r7, #16]
 80081c8:	4313      	orrs	r3, r2
 80081ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	697a      	ldr	r2, [r7, #20]
 80081d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	693a      	ldr	r2, [r7, #16]
 80081d6:	621a      	str	r2, [r3, #32]
}
 80081d8:	bf00      	nop
 80081da:	371c      	adds	r7, #28
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b087      	sub	sp, #28
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	607a      	str	r2, [r7, #4]
 80081f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	6a1b      	ldr	r3, [r3, #32]
 80081f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	69db      	ldr	r3, [r3, #28]
 8008202:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6a1b      	ldr	r3, [r3, #32]
 8008208:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	f023 0303 	bic.w	r3, r3, #3
 8008210:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008212:	697a      	ldr	r2, [r7, #20]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4313      	orrs	r3, r2
 8008218:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008220:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	011b      	lsls	r3, r3, #4
 8008226:	b2db      	uxtb	r3, r3
 8008228:	697a      	ldr	r2, [r7, #20]
 800822a:	4313      	orrs	r3, r2
 800822c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008234:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	021b      	lsls	r3, r3, #8
 800823a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800823e:	693a      	ldr	r2, [r7, #16]
 8008240:	4313      	orrs	r3, r2
 8008242:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	697a      	ldr	r2, [r7, #20]
 8008248:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	693a      	ldr	r2, [r7, #16]
 800824e:	621a      	str	r2, [r3, #32]
}
 8008250:	bf00      	nop
 8008252:	371c      	adds	r7, #28
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800825c:	b480      	push	{r7}
 800825e:	b087      	sub	sp, #28
 8008260:	af00      	add	r7, sp, #0
 8008262:	60f8      	str	r0, [r7, #12]
 8008264:	60b9      	str	r1, [r7, #8]
 8008266:	607a      	str	r2, [r7, #4]
 8008268:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	6a1b      	ldr	r3, [r3, #32]
 800826e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	69db      	ldr	r3, [r3, #28]
 800827a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6a1b      	ldr	r3, [r3, #32]
 8008280:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008288:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	021b      	lsls	r3, r3, #8
 800828e:	697a      	ldr	r2, [r7, #20]
 8008290:	4313      	orrs	r3, r2
 8008292:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800829a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	031b      	lsls	r3, r3, #12
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	697a      	ldr	r2, [r7, #20]
 80082a4:	4313      	orrs	r3, r2
 80082a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80082ae:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	031b      	lsls	r3, r3, #12
 80082b4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80082b8:	693a      	ldr	r2, [r7, #16]
 80082ba:	4313      	orrs	r3, r2
 80082bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	697a      	ldr	r2, [r7, #20]
 80082c2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	693a      	ldr	r2, [r7, #16]
 80082c8:	621a      	str	r2, [r3, #32]
}
 80082ca:	bf00      	nop
 80082cc:	371c      	adds	r7, #28
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr

080082d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80082d6:	b480      	push	{r7}
 80082d8:	b087      	sub	sp, #28
 80082da:	af00      	add	r7, sp, #0
 80082dc:	60f8      	str	r0, [r7, #12]
 80082de:	60b9      	str	r1, [r7, #8]
 80082e0:	607a      	str	r2, [r7, #4]
 80082e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80082f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	021a      	lsls	r2, r3, #8
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	431a      	orrs	r2, r3
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	4313      	orrs	r3, r2
 80082fe:	697a      	ldr	r2, [r7, #20]
 8008300:	4313      	orrs	r3, r2
 8008302:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	697a      	ldr	r2, [r7, #20]
 8008308:	609a      	str	r2, [r3, #8]
}
 800830a:	bf00      	nop
 800830c:	371c      	adds	r7, #28
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr

08008316 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008316:	b480      	push	{r7}
 8008318:	b087      	sub	sp, #28
 800831a:	af00      	add	r7, sp, #0
 800831c:	60f8      	str	r0, [r7, #12]
 800831e:	60b9      	str	r1, [r7, #8]
 8008320:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	f003 031f 	and.w	r3, r3, #31
 8008328:	2201      	movs	r2, #1
 800832a:	fa02 f303 	lsl.w	r3, r2, r3
 800832e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6a1a      	ldr	r2, [r3, #32]
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	43db      	mvns	r3, r3
 8008338:	401a      	ands	r2, r3
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	6a1a      	ldr	r2, [r3, #32]
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	f003 031f 	and.w	r3, r3, #31
 8008348:	6879      	ldr	r1, [r7, #4]
 800834a:	fa01 f303 	lsl.w	r3, r1, r3
 800834e:	431a      	orrs	r2, r3
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	621a      	str	r2, [r3, #32]
}
 8008354:	bf00      	nop
 8008356:	371c      	adds	r7, #28
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008360:	b480      	push	{r7}
 8008362:	b085      	sub	sp, #20
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008370:	2b01      	cmp	r3, #1
 8008372:	d101      	bne.n	8008378 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008374:	2302      	movs	r3, #2
 8008376:	e06d      	b.n	8008454 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2202      	movs	r2, #2
 8008384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a30      	ldr	r2, [pc, #192]	; (8008460 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d004      	beq.n	80083ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a2f      	ldr	r2, [pc, #188]	; (8008464 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d108      	bne.n	80083be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80083b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	68fa      	ldr	r2, [r7, #12]
 80083ba:	4313      	orrs	r3, r2
 80083bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	68fa      	ldr	r2, [r7, #12]
 80083cc:	4313      	orrs	r3, r2
 80083ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	68fa      	ldr	r2, [r7, #12]
 80083d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a20      	ldr	r2, [pc, #128]	; (8008460 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d022      	beq.n	8008428 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083ea:	d01d      	beq.n	8008428 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a1d      	ldr	r2, [pc, #116]	; (8008468 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d018      	beq.n	8008428 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a1c      	ldr	r2, [pc, #112]	; (800846c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d013      	beq.n	8008428 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a1a      	ldr	r2, [pc, #104]	; (8008470 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d00e      	beq.n	8008428 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a15      	ldr	r2, [pc, #84]	; (8008464 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d009      	beq.n	8008428 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a16      	ldr	r2, [pc, #88]	; (8008474 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d004      	beq.n	8008428 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a15      	ldr	r2, [pc, #84]	; (8008478 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d10c      	bne.n	8008442 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800842e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	68ba      	ldr	r2, [r7, #8]
 8008436:	4313      	orrs	r3, r2
 8008438:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	68ba      	ldr	r2, [r7, #8]
 8008440:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2201      	movs	r2, #1
 8008446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2200      	movs	r2, #0
 800844e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008452:	2300      	movs	r3, #0
}
 8008454:	4618      	mov	r0, r3
 8008456:	3714      	adds	r7, #20
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr
 8008460:	40010000 	.word	0x40010000
 8008464:	40010400 	.word	0x40010400
 8008468:	40000400 	.word	0x40000400
 800846c:	40000800 	.word	0x40000800
 8008470:	40000c00 	.word	0x40000c00
 8008474:	40014000 	.word	0x40014000
 8008478:	40001800 	.word	0x40001800

0800847c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008484:	bf00      	nop
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008498:	bf00      	nop
 800849a:	370c      	adds	r7, #12
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr

080084a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80084ac:	bf00      	nop
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d101      	bne.n	80084ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	e040      	b.n	800854c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d106      	bne.n	80084e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2200      	movs	r2, #0
 80084d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f7fb f8b6 	bl	800364c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2224      	movs	r2, #36	; 0x24
 80084e4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f022 0201 	bic.w	r2, r2, #1
 80084f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 f8c0 	bl	800867c <UART_SetConfig>
 80084fc:	4603      	mov	r3, r0
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d101      	bne.n	8008506 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008502:	2301      	movs	r3, #1
 8008504:	e022      	b.n	800854c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800850a:	2b00      	cmp	r3, #0
 800850c:	d002      	beq.n	8008514 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 fb18 	bl	8008b44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	685a      	ldr	r2, [r3, #4]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008522:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	689a      	ldr	r2, [r3, #8]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008532:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f042 0201 	orr.w	r2, r2, #1
 8008542:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 fb9f 	bl	8008c88 <UART_CheckIdleState>
 800854a:	4603      	mov	r3, r0
}
 800854c:	4618      	mov	r0, r3
 800854e:	3708      	adds	r7, #8
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b08a      	sub	sp, #40	; 0x28
 8008558:	af02      	add	r7, sp, #8
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	603b      	str	r3, [r7, #0]
 8008560:	4613      	mov	r3, r2
 8008562:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008568:	2b20      	cmp	r3, #32
 800856a:	f040 8081 	bne.w	8008670 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d002      	beq.n	800857a <HAL_UART_Transmit+0x26>
 8008574:	88fb      	ldrh	r3, [r7, #6]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d101      	bne.n	800857e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800857a:	2301      	movs	r3, #1
 800857c:	e079      	b.n	8008672 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008584:	2b01      	cmp	r3, #1
 8008586:	d101      	bne.n	800858c <HAL_UART_Transmit+0x38>
 8008588:	2302      	movs	r3, #2
 800858a:	e072      	b.n	8008672 <HAL_UART_Transmit+0x11e>
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2201      	movs	r2, #1
 8008590:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2200      	movs	r2, #0
 8008598:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2221      	movs	r2, #33	; 0x21
 80085a0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80085a2:	f7fb f92b 	bl	80037fc <HAL_GetTick>
 80085a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	88fa      	ldrh	r2, [r7, #6]
 80085ac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	88fa      	ldrh	r2, [r7, #6]
 80085b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085c0:	d108      	bne.n	80085d4 <HAL_UART_Transmit+0x80>
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	691b      	ldr	r3, [r3, #16]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d104      	bne.n	80085d4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80085ca:	2300      	movs	r3, #0
 80085cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	61bb      	str	r3, [r7, #24]
 80085d2:	e003      	b.n	80085dc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80085d8:	2300      	movs	r3, #0
 80085da:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2200      	movs	r2, #0
 80085e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80085e4:	e02c      	b.n	8008640 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	9300      	str	r3, [sp, #0]
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	2200      	movs	r2, #0
 80085ee:	2180      	movs	r1, #128	; 0x80
 80085f0:	68f8      	ldr	r0, [r7, #12]
 80085f2:	f000 fb92 	bl	8008d1a <UART_WaitOnFlagUntilTimeout>
 80085f6:	4603      	mov	r3, r0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d001      	beq.n	8008600 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80085fc:	2303      	movs	r3, #3
 80085fe:	e038      	b.n	8008672 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d10b      	bne.n	800861e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	881b      	ldrh	r3, [r3, #0]
 800860a:	461a      	mov	r2, r3
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008614:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008616:	69bb      	ldr	r3, [r7, #24]
 8008618:	3302      	adds	r3, #2
 800861a:	61bb      	str	r3, [r7, #24]
 800861c:	e007      	b.n	800862e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	781a      	ldrb	r2, [r3, #0]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008628:	69fb      	ldr	r3, [r7, #28]
 800862a:	3301      	adds	r3, #1
 800862c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008634:	b29b      	uxth	r3, r3
 8008636:	3b01      	subs	r3, #1
 8008638:	b29a      	uxth	r2, r3
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008646:	b29b      	uxth	r3, r3
 8008648:	2b00      	cmp	r3, #0
 800864a:	d1cc      	bne.n	80085e6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	9300      	str	r3, [sp, #0]
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	2200      	movs	r2, #0
 8008654:	2140      	movs	r1, #64	; 0x40
 8008656:	68f8      	ldr	r0, [r7, #12]
 8008658:	f000 fb5f 	bl	8008d1a <UART_WaitOnFlagUntilTimeout>
 800865c:	4603      	mov	r3, r0
 800865e:	2b00      	cmp	r3, #0
 8008660:	d001      	beq.n	8008666 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8008662:	2303      	movs	r3, #3
 8008664:	e005      	b.n	8008672 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2220      	movs	r2, #32
 800866a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800866c:	2300      	movs	r3, #0
 800866e:	e000      	b.n	8008672 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8008670:	2302      	movs	r3, #2
  }
}
 8008672:	4618      	mov	r0, r3
 8008674:	3720      	adds	r7, #32
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
	...

0800867c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b088      	sub	sp, #32
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008684:	2300      	movs	r3, #0
 8008686:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	689a      	ldr	r2, [r3, #8]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	691b      	ldr	r3, [r3, #16]
 8008690:	431a      	orrs	r2, r3
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	695b      	ldr	r3, [r3, #20]
 8008696:	431a      	orrs	r2, r3
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	69db      	ldr	r3, [r3, #28]
 800869c:	4313      	orrs	r3, r2
 800869e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	4ba6      	ldr	r3, [pc, #664]	; (8008940 <UART_SetConfig+0x2c4>)
 80086a8:	4013      	ands	r3, r2
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	6812      	ldr	r2, [r2, #0]
 80086ae:	6979      	ldr	r1, [r7, #20]
 80086b0:	430b      	orrs	r3, r1
 80086b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	68da      	ldr	r2, [r3, #12]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	430a      	orrs	r2, r1
 80086c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	699b      	ldr	r3, [r3, #24]
 80086ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6a1b      	ldr	r3, [r3, #32]
 80086d4:	697a      	ldr	r2, [r7, #20]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	697a      	ldr	r2, [r7, #20]
 80086ea:	430a      	orrs	r2, r1
 80086ec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a94      	ldr	r2, [pc, #592]	; (8008944 <UART_SetConfig+0x2c8>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d120      	bne.n	800873a <UART_SetConfig+0xbe>
 80086f8:	4b93      	ldr	r3, [pc, #588]	; (8008948 <UART_SetConfig+0x2cc>)
 80086fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086fe:	f003 0303 	and.w	r3, r3, #3
 8008702:	2b03      	cmp	r3, #3
 8008704:	d816      	bhi.n	8008734 <UART_SetConfig+0xb8>
 8008706:	a201      	add	r2, pc, #4	; (adr r2, 800870c <UART_SetConfig+0x90>)
 8008708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800870c:	0800871d 	.word	0x0800871d
 8008710:	08008729 	.word	0x08008729
 8008714:	08008723 	.word	0x08008723
 8008718:	0800872f 	.word	0x0800872f
 800871c:	2301      	movs	r3, #1
 800871e:	77fb      	strb	r3, [r7, #31]
 8008720:	e150      	b.n	80089c4 <UART_SetConfig+0x348>
 8008722:	2302      	movs	r3, #2
 8008724:	77fb      	strb	r3, [r7, #31]
 8008726:	e14d      	b.n	80089c4 <UART_SetConfig+0x348>
 8008728:	2304      	movs	r3, #4
 800872a:	77fb      	strb	r3, [r7, #31]
 800872c:	e14a      	b.n	80089c4 <UART_SetConfig+0x348>
 800872e:	2308      	movs	r3, #8
 8008730:	77fb      	strb	r3, [r7, #31]
 8008732:	e147      	b.n	80089c4 <UART_SetConfig+0x348>
 8008734:	2310      	movs	r3, #16
 8008736:	77fb      	strb	r3, [r7, #31]
 8008738:	e144      	b.n	80089c4 <UART_SetConfig+0x348>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a83      	ldr	r2, [pc, #524]	; (800894c <UART_SetConfig+0x2d0>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d132      	bne.n	80087aa <UART_SetConfig+0x12e>
 8008744:	4b80      	ldr	r3, [pc, #512]	; (8008948 <UART_SetConfig+0x2cc>)
 8008746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800874a:	f003 030c 	and.w	r3, r3, #12
 800874e:	2b0c      	cmp	r3, #12
 8008750:	d828      	bhi.n	80087a4 <UART_SetConfig+0x128>
 8008752:	a201      	add	r2, pc, #4	; (adr r2, 8008758 <UART_SetConfig+0xdc>)
 8008754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008758:	0800878d 	.word	0x0800878d
 800875c:	080087a5 	.word	0x080087a5
 8008760:	080087a5 	.word	0x080087a5
 8008764:	080087a5 	.word	0x080087a5
 8008768:	08008799 	.word	0x08008799
 800876c:	080087a5 	.word	0x080087a5
 8008770:	080087a5 	.word	0x080087a5
 8008774:	080087a5 	.word	0x080087a5
 8008778:	08008793 	.word	0x08008793
 800877c:	080087a5 	.word	0x080087a5
 8008780:	080087a5 	.word	0x080087a5
 8008784:	080087a5 	.word	0x080087a5
 8008788:	0800879f 	.word	0x0800879f
 800878c:	2300      	movs	r3, #0
 800878e:	77fb      	strb	r3, [r7, #31]
 8008790:	e118      	b.n	80089c4 <UART_SetConfig+0x348>
 8008792:	2302      	movs	r3, #2
 8008794:	77fb      	strb	r3, [r7, #31]
 8008796:	e115      	b.n	80089c4 <UART_SetConfig+0x348>
 8008798:	2304      	movs	r3, #4
 800879a:	77fb      	strb	r3, [r7, #31]
 800879c:	e112      	b.n	80089c4 <UART_SetConfig+0x348>
 800879e:	2308      	movs	r3, #8
 80087a0:	77fb      	strb	r3, [r7, #31]
 80087a2:	e10f      	b.n	80089c4 <UART_SetConfig+0x348>
 80087a4:	2310      	movs	r3, #16
 80087a6:	77fb      	strb	r3, [r7, #31]
 80087a8:	e10c      	b.n	80089c4 <UART_SetConfig+0x348>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a68      	ldr	r2, [pc, #416]	; (8008950 <UART_SetConfig+0x2d4>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d120      	bne.n	80087f6 <UART_SetConfig+0x17a>
 80087b4:	4b64      	ldr	r3, [pc, #400]	; (8008948 <UART_SetConfig+0x2cc>)
 80087b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80087be:	2b30      	cmp	r3, #48	; 0x30
 80087c0:	d013      	beq.n	80087ea <UART_SetConfig+0x16e>
 80087c2:	2b30      	cmp	r3, #48	; 0x30
 80087c4:	d814      	bhi.n	80087f0 <UART_SetConfig+0x174>
 80087c6:	2b20      	cmp	r3, #32
 80087c8:	d009      	beq.n	80087de <UART_SetConfig+0x162>
 80087ca:	2b20      	cmp	r3, #32
 80087cc:	d810      	bhi.n	80087f0 <UART_SetConfig+0x174>
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d002      	beq.n	80087d8 <UART_SetConfig+0x15c>
 80087d2:	2b10      	cmp	r3, #16
 80087d4:	d006      	beq.n	80087e4 <UART_SetConfig+0x168>
 80087d6:	e00b      	b.n	80087f0 <UART_SetConfig+0x174>
 80087d8:	2300      	movs	r3, #0
 80087da:	77fb      	strb	r3, [r7, #31]
 80087dc:	e0f2      	b.n	80089c4 <UART_SetConfig+0x348>
 80087de:	2302      	movs	r3, #2
 80087e0:	77fb      	strb	r3, [r7, #31]
 80087e2:	e0ef      	b.n	80089c4 <UART_SetConfig+0x348>
 80087e4:	2304      	movs	r3, #4
 80087e6:	77fb      	strb	r3, [r7, #31]
 80087e8:	e0ec      	b.n	80089c4 <UART_SetConfig+0x348>
 80087ea:	2308      	movs	r3, #8
 80087ec:	77fb      	strb	r3, [r7, #31]
 80087ee:	e0e9      	b.n	80089c4 <UART_SetConfig+0x348>
 80087f0:	2310      	movs	r3, #16
 80087f2:	77fb      	strb	r3, [r7, #31]
 80087f4:	e0e6      	b.n	80089c4 <UART_SetConfig+0x348>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a56      	ldr	r2, [pc, #344]	; (8008954 <UART_SetConfig+0x2d8>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d120      	bne.n	8008842 <UART_SetConfig+0x1c6>
 8008800:	4b51      	ldr	r3, [pc, #324]	; (8008948 <UART_SetConfig+0x2cc>)
 8008802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008806:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800880a:	2bc0      	cmp	r3, #192	; 0xc0
 800880c:	d013      	beq.n	8008836 <UART_SetConfig+0x1ba>
 800880e:	2bc0      	cmp	r3, #192	; 0xc0
 8008810:	d814      	bhi.n	800883c <UART_SetConfig+0x1c0>
 8008812:	2b80      	cmp	r3, #128	; 0x80
 8008814:	d009      	beq.n	800882a <UART_SetConfig+0x1ae>
 8008816:	2b80      	cmp	r3, #128	; 0x80
 8008818:	d810      	bhi.n	800883c <UART_SetConfig+0x1c0>
 800881a:	2b00      	cmp	r3, #0
 800881c:	d002      	beq.n	8008824 <UART_SetConfig+0x1a8>
 800881e:	2b40      	cmp	r3, #64	; 0x40
 8008820:	d006      	beq.n	8008830 <UART_SetConfig+0x1b4>
 8008822:	e00b      	b.n	800883c <UART_SetConfig+0x1c0>
 8008824:	2300      	movs	r3, #0
 8008826:	77fb      	strb	r3, [r7, #31]
 8008828:	e0cc      	b.n	80089c4 <UART_SetConfig+0x348>
 800882a:	2302      	movs	r3, #2
 800882c:	77fb      	strb	r3, [r7, #31]
 800882e:	e0c9      	b.n	80089c4 <UART_SetConfig+0x348>
 8008830:	2304      	movs	r3, #4
 8008832:	77fb      	strb	r3, [r7, #31]
 8008834:	e0c6      	b.n	80089c4 <UART_SetConfig+0x348>
 8008836:	2308      	movs	r3, #8
 8008838:	77fb      	strb	r3, [r7, #31]
 800883a:	e0c3      	b.n	80089c4 <UART_SetConfig+0x348>
 800883c:	2310      	movs	r3, #16
 800883e:	77fb      	strb	r3, [r7, #31]
 8008840:	e0c0      	b.n	80089c4 <UART_SetConfig+0x348>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a44      	ldr	r2, [pc, #272]	; (8008958 <UART_SetConfig+0x2dc>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d125      	bne.n	8008898 <UART_SetConfig+0x21c>
 800884c:	4b3e      	ldr	r3, [pc, #248]	; (8008948 <UART_SetConfig+0x2cc>)
 800884e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008852:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008856:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800885a:	d017      	beq.n	800888c <UART_SetConfig+0x210>
 800885c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008860:	d817      	bhi.n	8008892 <UART_SetConfig+0x216>
 8008862:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008866:	d00b      	beq.n	8008880 <UART_SetConfig+0x204>
 8008868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800886c:	d811      	bhi.n	8008892 <UART_SetConfig+0x216>
 800886e:	2b00      	cmp	r3, #0
 8008870:	d003      	beq.n	800887a <UART_SetConfig+0x1fe>
 8008872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008876:	d006      	beq.n	8008886 <UART_SetConfig+0x20a>
 8008878:	e00b      	b.n	8008892 <UART_SetConfig+0x216>
 800887a:	2300      	movs	r3, #0
 800887c:	77fb      	strb	r3, [r7, #31]
 800887e:	e0a1      	b.n	80089c4 <UART_SetConfig+0x348>
 8008880:	2302      	movs	r3, #2
 8008882:	77fb      	strb	r3, [r7, #31]
 8008884:	e09e      	b.n	80089c4 <UART_SetConfig+0x348>
 8008886:	2304      	movs	r3, #4
 8008888:	77fb      	strb	r3, [r7, #31]
 800888a:	e09b      	b.n	80089c4 <UART_SetConfig+0x348>
 800888c:	2308      	movs	r3, #8
 800888e:	77fb      	strb	r3, [r7, #31]
 8008890:	e098      	b.n	80089c4 <UART_SetConfig+0x348>
 8008892:	2310      	movs	r3, #16
 8008894:	77fb      	strb	r3, [r7, #31]
 8008896:	e095      	b.n	80089c4 <UART_SetConfig+0x348>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a2f      	ldr	r2, [pc, #188]	; (800895c <UART_SetConfig+0x2e0>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d125      	bne.n	80088ee <UART_SetConfig+0x272>
 80088a2:	4b29      	ldr	r3, [pc, #164]	; (8008948 <UART_SetConfig+0x2cc>)
 80088a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80088ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80088b0:	d017      	beq.n	80088e2 <UART_SetConfig+0x266>
 80088b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80088b6:	d817      	bhi.n	80088e8 <UART_SetConfig+0x26c>
 80088b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088bc:	d00b      	beq.n	80088d6 <UART_SetConfig+0x25a>
 80088be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088c2:	d811      	bhi.n	80088e8 <UART_SetConfig+0x26c>
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d003      	beq.n	80088d0 <UART_SetConfig+0x254>
 80088c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088cc:	d006      	beq.n	80088dc <UART_SetConfig+0x260>
 80088ce:	e00b      	b.n	80088e8 <UART_SetConfig+0x26c>
 80088d0:	2301      	movs	r3, #1
 80088d2:	77fb      	strb	r3, [r7, #31]
 80088d4:	e076      	b.n	80089c4 <UART_SetConfig+0x348>
 80088d6:	2302      	movs	r3, #2
 80088d8:	77fb      	strb	r3, [r7, #31]
 80088da:	e073      	b.n	80089c4 <UART_SetConfig+0x348>
 80088dc:	2304      	movs	r3, #4
 80088de:	77fb      	strb	r3, [r7, #31]
 80088e0:	e070      	b.n	80089c4 <UART_SetConfig+0x348>
 80088e2:	2308      	movs	r3, #8
 80088e4:	77fb      	strb	r3, [r7, #31]
 80088e6:	e06d      	b.n	80089c4 <UART_SetConfig+0x348>
 80088e8:	2310      	movs	r3, #16
 80088ea:	77fb      	strb	r3, [r7, #31]
 80088ec:	e06a      	b.n	80089c4 <UART_SetConfig+0x348>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a1b      	ldr	r2, [pc, #108]	; (8008960 <UART_SetConfig+0x2e4>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d138      	bne.n	800896a <UART_SetConfig+0x2ee>
 80088f8:	4b13      	ldr	r3, [pc, #76]	; (8008948 <UART_SetConfig+0x2cc>)
 80088fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088fe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008902:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008906:	d017      	beq.n	8008938 <UART_SetConfig+0x2bc>
 8008908:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800890c:	d82a      	bhi.n	8008964 <UART_SetConfig+0x2e8>
 800890e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008912:	d00b      	beq.n	800892c <UART_SetConfig+0x2b0>
 8008914:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008918:	d824      	bhi.n	8008964 <UART_SetConfig+0x2e8>
 800891a:	2b00      	cmp	r3, #0
 800891c:	d003      	beq.n	8008926 <UART_SetConfig+0x2aa>
 800891e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008922:	d006      	beq.n	8008932 <UART_SetConfig+0x2b6>
 8008924:	e01e      	b.n	8008964 <UART_SetConfig+0x2e8>
 8008926:	2300      	movs	r3, #0
 8008928:	77fb      	strb	r3, [r7, #31]
 800892a:	e04b      	b.n	80089c4 <UART_SetConfig+0x348>
 800892c:	2302      	movs	r3, #2
 800892e:	77fb      	strb	r3, [r7, #31]
 8008930:	e048      	b.n	80089c4 <UART_SetConfig+0x348>
 8008932:	2304      	movs	r3, #4
 8008934:	77fb      	strb	r3, [r7, #31]
 8008936:	e045      	b.n	80089c4 <UART_SetConfig+0x348>
 8008938:	2308      	movs	r3, #8
 800893a:	77fb      	strb	r3, [r7, #31]
 800893c:	e042      	b.n	80089c4 <UART_SetConfig+0x348>
 800893e:	bf00      	nop
 8008940:	efff69f3 	.word	0xefff69f3
 8008944:	40011000 	.word	0x40011000
 8008948:	40023800 	.word	0x40023800
 800894c:	40004400 	.word	0x40004400
 8008950:	40004800 	.word	0x40004800
 8008954:	40004c00 	.word	0x40004c00
 8008958:	40005000 	.word	0x40005000
 800895c:	40011400 	.word	0x40011400
 8008960:	40007800 	.word	0x40007800
 8008964:	2310      	movs	r3, #16
 8008966:	77fb      	strb	r3, [r7, #31]
 8008968:	e02c      	b.n	80089c4 <UART_SetConfig+0x348>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a72      	ldr	r2, [pc, #456]	; (8008b38 <UART_SetConfig+0x4bc>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d125      	bne.n	80089c0 <UART_SetConfig+0x344>
 8008974:	4b71      	ldr	r3, [pc, #452]	; (8008b3c <UART_SetConfig+0x4c0>)
 8008976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800897a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800897e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008982:	d017      	beq.n	80089b4 <UART_SetConfig+0x338>
 8008984:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008988:	d817      	bhi.n	80089ba <UART_SetConfig+0x33e>
 800898a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800898e:	d00b      	beq.n	80089a8 <UART_SetConfig+0x32c>
 8008990:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008994:	d811      	bhi.n	80089ba <UART_SetConfig+0x33e>
 8008996:	2b00      	cmp	r3, #0
 8008998:	d003      	beq.n	80089a2 <UART_SetConfig+0x326>
 800899a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800899e:	d006      	beq.n	80089ae <UART_SetConfig+0x332>
 80089a0:	e00b      	b.n	80089ba <UART_SetConfig+0x33e>
 80089a2:	2300      	movs	r3, #0
 80089a4:	77fb      	strb	r3, [r7, #31]
 80089a6:	e00d      	b.n	80089c4 <UART_SetConfig+0x348>
 80089a8:	2302      	movs	r3, #2
 80089aa:	77fb      	strb	r3, [r7, #31]
 80089ac:	e00a      	b.n	80089c4 <UART_SetConfig+0x348>
 80089ae:	2304      	movs	r3, #4
 80089b0:	77fb      	strb	r3, [r7, #31]
 80089b2:	e007      	b.n	80089c4 <UART_SetConfig+0x348>
 80089b4:	2308      	movs	r3, #8
 80089b6:	77fb      	strb	r3, [r7, #31]
 80089b8:	e004      	b.n	80089c4 <UART_SetConfig+0x348>
 80089ba:	2310      	movs	r3, #16
 80089bc:	77fb      	strb	r3, [r7, #31]
 80089be:	e001      	b.n	80089c4 <UART_SetConfig+0x348>
 80089c0:	2310      	movs	r3, #16
 80089c2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	69db      	ldr	r3, [r3, #28]
 80089c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089cc:	d15b      	bne.n	8008a86 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80089ce:	7ffb      	ldrb	r3, [r7, #31]
 80089d0:	2b08      	cmp	r3, #8
 80089d2:	d828      	bhi.n	8008a26 <UART_SetConfig+0x3aa>
 80089d4:	a201      	add	r2, pc, #4	; (adr r2, 80089dc <UART_SetConfig+0x360>)
 80089d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089da:	bf00      	nop
 80089dc:	08008a01 	.word	0x08008a01
 80089e0:	08008a09 	.word	0x08008a09
 80089e4:	08008a11 	.word	0x08008a11
 80089e8:	08008a27 	.word	0x08008a27
 80089ec:	08008a17 	.word	0x08008a17
 80089f0:	08008a27 	.word	0x08008a27
 80089f4:	08008a27 	.word	0x08008a27
 80089f8:	08008a27 	.word	0x08008a27
 80089fc:	08008a1f 	.word	0x08008a1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a00:	f7fc fce2 	bl	80053c8 <HAL_RCC_GetPCLK1Freq>
 8008a04:	61b8      	str	r0, [r7, #24]
        break;
 8008a06:	e013      	b.n	8008a30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a08:	f7fc fcf2 	bl	80053f0 <HAL_RCC_GetPCLK2Freq>
 8008a0c:	61b8      	str	r0, [r7, #24]
        break;
 8008a0e:	e00f      	b.n	8008a30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a10:	4b4b      	ldr	r3, [pc, #300]	; (8008b40 <UART_SetConfig+0x4c4>)
 8008a12:	61bb      	str	r3, [r7, #24]
        break;
 8008a14:	e00c      	b.n	8008a30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a16:	f7fc fc05 	bl	8005224 <HAL_RCC_GetSysClockFreq>
 8008a1a:	61b8      	str	r0, [r7, #24]
        break;
 8008a1c:	e008      	b.n	8008a30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a22:	61bb      	str	r3, [r7, #24]
        break;
 8008a24:	e004      	b.n	8008a30 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008a26:	2300      	movs	r3, #0
 8008a28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	77bb      	strb	r3, [r7, #30]
        break;
 8008a2e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008a30:	69bb      	ldr	r3, [r7, #24]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d074      	beq.n	8008b20 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008a36:	69bb      	ldr	r3, [r7, #24]
 8008a38:	005a      	lsls	r2, r3, #1
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	085b      	lsrs	r3, r3, #1
 8008a40:	441a      	add	r2, r3
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a4a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	2b0f      	cmp	r3, #15
 8008a50:	d916      	bls.n	8008a80 <UART_SetConfig+0x404>
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a58:	d212      	bcs.n	8008a80 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	f023 030f 	bic.w	r3, r3, #15
 8008a62:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	085b      	lsrs	r3, r3, #1
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	f003 0307 	and.w	r3, r3, #7
 8008a6e:	b29a      	uxth	r2, r3
 8008a70:	89fb      	ldrh	r3, [r7, #14]
 8008a72:	4313      	orrs	r3, r2
 8008a74:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	89fa      	ldrh	r2, [r7, #14]
 8008a7c:	60da      	str	r2, [r3, #12]
 8008a7e:	e04f      	b.n	8008b20 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008a80:	2301      	movs	r3, #1
 8008a82:	77bb      	strb	r3, [r7, #30]
 8008a84:	e04c      	b.n	8008b20 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a86:	7ffb      	ldrb	r3, [r7, #31]
 8008a88:	2b08      	cmp	r3, #8
 8008a8a:	d828      	bhi.n	8008ade <UART_SetConfig+0x462>
 8008a8c:	a201      	add	r2, pc, #4	; (adr r2, 8008a94 <UART_SetConfig+0x418>)
 8008a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a92:	bf00      	nop
 8008a94:	08008ab9 	.word	0x08008ab9
 8008a98:	08008ac1 	.word	0x08008ac1
 8008a9c:	08008ac9 	.word	0x08008ac9
 8008aa0:	08008adf 	.word	0x08008adf
 8008aa4:	08008acf 	.word	0x08008acf
 8008aa8:	08008adf 	.word	0x08008adf
 8008aac:	08008adf 	.word	0x08008adf
 8008ab0:	08008adf 	.word	0x08008adf
 8008ab4:	08008ad7 	.word	0x08008ad7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ab8:	f7fc fc86 	bl	80053c8 <HAL_RCC_GetPCLK1Freq>
 8008abc:	61b8      	str	r0, [r7, #24]
        break;
 8008abe:	e013      	b.n	8008ae8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ac0:	f7fc fc96 	bl	80053f0 <HAL_RCC_GetPCLK2Freq>
 8008ac4:	61b8      	str	r0, [r7, #24]
        break;
 8008ac6:	e00f      	b.n	8008ae8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ac8:	4b1d      	ldr	r3, [pc, #116]	; (8008b40 <UART_SetConfig+0x4c4>)
 8008aca:	61bb      	str	r3, [r7, #24]
        break;
 8008acc:	e00c      	b.n	8008ae8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ace:	f7fc fba9 	bl	8005224 <HAL_RCC_GetSysClockFreq>
 8008ad2:	61b8      	str	r0, [r7, #24]
        break;
 8008ad4:	e008      	b.n	8008ae8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ad6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ada:	61bb      	str	r3, [r7, #24]
        break;
 8008adc:	e004      	b.n	8008ae8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	77bb      	strb	r3, [r7, #30]
        break;
 8008ae6:	bf00      	nop
    }

    if (pclk != 0U)
 8008ae8:	69bb      	ldr	r3, [r7, #24]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d018      	beq.n	8008b20 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	085a      	lsrs	r2, r3, #1
 8008af4:	69bb      	ldr	r3, [r7, #24]
 8008af6:	441a      	add	r2, r3
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b00:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	2b0f      	cmp	r3, #15
 8008b06:	d909      	bls.n	8008b1c <UART_SetConfig+0x4a0>
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b0e:	d205      	bcs.n	8008b1c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	b29a      	uxth	r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	60da      	str	r2, [r3, #12]
 8008b1a:	e001      	b.n	8008b20 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2200      	movs	r2, #0
 8008b24:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008b2c:	7fbb      	ldrb	r3, [r7, #30]
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3720      	adds	r7, #32
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	40007c00 	.word	0x40007c00
 8008b3c:	40023800 	.word	0x40023800
 8008b40:	00f42400 	.word	0x00f42400

08008b44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b50:	f003 0301 	and.w	r3, r3, #1
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d00a      	beq.n	8008b6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	430a      	orrs	r2, r1
 8008b6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b72:	f003 0302 	and.w	r3, r3, #2
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00a      	beq.n	8008b90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	430a      	orrs	r2, r1
 8008b8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b94:	f003 0304 	and.w	r3, r3, #4
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d00a      	beq.n	8008bb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	430a      	orrs	r2, r1
 8008bb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb6:	f003 0308 	and.w	r3, r3, #8
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00a      	beq.n	8008bd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	430a      	orrs	r2, r1
 8008bd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd8:	f003 0310 	and.w	r3, r3, #16
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d00a      	beq.n	8008bf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	430a      	orrs	r2, r1
 8008bf4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bfa:	f003 0320 	and.w	r3, r3, #32
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d00a      	beq.n	8008c18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	689b      	ldr	r3, [r3, #8]
 8008c08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	430a      	orrs	r2, r1
 8008c16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d01a      	beq.n	8008c5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	430a      	orrs	r2, r1
 8008c38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c42:	d10a      	bne.n	8008c5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	430a      	orrs	r2, r1
 8008c58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d00a      	beq.n	8008c7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	430a      	orrs	r2, r1
 8008c7a:	605a      	str	r2, [r3, #4]
  }
}
 8008c7c:	bf00      	nop
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b086      	sub	sp, #24
 8008c8c:	af02      	add	r7, sp, #8
 8008c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c98:	f7fa fdb0 	bl	80037fc <HAL_GetTick>
 8008c9c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f003 0308 	and.w	r3, r3, #8
 8008ca8:	2b08      	cmp	r3, #8
 8008caa:	d10e      	bne.n	8008cca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008cb0:	9300      	str	r3, [sp, #0]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 f82d 	bl	8008d1a <UART_WaitOnFlagUntilTimeout>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d001      	beq.n	8008cca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cc6:	2303      	movs	r3, #3
 8008cc8:	e023      	b.n	8008d12 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f003 0304 	and.w	r3, r3, #4
 8008cd4:	2b04      	cmp	r3, #4
 8008cd6:	d10e      	bne.n	8008cf6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008cdc:	9300      	str	r3, [sp, #0]
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 f817 	bl	8008d1a <UART_WaitOnFlagUntilTimeout>
 8008cec:	4603      	mov	r3, r0
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d001      	beq.n	8008cf6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cf2:	2303      	movs	r3, #3
 8008cf4:	e00d      	b.n	8008d12 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2220      	movs	r2, #32
 8008cfa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2220      	movs	r2, #32
 8008d00:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008d10:	2300      	movs	r3, #0
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3710      	adds	r7, #16
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}

08008d1a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d1a:	b580      	push	{r7, lr}
 8008d1c:	b09c      	sub	sp, #112	; 0x70
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	60f8      	str	r0, [r7, #12]
 8008d22:	60b9      	str	r1, [r7, #8]
 8008d24:	603b      	str	r3, [r7, #0]
 8008d26:	4613      	mov	r3, r2
 8008d28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d2a:	e0a5      	b.n	8008e78 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d32:	f000 80a1 	beq.w	8008e78 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d36:	f7fa fd61 	bl	80037fc <HAL_GetTick>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	1ad3      	subs	r3, r2, r3
 8008d40:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d302      	bcc.n	8008d4c <UART_WaitOnFlagUntilTimeout+0x32>
 8008d46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d13e      	bne.n	8008dca <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d54:	e853 3f00 	ldrex	r3, [r3]
 8008d58:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d5c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008d60:	667b      	str	r3, [r7, #100]	; 0x64
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	461a      	mov	r2, r3
 8008d68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d6c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d6e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d70:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008d72:	e841 2300 	strex	r3, r2, [r1]
 8008d76:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008d78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d1e6      	bne.n	8008d4c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	3308      	adds	r3, #8
 8008d84:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d88:	e853 3f00 	ldrex	r3, [r3]
 8008d8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d90:	f023 0301 	bic.w	r3, r3, #1
 8008d94:	663b      	str	r3, [r7, #96]	; 0x60
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	3308      	adds	r3, #8
 8008d9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008d9e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008da0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008da4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008da6:	e841 2300 	strex	r3, r2, [r1]
 8008daa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008dac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d1e5      	bne.n	8008d7e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2220      	movs	r2, #32
 8008db6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2220      	movs	r2, #32
 8008dbc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008dc6:	2303      	movs	r3, #3
 8008dc8:	e067      	b.n	8008e9a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f003 0304 	and.w	r3, r3, #4
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d04f      	beq.n	8008e78 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	69db      	ldr	r3, [r3, #28]
 8008dde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008de2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008de6:	d147      	bne.n	8008e78 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008df0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfa:	e853 3f00 	ldrex	r3, [r3]
 8008dfe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008e06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	461a      	mov	r2, r3
 8008e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e10:	637b      	str	r3, [r7, #52]	; 0x34
 8008e12:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e18:	e841 2300 	strex	r3, r2, [r1]
 8008e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d1e6      	bne.n	8008df2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	3308      	adds	r3, #8
 8008e2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	e853 3f00 	ldrex	r3, [r3]
 8008e32:	613b      	str	r3, [r7, #16]
   return(result);
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	f023 0301 	bic.w	r3, r3, #1
 8008e3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	3308      	adds	r3, #8
 8008e42:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008e44:	623a      	str	r2, [r7, #32]
 8008e46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e48:	69f9      	ldr	r1, [r7, #28]
 8008e4a:	6a3a      	ldr	r2, [r7, #32]
 8008e4c:	e841 2300 	strex	r3, r2, [r1]
 8008e50:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e52:	69bb      	ldr	r3, [r7, #24]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d1e5      	bne.n	8008e24 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2220      	movs	r2, #32
 8008e5c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2220      	movs	r2, #32
 8008e62:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	2220      	movs	r2, #32
 8008e68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008e74:	2303      	movs	r3, #3
 8008e76:	e010      	b.n	8008e9a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	69da      	ldr	r2, [r3, #28]
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	4013      	ands	r3, r2
 8008e82:	68ba      	ldr	r2, [r7, #8]
 8008e84:	429a      	cmp	r2, r3
 8008e86:	bf0c      	ite	eq
 8008e88:	2301      	moveq	r3, #1
 8008e8a:	2300      	movne	r3, #0
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	461a      	mov	r2, r3
 8008e90:	79fb      	ldrb	r3, [r7, #7]
 8008e92:	429a      	cmp	r2, r3
 8008e94:	f43f af4a 	beq.w	8008d2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e98:	2300      	movs	r3, #0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3770      	adds	r7, #112	; 0x70
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
	...

08008ea4 <__libc_init_array>:
 8008ea4:	b570      	push	{r4, r5, r6, lr}
 8008ea6:	4d0d      	ldr	r5, [pc, #52]	; (8008edc <__libc_init_array+0x38>)
 8008ea8:	4c0d      	ldr	r4, [pc, #52]	; (8008ee0 <__libc_init_array+0x3c>)
 8008eaa:	1b64      	subs	r4, r4, r5
 8008eac:	10a4      	asrs	r4, r4, #2
 8008eae:	2600      	movs	r6, #0
 8008eb0:	42a6      	cmp	r6, r4
 8008eb2:	d109      	bne.n	8008ec8 <__libc_init_array+0x24>
 8008eb4:	4d0b      	ldr	r5, [pc, #44]	; (8008ee4 <__libc_init_array+0x40>)
 8008eb6:	4c0c      	ldr	r4, [pc, #48]	; (8008ee8 <__libc_init_array+0x44>)
 8008eb8:	f000 f8aa 	bl	8009010 <_init>
 8008ebc:	1b64      	subs	r4, r4, r5
 8008ebe:	10a4      	asrs	r4, r4, #2
 8008ec0:	2600      	movs	r6, #0
 8008ec2:	42a6      	cmp	r6, r4
 8008ec4:	d105      	bne.n	8008ed2 <__libc_init_array+0x2e>
 8008ec6:	bd70      	pop	{r4, r5, r6, pc}
 8008ec8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ecc:	4798      	blx	r3
 8008ece:	3601      	adds	r6, #1
 8008ed0:	e7ee      	b.n	8008eb0 <__libc_init_array+0xc>
 8008ed2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ed6:	4798      	blx	r3
 8008ed8:	3601      	adds	r6, #1
 8008eda:	e7f2      	b.n	8008ec2 <__libc_init_array+0x1e>
 8008edc:	0800980c 	.word	0x0800980c
 8008ee0:	0800980c 	.word	0x0800980c
 8008ee4:	0800980c 	.word	0x0800980c
 8008ee8:	08009810 	.word	0x08009810

08008eec <memset>:
 8008eec:	4402      	add	r2, r0
 8008eee:	4603      	mov	r3, r0
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d100      	bne.n	8008ef6 <memset+0xa>
 8008ef4:	4770      	bx	lr
 8008ef6:	f803 1b01 	strb.w	r1, [r3], #1
 8008efa:	e7f9      	b.n	8008ef0 <memset+0x4>

08008efc <__utoa>:
 8008efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008efe:	4c1f      	ldr	r4, [pc, #124]	; (8008f7c <__utoa+0x80>)
 8008f00:	b08b      	sub	sp, #44	; 0x2c
 8008f02:	4605      	mov	r5, r0
 8008f04:	460b      	mov	r3, r1
 8008f06:	466e      	mov	r6, sp
 8008f08:	f104 0c20 	add.w	ip, r4, #32
 8008f0c:	6820      	ldr	r0, [r4, #0]
 8008f0e:	6861      	ldr	r1, [r4, #4]
 8008f10:	4637      	mov	r7, r6
 8008f12:	c703      	stmia	r7!, {r0, r1}
 8008f14:	3408      	adds	r4, #8
 8008f16:	4564      	cmp	r4, ip
 8008f18:	463e      	mov	r6, r7
 8008f1a:	d1f7      	bne.n	8008f0c <__utoa+0x10>
 8008f1c:	7921      	ldrb	r1, [r4, #4]
 8008f1e:	7139      	strb	r1, [r7, #4]
 8008f20:	1e91      	subs	r1, r2, #2
 8008f22:	6820      	ldr	r0, [r4, #0]
 8008f24:	6038      	str	r0, [r7, #0]
 8008f26:	2922      	cmp	r1, #34	; 0x22
 8008f28:	f04f 0100 	mov.w	r1, #0
 8008f2c:	d904      	bls.n	8008f38 <__utoa+0x3c>
 8008f2e:	7019      	strb	r1, [r3, #0]
 8008f30:	460b      	mov	r3, r1
 8008f32:	4618      	mov	r0, r3
 8008f34:	b00b      	add	sp, #44	; 0x2c
 8008f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f38:	1e58      	subs	r0, r3, #1
 8008f3a:	4684      	mov	ip, r0
 8008f3c:	fbb5 f7f2 	udiv	r7, r5, r2
 8008f40:	fb02 5617 	mls	r6, r2, r7, r5
 8008f44:	3628      	adds	r6, #40	; 0x28
 8008f46:	446e      	add	r6, sp
 8008f48:	460c      	mov	r4, r1
 8008f4a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8008f4e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8008f52:	462e      	mov	r6, r5
 8008f54:	42b2      	cmp	r2, r6
 8008f56:	f101 0101 	add.w	r1, r1, #1
 8008f5a:	463d      	mov	r5, r7
 8008f5c:	d9ee      	bls.n	8008f3c <__utoa+0x40>
 8008f5e:	2200      	movs	r2, #0
 8008f60:	545a      	strb	r2, [r3, r1]
 8008f62:	1919      	adds	r1, r3, r4
 8008f64:	1aa5      	subs	r5, r4, r2
 8008f66:	42aa      	cmp	r2, r5
 8008f68:	dae3      	bge.n	8008f32 <__utoa+0x36>
 8008f6a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8008f6e:	780e      	ldrb	r6, [r1, #0]
 8008f70:	7006      	strb	r6, [r0, #0]
 8008f72:	3201      	adds	r2, #1
 8008f74:	f801 5901 	strb.w	r5, [r1], #-1
 8008f78:	e7f4      	b.n	8008f64 <__utoa+0x68>
 8008f7a:	bf00      	nop
 8008f7c:	080097dc 	.word	0x080097dc

08008f80 <utoa>:
 8008f80:	f7ff bfbc 	b.w	8008efc <__utoa>

08008f84 <round>:
 8008f84:	ee10 1a90 	vmov	r1, s1
 8008f88:	f3c1 500a 	ubfx	r0, r1, #20, #11
 8008f8c:	f2a0 32ff 	subw	r2, r0, #1023	; 0x3ff
 8008f90:	2a13      	cmp	r2, #19
 8008f92:	b510      	push	{r4, lr}
 8008f94:	ee10 3a10 	vmov	r3, s0
 8008f98:	dc19      	bgt.n	8008fce <round+0x4a>
 8008f9a:	2a00      	cmp	r2, #0
 8008f9c:	da09      	bge.n	8008fb2 <round+0x2e>
 8008f9e:	3201      	adds	r2, #1
 8008fa0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008fa4:	d103      	bne.n	8008fae <round+0x2a>
 8008fa6:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8008faa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008fae:	2000      	movs	r0, #0
 8008fb0:	e026      	b.n	8009000 <round+0x7c>
 8008fb2:	4816      	ldr	r0, [pc, #88]	; (800900c <round+0x88>)
 8008fb4:	4110      	asrs	r0, r2
 8008fb6:	ea01 0400 	and.w	r4, r1, r0
 8008fba:	4323      	orrs	r3, r4
 8008fbc:	d00e      	beq.n	8008fdc <round+0x58>
 8008fbe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008fc2:	fa43 f202 	asr.w	r2, r3, r2
 8008fc6:	4411      	add	r1, r2
 8008fc8:	ea21 0100 	bic.w	r1, r1, r0
 8008fcc:	e7ef      	b.n	8008fae <round+0x2a>
 8008fce:	2a33      	cmp	r2, #51	; 0x33
 8008fd0:	dd05      	ble.n	8008fde <round+0x5a>
 8008fd2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8008fd6:	d101      	bne.n	8008fdc <round+0x58>
 8008fd8:	ee30 0b00 	vadd.f64	d0, d0, d0
 8008fdc:	bd10      	pop	{r4, pc}
 8008fde:	f2a0 4413 	subw	r4, r0, #1043	; 0x413
 8008fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8008fe6:	40e0      	lsrs	r0, r4
 8008fe8:	4203      	tst	r3, r0
 8008fea:	d0f7      	beq.n	8008fdc <round+0x58>
 8008fec:	2401      	movs	r4, #1
 8008fee:	f1c2 0233 	rsb	r2, r2, #51	; 0x33
 8008ff2:	fa04 f202 	lsl.w	r2, r4, r2
 8008ff6:	189b      	adds	r3, r3, r2
 8008ff8:	bf28      	it	cs
 8008ffa:	1909      	addcs	r1, r1, r4
 8008ffc:	ea23 0000 	bic.w	r0, r3, r0
 8009000:	460b      	mov	r3, r1
 8009002:	4602      	mov	r2, r0
 8009004:	ec43 2b10 	vmov	d0, r2, r3
 8009008:	e7e8      	b.n	8008fdc <round+0x58>
 800900a:	bf00      	nop
 800900c:	000fffff 	.word	0x000fffff

08009010 <_init>:
 8009010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009012:	bf00      	nop
 8009014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009016:	bc08      	pop	{r3}
 8009018:	469e      	mov	lr, r3
 800901a:	4770      	bx	lr

0800901c <_fini>:
 800901c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800901e:	bf00      	nop
 8009020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009022:	bc08      	pop	{r3}
 8009024:	469e      	mov	lr, r3
 8009026:	4770      	bx	lr
